(()=>{"use strict";var t={114:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const s=n(400),r=n(958),i=n(929),o=n(771);n(849);const a=n(442),l=n(993);class u extends s.Component{constructor(){super(),r.GameController.init((()=>this.state),this.setState.bind(this))}render(){return s.h("div",{class:"game"},s.h("header",null,s.h("div",{class:"header-box"},s.h("h1",null,"Shifty.site"),s.h("div",{class:"controls"},s.h(o.Timer,{until:this.state.endTime}),s.h(a.ShiftCounter,null)))),s.h("div",{class:"level-wrap"},this.renderLevel()))}renderLevel(){return this.state.level===r.level.NO_LEVEL?s.h(l.Launcher,null):this.state.level===r.level.STORE?s.h(i.StoreLevel,null):void 0}}e.Game=u},958:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const s=n(565),r=n(493);var i;!function(t){t[t.NO_LEVEL=0]="NO_LEVEL",t[t.STORE=1]="STORE"}(i=e.level||(e.level={})),e.GameController=new class{init(t,e){this.getState=t,this.setState=e;var n={level:i.NO_LEVEL,startTime:s.DateTime.invalid("initial"),endTime:s.DateTime.invalid("initial")};this.setState({...n})}start(t){let e=s.DateTime.now();this.setState({level:t,startTime:e,endTime:e.plus({seconds:30})}),r.GameTimer.onTick((()=>{let t=this.getState();s.DateTime.now()>t.endTime&&(r.GameTimer.stop(),console.log("OVER"))})),r.GameTimer.start()}}},493:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const s=n(820);var r;!function(t){t[t.STOPPED=0]="STOPPED",t[t.STARTED=1]="STARTED"}(r||(r={})),e.GameTimer=new class{constructor(){this.tickCount=0,this.tickHandlers=[],this.isRunning=!1,this.multiplier=0}start(){this.isRunning=!0,setTimeout((()=>this.tick()))}pause(){this.isRunning=!1,clearTimeout(this.nextTick)}stop(){this.isRunning=!1,clearTimeout(this.nextTick)}onTick(t){return this.tickHandlers.push(t),this.tickHandlers.length-1}tick(){this.isRunning&&(this.tickHandlers.forEach((t=>{t(this.tickCount)})),this.nextTick=setTimeout((()=>this.tick()),s.getRandomInteger(800,1600)-200*this.multiplier))}}},993:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const s=n(400),r=n(958);n(358);class i extends s.Component{render(){return s.h("div",{class:"launcher"},s.h("div",{class:"container flex flex-column"},s.h("h2",null,"You’re Running Out Of Time!"),s.h("div",{class:"launch-content flex"},s.h("div",{class:"illustration"},s.h("img",{src:"/assets/images/deal-of-the-day.png",height:"600",width:"600"})),s.h("div",{class:"instructions"},s.h("p",null,"GreatGets is giving away 3 free ThingsYouWant™ for the next 30 seconds! Can you add all three to your cart?"),s.h("p",null,"But the GreatGets website loads tons async content in different sizes, causing the layout to shift around constantly."),s.h("button",{type:"button",onClick:t=>r.GameController.start(r.level.STORE)},"Start!")))))}}e.Launcher=i},736:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const s=n(400);n(26);class r extends s.Component{render(){return s.h("div",{class:"modal-wrap",style:{display:this.props.isOpen?"flex":"none"}},s.h("div",{class:"modal-box",style:{"margin-top":`${this.props.yAdjust||0}vh`,"margin-left":`${this.props.xAdjust||0}vw`}},this.props.content))}}e.Modal=r},442:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const s=n(400),r=n(493),i=n(820),o=n(27);n(931);class a extends s.Component{constructor(){super(),this.state={cls:0}}componentDidMount(){o.isSafari()?r.GameTimer.onTick((t=>{let e=this.state.cls;e+=(i.getRandomInteger(100,200)+10*t)/1e3,this.setState({cls:e})})):(this.observer=new PerformanceObserver((t=>{let e=(t.getEntries()||[]).reduce(((t,e,n)=>t+e.value),this.state.cls);this.setState({cls:e})})),this.observer.observe({type:"layout-shift",buffered:!1}))}componentWillUnmount(){this.observer.disconnect()}render(){return s.h("div",{class:"shift-counter"},s.h("div",{class:"label"},"CLS"),s.h("div",{class:"value"},this.state.cls.toFixed(4)))}}e.ShiftCounter=a},855:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const s=n(400),r=n(736),i=n(362);class o extends s.Component{render(){return s.h(r.Modal,{content:s.h("div",{class:"experience-modal flex flex-column"},s.h("h2",null,"Help Improve Our Website"),s.h("button",{class:"close",onTouchStart:()=>i.StoreLevelController.clearExperience()},"✕"),s.h("p",null,"Tell us about your experience on our website! We promise to ignore it entirely and continue with what we are doing."),s.h("div",{class:"ratings flex flex-column justify-center"},s.h("div",{class:"title"},"How likely are you to recommend GreatGets to a friend?"),s.h("div",{class:"labels flex"},s.h("div",null,"Not Likely"),s.h("div",null,"Very Likely")),s.h("div",{class:"controls flex"},s.h("label",{onTouchStart:()=>i.StoreLevelController.clickRatings()},s.h("input",{type:"radio"}),s.h("span",null,"1")),s.h("label",{onTouchStart:()=>i.StoreLevelController.clickRatings()},s.h("input",{type:"radio"}),s.h("span",null,"2")),s.h("label",{onTouchStart:()=>i.StoreLevelController.clickRatings()},s.h("input",{type:"radio"}),s.h("span",null,"3")),s.h("label",{onTouchStart:()=>i.StoreLevelController.clickRatings()},s.h("input",{type:"radio"}),s.h("span",null,"4")),s.h("label",{onTouchStart:()=>i.StoreLevelController.clickRatings()},s.h("input",{type:"radio"}),s.h("span",null,"5"))))),isOpen:this.props.isOpen,xAdjust:this.props.xAdjust,yAdjust:this.props.yAdjust})}}e.ExperienceModal=o;class a extends s.Component{render(){return s.h(r.Modal,{content:s.h("div",{class:"experience-thanks-modal flex flex-column"},s.h("h2",null,"Thanks for your Rating!"),s.h("h3",null,"Expect a lot of survey emails from us!"),s.h("button",{class:"close",onTouchStart:()=>i.StoreLevelController.clearRatingsThanks()},"✕"),s.h("p",{style:{flex:"1 1 auto"}},"We recorded your rating! We will continue to ask you over email every 2-3 days from now until eternity, regardless if you ever shop with us again."),s.h("p",null,s.h("strong",null,"Your Shopping Cart has been cleared."))),isOpen:this.props.isOpen,xAdjust:this.props.xAdjust,yAdjust:this.props.yAdjust})}}e.ExperienceThanksModal=a},43:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const s=n(400),r=n(736),i=n(362);class o extends s.Component{render(){return s.h(r.Modal,{content:s.h("div",{class:"newsletter-modal"},s.h("h2",null,"Join Our NewsLetter and Save!"),s.h("h3",null,"A Really Annoying Popup"),s.h("p",null,"Join our newsletter and we'll send you 10 emails every day about crappy products that we can't sell."),s.h("p",null,s.h("strong",null,"Your Shopping Cart has been emptied.")),s.h("button",{type:"button",onTouchStart:()=>i.StoreLevelController.doubleFail()},"Yes! Add Me To Your Newsletter"),s.h("a",{href:"javascript:void(0)",onTouchStart:()=>i.StoreLevelController.clearFail()},"No, Go Back")),isOpen:this.props.isOpen,xAdjust:this.props.xAdjust,yAdjust:this.props.yAdjust})}}e.FailModal=o},929:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const s=n(400),r=n(362),i=n(515),o=n(43),a=n(855);n(718);class l extends s.Component{constructor(){super(),r.StoreLevelController.init((()=>this.state),this.setState.bind(this))}render(){return s.h("div",{class:"store-level"},s.h("header",{class:"store-header"},s.h("div",{class:"logo"},s.h("img",{src:"/assets/images/logo.png",width:"136",height:"80"})),s.h("div",{class:"cart"},s.h("span",{class:"cart-count"},this.state.clicks),s.h("img",{src:"/assets/images/cart.svg"}),s.h("span",{class:"cart-label"},"Cart"))),s.h("div",{class:"widget-grid",onTouchStart:t=>r.StoreLevelController.click(-1,t)},this.state.widgets.map((t=>s.h(i.Widget,Object.assign({},t))))),s.h(o.FailModal,{isOpen:this.state.showFailModal,xAdjust:this.state.modalAdjustX,yAdjust:this.state.modalAdjustY}),s.h(a.ExperienceModal,{isOpen:this.state.showExperienceModal,xAdjust:this.state.modalAdjustX,yAdjust:this.state.modalAdjustY}),s.h(a.ExperienceThanksModal,{isOpen:this.state.showExperienceThanksModal,xAdjust:this.state.modalAdjustX,yAdjust:this.state.modalAdjustY}))}}e.StoreLevel=l},362:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const s=n(493),r=n(820);var i;!function(t){t[t.EMPTY=0]="EMPTY",t[t.LOADING=1]="LOADING",t[t.CONTENT=2]="CONTENT",t[t.OBJECTIVE=3]="OBJECTIVE",t[t.COMPLETE=4]="COMPLETE"}(i=e.WidgetStatus||(e.WidgetStatus={})),e.StoreLevelController=new class{init(t,e){this.getState=t,this.setState=e,s.GameTimer.onTick((()=>this.onTick()));let n={clicks:0,hasShownExperienceModal:!1,isObjectiveVisible:!1,showExperienceModal:!1,showExperienceThanksModal:!1,showFailModal:!1,widgets:[]};for(var r=0;r<10;r++){let t={index:r,status:i.EMPTY};n.widgets.push(t)}this.setState({...n})}onTick(){let t=this.getState(),e=t.widgets.filter((t=>t.status===i.EMPTY));if(e.length)return this.setLoading(e[0]),void this.updateWidgetState(e[0]);let n=t.widgets.filter((t=>t.status!==i.LOADING));if(!n.length)return;let s=n[r.getRandomInteger(0,n.length)];s.status===i.OBJECTIVE&&this.setState({isObjectiveVisible:!1}),this.setLoading(s),this.updateWidgetState(s)}setLoading(t){t.status=i.LOADING,setTimeout((()=>{!this.getState().isObjectiveVisible&&t.index>=3?(this.setState({isObjectiveVisible:!0}),t.status=i.OBJECTIVE):t.status=i.CONTENT,this.updateWidgetState(t)}),r.getRandomInteger(600,3200))}click(t,e){e.stopPropagation();let n=this.getState(),o=n.widgets[t];o&&o.status===i.OBJECTIVE?(o.status=i.COMPLETE,this.updateWidgetState(o),n.clicks=n.clicks+1,n.hasShownExperienceModal||(n.hasShownExperienceModal=!0,n.showExperienceModal=!0,n.modalAdjustX=r.getRandomInteger(-40,40),n.modalAdjustY=r.getRandomInteger(-50,50)),n.clicks>=3?alert("YOU WON!"):n.isObjectiveVisible=!1,s.GameTimer.multiplier=n.clicks,this.setState(n)):(this.reset(),this.setState({showFailModal:!0,modalAdjustX:r.getRandomInteger(-40,40),modalAdjustY:r.getRandomInteger(-50,50)}))}clearFail(){this.setState({showFailModal:!1})}doubleFail(){this.setState({showFailModal:!0,modalAdjustX:r.getRandomInteger(-40,40),modalAdjustY:r.getRandomInteger(-50,50)})}clearExperience(){this.setState({showExperienceModal:!1})}clickRatings(){this.reset(),this.setState({showExperienceModal:!1,showExperienceThanksModal:!0,modalAdjustX:r.getRandomInteger(-40,40),modalAdjustY:r.getRandomInteger(-50,50)})}clearRatingsThanks(){this.setState({showExperienceThanksModal:!1})}reset(){let t=this.getState();this.setState({clicks:0,widgets:t.widgets.map((t=>(t.status===i.COMPLETE&&(t.status=i.LOADING),t)))}),s.GameTimer.multiplier=0}updateWidgetState(t){let e=this.getState();this.setState({widgets:e.widgets.map((e=>e.index===t.index?{...t}:e))})}}},515:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const s=n(400),r=n(820),i=n(362),o=[{width:60,content:s.h("img",{src:"/assets/images/top-deals.png",height:"400",width:"1200"})},{width:60,content:s.h("img",{src:"/assets/images/black-friday.png",height:"400",width:"1200"})},{width:60,content:s.h("img",{src:"/assets/images/macbook-air.png",height:"400",width:"1200"})},{width:40,content:s.h("img",{src:"/assets/images/smarttvs.png",height:"400",width:"800"})},{width:40,content:s.h("img",{src:"/assets/images/car-audio.png",height:"400",width:"800"})},{width:40,content:s.h("img",{src:"/assets/images/galaxy-watch.png",height:"400",width:"800"})},{width:40,content:s.h("img",{src:"/assets/images/kitchen.png",height:"400",width:"800"})},{width:40,content:s.h("img",{src:"/assets/images/samsung-galaxy.png",height:"400",width:"800"})},{width:40,content:s.h("img",{src:"/assets/images/video-games.png",height:"400",width:"800"})},{width:20,content:s.h("img",{src:"/assets/images/god-of-war.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/intex-pool.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/lenovo-yoga.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/pokemon.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/samsung-24.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/god-of-war.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/intex-pool.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/lenovo-yoga.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/pokemon.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/samsung-24.png",height:"600",width:"600"})}];class a extends s.Component{render(){if(this.props.status===i.WidgetStatus.EMPTY)return this.renderWidget({width:0,content:null});if(this.props.status===i.WidgetStatus.LOADING)return this.renderWidget({width:20,height:"auto",grow:!0,content:s.h("div",{class:"loading"},s.h("i",{class:"spinner"}))});if(this.props.status===i.WidgetStatus.CONTENT)return this.renderWidget(this.getRandomContent());if(this.props.status===i.WidgetStatus.OBJECTIVE)return this.renderWidget({width:20,content:s.h("img",{src:"/assets/images/deal-of-the-day.png",height:"600",width:"600"})});if(this.props.status===i.WidgetStatus.COMPLETE)return this.renderWidget({width:20,content:s.h("img",{src:"/assets/images/deal-of-the-day-done.png",height:"600",width:"600"})});throw new Error(`Widget ${this.props.index} in unknown status ${this.props.status}.`)}renderWidget(t){return s.h("div",{class:"widget",style:{flex:`${t.grow?"1":"0"} 0 ${t.width}%`,height:t.height||"fit-content",display:this.props.status===i.WidgetStatus.EMPTY?"none":"flex"},onTouchStart:t=>i.StoreLevelController.click(this.props.index,t)},t.content)}getRandomContent(){return o[r.getRandomInteger(0,o.length)]}}e.Widget=a},771:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const s=n(565),r=n(400);n(737);class i extends r.Component{constructor(){super(),this.state={seconds:0,milliseconds:0}}componentDidMount(){this.timer=setInterval((()=>{if(!this.props.until.isValid)return;let t=this.props.until.diff(s.DateTime.now()).shiftTo("seconds","milliseconds");this.setState({seconds:Math.max(t.seconds,0),milliseconds:Math.max(t.milliseconds,0)})}),100)}componentWillUnmount(){clearInterval(this.timer)}render(){return r.h("div",{class:"timer"},r.h("div",{class:"label"},"Time"),r.h("div",{class:"value "+(this.state.seconds<=5&&this.state.milliseconds+this.state.seconds!==0?"danger":"")},this.state.seconds.toString().padStart(2,"0"),r.h("span",{class:"marker"},"."),this.state.milliseconds.toString().padEnd(3,"0")))}}e.Timer=i},820:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getRandomInteger=function(t,e){return Math.floor(Math.random()*(e-t))+t}},27:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.isSafari=function(){return"function"==typeof window.GestureEvent}},565:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class n extends Error{}class s extends n{constructor(t){super(`Invalid DateTime: ${t.toMessage()}`)}}class r extends n{constructor(t){super(`Invalid Interval: ${t.toMessage()}`)}}class i extends n{constructor(t){super(`Invalid Duration: ${t.toMessage()}`)}}class o extends n{}class a extends n{constructor(t){super(`Invalid unit ${t}`)}}class l extends n{}class u extends n{constructor(){super("Zone is an abstract class")}}const c="numeric",h="short",d="long",m={year:c,month:c,day:c},f={year:c,month:h,day:c},y={year:c,month:h,day:c,weekday:h},p={year:c,month:d,day:c},g={year:c,month:d,day:c,weekday:d},_={hour:c,minute:c},w={hour:c,minute:c,second:c},v={hour:c,minute:c,second:c,timeZoneName:h},T={hour:c,minute:c,second:c,timeZoneName:d},S={hour:c,minute:c,hourCycle:"h23"},b={hour:c,minute:c,second:c,hourCycle:"h23"},k={hour:c,minute:c,second:c,hourCycle:"h23",timeZoneName:h},O={hour:c,minute:c,second:c,hourCycle:"h23",timeZoneName:d},M={year:c,month:c,day:c,hour:c,minute:c},E={year:c,month:c,day:c,hour:c,minute:c,second:c},x={year:c,month:h,day:c,hour:c,minute:c},N={year:c,month:h,day:c,hour:c,minute:c,second:c},C={year:c,month:h,day:c,weekday:h,hour:c,minute:c},D={year:c,month:d,day:c,hour:c,minute:c,timeZoneName:h},I={year:c,month:d,day:c,hour:c,minute:c,second:c,timeZoneName:h},V={year:c,month:d,day:c,weekday:d,hour:c,minute:c,timeZoneName:d},L={year:c,month:d,day:c,weekday:d,hour:c,minute:c,second:c,timeZoneName:d};function F(t){return void 0===t}function j(t){return"number"==typeof t}function A(t){return"number"==typeof t&&t%1==0}function $(){try{return"undefined"!=typeof Intl&&!!Intl.RelativeTimeFormat}catch(t){return!1}}function Z(t,e,n){if(0!==t.length)return t.reduce(((t,s)=>{const r=[e(s),s];return t&&n(t[0],r[0])===t[0]?t:r}),null)[1]}function P(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function R(t,e,n){return A(t)&&t>=e&&t<=n}function W(t,e=2){let n;return n=t<0?"-"+(""+-t).padStart(e,"0"):(""+t).padStart(e,"0"),n}function z(t){return F(t)||null===t||""===t?void 0:parseInt(t,10)}function U(t){return F(t)||null===t||""===t?void 0:parseFloat(t)}function q(t){if(!F(t)&&null!==t&&""!==t){const e=1e3*parseFloat("0."+t);return Math.floor(e)}}function G(t,e,n=!1){const s=10**e;return(n?Math.trunc:Math.round)(t*s)/s}function H(t){return t%4==0&&(t%100!=0||t%400==0)}function Y(t){return H(t)?366:365}function J(t,e){const n=(s=e-1)-12*Math.floor(s/12)+1;var s;return 2===n?H(t+(e-n)/12)?29:28:[31,null,31,30,31,30,31,31,30,31,30,31][n-1]}function B(t){let e=Date.UTC(t.year,t.month-1,t.day,t.hour,t.minute,t.second,t.millisecond);return t.year<100&&t.year>=0&&(e=new Date(e),e.setUTCFullYear(e.getUTCFullYear()-1900)),+e}function X(t){const e=(t+Math.floor(t/4)-Math.floor(t/100)+Math.floor(t/400))%7,n=t-1,s=(n+Math.floor(n/4)-Math.floor(n/100)+Math.floor(n/400))%7;return 4===e||3===s?53:52}function Q(t){return t>99?t:t>60?1900+t:2e3+t}function K(t,e,n,s=null){const r=new Date(t),i={hourCycle:"h23",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"};s&&(i.timeZone=s);const o={timeZoneName:e,...i},a=new Intl.DateTimeFormat(n,o).formatToParts(r).find((t=>"timezonename"===t.type.toLowerCase()));return a?a.value:null}function tt(t,e){let n=parseInt(t,10);Number.isNaN(n)&&(n=0);const s=parseInt(e,10)||0;return 60*n+(n<0||Object.is(n,-0)?-s:s)}function et(t){const e=Number(t);if("boolean"==typeof t||""===t||Number.isNaN(e))throw new l(`Invalid unit value ${t}`);return e}function nt(t,e){const n={};for(const s in t)if(P(t,s)){const r=t[s];if(null==r)continue;n[e(s)]=et(r)}return n}function st(t,e){const n=Math.trunc(Math.abs(t/60)),s=Math.trunc(Math.abs(t%60)),r=t>=0?"+":"-";switch(e){case"short":return`${r}${W(n,2)}:${W(s,2)}`;case"narrow":return`${r}${n}${s>0?`:${s}`:""}`;case"techie":return`${r}${W(n,2)}${W(s,2)}`;default:throw new RangeError(`Value format ${e} is out of range for property format`)}}function rt(t){return function(t,e){return["hour","minute","second","millisecond"].reduce(((e,n)=>(e[n]=t[n],e)),{})}(t)}const it=/[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/,ot=["January","February","March","April","May","June","July","August","September","October","November","December"],at=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],lt=["J","F","M","A","M","J","J","A","S","O","N","D"];function ut(t){switch(t){case"narrow":return[...lt];case"short":return[...at];case"long":return[...ot];case"numeric":return["1","2","3","4","5","6","7","8","9","10","11","12"];case"2-digit":return["01","02","03","04","05","06","07","08","09","10","11","12"];default:return null}}const ct=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],ht=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],dt=["M","T","W","T","F","S","S"];function mt(t){switch(t){case"narrow":return[...dt];case"short":return[...ht];case"long":return[...ct];case"numeric":return["1","2","3","4","5","6","7"];default:return null}}const ft=["AM","PM"],yt=["Before Christ","Anno Domini"],pt=["BC","AD"],gt=["B","A"];function _t(t){switch(t){case"narrow":return[...gt];case"short":return[...pt];case"long":return[...yt];default:return null}}function wt(t,e){let n="";for(const s of t)s.literal?n+=s.val:n+=e(s.val);return n}const vt={D:m,DD:f,DDD:p,DDDD:g,t:_,tt:w,ttt:v,tttt:T,T:S,TT:b,TTT:k,TTTT:O,f:M,ff:x,fff:D,ffff:V,F:E,FF:N,FFF:I,FFFF:L};class Tt{static create(t,e={}){return new Tt(t,e)}static parseFormat(t){let e=null,n="",s=!1;const r=[];for(let i=0;i<t.length;i++){const o=t.charAt(i);"'"===o?(n.length>0&&r.push({literal:s,val:n}),e=null,n="",s=!s):s||o===e?n+=o:(n.length>0&&r.push({literal:!1,val:n}),n=o,e=o)}return n.length>0&&r.push({literal:s,val:n}),r}static macroTokenToFormatOpts(t){return vt[t]}constructor(t,e){this.opts=e,this.loc=t,this.systemLoc=null}formatWithSystemDefault(t,e){return null===this.systemLoc&&(this.systemLoc=this.loc.redefaultToSystem()),this.systemLoc.dtFormatter(t,{...this.opts,...e}).format()}formatDateTime(t,e={}){return this.loc.dtFormatter(t,{...this.opts,...e}).format()}formatDateTimeParts(t,e={}){return this.loc.dtFormatter(t,{...this.opts,...e}).formatToParts()}resolvedOptions(t,e={}){return this.loc.dtFormatter(t,{...this.opts,...e}).resolvedOptions()}num(t,e=0){if(this.opts.forceSimple)return W(t,e);const n={...this.opts};return e>0&&(n.padTo=e),this.loc.numberFormatter(n).format(t)}formatDateTimeFromString(t,e){const n="en"===this.loc.listingMode(),s=this.loc.outputCalendar&&"gregory"!==this.loc.outputCalendar,r=(e,n)=>this.loc.extract(t,e,n),i=e=>t.isOffsetFixed&&0===t.offset&&e.allowZ?"Z":t.isValid?t.zone.formatOffset(t.ts,e.format):"",o=(e,s)=>n?function(t,e){return ut(e)[t.month-1]}(t,e):r(s?{month:e}:{month:e,day:"numeric"},"month"),a=(e,s)=>n?function(t,e){return mt(e)[t.weekday-1]}(t,e):r(s?{weekday:e}:{weekday:e,month:"long",day:"numeric"},"weekday"),l=e=>{const n=Tt.macroTokenToFormatOpts(e);return n?this.formatWithSystemDefault(t,n):e},u=e=>n?function(t,e){return _t(e)[t.year<0?0:1]}(t,e):r({era:e},"era");return wt(Tt.parseFormat(e),(e=>{switch(e){case"S":return this.num(t.millisecond);case"u":case"SSS":return this.num(t.millisecond,3);case"s":return this.num(t.second);case"ss":return this.num(t.second,2);case"uu":return this.num(Math.floor(t.millisecond/10),2);case"uuu":return this.num(Math.floor(t.millisecond/100));case"m":return this.num(t.minute);case"mm":return this.num(t.minute,2);case"h":return this.num(t.hour%12==0?12:t.hour%12);case"hh":return this.num(t.hour%12==0?12:t.hour%12,2);case"H":return this.num(t.hour);case"HH":return this.num(t.hour,2);case"Z":return i({format:"narrow",allowZ:this.opts.allowZ});case"ZZ":return i({format:"short",allowZ:this.opts.allowZ});case"ZZZ":return i({format:"techie",allowZ:this.opts.allowZ});case"ZZZZ":return t.zone.offsetName(t.ts,{format:"short",locale:this.loc.locale});case"ZZZZZ":return t.zone.offsetName(t.ts,{format:"long",locale:this.loc.locale});case"z":return t.zoneName;case"a":return n?function(t){return ft[t.hour<12?0:1]}(t):r({hour:"numeric",hourCycle:"h12"},"dayperiod");case"d":return s?r({day:"numeric"},"day"):this.num(t.day);case"dd":return s?r({day:"2-digit"},"day"):this.num(t.day,2);case"c":case"E":return this.num(t.weekday);case"ccc":return a("short",!0);case"cccc":return a("long",!0);case"ccccc":return a("narrow",!0);case"EEE":return a("short",!1);case"EEEE":return a("long",!1);case"EEEEE":return a("narrow",!1);case"L":return s?r({month:"numeric",day:"numeric"},"month"):this.num(t.month);case"LL":return s?r({month:"2-digit",day:"numeric"},"month"):this.num(t.month,2);case"LLL":return o("short",!0);case"LLLL":return o("long",!0);case"LLLLL":return o("narrow",!0);case"M":return s?r({month:"numeric"},"month"):this.num(t.month);case"MM":return s?r({month:"2-digit"},"month"):this.num(t.month,2);case"MMM":return o("short",!1);case"MMMM":return o("long",!1);case"MMMMM":return o("narrow",!1);case"y":return s?r({year:"numeric"},"year"):this.num(t.year);case"yy":return s?r({year:"2-digit"},"year"):this.num(t.year.toString().slice(-2),2);case"yyyy":return s?r({year:"numeric"},"year"):this.num(t.year,4);case"yyyyyy":return s?r({year:"numeric"},"year"):this.num(t.year,6);case"G":return u("short");case"GG":return u("long");case"GGGGG":return u("narrow");case"kk":return this.num(t.weekYear.toString().slice(-2),2);case"kkkk":return this.num(t.weekYear,4);case"W":return this.num(t.weekNumber);case"WW":return this.num(t.weekNumber,2);case"o":return this.num(t.ordinal);case"ooo":return this.num(t.ordinal,3);case"q":return this.num(t.quarter);case"qq":return this.num(t.quarter,2);case"X":return this.num(Math.floor(t.ts/1e3));case"x":return this.num(t.ts);default:return l(e)}}))}formatDurationFromString(t,e){const n=t=>{switch(t[0]){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":return"hour";case"d":return"day";case"w":return"week";case"M":return"month";case"y":return"year";default:return null}},s=Tt.parseFormat(e),r=s.reduce(((t,{literal:e,val:n})=>e?t:t.concat(n)),[]);return wt(s,(t=>e=>{const s=n(e);return s?this.num(t.get(s),e.length):e})(t.shiftTo(...r.map(n).filter((t=>t)))))}}class St{constructor(t,e){this.reason=t,this.explanation=e}toMessage(){return this.explanation?`${this.reason}: ${this.explanation}`:this.reason}}class bt{get type(){throw new u}get name(){throw new u}get ianaName(){return this.name}get isUniversal(){throw new u}offsetName(t,e){throw new u}formatOffset(t,e){throw new u}offset(t){throw new u}equals(t){throw new u}get isValid(){throw new u}}let kt=null;class Ot extends bt{static get instance(){return null===kt&&(kt=new Ot),kt}get type(){return"system"}get name(){return(new Intl.DateTimeFormat).resolvedOptions().timeZone}get isUniversal(){return!1}offsetName(t,{format:e,locale:n}){return K(t,e,n)}formatOffset(t,e){return st(this.offset(t),e)}offset(t){return-new Date(t).getTimezoneOffset()}equals(t){return"system"===t.type}get isValid(){return!0}}let Mt={};const Et={year:0,month:1,day:2,era:3,hour:4,minute:5,second:6};let xt={};class Nt extends bt{static create(t){return xt[t]||(xt[t]=new Nt(t)),xt[t]}static resetCache(){xt={},Mt={}}static isValidSpecifier(t){return this.isValidZone(t)}static isValidZone(t){if(!t)return!1;try{return new Intl.DateTimeFormat("en-US",{timeZone:t}).format(),!0}catch(t){return!1}}constructor(t){super(),this.zoneName=t,this.valid=Nt.isValidZone(t)}get type(){return"iana"}get name(){return this.zoneName}get isUniversal(){return!1}offsetName(t,{format:e,locale:n}){return K(t,e,n,this.name)}formatOffset(t,e){return st(this.offset(t),e)}offset(t){const e=new Date(t);if(isNaN(e))return NaN;const n=(s=this.name,Mt[s]||(Mt[s]=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:s,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",era:"short"})),Mt[s]);var s;let[r,i,o,a,l,u,c]=n.formatToParts?function(t,e){const n=t.formatToParts(e),s=[];for(let t=0;t<n.length;t++){const{type:e,value:r}=n[t],i=Et[e];"era"===e?s[i]=r:F(i)||(s[i]=parseInt(r,10))}return s}(n,e):function(t,e){const n=t.format(e).replace(/\u200E/g,""),s=/(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(n),[,r,i,o,a,l,u,c]=s;return[o,r,i,a,l,u,c]}(n,e);"BC"===a&&(r=1-Math.abs(r));let h=+e;const d=h%1e3;return h-=d>=0?d:1e3+d,(B({year:r,month:i,day:o,hour:24===l?0:l,minute:u,second:c,millisecond:0})-h)/6e4}equals(t){return"iana"===t.type&&t.name===this.name}get isValid(){return this.valid}}let Ct=null;class Dt extends bt{static get utcInstance(){return null===Ct&&(Ct=new Dt(0)),Ct}static instance(t){return 0===t?Dt.utcInstance:new Dt(t)}static parseSpecifier(t){if(t){const e=t.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);if(e)return new Dt(tt(e[1],e[2]))}return null}constructor(t){super(),this.fixed=t}get type(){return"fixed"}get name(){return 0===this.fixed?"UTC":`UTC${st(this.fixed,"narrow")}`}get ianaName(){return 0===this.fixed?"Etc/UTC":`Etc/GMT${st(-this.fixed,"narrow")}`}offsetName(){return this.name}formatOffset(t,e){return st(this.fixed,e)}get isUniversal(){return!0}offset(){return this.fixed}equals(t){return"fixed"===t.type&&t.fixed===this.fixed}get isValid(){return!0}}class It extends bt{constructor(t){super(),this.zoneName=t}get type(){return"invalid"}get name(){return this.zoneName}get isUniversal(){return!1}offsetName(){return null}formatOffset(){return""}offset(){return NaN}equals(){return!1}get isValid(){return!1}}function Vt(t,e){if(F(t)||null===t)return e;if(t instanceof bt)return t;if("string"==typeof t){const n=t.toLowerCase();return"default"===n?e:"local"===n||"system"===n?Ot.instance:"utc"===n||"gmt"===n?Dt.utcInstance:Dt.parseSpecifier(n)||Nt.create(t)}return j(t)?Dt.instance(t):"object"==typeof t&&t.offset&&"number"==typeof t.offset?t:new It(t)}let Lt,Ft=()=>Date.now(),jt="system",At=null,$t=null,Zt=null;class Pt{static get now(){return Ft}static set now(t){Ft=t}static set defaultZone(t){jt=t}static get defaultZone(){return Vt(jt,Ot.instance)}static get defaultLocale(){return At}static set defaultLocale(t){At=t}static get defaultNumberingSystem(){return $t}static set defaultNumberingSystem(t){$t=t}static get defaultOutputCalendar(){return Zt}static set defaultOutputCalendar(t){Zt=t}static get throwOnInvalid(){return Lt}static set throwOnInvalid(t){Lt=t}static resetCaches(){Xt.resetCache(),Nt.resetCache()}}let Rt={},Wt={};function zt(t,e={}){const n=JSON.stringify([t,e]);let s=Wt[n];return s||(s=new Intl.DateTimeFormat(t,e),Wt[n]=s),s}let Ut={},qt={},Gt=null;function Ht(t,e,n,s,r){const i=t.listingMode(n);return"error"===i?null:"en"===i?s(e):r(e)}class Yt{constructor(t,e,n){this.padTo=n.padTo||0,this.floor=n.floor||!1;const{padTo:s,floor:r,...i}=n;if(!e||Object.keys(i).length>0){const e={useGrouping:!1,...n};n.padTo>0&&(e.minimumIntegerDigits=n.padTo),this.inf=function(t,e={}){const n=JSON.stringify([t,e]);let s=Ut[n];return s||(s=new Intl.NumberFormat(t,e),Ut[n]=s),s}(t,e)}}format(t){if(this.inf){const e=this.floor?Math.floor(t):t;return this.inf.format(e)}return W(this.floor?Math.floor(t):G(t,3),this.padTo)}}class Jt{constructor(t,e,n){let s;if(this.opts=n,t.zone.isUniversal){const e=t.offset/60*-1,r=e>=0?`Etc/GMT+${e}`:`Etc/GMT${e}`;0!==t.offset&&Nt.create(r).valid?(s=r,this.dt=t):(s="UTC",n.timeZoneName?this.dt=t:this.dt=0===t.offset?t:Yn.fromMillis(t.ts+60*t.offset*1e3))}else"system"===t.zone.type?this.dt=t:(this.dt=t,s=t.zone.name);const r={...this.opts};s&&(r.timeZone=s),this.dtf=zt(e,r)}format(){return this.dtf.format(this.dt.toJSDate())}formatToParts(){return this.dtf.formatToParts(this.dt.toJSDate())}resolvedOptions(){return this.dtf.resolvedOptions()}}class Bt{constructor(t,e,n){this.opts={style:"long",...n},!e&&$()&&(this.rtf=function(t,e={}){const{base:n,...s}=e,r=JSON.stringify([t,s]);let i=qt[r];return i||(i=new Intl.RelativeTimeFormat(t,e),qt[r]=i),i}(t,n))}format(t,e){return this.rtf?this.rtf.format(t,e):function(t,e,n="always",s=!1){const r={years:["year","yr."],quarters:["quarter","qtr."],months:["month","mo."],weeks:["week","wk."],days:["day","day","days"],hours:["hour","hr."],minutes:["minute","min."],seconds:["second","sec."]},i=-1===["hours","minutes","seconds"].indexOf(t);if("auto"===n&&i){const n="days"===t;switch(e){case 1:return n?"tomorrow":`next ${r[t][0]}`;case-1:return n?"yesterday":`last ${r[t][0]}`;case 0:return n?"today":`this ${r[t][0]}`}}const o=Object.is(e,-0)||e<0,a=Math.abs(e),l=1===a,u=r[t],c=s?l?u[1]:u[2]||u[1]:l?r[t][0]:t;return o?`${a} ${c} ago`:`in ${a} ${c}`}(e,t,this.opts.numeric,"long"!==this.opts.style)}formatToParts(t,e){return this.rtf?this.rtf.formatToParts(t,e):[]}}class Xt{static fromOpts(t){return Xt.create(t.locale,t.numberingSystem,t.outputCalendar,t.defaultToEN)}static create(t,e,n,s=!1){const r=t||Pt.defaultLocale,i=r||(s?"en-US":Gt||(Gt=(new Intl.DateTimeFormat).resolvedOptions().locale,Gt)),o=e||Pt.defaultNumberingSystem,a=n||Pt.defaultOutputCalendar;return new Xt(i,o,a,r)}static resetCache(){Gt=null,Wt={},Ut={},qt={}}static fromObject({locale:t,numberingSystem:e,outputCalendar:n}={}){return Xt.create(t,e,n)}constructor(t,e,n,s){const[r,i,o]=function(t){const e=t.indexOf("-u-");if(-1===e)return[t];{let n;const s=t.substring(0,e);try{n=zt(t).resolvedOptions()}catch(t){n=zt(s).resolvedOptions()}const{numberingSystem:r,calendar:i}=n;return[s,r,i]}}(t);this.locale=r,this.numberingSystem=e||i||null,this.outputCalendar=n||o||null,this.intl=function(t,e,n){return n||e?(t+="-u",n&&(t+=`-ca-${n}`),e&&(t+=`-nu-${e}`),t):t}(this.locale,this.numberingSystem,this.outputCalendar),this.weekdaysCache={format:{},standalone:{}},this.monthsCache={format:{},standalone:{}},this.meridiemCache=null,this.eraCache={},this.specifiedLocale=s,this.fastNumbersCached=null}get fastNumbers(){var t;return null==this.fastNumbersCached&&(this.fastNumbersCached=(!(t=this).numberingSystem||"latn"===t.numberingSystem)&&("latn"===t.numberingSystem||!t.locale||t.locale.startsWith("en")||"latn"===new Intl.DateTimeFormat(t.intl).resolvedOptions().numberingSystem)),this.fastNumbersCached}listingMode(){const t=this.isEnglish(),e=!(null!==this.numberingSystem&&"latn"!==this.numberingSystem||null!==this.outputCalendar&&"gregory"!==this.outputCalendar);return t&&e?"en":"intl"}clone(t){return t&&0!==Object.getOwnPropertyNames(t).length?Xt.create(t.locale||this.specifiedLocale,t.numberingSystem||this.numberingSystem,t.outputCalendar||this.outputCalendar,t.defaultToEN||!1):this}redefaultToEN(t={}){return this.clone({...t,defaultToEN:!0})}redefaultToSystem(t={}){return this.clone({...t,defaultToEN:!1})}months(t,e=!1,n=!0){return Ht(this,t,n,ut,(()=>{const n=e?{month:t,day:"numeric"}:{month:t},s=e?"format":"standalone";return this.monthsCache[s][t]||(this.monthsCache[s][t]=function(t){const e=[];for(let n=1;n<=12;n++){const s=Yn.utc(2016,n,1);e.push(t(s))}return e}((t=>this.extract(t,n,"month")))),this.monthsCache[s][t]}))}weekdays(t,e=!1,n=!0){return Ht(this,t,n,mt,(()=>{const n=e?{weekday:t,year:"numeric",month:"long",day:"numeric"}:{weekday:t},s=e?"format":"standalone";return this.weekdaysCache[s][t]||(this.weekdaysCache[s][t]=function(t){const e=[];for(let n=1;n<=7;n++){const s=Yn.utc(2016,11,13+n);e.push(t(s))}return e}((t=>this.extract(t,n,"weekday")))),this.weekdaysCache[s][t]}))}meridiems(t=!0){return Ht(this,void 0,t,(()=>ft),(()=>{if(!this.meridiemCache){const t={hour:"numeric",hourCycle:"h12"};this.meridiemCache=[Yn.utc(2016,11,13,9),Yn.utc(2016,11,13,19)].map((e=>this.extract(e,t,"dayperiod")))}return this.meridiemCache}))}eras(t,e=!0){return Ht(this,t,e,_t,(()=>{const e={era:t};return this.eraCache[t]||(this.eraCache[t]=[Yn.utc(-40,1,1),Yn.utc(2017,1,1)].map((t=>this.extract(t,e,"era")))),this.eraCache[t]}))}extract(t,e,n){const s=this.dtFormatter(t,e).formatToParts().find((t=>t.type.toLowerCase()===n));return s?s.value:null}numberFormatter(t={}){return new Yt(this.intl,t.forceSimple||this.fastNumbers,t)}dtFormatter(t,e={}){return new Jt(t,this.intl,e)}relFormatter(t={}){return new Bt(this.intl,this.isEnglish(),t)}listFormatter(t={}){return function(t,e={}){const n=JSON.stringify([t,e]);let s=Rt[n];return s||(s=new Intl.ListFormat(t,e),Rt[n]=s),s}(this.intl,t)}isEnglish(){return"en"===this.locale||"en-us"===this.locale.toLowerCase()||new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")}equals(t){return this.locale===t.locale&&this.numberingSystem===t.numberingSystem&&this.outputCalendar===t.outputCalendar}}function Qt(...t){const e=t.reduce(((t,e)=>t+e.source),"");return RegExp(`^${e}$`)}function Kt(...t){return e=>t.reduce((([t,n,s],r)=>{const[i,o,a]=r(e,s);return[{...t,...i},o||n,a]}),[{},null,1]).slice(0,2)}function te(t,...e){if(null==t)return[null,null];for(const[n,s]of e){const e=n.exec(t);if(e)return s(e)}return[null,null]}function ee(...t){return(e,n)=>{const s={};let r;for(r=0;r<t.length;r++)s[t[r]]=z(e[n+r]);return[s,null,n+r]}}const ne=/(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,se=/(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,re=RegExp(`${se.source}(?:${ne.source}?(?:\\[(${it.source})\\])?)?`),ie=RegExp(`(?:T${re.source})?`),oe=ee("weekYear","weekNumber","weekDay"),ae=ee("year","ordinal"),le=RegExp(`${se.source} ?(?:${ne.source}|(${it.source}))?`),ue=RegExp(`(?: ${le.source})?`);function ce(t,e,n){const s=t[e];return F(s)?n:z(s)}function he(t,e){return[{hours:ce(t,e,0),minutes:ce(t,e+1,0),seconds:ce(t,e+2,0),milliseconds:q(t[e+3])},null,e+4]}function de(t,e){const n=!t[e]&&!t[e+1],s=tt(t[e+1],t[e+2]);return[{},n?null:Dt.instance(s),e+3]}function me(t,e){return[{},t[e]?Nt.create(t[e]):null,e+1]}const fe=RegExp(`^T?${se.source}$`),ye=/^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;function pe(t){const[e,n,s,r,i,o,a,l,u]=t,c="-"===e[0],h=l&&"-"===l[0],d=(t,e=!1)=>void 0!==t&&(e||t&&c)?-t:t;return[{years:d(U(n)),months:d(U(s)),weeks:d(U(r)),days:d(U(i)),hours:d(U(o)),minutes:d(U(a)),seconds:d(U(l),"-0"===l),milliseconds:d(q(u),h)}]}const ge={GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function _e(t,e,n,s,r,i,o){const a={year:2===e.length?Q(z(e)):z(e),month:at.indexOf(n)+1,day:z(s),hour:z(r),minute:z(i)};return o&&(a.second=z(o)),t&&(a.weekday=t.length>3?ct.indexOf(t)+1:ht.indexOf(t)+1),a}const we=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;function ve(t){const[,e,n,s,r,i,o,a,l,u,c,h]=t,d=_e(e,r,s,n,i,o,a);let m;return m=l?ge[l]:u?0:tt(c,h),[d,new Dt(m)]}const Te=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,Se=/^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,be=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;function ke(t){const[,e,n,s,r,i,o,a]=t;return[_e(e,r,s,n,i,o,a),Dt.utcInstance]}function Oe(t){const[,e,n,s,r,i,o,a]=t;return[_e(e,a,n,s,r,i,o),Dt.utcInstance]}const Me=Qt(/([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,ie),Ee=Qt(/(\d{4})-?W(\d\d)(?:-?(\d))?/,ie),xe=Qt(/(\d{4})-?(\d{3})/,ie),Ne=Qt(re),Ce=Kt((function(t,e){return[{year:ce(t,e),month:ce(t,e+1,1),day:ce(t,e+2,1)},null,e+3]}),he,de,me),De=Kt(oe,he,de,me),Ie=Kt(ae,he,de,me),Ve=Kt(he,de,me),Le=Kt(he),Fe=Qt(/(\d{4})-(\d\d)-(\d\d)/,ue),je=Qt(le),Ae=Kt(he,de,me),$e={weeks:{days:7,hours:168,minutes:10080,seconds:604800,milliseconds:6048e5},days:{hours:24,minutes:1440,seconds:86400,milliseconds:864e5},hours:{minutes:60,seconds:3600,milliseconds:36e5},minutes:{seconds:60,milliseconds:6e4},seconds:{milliseconds:1e3}},Ze={years:{quarters:4,months:12,weeks:52,days:365,hours:8760,minutes:525600,seconds:31536e3,milliseconds:31536e6},quarters:{months:3,weeks:13,days:91,hours:2184,minutes:131040,seconds:7862400,milliseconds:78624e5},months:{weeks:4,days:30,hours:720,minutes:43200,seconds:2592e3,milliseconds:2592e6},...$e},Pe={years:{quarters:4,months:12,weeks:52.1775,days:365.2425,hours:8765.82,minutes:525949.2,seconds:525949.2*60,milliseconds:525949.2*60*1e3},quarters:{months:3,weeks:13.044375,days:91.310625,hours:2191.455,minutes:131487.3,seconds:525949.2*60/4,milliseconds:7889237999.999999},months:{weeks:4.3481250000000005,days:30.436875,hours:730.485,minutes:43829.1,seconds:2629746,milliseconds:2629746e3},...$e},Re=["years","quarters","months","weeks","days","hours","minutes","seconds","milliseconds"],We=Re.slice(0).reverse();function ze(t,e,n=!1){const s={values:n?e.values:{...t.values,...e.values||{}},loc:t.loc.clone(e.loc),conversionAccuracy:e.conversionAccuracy||t.conversionAccuracy};return new qe(s)}function Ue(t,e,n,s,r){const i=t[r][n],o=e[n]/i,a=Math.sign(o)!==Math.sign(s[r])&&0!==s[r]&&Math.abs(o)<=1?function(t){return t<0?Math.floor(t):Math.ceil(t)}(o):Math.trunc(o);s[r]+=a,e[n]-=a*i}class qe{constructor(t){const e="longterm"===t.conversionAccuracy||!1;this.values=t.values,this.loc=t.loc||Xt.create(),this.conversionAccuracy=e?"longterm":"casual",this.invalid=t.invalid||null,this.matrix=e?Pe:Ze,this.isLuxonDuration=!0}static fromMillis(t,e){return qe.fromObject({milliseconds:t},e)}static fromObject(t,e={}){if(null==t||"object"!=typeof t)throw new l("Duration.fromObject: argument expected to be an object, got "+(null===t?"null":typeof t));return new qe({values:nt(t,qe.normalizeUnit),loc:Xt.fromObject(e),conversionAccuracy:e.conversionAccuracy})}static fromDurationLike(t){if(j(t))return qe.fromMillis(t);if(qe.isDuration(t))return t;if("object"==typeof t)return qe.fromObject(t);throw new l(`Unknown duration argument ${t} of type ${typeof t}`)}static fromISO(t,e){const[n]=function(t){return te(t,[ye,pe])}(t);return n?qe.fromObject(n,e):qe.invalid("unparsable",`the input "${t}" can't be parsed as ISO 8601`)}static fromISOTime(t,e){const[n]=function(t){return te(t,[fe,Le])}(t);return n?qe.fromObject(n,e):qe.invalid("unparsable",`the input "${t}" can't be parsed as ISO 8601`)}static invalid(t,e=null){if(!t)throw new l("need to specify a reason the Duration is invalid");const n=t instanceof St?t:new St(t,e);if(Pt.throwOnInvalid)throw new i(n);return new qe({invalid:n})}static normalizeUnit(t){const e={year:"years",years:"years",quarter:"quarters",quarters:"quarters",month:"months",months:"months",week:"weeks",weeks:"weeks",day:"days",days:"days",hour:"hours",hours:"hours",minute:"minutes",minutes:"minutes",second:"seconds",seconds:"seconds",millisecond:"milliseconds",milliseconds:"milliseconds"}[t?t.toLowerCase():t];if(!e)throw new a(t);return e}static isDuration(t){return t&&t.isLuxonDuration||!1}get locale(){return this.isValid?this.loc.locale:null}get numberingSystem(){return this.isValid?this.loc.numberingSystem:null}toFormat(t,e={}){const n={...e,floor:!1!==e.round&&!1!==e.floor};return this.isValid?Tt.create(this.loc,n).formatDurationFromString(this,t):"Invalid Duration"}toHuman(t={}){const e=Re.map((e=>{const n=this.values[e];return F(n)?null:this.loc.numberFormatter({style:"unit",unitDisplay:"long",...t,unit:e.slice(0,-1)}).format(n)})).filter((t=>t));return this.loc.listFormatter({type:"conjunction",style:t.listStyle||"narrow",...t}).format(e)}toObject(){return this.isValid?{...this.values}:{}}toISO(){if(!this.isValid)return null;let t="P";return 0!==this.years&&(t+=this.years+"Y"),0===this.months&&0===this.quarters||(t+=this.months+3*this.quarters+"M"),0!==this.weeks&&(t+=this.weeks+"W"),0!==this.days&&(t+=this.days+"D"),0===this.hours&&0===this.minutes&&0===this.seconds&&0===this.milliseconds||(t+="T"),0!==this.hours&&(t+=this.hours+"H"),0!==this.minutes&&(t+=this.minutes+"M"),0===this.seconds&&0===this.milliseconds||(t+=G(this.seconds+this.milliseconds/1e3,3)+"S"),"P"===t&&(t+="T0S"),t}toISOTime(t={}){if(!this.isValid)return null;const e=this.toMillis();if(e<0||e>=864e5)return null;t={suppressMilliseconds:!1,suppressSeconds:!1,includePrefix:!1,format:"extended",...t};const n=this.shiftTo("hours","minutes","seconds","milliseconds");let s="basic"===t.format?"hhmm":"hh:mm";t.suppressSeconds&&0===n.seconds&&0===n.milliseconds||(s+="basic"===t.format?"ss":":ss",t.suppressMilliseconds&&0===n.milliseconds||(s+=".SSS"));let r=n.toFormat(s);return t.includePrefix&&(r="T"+r),r}toJSON(){return this.toISO()}toString(){return this.toISO()}toMillis(){return this.as("milliseconds")}valueOf(){return this.toMillis()}plus(t){if(!this.isValid)return this;const e=qe.fromDurationLike(t),n={};for(const t of Re)(P(e.values,t)||P(this.values,t))&&(n[t]=e.get(t)+this.get(t));return ze(this,{values:n},!0)}minus(t){if(!this.isValid)return this;const e=qe.fromDurationLike(t);return this.plus(e.negate())}mapUnits(t){if(!this.isValid)return this;const e={};for(const n of Object.keys(this.values))e[n]=et(t(this.values[n],n));return ze(this,{values:e},!0)}get(t){return this[qe.normalizeUnit(t)]}set(t){return this.isValid?ze(this,{values:{...this.values,...nt(t,qe.normalizeUnit)}}):this}reconfigure({locale:t,numberingSystem:e,conversionAccuracy:n}={}){const s={loc:this.loc.clone({locale:t,numberingSystem:e})};return n&&(s.conversionAccuracy=n),ze(this,s)}as(t){return this.isValid?this.shiftTo(t).get(t):NaN}normalize(){if(!this.isValid)return this;const t=this.toObject();return function(t,e){We.reduce(((n,s)=>F(e[s])?n:(n&&Ue(t,e,n,e,s),s)),null)}(this.matrix,t),ze(this,{values:t},!0)}shiftTo(...t){if(!this.isValid)return this;if(0===t.length)return this;t=t.map((t=>qe.normalizeUnit(t)));const e={},n={},s=this.toObject();let r;for(const i of Re)if(t.indexOf(i)>=0){r=i;let t=0;for(const e in n)t+=this.matrix[e][i]*n[e],n[e]=0;j(s[i])&&(t+=s[i]);const o=Math.trunc(t);e[i]=o,n[i]=(1e3*t-1e3*o)/1e3;for(const t in s)Re.indexOf(t)>Re.indexOf(i)&&Ue(this.matrix,s,t,e,i)}else j(s[i])&&(n[i]=s[i]);for(const t in n)0!==n[t]&&(e[r]+=t===r?n[t]:n[t]/this.matrix[r][t]);return ze(this,{values:e},!0).normalize()}negate(){if(!this.isValid)return this;const t={};for(const e of Object.keys(this.values))t[e]=0===this.values[e]?0:-this.values[e];return ze(this,{values:t},!0)}get years(){return this.isValid?this.values.years||0:NaN}get quarters(){return this.isValid?this.values.quarters||0:NaN}get months(){return this.isValid?this.values.months||0:NaN}get weeks(){return this.isValid?this.values.weeks||0:NaN}get days(){return this.isValid?this.values.days||0:NaN}get hours(){return this.isValid?this.values.hours||0:NaN}get minutes(){return this.isValid?this.values.minutes||0:NaN}get seconds(){return this.isValid?this.values.seconds||0:NaN}get milliseconds(){return this.isValid?this.values.milliseconds||0:NaN}get isValid(){return null===this.invalid}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}equals(t){if(!this.isValid||!t.isValid)return!1;if(!this.loc.equals(t.loc))return!1;for(const s of Re)if(e=this.values[s],n=t.values[s],!(void 0===e||0===e?void 0===n||0===n:e===n))return!1;var e,n;return!0}}const Ge="Invalid Interval";class He{constructor(t){this.s=t.start,this.e=t.end,this.invalid=t.invalid||null,this.isLuxonInterval=!0}static invalid(t,e=null){if(!t)throw new l("need to specify a reason the Interval is invalid");const n=t instanceof St?t:new St(t,e);if(Pt.throwOnInvalid)throw new r(n);return new He({invalid:n})}static fromDateTimes(t,e){const n=Jn(t),s=Jn(e),r=function(t,e){return t&&t.isValid?e&&e.isValid?e<t?He.invalid("end before start",`The end of an interval must be after its start, but you had start=${t.toISO()} and end=${e.toISO()}`):null:He.invalid("missing or invalid end"):He.invalid("missing or invalid start")}(n,s);return null==r?new He({start:n,end:s}):r}static after(t,e){const n=qe.fromDurationLike(e),s=Jn(t);return He.fromDateTimes(s,s.plus(n))}static before(t,e){const n=qe.fromDurationLike(e),s=Jn(t);return He.fromDateTimes(s.minus(n),s)}static fromISO(t,e){const[n,s]=(t||"").split("/",2);if(n&&s){let t,r,i,o;try{t=Yn.fromISO(n,e),r=t.isValid}catch(s){r=!1}try{i=Yn.fromISO(s,e),o=i.isValid}catch(s){o=!1}if(r&&o)return He.fromDateTimes(t,i);if(r){const n=qe.fromISO(s,e);if(n.isValid)return He.after(t,n)}else if(o){const t=qe.fromISO(n,e);if(t.isValid)return He.before(i,t)}}return He.invalid("unparsable",`the input "${t}" can't be parsed as ISO 8601`)}static isInterval(t){return t&&t.isLuxonInterval||!1}get start(){return this.isValid?this.s:null}get end(){return this.isValid?this.e:null}get isValid(){return null===this.invalidReason}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}length(t="milliseconds"){return this.isValid?this.toDuration(t).get(t):NaN}count(t="milliseconds"){if(!this.isValid)return NaN;const e=this.start.startOf(t),n=this.end.startOf(t);return Math.floor(n.diff(e,t).get(t))+1}hasSame(t){return!!this.isValid&&(this.isEmpty()||this.e.minus(1).hasSame(this.s,t))}isEmpty(){return this.s.valueOf()===this.e.valueOf()}isAfter(t){return!!this.isValid&&this.s>t}isBefore(t){return!!this.isValid&&this.e<=t}contains(t){return!!this.isValid&&this.s<=t&&this.e>t}set({start:t,end:e}={}){return this.isValid?He.fromDateTimes(t||this.s,e||this.e):this}splitAt(...t){if(!this.isValid)return[];const e=t.map(Jn).filter((t=>this.contains(t))).sort(),n=[];let{s}=this,r=0;for(;s<this.e;){const t=e[r]||this.e,i=+t>+this.e?this.e:t;n.push(He.fromDateTimes(s,i)),s=i,r+=1}return n}splitBy(t){const e=qe.fromDurationLike(t);if(!this.isValid||!e.isValid||0===e.as("milliseconds"))return[];let n,{s}=this,r=1;const i=[];for(;s<this.e;){const t=this.start.plus(e.mapUnits((t=>t*r)));n=+t>+this.e?this.e:t,i.push(He.fromDateTimes(s,n)),s=n,r+=1}return i}divideEqually(t){return this.isValid?this.splitBy(this.length()/t).slice(0,t):[]}overlaps(t){return this.e>t.s&&this.s<t.e}abutsStart(t){return!!this.isValid&&+this.e==+t.s}abutsEnd(t){return!!this.isValid&&+t.e==+this.s}engulfs(t){return!!this.isValid&&this.s<=t.s&&this.e>=t.e}equals(t){return!(!this.isValid||!t.isValid)&&this.s.equals(t.s)&&this.e.equals(t.e)}intersection(t){if(!this.isValid)return this;const e=this.s>t.s?this.s:t.s,n=this.e<t.e?this.e:t.e;return e>=n?null:He.fromDateTimes(e,n)}union(t){if(!this.isValid)return this;const e=this.s<t.s?this.s:t.s,n=this.e>t.e?this.e:t.e;return He.fromDateTimes(e,n)}static merge(t){const[e,n]=t.sort(((t,e)=>t.s-e.s)).reduce((([t,e],n)=>e?e.overlaps(n)||e.abutsStart(n)?[t,e.union(n)]:[t.concat([e]),n]:[t,n]),[[],null]);return n&&e.push(n),e}static xor(t){let e=null,n=0;const s=[],r=t.map((t=>[{time:t.s,type:"s"},{time:t.e,type:"e"}])),i=Array.prototype.concat(...r).sort(((t,e)=>t.time-e.time));for(const t of i)n+="s"===t.type?1:-1,1===n?e=t.time:(e&&+e!=+t.time&&s.push(He.fromDateTimes(e,t.time)),e=null);return He.merge(s)}difference(...t){return He.xor([this].concat(t)).map((t=>this.intersection(t))).filter((t=>t&&!t.isEmpty()))}toString(){return this.isValid?`[${this.s.toISO()} – ${this.e.toISO()})`:Ge}toISO(t){return this.isValid?`${this.s.toISO(t)}/${this.e.toISO(t)}`:Ge}toISODate(){return this.isValid?`${this.s.toISODate()}/${this.e.toISODate()}`:Ge}toISOTime(t){return this.isValid?`${this.s.toISOTime(t)}/${this.e.toISOTime(t)}`:Ge}toFormat(t,{separator:e=" – "}={}){return this.isValid?`${this.s.toFormat(t)}${e}${this.e.toFormat(t)}`:Ge}toDuration(t,e){return this.isValid?this.e.diff(this.s,t,e):qe.invalid(this.invalidReason)}mapEndpoints(t){return He.fromDateTimes(t(this.s),t(this.e))}}class Ye{static hasDST(t=Pt.defaultZone){const e=Yn.now().setZone(t).set({month:12});return!t.isUniversal&&e.offset!==e.set({month:6}).offset}static isValidIANAZone(t){return Nt.isValidZone(t)}static normalizeZone(t){return Vt(t,Pt.defaultZone)}static months(t="long",{locale:e=null,numberingSystem:n=null,locObj:s=null,outputCalendar:r="gregory"}={}){return(s||Xt.create(e,n,r)).months(t)}static monthsFormat(t="long",{locale:e=null,numberingSystem:n=null,locObj:s=null,outputCalendar:r="gregory"}={}){return(s||Xt.create(e,n,r)).months(t,!0)}static weekdays(t="long",{locale:e=null,numberingSystem:n=null,locObj:s=null}={}){return(s||Xt.create(e,n,null)).weekdays(t)}static weekdaysFormat(t="long",{locale:e=null,numberingSystem:n=null,locObj:s=null}={}){return(s||Xt.create(e,n,null)).weekdays(t,!0)}static meridiems({locale:t=null}={}){return Xt.create(t).meridiems()}static eras(t="short",{locale:e=null}={}){return Xt.create(e,null,"gregory").eras(t)}static features(){return{relative:$()}}}function Je(t,e){const n=t=>t.toUTC(0,{keepLocalTime:!0}).startOf("day").valueOf(),s=n(e)-n(t);return Math.floor(qe.fromMillis(s).as("days"))}const Be={arab:"[٠-٩]",arabext:"[۰-۹]",bali:"[᭐-᭙]",beng:"[০-৯]",deva:"[०-९]",fullwide:"[０-９]",gujr:"[૦-૯]",hanidec:"[〇|一|二|三|四|五|六|七|八|九]",khmr:"[០-៩]",knda:"[೦-೯]",laoo:"[໐-໙]",limb:"[᥆-᥏]",mlym:"[൦-൯]",mong:"[᠐-᠙]",mymr:"[၀-၉]",orya:"[୦-୯]",tamldec:"[௦-௯]",telu:"[౦-౯]",thai:"[๐-๙]",tibt:"[༠-༩]",latn:"\\d"},Xe={arab:[1632,1641],arabext:[1776,1785],bali:[6992,7001],beng:[2534,2543],deva:[2406,2415],fullwide:[65296,65303],gujr:[2790,2799],khmr:[6112,6121],knda:[3302,3311],laoo:[3792,3801],limb:[6470,6479],mlym:[3430,3439],mong:[6160,6169],mymr:[4160,4169],orya:[2918,2927],tamldec:[3046,3055],telu:[3174,3183],thai:[3664,3673],tibt:[3872,3881]},Qe=Be.hanidec.replace(/[\[|\]]/g,"").split("");function Ke({numberingSystem:t},e=""){return new RegExp(`${Be[t||"latn"]}${e}`)}function tn(t,e=(t=>t)){return{regex:t,deser:([t])=>e(function(t){let e=parseInt(t,10);if(isNaN(e)){e="";for(let n=0;n<t.length;n++){const s=t.charCodeAt(n);if(-1!==t[n].search(Be.hanidec))e+=Qe.indexOf(t[n]);else for(const t in Xe){const[n,r]=Xe[t];s>=n&&s<=r&&(e+=s-n)}}return parseInt(e,10)}return e}(t))}}const en=`[ ${String.fromCharCode(160)}]`,nn=new RegExp(en,"g");function sn(t){return t.replace(/\./g,"\\.?").replace(nn,en)}function rn(t){return t.replace(/\./g,"").replace(nn," ").toLowerCase()}function on(t,e){return null===t?null:{regex:RegExp(t.map(sn).join("|")),deser:([n])=>t.findIndex((t=>rn(n)===rn(t)))+e}}function an(t,e){return{regex:t,deser:([,t,e])=>tt(t,e),groups:e}}function ln(t){return{regex:t,deser:([t])=>t}}const un={year:{"2-digit":"yy",numeric:"yyyyy"},month:{numeric:"M","2-digit":"MM",short:"MMM",long:"MMMM"},day:{numeric:"d","2-digit":"dd"},weekday:{short:"EEE",long:"EEEE"},dayperiod:"a",dayPeriod:"a",hour:{numeric:"h","2-digit":"hh"},minute:{numeric:"m","2-digit":"mm"},second:{numeric:"s","2-digit":"ss"},timeZoneName:{long:"ZZZZZ",short:"ZZZ"}};let cn=null;function hn(t,e,n){const s=function(t,e){return Array.prototype.concat(...t.map((t=>function(t,e){if(t.literal)return t;const n=dn(Tt.macroTokenToFormatOpts(t.val),e);return null==n||n.includes(void 0)?t:n}(t,e))))}(Tt.parseFormat(n),t),r=s.map((e=>function(t,e){const n=Ke(e),s=Ke(e,"{2}"),r=Ke(e,"{3}"),i=Ke(e,"{4}"),o=Ke(e,"{6}"),a=Ke(e,"{1,2}"),l=Ke(e,"{1,3}"),u=Ke(e,"{1,6}"),c=Ke(e,"{1,9}"),h=Ke(e,"{2,4}"),d=Ke(e,"{4,6}"),m=t=>{return{regex:RegExp((e=t.val,e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&"))),deser:([t])=>t,literal:!0};var e},f=(f=>{if(t.literal)return m(f);switch(f.val){case"G":return on(e.eras("short",!1),0);case"GG":return on(e.eras("long",!1),0);case"y":return tn(u);case"yy":case"kk":return tn(h,Q);case"yyyy":case"kkkk":return tn(i);case"yyyyy":return tn(d);case"yyyyyy":return tn(o);case"M":case"L":case"d":case"H":case"h":case"m":case"q":case"s":case"W":return tn(a);case"MM":case"LL":case"dd":case"HH":case"hh":case"mm":case"qq":case"ss":case"WW":return tn(s);case"MMM":return on(e.months("short",!0,!1),1);case"MMMM":return on(e.months("long",!0,!1),1);case"LLL":return on(e.months("short",!1,!1),1);case"LLLL":return on(e.months("long",!1,!1),1);case"o":case"S":return tn(l);case"ooo":case"SSS":return tn(r);case"u":return ln(c);case"uu":return ln(a);case"uuu":case"E":case"c":return tn(n);case"a":return on(e.meridiems(),0);case"EEE":return on(e.weekdays("short",!1,!1),1);case"EEEE":return on(e.weekdays("long",!1,!1),1);case"ccc":return on(e.weekdays("short",!0,!1),1);case"cccc":return on(e.weekdays("long",!0,!1),1);case"Z":case"ZZ":return an(new RegExp(`([+-]${a.source})(?::(${s.source}))?`),2);case"ZZZ":return an(new RegExp(`([+-]${a.source})(${s.source})?`),2);case"z":return ln(/[a-z_+-/]{1,256}?/i);default:return m(f)}})(t)||{invalidReason:"missing Intl.DateTimeFormat.formatToParts support"};return f.token=t,f}(e,t))),i=r.find((t=>t.invalidReason));if(i)return{input:e,tokens:s,invalidReason:i.invalidReason};{const[t,n]=function(t){return[`^${t.map((t=>t.regex)).reduce(((t,e)=>`${t}(${e.source})`),"")}$`,t]}(r),i=RegExp(t,"i"),[a,l]=function(t,e,n){const s=t.match(e);if(s){const t={};let e=1;for(const r in n)if(P(n,r)){const i=n[r],o=i.groups?i.groups+1:1;!i.literal&&i.token&&(t[i.token.val[0]]=i.deser(s.slice(e,e+o))),e+=o}return[s,t]}return[s,{}]}(e,i,n),[u,c,h]=l?function(t){let e,n=null;return F(t.z)||(n=Nt.create(t.z)),F(t.Z)||(n||(n=new Dt(t.Z)),e=t.Z),F(t.q)||(t.M=3*(t.q-1)+1),F(t.h)||(t.h<12&&1===t.a?t.h+=12:12===t.h&&0===t.a&&(t.h=0)),0===t.G&&t.y&&(t.y=-t.y),F(t.u)||(t.S=q(t.u)),[Object.keys(t).reduce(((e,n)=>{const s=(t=>{switch(t){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":case"H":return"hour";case"d":return"day";case"o":return"ordinal";case"L":case"M":return"month";case"y":return"year";case"E":case"c":return"weekday";case"W":return"weekNumber";case"k":return"weekYear";case"q":return"quarter";default:return null}})(n);return s&&(e[s]=t[n]),e}),{}),n,e]}(l):[null,null,void 0];if(P(l,"a")&&P(l,"H"))throw new o("Can't include meridiem when specifying 24-hour format");return{input:e,tokens:s,regex:i,rawMatches:a,matches:l,result:u,zone:c,specificOffset:h}}}function dn(t,e){return t?Tt.create(e,t).formatDateTimeParts((cn||(cn=Yn.fromMillis(1555555555555)),cn)).map((e=>function(t,e,n){const{type:s,value:r}=t;if("literal"===s)return{literal:!0,val:r};const i=n[s];let o=un[s];return"object"==typeof o&&(o=o[i]),o?{literal:!1,val:o}:void 0}(e,0,t))):null}const mn=[0,31,59,90,120,151,181,212,243,273,304,334],fn=[0,31,60,91,121,152,182,213,244,274,305,335];function yn(t,e){return new St("unit out of range",`you specified ${e} (of type ${typeof e}) as a ${t}, which is invalid`)}function pn(t,e,n){const s=new Date(Date.UTC(t,e-1,n));t<100&&t>=0&&s.setUTCFullYear(s.getUTCFullYear()-1900);const r=s.getUTCDay();return 0===r?7:r}function gn(t,e,n){return n+(H(t)?fn:mn)[e-1]}function _n(t,e){const n=H(t)?fn:mn,s=n.findIndex((t=>t<e));return{month:s+1,day:e-n[s]}}function wn(t){const{year:e,month:n,day:s}=t,r=gn(e,n,s),i=pn(e,n,s);let o,a=Math.floor((r-i+10)/7);return a<1?(o=e-1,a=X(o)):a>X(e)?(o=e+1,a=1):o=e,{weekYear:o,weekNumber:a,weekday:i,...rt(t)}}function vn(t){const{weekYear:e,weekNumber:n,weekday:s}=t,r=pn(e,1,4),i=Y(e);let o,a=7*n+s-r-3;a<1?(o=e-1,a+=Y(o)):a>i?(o=e+1,a-=Y(e)):o=e;const{month:l,day:u}=_n(o,a);return{year:o,month:l,day:u,...rt(t)}}function Tn(t){const{year:e,month:n,day:s}=t;return{year:e,ordinal:gn(e,n,s),...rt(t)}}function Sn(t){const{year:e,ordinal:n}=t,{month:s,day:r}=_n(e,n);return{year:e,month:s,day:r,...rt(t)}}function bn(t){const e=A(t.year),n=R(t.month,1,12),s=R(t.day,1,J(t.year,t.month));return e?n?!s&&yn("day",t.day):yn("month",t.month):yn("year",t.year)}function kn(t){const{hour:e,minute:n,second:s,millisecond:r}=t,i=R(e,0,23)||24===e&&0===n&&0===s&&0===r,o=R(n,0,59),a=R(s,0,59),l=R(r,0,999);return i?o?a?!l&&yn("millisecond",r):yn("second",s):yn("minute",n):yn("hour",e)}const On="Invalid DateTime",Mn=864e13;function En(t){return new St("unsupported zone",`the zone "${t.name}" is not supported`)}function xn(t){return null===t.weekData&&(t.weekData=wn(t.c)),t.weekData}function Nn(t,e){const n={ts:t.ts,zone:t.zone,c:t.c,o:t.o,loc:t.loc,invalid:t.invalid};return new Yn({...n,...e,old:n})}function Cn(t,e,n){let s=t-60*e*1e3;const r=n.offset(s);if(e===r)return[s,e];s-=60*(r-e)*1e3;const i=n.offset(s);return r===i?[s,r]:[t-60*Math.min(r,i)*1e3,Math.max(r,i)]}function Dn(t,e){const n=new Date(t+=60*e*1e3);return{year:n.getUTCFullYear(),month:n.getUTCMonth()+1,day:n.getUTCDate(),hour:n.getUTCHours(),minute:n.getUTCMinutes(),second:n.getUTCSeconds(),millisecond:n.getUTCMilliseconds()}}function In(t,e,n){return Cn(B(t),e,n)}function Vn(t,e){const n=t.o,s=t.c.year+Math.trunc(e.years),r=t.c.month+Math.trunc(e.months)+3*Math.trunc(e.quarters),i={...t.c,year:s,month:r,day:Math.min(t.c.day,J(s,r))+Math.trunc(e.days)+7*Math.trunc(e.weeks)},o=qe.fromObject({years:e.years-Math.trunc(e.years),quarters:e.quarters-Math.trunc(e.quarters),months:e.months-Math.trunc(e.months),weeks:e.weeks-Math.trunc(e.weeks),days:e.days-Math.trunc(e.days),hours:e.hours,minutes:e.minutes,seconds:e.seconds,milliseconds:e.milliseconds}).as("milliseconds"),a=B(i);let[l,u]=Cn(a,n,t.zone);return 0!==o&&(l+=o,u=t.zone.offset(l)),{ts:l,o:u}}function Ln(t,e,n,s,r,i){const{setZone:o,zone:a}=n;if(t&&0!==Object.keys(t).length){const s=e||a,r=Yn.fromObject(t,{...n,zone:s,specificOffset:i});return o?r:r.setZone(a)}return Yn.invalid(new St("unparsable",`the input "${r}" can't be parsed as ${s}`))}function Fn(t,e,n=!0){return t.isValid?Tt.create(Xt.create("en-US"),{allowZ:n,forceSimple:!0}).formatDateTimeFromString(t,e):null}function jn(t,e){const n=t.c.year>9999||t.c.year<0;let s="";return n&&t.c.year>=0&&(s+="+"),s+=W(t.c.year,n?6:4),e?(s+="-",s+=W(t.c.month),s+="-",s+=W(t.c.day)):(s+=W(t.c.month),s+=W(t.c.day)),s}function An(t,e,n,s,r,i){let o=W(t.c.hour);return e?(o+=":",o+=W(t.c.minute),0===t.c.second&&n||(o+=":")):o+=W(t.c.minute),0===t.c.second&&n||(o+=W(t.c.second),0===t.c.millisecond&&s||(o+=".",o+=W(t.c.millisecond,3))),r&&(t.isOffsetFixed&&0===t.offset&&!i?o+="Z":t.o<0?(o+="-",o+=W(Math.trunc(-t.o/60)),o+=":",o+=W(Math.trunc(-t.o%60))):(o+="+",o+=W(Math.trunc(t.o/60)),o+=":",o+=W(Math.trunc(t.o%60)))),i&&(o+="["+t.zone.ianaName+"]"),o}const $n={month:1,day:1,hour:0,minute:0,second:0,millisecond:0},Zn={weekNumber:1,weekday:1,hour:0,minute:0,second:0,millisecond:0},Pn={ordinal:1,hour:0,minute:0,second:0,millisecond:0},Rn=["year","month","day","hour","minute","second","millisecond"],Wn=["weekYear","weekNumber","weekday","hour","minute","second","millisecond"],zn=["year","ordinal","hour","minute","second","millisecond"];function Un(t){const e={year:"year",years:"year",month:"month",months:"month",day:"day",days:"day",hour:"hour",hours:"hour",minute:"minute",minutes:"minute",quarter:"quarter",quarters:"quarter",second:"second",seconds:"second",millisecond:"millisecond",milliseconds:"millisecond",weekday:"weekday",weekdays:"weekday",weeknumber:"weekNumber",weeksnumber:"weekNumber",weeknumbers:"weekNumber",weekyear:"weekYear",weekyears:"weekYear",ordinal:"ordinal"}[t.toLowerCase()];if(!e)throw new a(t);return e}function qn(t,e){const n=Vt(e.zone,Pt.defaultZone),s=Xt.fromObject(e),r=Pt.now();let i,o;if(F(t.year))i=r;else{for(const e of Rn)F(t[e])&&(t[e]=$n[e]);const e=bn(t)||kn(t);if(e)return Yn.invalid(e);const s=n.offset(r);[i,o]=In(t,s,n)}return new Yn({ts:i,zone:n,loc:s,o})}function Gn(t,e,n){const s=!!F(n.round)||n.round,r=(t,r)=>(t=G(t,s||n.calendary?0:2,!0),e.loc.clone(n).relFormatter(n).format(t,r)),i=s=>n.calendary?e.hasSame(t,s)?0:e.startOf(s).diff(t.startOf(s),s).get(s):e.diff(t,s).get(s);if(n.unit)return r(i(n.unit),n.unit);for(const t of n.units){const e=i(t);if(Math.abs(e)>=1)return r(e,t)}return r(t>e?-0:0,n.units[n.units.length-1])}function Hn(t){let e,n={};return t.length>0&&"object"==typeof t[t.length-1]?(n=t[t.length-1],e=Array.from(t).slice(0,t.length-1)):e=Array.from(t),[n,e]}class Yn{constructor(t){const e=t.zone||Pt.defaultZone;let n=t.invalid||(Number.isNaN(t.ts)?new St("invalid input"):null)||(e.isValid?null:En(e));this.ts=F(t.ts)?Pt.now():t.ts;let s=null,r=null;if(!n)if(t.old&&t.old.ts===this.ts&&t.old.zone.equals(e))[s,r]=[t.old.c,t.old.o];else{const t=e.offset(this.ts);s=Dn(this.ts,t),n=Number.isNaN(s.year)?new St("invalid input"):null,s=n?null:s,r=n?null:t}this._zone=e,this.loc=t.loc||Xt.create(),this.invalid=n,this.weekData=null,this.c=s,this.o=r,this.isLuxonDateTime=!0}static now(){return new Yn({})}static local(){const[t,e]=Hn(arguments),[n,s,r,i,o,a,l]=e;return qn({year:n,month:s,day:r,hour:i,minute:o,second:a,millisecond:l},t)}static utc(){const[t,e]=Hn(arguments),[n,s,r,i,o,a,l]=e;return t.zone=Dt.utcInstance,qn({year:n,month:s,day:r,hour:i,minute:o,second:a,millisecond:l},t)}static fromJSDate(t,e={}){const n=(s=t,"[object Date]"===Object.prototype.toString.call(s)?t.valueOf():NaN);var s;if(Number.isNaN(n))return Yn.invalid("invalid input");const r=Vt(e.zone,Pt.defaultZone);return r.isValid?new Yn({ts:n,zone:r,loc:Xt.fromObject(e)}):Yn.invalid(En(r))}static fromMillis(t,e={}){if(j(t))return t<-Mn||t>Mn?Yn.invalid("Timestamp out of range"):new Yn({ts:t,zone:Vt(e.zone,Pt.defaultZone),loc:Xt.fromObject(e)});throw new l(`fromMillis requires a numerical input, but received a ${typeof t} with value ${t}`)}static fromSeconds(t,e={}){if(j(t))return new Yn({ts:1e3*t,zone:Vt(e.zone,Pt.defaultZone),loc:Xt.fromObject(e)});throw new l("fromSeconds requires a numerical input")}static fromObject(t,e={}){t=t||{};const n=Vt(e.zone,Pt.defaultZone);if(!n.isValid)return Yn.invalid(En(n));const s=Pt.now(),r=F(e.specificOffset)?n.offset(s):e.specificOffset,i=nt(t,Un),a=!F(i.ordinal),l=!F(i.year),u=!F(i.month)||!F(i.day),c=l||u,h=i.weekYear||i.weekNumber,d=Xt.fromObject(e);if((c||a)&&h)throw new o("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(u&&a)throw new o("Can't mix ordinal dates with month/day");const m=h||i.weekday&&!c;let f,y,p=Dn(s,r);m?(f=Wn,y=Zn,p=wn(p)):a?(f=zn,y=Pn,p=Tn(p)):(f=Rn,y=$n);let g=!1;for(const t of f)F(i[t])?i[t]=g?y[t]:p[t]:g=!0;const _=m?function(t){const e=A(t.weekYear),n=R(t.weekNumber,1,X(t.weekYear)),s=R(t.weekday,1,7);return e?n?!s&&yn("weekday",t.weekday):yn("week",t.week):yn("weekYear",t.weekYear)}(i):a?function(t){const e=A(t.year),n=R(t.ordinal,1,Y(t.year));return e?!n&&yn("ordinal",t.ordinal):yn("year",t.year)}(i):bn(i),w=_||kn(i);if(w)return Yn.invalid(w);const v=m?vn(i):a?Sn(i):i,[T,S]=In(v,r,n),b=new Yn({ts:T,zone:n,o:S,loc:d});return i.weekday&&c&&t.weekday!==b.weekday?Yn.invalid("mismatched weekday",`you can't specify both a weekday of ${i.weekday} and a date of ${b.toISO()}`):b}static fromISO(t,e={}){const[n,s]=function(t){return te(t,[Me,Ce],[Ee,De],[xe,Ie],[Ne,Ve])}(t);return Ln(n,s,e,"ISO 8601",t)}static fromRFC2822(t,e={}){const[n,s]=function(t){return te(function(t){return t.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim()}(t),[we,ve])}(t);return Ln(n,s,e,"RFC 2822",t)}static fromHTTP(t,e={}){const[n,s]=function(t){return te(t,[Te,ke],[Se,ke],[be,Oe])}(t);return Ln(n,s,e,"HTTP",e)}static fromFormat(t,e,n={}){if(F(t)||F(e))throw new l("fromFormat requires an input string and a format");const{locale:s=null,numberingSystem:r=null}=n,i=Xt.fromOpts({locale:s,numberingSystem:r,defaultToEN:!0}),[o,a,u,c]=function(t,e,n){const{result:s,zone:r,specificOffset:i,invalidReason:o}=hn(t,e,n);return[s,r,i,o]}(i,t,e);return c?Yn.invalid(c):Ln(o,a,n,`format ${e}`,t,u)}static fromString(t,e,n={}){return Yn.fromFormat(t,e,n)}static fromSQL(t,e={}){const[n,s]=function(t){return te(t,[Fe,Ce],[je,Ae])}(t);return Ln(n,s,e,"SQL",t)}static invalid(t,e=null){if(!t)throw new l("need to specify a reason the DateTime is invalid");const n=t instanceof St?t:new St(t,e);if(Pt.throwOnInvalid)throw new s(n);return new Yn({invalid:n})}static isDateTime(t){return t&&t.isLuxonDateTime||!1}static parseFormatForOpts(t,e={}){const n=dn(t,Xt.fromObject(e));return n?n.map((t=>t?t.val:null)).join(""):null}get(t){return this[t]}get isValid(){return null===this.invalid}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}get locale(){return this.isValid?this.loc.locale:null}get numberingSystem(){return this.isValid?this.loc.numberingSystem:null}get outputCalendar(){return this.isValid?this.loc.outputCalendar:null}get zone(){return this._zone}get zoneName(){return this.isValid?this.zone.name:null}get year(){return this.isValid?this.c.year:NaN}get quarter(){return this.isValid?Math.ceil(this.c.month/3):NaN}get month(){return this.isValid?this.c.month:NaN}get day(){return this.isValid?this.c.day:NaN}get hour(){return this.isValid?this.c.hour:NaN}get minute(){return this.isValid?this.c.minute:NaN}get second(){return this.isValid?this.c.second:NaN}get millisecond(){return this.isValid?this.c.millisecond:NaN}get weekYear(){return this.isValid?xn(this).weekYear:NaN}get weekNumber(){return this.isValid?xn(this).weekNumber:NaN}get weekday(){return this.isValid?xn(this).weekday:NaN}get ordinal(){return this.isValid?Tn(this.c).ordinal:NaN}get monthShort(){return this.isValid?Ye.months("short",{locObj:this.loc})[this.month-1]:null}get monthLong(){return this.isValid?Ye.months("long",{locObj:this.loc})[this.month-1]:null}get weekdayShort(){return this.isValid?Ye.weekdays("short",{locObj:this.loc})[this.weekday-1]:null}get weekdayLong(){return this.isValid?Ye.weekdays("long",{locObj:this.loc})[this.weekday-1]:null}get offset(){return this.isValid?+this.o:NaN}get offsetNameShort(){return this.isValid?this.zone.offsetName(this.ts,{format:"short",locale:this.locale}):null}get offsetNameLong(){return this.isValid?this.zone.offsetName(this.ts,{format:"long",locale:this.locale}):null}get isOffsetFixed(){return this.isValid?this.zone.isUniversal:null}get isInDST(){return!this.isOffsetFixed&&(this.offset>this.set({month:1,day:1}).offset||this.offset>this.set({month:5}).offset)}get isInLeapYear(){return H(this.year)}get daysInMonth(){return J(this.year,this.month)}get daysInYear(){return this.isValid?Y(this.year):NaN}get weeksInWeekYear(){return this.isValid?X(this.weekYear):NaN}resolvedLocaleOptions(t={}){const{locale:e,numberingSystem:n,calendar:s}=Tt.create(this.loc.clone(t),t).resolvedOptions(this);return{locale:e,numberingSystem:n,outputCalendar:s}}toUTC(t=0,e={}){return this.setZone(Dt.instance(t),e)}toLocal(){return this.setZone(Pt.defaultZone)}setZone(t,{keepLocalTime:e=!1,keepCalendarTime:n=!1}={}){if((t=Vt(t,Pt.defaultZone)).equals(this.zone))return this;if(t.isValid){let s=this.ts;if(e||n){const e=t.offset(this.ts),n=this.toObject();[s]=In(n,e,t)}return Nn(this,{ts:s,zone:t})}return Yn.invalid(En(t))}reconfigure({locale:t,numberingSystem:e,outputCalendar:n}={}){return Nn(this,{loc:this.loc.clone({locale:t,numberingSystem:e,outputCalendar:n})})}setLocale(t){return this.reconfigure({locale:t})}set(t){if(!this.isValid)return this;const e=nt(t,Un),n=!F(e.weekYear)||!F(e.weekNumber)||!F(e.weekday),s=!F(e.ordinal),r=!F(e.year),i=!F(e.month)||!F(e.day),a=r||i,l=e.weekYear||e.weekNumber;if((a||s)&&l)throw new o("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(i&&s)throw new o("Can't mix ordinal dates with month/day");let u;n?u=vn({...wn(this.c),...e}):F(e.ordinal)?(u={...this.toObject(),...e},F(e.day)&&(u.day=Math.min(J(u.year,u.month),u.day))):u=Sn({...Tn(this.c),...e});const[c,h]=In(u,this.o,this.zone);return Nn(this,{ts:c,o:h})}plus(t){return this.isValid?Nn(this,Vn(this,qe.fromDurationLike(t))):this}minus(t){return this.isValid?Nn(this,Vn(this,qe.fromDurationLike(t).negate())):this}startOf(t){if(!this.isValid)return this;const e={},n=qe.normalizeUnit(t);switch(n){case"years":e.month=1;case"quarters":case"months":e.day=1;case"weeks":case"days":e.hour=0;case"hours":e.minute=0;case"minutes":e.second=0;case"seconds":e.millisecond=0}if("weeks"===n&&(e.weekday=1),"quarters"===n){const t=Math.ceil(this.month/3);e.month=3*(t-1)+1}return this.set(e)}endOf(t){return this.isValid?this.plus({[t]:1}).startOf(t).minus(1):this}toFormat(t,e={}){return this.isValid?Tt.create(this.loc.redefaultToEN(e)).formatDateTimeFromString(this,t):On}toLocaleString(t=m,e={}){return this.isValid?Tt.create(this.loc.clone(e),t).formatDateTime(this):On}toLocaleParts(t={}){return this.isValid?Tt.create(this.loc.clone(t),t).formatDateTimeParts(this):[]}toISO({format:t="extended",suppressSeconds:e=!1,suppressMilliseconds:n=!1,includeOffset:s=!0,extendedZone:r=!1}={}){if(!this.isValid)return null;const i="extended"===t;let o=jn(this,i);return o+="T",o+=An(this,i,e,n,s,r),o}toISODate({format:t="extended"}={}){return this.isValid?jn(this,"extended"===t):null}toISOWeekDate(){return Fn(this,"kkkk-'W'WW-c")}toISOTime({suppressMilliseconds:t=!1,suppressSeconds:e=!1,includeOffset:n=!0,includePrefix:s=!1,extendedZone:r=!1,format:i="extended"}={}){return this.isValid?(s?"T":"")+An(this,"extended"===i,e,t,n,r):null}toRFC2822(){return Fn(this,"EEE, dd LLL yyyy HH:mm:ss ZZZ",!1)}toHTTP(){return Fn(this.toUTC(),"EEE, dd LLL yyyy HH:mm:ss 'GMT'")}toSQLDate(){return this.isValid?jn(this,!0):null}toSQLTime({includeOffset:t=!0,includeZone:e=!1,includeOffsetSpace:n=!0}={}){let s="HH:mm:ss.SSS";return(e||t)&&(n&&(s+=" "),e?s+="z":t&&(s+="ZZ")),Fn(this,s,!0)}toSQL(t={}){return this.isValid?`${this.toSQLDate()} ${this.toSQLTime(t)}`:null}toString(){return this.isValid?this.toISO():On}valueOf(){return this.toMillis()}toMillis(){return this.isValid?this.ts:NaN}toSeconds(){return this.isValid?this.ts/1e3:NaN}toUnixInteger(){return this.isValid?Math.floor(this.ts/1e3):NaN}toJSON(){return this.toISO()}toBSON(){return this.toJSDate()}toObject(t={}){if(!this.isValid)return{};const e={...this.c};return t.includeConfig&&(e.outputCalendar=this.outputCalendar,e.numberingSystem=this.loc.numberingSystem,e.locale=this.loc.locale),e}toJSDate(){return new Date(this.isValid?this.ts:NaN)}diff(t,e="milliseconds",n={}){if(!this.isValid||!t.isValid)return qe.invalid("created by diffing an invalid DateTime");const s={locale:this.locale,numberingSystem:this.numberingSystem,...n},r=(a=e,Array.isArray(a)?a:[a]).map(qe.normalizeUnit),i=t.valueOf()>this.valueOf(),o=function(t,e,n,s){let[r,i,o,a]=function(t,e,n){const s=[["years",(t,e)=>e.year-t.year],["quarters",(t,e)=>e.quarter-t.quarter],["months",(t,e)=>e.month-t.month+12*(e.year-t.year)],["weeks",(t,e)=>{const n=Je(t,e);return(n-n%7)/7}],["days",Je]],r={};let i,o;for(const[a,l]of s)if(n.indexOf(a)>=0){i=a;let n=l(t,e);o=t.plus({[a]:n}),o>e?(t=t.plus({[a]:n-1}),n-=1):t=o,r[a]=n}return[t,r,o,i]}(t,e,n);const l=e-r,u=n.filter((t=>["hours","minutes","seconds","milliseconds"].indexOf(t)>=0));0===u.length&&(o<e&&(o=r.plus({[a]:1})),o!==r&&(i[a]=(i[a]||0)+l/(o-r)));const c=qe.fromObject(i,s);return u.length>0?qe.fromMillis(l,s).shiftTo(...u).plus(c):c}(i?this:t,i?t:this,r,s);var a;return i?o.negate():o}diffNow(t="milliseconds",e={}){return this.diff(Yn.now(),t,e)}until(t){return this.isValid?He.fromDateTimes(this,t):this}hasSame(t,e){if(!this.isValid)return!1;const n=t.valueOf(),s=this.setZone(t.zone,{keepLocalTime:!0});return s.startOf(e)<=n&&n<=s.endOf(e)}equals(t){return this.isValid&&t.isValid&&this.valueOf()===t.valueOf()&&this.zone.equals(t.zone)&&this.loc.equals(t.loc)}toRelative(t={}){if(!this.isValid)return null;const e=t.base||Yn.fromObject({},{zone:this.zone}),n=t.padding?this<e?-t.padding:t.padding:0;let s=["years","months","days","hours","minutes","seconds"],r=t.unit;return Array.isArray(t.unit)&&(s=t.unit,r=void 0),Gn(e,this.plus(n),{...t,numeric:"always",units:s,unit:r})}toRelativeCalendar(t={}){return this.isValid?Gn(t.base||Yn.fromObject({},{zone:this.zone}),this,{...t,numeric:"auto",units:["years","months","days"],calendary:!0}):null}static min(...t){if(!t.every(Yn.isDateTime))throw new l("min requires all arguments be DateTimes");return Z(t,(t=>t.valueOf()),Math.min)}static max(...t){if(!t.every(Yn.isDateTime))throw new l("max requires all arguments be DateTimes");return Z(t,(t=>t.valueOf()),Math.max)}static fromFormatExplain(t,e,n={}){const{locale:s=null,numberingSystem:r=null}=n;return hn(Xt.fromOpts({locale:s,numberingSystem:r,defaultToEN:!0}),t,e)}static fromStringExplain(t,e,n={}){return Yn.fromFormatExplain(t,e,n)}static get DATE_SHORT(){return m}static get DATE_MED(){return f}static get DATE_MED_WITH_WEEKDAY(){return y}static get DATE_FULL(){return p}static get DATE_HUGE(){return g}static get TIME_SIMPLE(){return _}static get TIME_WITH_SECONDS(){return w}static get TIME_WITH_SHORT_OFFSET(){return v}static get TIME_WITH_LONG_OFFSET(){return T}static get TIME_24_SIMPLE(){return S}static get TIME_24_WITH_SECONDS(){return b}static get TIME_24_WITH_SHORT_OFFSET(){return k}static get TIME_24_WITH_LONG_OFFSET(){return O}static get DATETIME_SHORT(){return M}static get DATETIME_SHORT_WITH_SECONDS(){return E}static get DATETIME_MED(){return x}static get DATETIME_MED_WITH_SECONDS(){return N}static get DATETIME_MED_WITH_WEEKDAY(){return C}static get DATETIME_FULL(){return D}static get DATETIME_FULL_WITH_SECONDS(){return I}static get DATETIME_HUGE(){return V}static get DATETIME_HUGE_WITH_SECONDS(){return L}}function Jn(t){if(Yn.isDateTime(t))return t;if(t&&t.valueOf&&j(t.valueOf()))return Yn.fromJSDate(t);if(t&&"object"==typeof t)return Yn.fromObject(t);throw new l(`Unknown datetime argument: ${t}, of type ${typeof t}`)}e.DateTime=Yn,e.Duration=qe,e.FixedOffsetZone=Dt,e.IANAZone=Nt,e.Info=Ye,e.Interval=He,e.InvalidZone=It,e.Settings=Pt,e.SystemZone=Ot,e.VERSION="3.0.1",e.Zone=bt},849:(t,e,n)=>{n.r(e)},358:(t,e,n)=>{n.r(e)},26:(t,e,n)=>{n.r(e)},931:(t,e,n)=>{n.r(e)},718:(t,e,n)=>{n.r(e)},737:(t,e,n)=>{n.r(e)},197:(t,e,n)=>{n.r(e)},400:(t,e,n)=>{n.r(e),n.d(e,{render:()=>Z,hydrate:()=>P,createElement:()=>p,h:()=>p,Fragment:()=>w,createRef:()=>_,isValidElement:()=>o,Component:()=>v,cloneElement:()=>R,createContext:()=>W,toChildArray:()=>E,options:()=>r});var s,r,i,o,a,l,u,c,h={},d=[],m=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function f(t,e){for(var n in e)t[n]=e[n];return t}function y(t){var e=t.parentNode;e&&e.removeChild(t)}function p(t,e,n){var r,i,o,a={};for(o in e)"key"==o?r=e[o]:"ref"==o?i=e[o]:a[o]=e[o];if(arguments.length>2&&(a.children=arguments.length>3?s.call(arguments,2):n),"function"==typeof t&&null!=t.defaultProps)for(o in t.defaultProps)void 0===a[o]&&(a[o]=t.defaultProps[o]);return g(t,a,r,i,null)}function g(t,e,n,s,o){var a={type:t,props:e,key:n,ref:s,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==o?++i:o};return null==o&&null!=r.vnode&&r.vnode(a),a}function _(){return{current:null}}function w(t){return t.children}function v(t,e){this.props=t,this.context=e}function T(t,e){if(null==e)return t.__?T(t.__,t.__.__k.indexOf(t)+1):null;for(var n;e<t.__k.length;e++)if(null!=(n=t.__k[e])&&null!=n.__e)return n.__e;return"function"==typeof t.type?T(t):null}function S(t){var e,n;if(null!=(t=t.__)&&null!=t.__c){for(t.__e=t.__c.base=null,e=0;e<t.__k.length;e++)if(null!=(n=t.__k[e])&&null!=n.__e){t.__e=t.__c.base=n.__e;break}return S(t)}}function b(t){(!t.__d&&(t.__d=!0)&&a.push(t)&&!k.__r++||u!==r.debounceRendering)&&((u=r.debounceRendering)||l)(k)}function k(){for(var t;k.__r=a.length;)t=a.sort((function(t,e){return t.__v.__b-e.__v.__b})),a=[],t.some((function(t){var e,n,s,r,i,o;t.__d&&(i=(r=(e=t).__v).__e,(o=e.__P)&&(n=[],(s=f({},r)).__v=r.__v+1,V(o,r,s,e.__n,void 0!==o.ownerSVGElement,null!=r.__h?[i]:null,n,null==i?T(r):i,r.__h),L(n,r),r.__e!=i&&S(r)))}))}function O(t,e,n,s,r,i,o,a,l,u){var c,m,f,y,p,_,v,S=s&&s.__k||d,b=S.length;for(n.__k=[],c=0;c<e.length;c++)if(null!=(y=n.__k[c]=null==(y=e[c])||"boolean"==typeof y?null:"string"==typeof y||"number"==typeof y||"bigint"==typeof y?g(null,y,null,null,y):Array.isArray(y)?g(w,{children:y},null,null,null):y.__b>0?g(y.type,y.props,y.key,null,y.__v):y)){if(y.__=n,y.__b=n.__b+1,null===(f=S[c])||f&&y.key==f.key&&y.type===f.type)S[c]=void 0;else for(m=0;m<b;m++){if((f=S[m])&&y.key==f.key&&y.type===f.type){S[m]=void 0;break}f=null}V(t,y,f=f||h,r,i,o,a,l,u),p=y.__e,(m=y.ref)&&f.ref!=m&&(v||(v=[]),f.ref&&v.push(f.ref,null,y),v.push(m,y.__c||p,y)),null!=p?(null==_&&(_=p),"function"==typeof y.type&&y.__k===f.__k?y.__d=l=M(y,l,t):l=x(t,y,f,S,p,l),"function"==typeof n.type&&(n.__d=l)):l&&f.__e==l&&l.parentNode!=t&&(l=T(f))}for(n.__e=_,c=b;c--;)null!=S[c]&&("function"==typeof n.type&&null!=S[c].__e&&S[c].__e==n.__d&&(n.__d=T(s,c+1)),A(S[c],S[c]));if(v)for(c=0;c<v.length;c++)j(v[c],v[++c],v[++c])}function M(t,e,n){for(var s,r=t.__k,i=0;r&&i<r.length;i++)(s=r[i])&&(s.__=t,e="function"==typeof s.type?M(s,e,n):x(n,s,s,r,s.__e,e));return e}function E(t,e){return e=e||[],null==t||"boolean"==typeof t||(Array.isArray(t)?t.some((function(t){E(t,e)})):e.push(t)),e}function x(t,e,n,s,r,i){var o,a,l;if(void 0!==e.__d)o=e.__d,e.__d=void 0;else if(null==n||r!=i||null==r.parentNode)t:if(null==i||i.parentNode!==t)t.appendChild(r),o=null;else{for(a=i,l=0;(a=a.nextSibling)&&l<s.length;l+=2)if(a==r)break t;t.insertBefore(r,i),o=i}return void 0!==o?o:r.nextSibling}function N(t,e,n){"-"===e[0]?t.setProperty(e,n):t[e]=null==n?"":"number"!=typeof n||m.test(e)?n:n+"px"}function C(t,e,n,s,r){var i;t:if("style"===e)if("string"==typeof n)t.style.cssText=n;else{if("string"==typeof s&&(t.style.cssText=s=""),s)for(e in s)n&&e in n||N(t.style,e,"");if(n)for(e in n)s&&n[e]===s[e]||N(t.style,e,n[e])}else if("o"===e[0]&&"n"===e[1])i=e!==(e=e.replace(/Capture$/,"")),e=e.toLowerCase()in t?e.toLowerCase().slice(2):e.slice(2),t.l||(t.l={}),t.l[e+i]=n,n?s||t.addEventListener(e,i?I:D,i):t.removeEventListener(e,i?I:D,i);else if("dangerouslySetInnerHTML"!==e){if(r)e=e.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("href"!==e&&"list"!==e&&"form"!==e&&"tabIndex"!==e&&"download"!==e&&e in t)try{t[e]=null==n?"":n;break t}catch(t){}"function"==typeof n||(null!=n&&(!1!==n||"a"===e[0]&&"r"===e[1])?t.setAttribute(e,n):t.removeAttribute(e))}}function D(t){this.l[t.type+!1](r.event?r.event(t):t)}function I(t){this.l[t.type+!0](r.event?r.event(t):t)}function V(t,e,n,s,i,o,a,l,u){var c,h,d,m,y,p,g,_,T,S,b,k,M,E=e.type;if(void 0!==e.constructor)return null;null!=n.__h&&(u=n.__h,l=e.__e=n.__e,e.__h=null,o=[l]),(c=r.__b)&&c(e);try{t:if("function"==typeof E){if(_=e.props,T=(c=E.contextType)&&s[c.__c],S=c?T?T.props.value:c.__:s,n.__c?g=(h=e.__c=n.__c).__=h.__E:("prototype"in E&&E.prototype.render?e.__c=h=new E(_,S):(e.__c=h=new v(_,S),h.constructor=E,h.render=$),T&&T.sub(h),h.props=_,h.state||(h.state={}),h.context=S,h.__n=s,d=h.__d=!0,h.__h=[]),null==h.__s&&(h.__s=h.state),null!=E.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=f({},h.__s)),f(h.__s,E.getDerivedStateFromProps(_,h.__s))),m=h.props,y=h.state,d)null==E.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else{if(null==E.getDerivedStateFromProps&&_!==m&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(_,S),!h.__e&&null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(_,h.__s,S)||e.__v===n.__v){h.props=_,h.state=h.__s,e.__v!==n.__v&&(h.__d=!1),h.__v=e,e.__e=n.__e,e.__k=n.__k,e.__k.forEach((function(t){t&&(t.__=e)})),h.__h.length&&a.push(h);break t}null!=h.componentWillUpdate&&h.componentWillUpdate(_,h.__s,S),null!=h.componentDidUpdate&&h.__h.push((function(){h.componentDidUpdate(m,y,p)}))}if(h.context=S,h.props=_,h.__v=e,h.__P=t,b=r.__r,k=0,"prototype"in E&&E.prototype.render)h.state=h.__s,h.__d=!1,b&&b(e),c=h.render(h.props,h.state,h.context);else do{h.__d=!1,b&&b(e),c=h.render(h.props,h.state,h.context),h.state=h.__s}while(h.__d&&++k<25);h.state=h.__s,null!=h.getChildContext&&(s=f(f({},s),h.getChildContext())),d||null==h.getSnapshotBeforeUpdate||(p=h.getSnapshotBeforeUpdate(m,y)),M=null!=c&&c.type===w&&null==c.key?c.props.children:c,O(t,Array.isArray(M)?M:[M],e,n,s,i,o,a,l,u),h.base=e.__e,e.__h=null,h.__h.length&&a.push(h),g&&(h.__E=h.__=null),h.__e=!1}else null==o&&e.__v===n.__v?(e.__k=n.__k,e.__e=n.__e):e.__e=F(n.__e,e,n,s,i,o,a,u);(c=r.diffed)&&c(e)}catch(t){e.__v=null,(u||null!=o)&&(e.__e=l,e.__h=!!u,o[o.indexOf(l)]=null),r.__e(t,e,n)}}function L(t,e){r.__c&&r.__c(e,t),t.some((function(e){try{t=e.__h,e.__h=[],t.some((function(t){t.call(e)}))}catch(t){r.__e(t,e.__v)}}))}function F(t,e,n,r,i,o,a,l){var u,c,d,m=n.props,f=e.props,p=e.type,g=0;if("svg"===p&&(i=!0),null!=o)for(;g<o.length;g++)if((u=o[g])&&"setAttribute"in u==!!p&&(p?u.localName===p:3===u.nodeType)){t=u,o[g]=null;break}if(null==t){if(null===p)return document.createTextNode(f);t=i?document.createElementNS("http://www.w3.org/2000/svg",p):document.createElement(p,f.is&&f),o=null,l=!1}if(null===p)m===f||l&&t.data===f||(t.data=f);else{if(o=o&&s.call(t.childNodes),c=(m=n.props||h).dangerouslySetInnerHTML,d=f.dangerouslySetInnerHTML,!l){if(null!=o)for(m={},g=0;g<t.attributes.length;g++)m[t.attributes[g].name]=t.attributes[g].value;(d||c)&&(d&&(c&&d.__html==c.__html||d.__html===t.innerHTML)||(t.innerHTML=d&&d.__html||""))}if(function(t,e,n,s,r){var i;for(i in n)"children"===i||"key"===i||i in e||C(t,i,null,n[i],s);for(i in e)r&&"function"!=typeof e[i]||"children"===i||"key"===i||"value"===i||"checked"===i||n[i]===e[i]||C(t,i,e[i],n[i],s)}(t,f,m,i,l),d)e.__k=[];else if(g=e.props.children,O(t,Array.isArray(g)?g:[g],e,n,r,i&&"foreignObject"!==p,o,a,o?o[0]:n.__k&&T(n,0),l),null!=o)for(g=o.length;g--;)null!=o[g]&&y(o[g]);l||("value"in f&&void 0!==(g=f.value)&&(g!==t.value||"progress"===p&&!g||"option"===p&&g!==m.value)&&C(t,"value",g,m.value,!1),"checked"in f&&void 0!==(g=f.checked)&&g!==t.checked&&C(t,"checked",g,m.checked,!1))}return t}function j(t,e,n){try{"function"==typeof t?t(e):t.current=e}catch(t){r.__e(t,n)}}function A(t,e,n){var s,i;if(r.unmount&&r.unmount(t),(s=t.ref)&&(s.current&&s.current!==t.__e||j(s,null,e)),null!=(s=t.__c)){if(s.componentWillUnmount)try{s.componentWillUnmount()}catch(t){r.__e(t,e)}s.base=s.__P=null}if(s=t.__k)for(i=0;i<s.length;i++)s[i]&&A(s[i],e,"function"!=typeof t.type);n||null==t.__e||y(t.__e),t.__e=t.__d=void 0}function $(t,e,n){return this.constructor(t,n)}function Z(t,e,n){var i,o,a;r.__&&r.__(t,e),o=(i="function"==typeof n)?null:n&&n.__k||e.__k,a=[],V(e,t=(!i&&n||e).__k=p(w,null,[t]),o||h,h,void 0!==e.ownerSVGElement,!i&&n?[n]:o?null:e.firstChild?s.call(e.childNodes):null,a,!i&&n?n:o?o.__e:e.firstChild,i),L(a,t)}function P(t,e){Z(t,e,P)}function R(t,e,n){var r,i,o,a=f({},t.props);for(o in e)"key"==o?r=e[o]:"ref"==o?i=e[o]:a[o]=e[o];return arguments.length>2&&(a.children=arguments.length>3?s.call(arguments,2):n),g(t.type,a,r||t.key,i||t.ref,null)}function W(t,e){var n={__c:e="__cC"+c++,__:t,Consumer:function(t,e){return t.children(e)},Provider:function(t){var n,s;return this.getChildContext||(n=[],(s={})[e]=this,this.getChildContext=function(){return s},this.shouldComponentUpdate=function(t){this.props.value!==t.value&&n.some(b)},this.sub=function(t){n.push(t);var e=t.componentWillUnmount;t.componentWillUnmount=function(){n.splice(n.indexOf(t),1),e&&e.call(t)}}),t.children}};return n.Provider.__=n.Consumer.contextType=n}s=d.slice,r={__e:function(t,e,n,s){for(var r,i,o;e=e.__;)if((r=e.__c)&&!r.__)try{if((i=r.constructor)&&null!=i.getDerivedStateFromError&&(r.setState(i.getDerivedStateFromError(t)),o=r.__d),null!=r.componentDidCatch&&(r.componentDidCatch(t,s||{}),o=r.__d),o)return r.__E=r}catch(e){t=e}throw t}},i=0,o=function(t){return null!=t&&void 0===t.constructor},v.prototype.setState=function(t,e){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=f({},this.state),"function"==typeof t&&(t=t(f({},n),this.props)),t&&f(n,t),null!=t&&this.__v&&(e&&this.__h.push(e),b(this))},v.prototype.forceUpdate=function(t){this.__v&&(this.__e=!0,t&&this.__h.push(t),b(this))},v.prototype.render=w,a=[],l="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,k.__r=0,c=0}},e={};function n(s){if(e[s])return e[s].exports;var r=e[s]={exports:{}};return t[s](r,r.exports,n),r.exports}n.d=(t,e)=>{for(var s in e)n.o(e,s)&&!n.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{const t=n(400),e=n(114);n(197);const s=document.querySelector("#app");t.render(t.h(e.Game,null),s)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zaGlmdHkud2ViLy4vc291cmNlL0dhbWUudHN4Iiwid2VicGFjazovL3NoaWZ0eS53ZWIvLi9zb3VyY2UvR2FtZUNvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vc2hpZnR5LndlYi8uL3NvdXJjZS9HYW1lVGltZXIudHMiLCJ3ZWJwYWNrOi8vc2hpZnR5LndlYi8uL3NvdXJjZS9MYXVuY2hlci9MYXVuY2hlci50c3giLCJ3ZWJwYWNrOi8vc2hpZnR5LndlYi8uL3NvdXJjZS9Nb2RhbC9Nb2RhbC50c3giLCJ3ZWJwYWNrOi8vc2hpZnR5LndlYi8uL3NvdXJjZS9TaGlmdENvdW50ZXIvU2hpZnRDb3VudGVyLnRzeCIsIndlYnBhY2s6Ly9zaGlmdHkud2ViLy4vc291cmNlL1N0b3JlTGV2ZWwvRXhwZXJpZW5jZU1vZGFsLnRzeCIsIndlYnBhY2s6Ly9zaGlmdHkud2ViLy4vc291cmNlL1N0b3JlTGV2ZWwvRmFpbE1vZGFsLnRzeCIsIndlYnBhY2s6Ly9zaGlmdHkud2ViLy4vc291cmNlL1N0b3JlTGV2ZWwvU3RvcmVMZXZlbC50c3giLCJ3ZWJwYWNrOi8vc2hpZnR5LndlYi8uL3NvdXJjZS9TdG9yZUxldmVsL1N0b3JlTGV2ZWxDb250cm9sbGVyLnRzIiwid2VicGFjazovL3NoaWZ0eS53ZWIvLi9zb3VyY2UvU3RvcmVMZXZlbC9XaWRnZXQudHN4Iiwid2VicGFjazovL3NoaWZ0eS53ZWIvLi9zb3VyY2UvVGltZXIvVGltZXIudHN4Iiwid2VicGFjazovL3NoaWZ0eS53ZWIvLi9zb3VyY2UvdXRpbC9nZXRSYW5kb21JbnRlZ2VyLnRzIiwid2VicGFjazovL3NoaWZ0eS53ZWIvLi9zb3VyY2UvdXRpbC9pc1NhZmFyaS50cyIsIndlYnBhY2s6Ly9zaGlmdHkud2ViLy4vbm9kZV9tb2R1bGVzL2x1eG9uL2J1aWxkL25vZGUvbHV4b24uanMiLCJ3ZWJwYWNrOi8vc2hpZnR5LndlYi8uL25vZGVfbW9kdWxlcy9wcmVhY3QvZGlzdC9wcmVhY3QubW9kdWxlLmpzIiwid2VicGFjazovL3NoaWZ0eS53ZWIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vc2hpZnR5LndlYi93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vc2hpZnR5LndlYi93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3NoaWZ0eS53ZWIvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9zaGlmdHkud2ViLy4vc291cmNlL21haW4udHN4Il0sIm5hbWVzIjpbIkdhbWUiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInN1cGVyIiwiR2FtZUNvbnRyb2xsZXIiLCJpbml0IiwidGhpcyIsInN0YXRlIiwic2V0U3RhdGUiLCJiaW5kIiwicmVuZGVyIiwiY2xhc3MiLCJUaW1lciIsInVudGlsIiwiZW5kVGltZSIsIlNoaWZ0Q291bnRlciIsInJlbmRlckxldmVsIiwibGV2ZWwiLCJOT19MRVZFTCIsIkxhdW5jaGVyIiwiU1RPUkUiLCJTdG9yZUxldmVsIiwiZ2V0U3RhdGUiLCJpbml0aWFsU3RhdGUiLCJzdGFydFRpbWUiLCJEYXRlVGltZSIsImludmFsaWQiLCJzdGFydCIsIm5vdyIsInBsdXMiLCJzZWNvbmRzIiwiR2FtZVRpbWVyIiwib25UaWNrIiwic3RvcCIsImNvbnNvbGUiLCJsb2ciLCJHYW1lVGltZXJTdGF0dXMiLCJ0aWNrQ291bnQiLCJ0aWNrSGFuZGxlcnMiLCJpc1J1bm5pbmciLCJtdWx0aXBsaWVyIiwic2V0VGltZW91dCIsInRpY2siLCJwYXVzZSIsImNsZWFyVGltZW91dCIsIm5leHRUaWNrIiwiaGFuZGxlciIsInB1c2giLCJsZW5ndGgiLCJmb3JFYWNoIiwiZ2V0UmFuZG9tSW50ZWdlciIsInNyYyIsImhlaWdodCIsIndpZHRoIiwidHlwZSIsIm9uQ2xpY2siLCJlIiwiTW9kYWwiLCJzdHlsZSIsInByb3BzIiwiaXNPcGVuIiwieUFkanVzdCIsInhBZGp1c3QiLCJjb250ZW50IiwiY2xzIiwiY29tcG9uZW50RGlkTW91bnQiLCJpc1NhZmFyaSIsIm9ic2VydmVyIiwiUGVyZm9ybWFuY2VPYnNlcnZlciIsImVudHJ5TGlzdCIsImdldEVudHJpZXMiLCJyZWR1Y2UiLCJlbnRyeSIsImluZGV4IiwidmFsdWUiLCJvYnNlcnZlIiwiYnVmZmVyZWQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImRpc2Nvbm5lY3QiLCJ0b0ZpeGVkIiwiRXhwZXJpZW5jZU1vZGFsIiwib25Ub3VjaFN0YXJ0IiwiU3RvcmVMZXZlbENvbnRyb2xsZXIiLCJjbGVhckV4cGVyaWVuY2UiLCJjbGlja1JhdGluZ3MiLCJFeHBlcmllbmNlVGhhbmtzTW9kYWwiLCJjbGVhclJhdGluZ3NUaGFua3MiLCJmbGV4IiwiRmFpbE1vZGFsIiwiZG91YmxlRmFpbCIsImhyZWYiLCJjbGVhckZhaWwiLCJjbGlja3MiLCJjbGljayIsIndpZGdldHMiLCJtYXAiLCJ3aWRnZXRTdGF0ZSIsIldpZGdldCIsInNob3dGYWlsTW9kYWwiLCJtb2RhbEFkanVzdFgiLCJtb2RhbEFkanVzdFkiLCJzaG93RXhwZXJpZW5jZU1vZGFsIiwic2hvd0V4cGVyaWVuY2VUaGFua3NNb2RhbCIsIldpZGdldFN0YXR1cyIsImhhc1Nob3duRXhwZXJpZW5jZU1vZGFsIiwiaXNPYmplY3RpdmVWaXNpYmxlIiwiaSIsIndpZGdldCIsInN0YXR1cyIsIkVNUFRZIiwidW5sb2FkZWRXaWRnZXRzIiwiZmlsdGVyIiwidyIsInNldExvYWRpbmciLCJ1cGRhdGVXaWRnZXRTdGF0ZSIsImNoYW5nZWFibGVXaWRnZXRzIiwiTE9BRElORyIsIk9CSkVDVElWRSIsIkNPTlRFTlQiLCJldmVudCIsInN0b3BQcm9wYWdhdGlvbiIsIkNPTVBMRVRFIiwiYWxlcnQiLCJyZXNldCIsInJlbmRlcldpZGdldCIsImdyb3ciLCJnZXRSYW5kb21Db250ZW50IiwiRXJyb3IiLCJvcHRzIiwibWlsbGlzZWNvbmRzIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImlzVmFsaWQiLCJkaWZmIiwic2hpZnRUbyIsIk1hdGgiLCJtYXgiLCJjbGVhckludGVydmFsIiwidG9TdHJpbmciLCJwYWRTdGFydCIsInBhZEVuZCIsIm1pbiIsImZsb29yIiwicmFuZG9tIiwid2luZG93IiwiR2VzdHVyZUV2ZW50IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiTHV4b25FcnJvciIsIkludmFsaWREYXRlVGltZUVycm9yIiwicmVhc29uIiwidG9NZXNzYWdlIiwiSW52YWxpZEludGVydmFsRXJyb3IiLCJJbnZhbGlkRHVyYXRpb25FcnJvciIsIkNvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yIiwiSW52YWxpZFVuaXRFcnJvciIsInVuaXQiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsIlpvbmVJc0Fic3RyYWN0RXJyb3IiLCJuIiwicyIsImwiLCJEQVRFX1NIT1JUIiwieWVhciIsIm1vbnRoIiwiZGF5IiwiREFURV9NRUQiLCJEQVRFX01FRF9XSVRIX1dFRUtEQVkiLCJ3ZWVrZGF5IiwiREFURV9GVUxMIiwiREFURV9IVUdFIiwiVElNRV9TSU1QTEUiLCJob3VyIiwibWludXRlIiwiVElNRV9XSVRIX1NFQ09ORFMiLCJzZWNvbmQiLCJUSU1FX1dJVEhfU0hPUlRfT0ZGU0VUIiwidGltZVpvbmVOYW1lIiwiVElNRV9XSVRIX0xPTkdfT0ZGU0VUIiwiVElNRV8yNF9TSU1QTEUiLCJob3VyQ3ljbGUiLCJUSU1FXzI0X1dJVEhfU0VDT05EUyIsIlRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQiLCJUSU1FXzI0X1dJVEhfTE9OR19PRkZTRVQiLCJEQVRFVElNRV9TSE9SVCIsIkRBVEVUSU1FX1NIT1JUX1dJVEhfU0VDT05EUyIsIkRBVEVUSU1FX01FRCIsIkRBVEVUSU1FX01FRF9XSVRIX1NFQ09ORFMiLCJEQVRFVElNRV9NRURfV0lUSF9XRUVLREFZIiwiREFURVRJTUVfRlVMTCIsIkRBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTIiwiREFURVRJTUVfSFVHRSIsIkRBVEVUSU1FX0hVR0VfV0lUSF9TRUNPTkRTIiwiaXNVbmRlZmluZWQiLCJvIiwiaXNOdW1iZXIiLCJpc0ludGVnZXIiLCJoYXNSZWxhdGl2ZSIsIkludGwiLCJSZWxhdGl2ZVRpbWVGb3JtYXQiLCJiZXN0QnkiLCJhcnIiLCJieSIsImNvbXBhcmUiLCJiZXN0IiwibmV4dCIsInBhaXIiLCJoYXNPd25Qcm9wZXJ0eSIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJjYWxsIiwiaW50ZWdlckJldHdlZW4iLCJ0aGluZyIsImJvdHRvbSIsInRvcCIsImlucHV0IiwicGFkZGVkIiwicGFyc2VJbnRlZ2VyIiwic3RyaW5nIiwicGFyc2VJbnQiLCJwYXJzZUZsb2F0aW5nIiwicGFyc2VGbG9hdCIsInBhcnNlTWlsbGlzIiwiZnJhY3Rpb24iLCJmIiwicm91bmRUbyIsIm51bWJlciIsImRpZ2l0cyIsInRvd2FyZFplcm8iLCJmYWN0b3IiLCJ0cnVuYyIsInJvdW5kIiwiaXNMZWFwWWVhciIsImRheXNJblllYXIiLCJkYXlzSW5Nb250aCIsIm1vZE1vbnRoIiwieCIsIm9ialRvTG9jYWxUUyIsImQiLCJEYXRlIiwiVVRDIiwibWlsbGlzZWNvbmQiLCJzZXRVVENGdWxsWWVhciIsImdldFVUQ0Z1bGxZZWFyIiwid2Vla3NJbldlZWtZZWFyIiwid2Vla1llYXIiLCJwMSIsImxhc3QiLCJwMiIsInVudHJ1bmNhdGVZZWFyIiwicGFyc2Vab25lSW5mbyIsInRzIiwib2Zmc2V0Rm9ybWF0IiwibG9jYWxlIiwidGltZVpvbmUiLCJkYXRlIiwiaW50bE9wdHMiLCJtb2RpZmllZCIsInBhcnNlZCIsIkRhdGVUaW1lRm9ybWF0IiwiZm9ybWF0VG9QYXJ0cyIsImZpbmQiLCJtIiwidG9Mb3dlckNhc2UiLCJzaWduZWRPZmZzZXQiLCJvZmZIb3VyU3RyIiwib2ZmTWludXRlU3RyIiwib2ZmSG91ciIsIk51bWJlciIsImlzTmFOIiwib2ZmTWluIiwiaXMiLCJhc051bWJlciIsIm51bWVyaWNWYWx1ZSIsIm5vcm1hbGl6ZU9iamVjdCIsIm5vcm1hbGl6ZXIiLCJub3JtYWxpemVkIiwidSIsInYiLCJmb3JtYXRPZmZzZXQiLCJvZmZzZXQiLCJmb3JtYXQiLCJob3VycyIsImFicyIsIm1pbnV0ZXMiLCJzaWduIiwiUmFuZ2VFcnJvciIsInRpbWVPYmplY3QiLCJrZXlzIiwiYSIsImsiLCJwaWNrIiwiaWFuYVJlZ2V4IiwibW9udGhzTG9uZyIsIm1vbnRoc1Nob3J0IiwibW9udGhzTmFycm93IiwibW9udGhzIiwid2Vla2RheXNMb25nIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzTmFycm93Iiwid2Vla2RheXMiLCJtZXJpZGllbXMiLCJlcmFzTG9uZyIsImVyYXNTaG9ydCIsImVyYXNOYXJyb3ciLCJlcmFzIiwic3RyaW5naWZ5VG9rZW5zIiwic3BsaXRzIiwidG9rZW5Ub1N0cmluZyIsInRva2VuIiwibGl0ZXJhbCIsInZhbCIsIm1hY3JvVG9rZW5Ub0Zvcm1hdE9wdHMiLCJEIiwiREQiLCJEREQiLCJEREREIiwidCIsInR0IiwidHR0IiwidHR0dCIsIlQiLCJUVCIsIlRUVCIsIlRUVFQiLCJmZiIsImZmZiIsImZmZmYiLCJGIiwiRkYiLCJGRkYiLCJGRkZGIiwiRm9ybWF0dGVyIiwic3RhdGljIiwiZm10IiwiY3VycmVudCIsImN1cnJlbnRGdWxsIiwiYnJhY2tldGVkIiwiYyIsImNoYXJBdCIsImZvcm1hdE9wdHMiLCJsb2MiLCJzeXN0ZW1Mb2MiLCJmb3JtYXRXaXRoU3lzdGVtRGVmYXVsdCIsImR0IiwicmVkZWZhdWx0VG9TeXN0ZW0iLCJkdEZvcm1hdHRlciIsImZvcm1hdERhdGVUaW1lIiwiZm9ybWF0RGF0ZVRpbWVQYXJ0cyIsInJlc29sdmVkT3B0aW9ucyIsIm51bSIsInAiLCJmb3JjZVNpbXBsZSIsInBhZFRvIiwibnVtYmVyRm9ybWF0dGVyIiwiZm9ybWF0RGF0ZVRpbWVGcm9tU3RyaW5nIiwia25vd25FbmdsaXNoIiwibGlzdGluZ01vZGUiLCJ1c2VEYXRlVGltZUZvcm1hdHRlciIsIm91dHB1dENhbGVuZGFyIiwiZXh0cmFjdCIsImlzT2Zmc2V0Rml4ZWQiLCJhbGxvd1oiLCJ6b25lIiwic3RhbmRhbG9uZSIsIm1vbnRoRm9yRGF0ZVRpbWUiLCJ3ZWVrZGF5Rm9yRGF0ZVRpbWUiLCJtYXliZU1hY3JvIiwiZXJhIiwiZXJhRm9yRGF0ZVRpbWUiLCJwYXJzZUZvcm1hdCIsIm9mZnNldE5hbWUiLCJ6b25lTmFtZSIsIm1lcmlkaWVtRm9yRGF0ZVRpbWUiLCJzbGljZSIsIndlZWtOdW1iZXIiLCJvcmRpbmFsIiwicXVhcnRlciIsImZvcm1hdER1cmF0aW9uRnJvbVN0cmluZyIsImR1ciIsInRva2VuVG9GaWVsZCIsInRva2VucyIsInJlYWxUb2tlbnMiLCJmb3VuZCIsImNvbmNhdCIsImxpbGR1ciIsIm1hcHBlZCIsImdldCIsIkludmFsaWQiLCJleHBsYW5hdGlvbiIsIlpvbmUiLCJuYW1lIiwiaWFuYU5hbWUiLCJpc1VuaXZlcnNhbCIsImVxdWFscyIsIm90aGVyWm9uZSIsInNpbmdsZXRvbiQxIiwiU3lzdGVtWm9uZSIsImluc3RhbmNlIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJkdGZDYWNoZSIsInR5cGVUb1BvcyIsImlhbmFab25lQ2FjaGUiLCJJQU5BWm9uZSIsImlzVmFsaWRab25lIiwidmFsaWQiLCJOYU4iLCJkdGYiLCJob3VyMTIiLCJhZE9yQmMiLCJmb3JtYXR0ZWQiLCJmaWxsZWQiLCJwb3MiLCJwYXJ0c09mZnNldCIsInJlcGxhY2UiLCJleGVjIiwiZk1vbnRoIiwiZkRheSIsImZZZWFyIiwiZmFkT3JCYyIsImZIb3VyIiwiZk1pbnV0ZSIsImZTZWNvbmQiLCJoYWNreU9mZnNldCIsImFzVFMiLCJvdmVyIiwic2luZ2xldG9uIiwiRml4ZWRPZmZzZXRab25lIiwidXRjSW5zdGFuY2UiLCJyIiwibWF0Y2giLCJmaXhlZCIsIkludmFsaWRab25lIiwibm9ybWFsaXplWm9uZSIsImRlZmF1bHRab25lIiwibG93ZXJlZCIsInBhcnNlU3BlY2lmaWVyIiwiY3JlYXRlIiwidGhyb3dPbkludmFsaWQiLCJkZWZhdWx0TG9jYWxlIiwiZGVmYXVsdE51bWJlcmluZ1N5c3RlbSIsImRlZmF1bHRPdXRwdXRDYWxlbmRhciIsIlNldHRpbmdzIiwibnVtYmVyaW5nU3lzdGVtIiwiTG9jYWxlIiwicmVzZXRDYWNoZSIsImludGxMRkNhY2hlIiwiaW50bERUQ2FjaGUiLCJnZXRDYWNoZWREVEYiLCJsb2NTdHJpbmciLCJrZXkiLCJKU09OIiwic3RyaW5naWZ5IiwiaW50bE51bUNhY2hlIiwiaW50bFJlbENhY2hlIiwic3lzTG9jYWxlQ2FjaGUiLCJsaXN0U3R1ZmYiLCJkZWZhdWx0T0siLCJlbmdsaXNoRm4iLCJpbnRsRm4iLCJtb2RlIiwiUG9seU51bWJlckZvcm1hdHRlciIsImludGwiLCJvdGhlck9wdHMiLCJ1c2VHcm91cGluZyIsIm1pbmltdW1JbnRlZ2VyRGlnaXRzIiwiaW5mIiwiTnVtYmVyRm9ybWF0IiwiZ2V0Q2FjaGVkSU5GIiwiUG9seURhdGVGb3JtYXR0ZXIiLCJ6IiwiZ210T2Zmc2V0Iiwib2Zmc2V0WiIsImZyb21NaWxsaXMiLCJ0b0pTRGF0ZSIsIlBvbHlSZWxGb3JtYXR0ZXIiLCJpc0VuZ2xpc2giLCJydGYiLCJiYXNlIiwiY2FjaGVLZXlPcHRzIiwiZ2V0Q2FjaGVkUlRGIiwiY291bnQiLCJudW1lcmljIiwibmFycm93IiwidW5pdHMiLCJ5ZWFycyIsInF1YXJ0ZXJzIiwid2Vla3MiLCJkYXlzIiwibGFzdGFibGUiLCJpbmRleE9mIiwiaXNEYXkiLCJpc0luUGFzdCIsImZtdFZhbHVlIiwic2luZ3VsYXIiLCJsaWxVbml0cyIsImZtdFVuaXQiLCJmb3JtYXRSZWxhdGl2ZVRpbWUiLCJkZWZhdWx0VG9FTiIsInNwZWNpZmllZExvY2FsZSIsImxvY2FsZVIiLCJudW1iZXJpbmdTeXN0ZW1SIiwib3V0cHV0Q2FsZW5kYXJSIiwibnVtYmVyaW5nIiwicGFyc2VkTG9jYWxlIiwicGFyc2VkTnVtYmVyaW5nU3lzdGVtIiwicGFyc2VkT3V0cHV0Q2FsZW5kYXIiLCJsb2NhbGVTdHIiLCJ1SW5kZXgiLCJvcHRpb25zIiwic21hbGxlciIsInN1YnN0cmluZyIsImNhbGVuZGFyIiwicGFyc2VMb2NhbGVTdHJpbmciLCJpbnRsQ29uZmlnU3RyaW5nIiwid2Vla2RheXNDYWNoZSIsIm1vbnRoc0NhY2hlIiwibWVyaWRpZW1DYWNoZSIsImVyYUNhY2hlIiwiZmFzdE51bWJlcnNDYWNoZWQiLCJmYXN0TnVtYmVycyIsInN0YXJ0c1dpdGgiLCJpc0FjdHVhbGx5RW4iLCJoYXNOb1dlaXJkbmVzcyIsImNsb25lIiwiYWx0cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJyZWRlZmF1bHRUb0VOIiwiZm9ybWF0U3RyIiwibXMiLCJ1dGMiLCJtYXBNb250aHMiLCJtYXBXZWVrZGF5cyIsInVuZGVmaW5lZCIsImZpZWxkIiwibWF0Y2hpbmciLCJyZWxGb3JtYXR0ZXIiLCJsaXN0Rm9ybWF0dGVyIiwiTGlzdEZvcm1hdCIsImdldENhY2hlZExGIiwib3RoZXIiLCJjb21iaW5lUmVnZXhlcyIsInJlZ2V4ZXMiLCJmdWxsIiwic291cmNlIiwiUmVnRXhwIiwiY29tYmluZUV4dHJhY3RvcnMiLCJleHRyYWN0b3JzIiwibWVyZ2VkVmFscyIsIm1lcmdlZFpvbmUiLCJjdXJzb3IiLCJleCIsInBhcnNlIiwicGF0dGVybnMiLCJyZWdleCIsImV4dHJhY3RvciIsInNpbXBsZVBhcnNlIiwicmV0Iiwib2Zmc2V0UmVnZXgiLCJpc29UaW1lQmFzZVJlZ2V4IiwiaXNvVGltZVJlZ2V4IiwiaXNvVGltZUV4dGVuc2lvblJlZ2V4IiwiZXh0cmFjdElTT1dlZWtEYXRhIiwiZXh0cmFjdElTT09yZGluYWxEYXRhIiwic3FsVGltZVJlZ2V4Iiwic3FsVGltZUV4dGVuc2lvblJlZ2V4IiwiaW50IiwiZmFsbGJhY2siLCJleHRyYWN0SVNPVGltZSIsImV4dHJhY3RJU09PZmZzZXQiLCJsb2NhbCIsImZ1bGxPZmZzZXQiLCJleHRyYWN0SUFOQVpvbmUiLCJpc29UaW1lT25seSIsImlzb0R1cmF0aW9uIiwiZXh0cmFjdElTT0R1cmF0aW9uIiwieWVhclN0ciIsIm1vbnRoU3RyIiwid2Vla1N0ciIsImRheVN0ciIsImhvdXJTdHIiLCJtaW51dGVTdHIiLCJzZWNvbmRTdHIiLCJtaWxsaXNlY29uZHNTdHIiLCJoYXNOZWdhdGl2ZVByZWZpeCIsIm5lZ2F0aXZlU2Vjb25kcyIsIm1heWJlTmVnYXRlIiwiZm9yY2UiLCJvYnNPZmZzZXRzIiwiR01UIiwiRURUIiwiRVNUIiwiQ0RUIiwiQ1NUIiwiTURUIiwiTVNUIiwiUERUIiwiUFNUIiwiZnJvbVN0cmluZ3MiLCJ3ZWVrZGF5U3RyIiwicmVzdWx0IiwicmZjMjgyMiIsImV4dHJhY3RSRkMyODIyIiwib2JzT2Zmc2V0IiwibWlsT2Zmc2V0IiwicmZjMTEyMyIsInJmYzg1MCIsImFzY2lpIiwiZXh0cmFjdFJGQzExMjNPcjg1MCIsImV4dHJhY3RBU0NJSSIsImlzb1ltZFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXgiLCJpc29XZWVrV2l0aFRpbWVFeHRlbnNpb25SZWdleCIsImlzb09yZGluYWxXaXRoVGltZUV4dGVuc2lvblJlZ2V4IiwiaXNvVGltZUNvbWJpbmVkUmVnZXgiLCJleHRyYWN0SVNPWW1kVGltZUFuZE9mZnNldCIsImV4dHJhY3RJU09XZWVrVGltZUFuZE9mZnNldCIsImV4dHJhY3RJU09PcmRpbmFsRGF0ZUFuZFRpbWUiLCJleHRyYWN0SVNPVGltZUFuZE9mZnNldCIsImV4dHJhY3RJU09UaW1lT25seSIsInNxbFltZFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXgiLCJzcWxUaW1lQ29tYmluZWRSZWdleCIsImV4dHJhY3RJU09UaW1lT2Zmc2V0QW5kSUFOQVpvbmUiLCJsb3dPcmRlck1hdHJpeCIsImNhc3VhbE1hdHJpeCIsImFjY3VyYXRlTWF0cml4IiwiZGF5c0luWWVhckFjY3VyYXRlIiwiZGF5c0luTW9udGhBY2N1cmF0ZSIsIm9yZGVyZWRVbml0cyQxIiwicmV2ZXJzZVVuaXRzIiwicmV2ZXJzZSIsImNsb25lJDEiLCJjbGVhciIsImNvbmYiLCJ2YWx1ZXMiLCJjb252ZXJzaW9uQWNjdXJhY3kiLCJEdXJhdGlvbiIsImNvbnZlcnQiLCJtYXRyaXgiLCJmcm9tTWFwIiwiZnJvbVVuaXQiLCJ0b01hcCIsInRvVW5pdCIsImNvbnYiLCJyYXciLCJhZGRlZCIsImNlaWwiLCJhbnRpVHJ1bmMiLCJjb25maWciLCJhY2N1cmF0ZSIsImlzTHV4b25EdXJhdGlvbiIsImZyb21PYmplY3QiLCJub3JtYWxpemVVbml0IiwiZHVyYXRpb25MaWtlIiwiaXNEdXJhdGlvbiIsInRleHQiLCJwYXJzZUlTT0R1cmF0aW9uIiwicGFyc2VJU09UaW1lT25seSIsIndlZWsiLCJ0b0Zvcm1hdCIsImZtdE9wdHMiLCJ0b0h1bWFuIiwidW5pdERpc3BsYXkiLCJsaXN0U3R5bGUiLCJ0b09iamVjdCIsInRvSVNPIiwidG9JU09UaW1lIiwibWlsbGlzIiwidG9NaWxsaXMiLCJzdXBwcmVzc01pbGxpc2Vjb25kcyIsInN1cHByZXNzU2Vjb25kcyIsImluY2x1ZGVQcmVmaXgiLCJzdHIiLCJ0b0pTT04iLCJhcyIsInZhbHVlT2YiLCJkdXJhdGlvbiIsImZyb21EdXJhdGlvbkxpa2UiLCJtaW51cyIsIm5lZ2F0ZSIsIm1hcFVuaXRzIiwiZm4iLCJzZXQiLCJyZWNvbmZpZ3VyZSIsIm5vcm1hbGl6ZSIsInZhbHMiLCJwcmV2aW91cyIsIm5vcm1hbGl6ZVZhbHVlcyIsImJ1aWx0IiwiYWNjdW11bGF0ZWQiLCJsYXN0VW5pdCIsIm93biIsImFrIiwiZG93biIsIm5lZ2F0ZWQiLCJpbnZhbGlkUmVhc29uIiwiaW52YWxpZEV4cGxhbmF0aW9uIiwidjEiLCJ2MiIsIklOVkFMSUQkMSIsIkludGVydmFsIiwiZW5kIiwiaXNMdXhvbkludGVydmFsIiwiYnVpbHRTdGFydCIsImZyaWVuZGx5RGF0ZVRpbWUiLCJidWlsdEVuZCIsInZhbGlkYXRlRXJyb3IiLCJ2YWxpZGF0ZVN0YXJ0RW5kIiwiZnJvbURhdGVUaW1lcyIsInNwbGl0Iiwic3RhcnRJc1ZhbGlkIiwiZW5kSXNWYWxpZCIsImZyb21JU08iLCJhZnRlciIsImJlZm9yZSIsInRvRHVyYXRpb24iLCJzdGFydE9mIiwiaGFzU2FtZSIsImlzRW1wdHkiLCJpc0FmdGVyIiwiZGF0ZVRpbWUiLCJpc0JlZm9yZSIsImNvbnRhaW5zIiwic3BsaXRBdCIsImRhdGVUaW1lcyIsInNvcnRlZCIsInNvcnQiLCJyZXN1bHRzIiwic3BsaXRCeSIsImlkeCIsImRpdmlkZUVxdWFsbHkiLCJudW1iZXJPZlBhcnRzIiwib3ZlcmxhcHMiLCJhYnV0c1N0YXJ0IiwiYWJ1dHNFbmQiLCJlbmd1bGZzIiwiaW50ZXJzZWN0aW9uIiwidW5pb24iLCJpbnRlcnZhbHMiLCJmaW5hbCIsImIiLCJzb2ZhciIsIml0ZW0iLCJjdXJyZW50Q291bnQiLCJlbmRzIiwidGltZSIsIkFycmF5IiwibWVyZ2UiLCJkaWZmZXJlbmNlIiwieG9yIiwidG9JU09EYXRlIiwiZGF0ZUZvcm1hdCIsInNlcGFyYXRvciIsIm1hcEVuZHBvaW50cyIsIm1hcEZuIiwiSW5mbyIsInByb3RvIiwic2V0Wm9uZSIsImxvY09iaiIsInJlbGF0aXZlIiwiZGF5RGlmZiIsImVhcmxpZXIiLCJsYXRlciIsInV0Y0RheVN0YXJ0IiwidG9VVEMiLCJrZWVwTG9jYWxUaW1lIiwibnVtYmVyaW5nU3lzdGVtcyIsImFyYWIiLCJhcmFiZXh0IiwiYmFsaSIsImJlbmciLCJkZXZhIiwiZnVsbHdpZGUiLCJndWpyIiwiaGFuaWRlYyIsImtobXIiLCJrbmRhIiwibGFvbyIsImxpbWIiLCJtbHltIiwibW9uZyIsIm15bXIiLCJvcnlhIiwidGFtbGRlYyIsInRlbHUiLCJ0aGFpIiwidGlidCIsImxhdG4iLCJudW1iZXJpbmdTeXN0ZW1zVVRGMTYiLCJoYW5pZGVjQ2hhcnMiLCJkaWdpdFJlZ2V4IiwiYXBwZW5kIiwiaW50VW5pdCIsInBvc3QiLCJkZXNlciIsImNvZGUiLCJjaGFyQ29kZUF0Iiwic2VhcmNoIiwicGFyc2VEaWdpdHMiLCJzcGFjZU9yTkJTUCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInNwYWNlT3JOQlNQUmVnRXhwIiwiZml4TGlzdFJlZ2V4Iiwic3RyaXBJbnNlbnNpdGl2aXRpZXMiLCJvbmVPZiIsInN0cmluZ3MiLCJzdGFydEluZGV4Iiwiam9pbiIsImZpbmRJbmRleCIsImdyb3VwcyIsImgiLCJzaW1wbGUiLCJwYXJ0VHlwZVN0eWxlVG9Ub2tlblZhbCIsInNob3J0IiwibG9uZyIsImRheXBlcmlvZCIsImRheVBlcmlvZCIsImR1bW15RGF0ZVRpbWVDYWNoZSIsImV4cGxhaW5Gcm9tVG9rZW5zIiwiZm9ybWF0T3B0c1RvVG9rZW5zIiwiaW5jbHVkZXMiLCJtYXliZUV4cGFuZE1hY3JvVG9rZW4iLCJleHBhbmRNYWNyb1Rva2VucyIsIm9uZSIsInR3byIsInRocmVlIiwiZm91ciIsInNpeCIsIm9uZU9yVHdvIiwib25lVG9UaHJlZSIsIm9uZVRvU2l4Iiwib25lVG9OaW5lIiwidHdvVG9Gb3VyIiwiZm91clRvU2l4IiwidW5pdGF0ZSIsInVuaXRGb3JUb2tlbiIsImRpc3F1YWxpZnlpbmdVbml0IiwicmVnZXhTdHJpbmciLCJoYW5kbGVycyIsImJ1aWxkUmVnZXgiLCJyYXdNYXRjaGVzIiwibWF0Y2hlcyIsImFsbCIsIm1hdGNoSW5kZXgiLCJzcGVjaWZpY09mZnNldCIsIloiLCJxIiwiTSIsIkciLCJ5IiwiUyIsInRvRmllbGQiLCJkYXRlVGltZUZyb21NYXRjaGVzIiwicGFydCIsInRva2VuRm9yUGFydCIsIm5vbkxlYXBMYWRkZXIiLCJsZWFwTGFkZGVyIiwidW5pdE91dE9mUmFuZ2UiLCJkYXlPZldlZWsiLCJqcyIsImdldFVUQ0RheSIsImNvbXB1dGVPcmRpbmFsIiwidW5jb21wdXRlT3JkaW5hbCIsInRhYmxlIiwibW9udGgwIiwiZ3JlZ29yaWFuVG9XZWVrIiwiZ3JlZ09iaiIsIndlZWtUb0dyZWdvcmlhbiIsIndlZWtEYXRhIiwid2Vla2RheU9mSmFuNCIsInllYXJJbkRheXMiLCJncmVnb3JpYW5Ub09yZGluYWwiLCJncmVnRGF0YSIsIm9yZGluYWxUb0dyZWdvcmlhbiIsIm9yZGluYWxEYXRhIiwiaGFzSW52YWxpZEdyZWdvcmlhbkRhdGEiLCJ2YWxpZFllYXIiLCJ2YWxpZE1vbnRoIiwidmFsaWREYXkiLCJoYXNJbnZhbGlkVGltZURhdGEiLCJ2YWxpZEhvdXIiLCJ2YWxpZE1pbnV0ZSIsInZhbGlkU2Vjb25kIiwidmFsaWRNaWxsaXNlY29uZCIsIklOVkFMSUQiLCJNQVhfREFURSIsInVuc3VwcG9ydGVkWm9uZSIsInBvc3NpYmx5Q2FjaGVkV2Vla0RhdGEiLCJpbnN0Iiwib2xkIiwiZml4T2Zmc2V0IiwibG9jYWxUUyIsInR6IiwidXRjR3Vlc3MiLCJvMiIsIm8zIiwidHNUb09iaiIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJvYmpUb1RTIiwiYWRqdXN0VGltZSIsIm9QcmUiLCJtaWxsaXNUb0FkZCIsInBhcnNlRGF0YVRvRGF0ZVRpbWUiLCJwYXJzZWRab25lIiwiaW50ZXJwcmV0YXRpb25ab25lIiwidG9UZWNoRm9ybWF0IiwiZXh0ZW5kZWQiLCJsb25nRm9ybWF0IiwiaW5jbHVkZU9mZnNldCIsImV4dGVuZGVkWm9uZSIsImRlZmF1bHRVbml0VmFsdWVzIiwiZGVmYXVsdFdlZWtVbml0VmFsdWVzIiwiZGVmYXVsdE9yZGluYWxVbml0VmFsdWVzIiwib3JkZXJlZFVuaXRzIiwib3JkZXJlZFdlZWtVbml0cyIsIm9yZGVyZWRPcmRpbmFsVW5pdHMiLCJ3ZWVrbnVtYmVyIiwid2Vla3NudW1iZXIiLCJ3ZWVrbnVtYmVycyIsIndlZWt5ZWFyIiwid2Vla3llYXJzIiwicXVpY2tEVCIsInRzTm93Iiwib2Zmc2V0UHJvdmlzIiwiZGlmZlJlbGF0aXZlIiwiY2FsZW5kYXJ5IiwiZGlmZmVyIiwibGFzdE9wdHMiLCJhcmdMaXN0IiwiYXJncyIsImZyb20iLCJvdCIsIl96b25lIiwiaXNMdXhvbkRhdGVUaW1lIiwiYXJndW1lbnRzIiwiem9uZVRvVXNlIiwiY29udGFpbnNPcmRpbmFsIiwiY29udGFpbnNHcmVnb3JZZWFyIiwiY29udGFpbnNHcmVnb3JNRCIsImNvbnRhaW5zR3JlZ29yIiwiZGVmaW5pdGVXZWVrRGVmIiwidXNlV2Vla0RhdGEiLCJkZWZhdWx0VmFsdWVzIiwib2JqTm93IiwiZm91bmRGaXJzdCIsImhpZ2hlck9yZGVySW52YWxpZCIsInZhbGlkV2VlayIsInZhbGlkV2Vla2RheSIsImhhc0ludmFsaWRXZWVrRGF0YSIsInZhbGlkT3JkaW5hbCIsImhhc0ludmFsaWRPcmRpbmFsRGF0YSIsImdyZWdvcmlhbiIsInRzRmluYWwiLCJvZmZzZXRGaW5hbCIsInBhcnNlSVNPRGF0ZSIsInRyaW0iLCJwcmVwcm9jZXNzUkZDMjgyMiIsInBhcnNlUkZDMjgyMkRhdGUiLCJwYXJzZUhUVFBEYXRlIiwibG9jYWxlVG9Vc2UiLCJmcm9tT3B0cyIsInBhcnNlRnJvbVRva2VucyIsImZyb21Gb3JtYXQiLCJwYXJzZVNRTCIsImxvY2FsZU9wdHMiLCJ0b2tlbkxpc3QiLCJtb250aFNob3J0IiwibW9udGhMb25nIiwid2Vla2RheVNob3J0Iiwid2Vla2RheUxvbmciLCJvZmZzZXROYW1lU2hvcnQiLCJvZmZzZXROYW1lTG9uZyIsImlzSW5EU1QiLCJpc0luTGVhcFllYXIiLCJyZXNvbHZlZExvY2FsZU9wdGlvbnMiLCJ0b0xvY2FsIiwia2VlcENhbGVuZGFyVGltZSIsIm5ld1RTIiwib2Zmc2V0R3Vlc3MiLCJhc09iaiIsInNldExvY2FsZSIsInNldHRpbmdXZWVrU3R1ZmYiLCJtaXhlZCIsIm5vcm1hbGl6ZWRVbml0IiwiZW5kT2YiLCJ0b0xvY2FsZVN0cmluZyIsInRvTG9jYWxlUGFydHMiLCJleHQiLCJ0b0lTT1dlZWtEYXRlIiwidG9SRkMyODIyIiwidG9IVFRQIiwidG9TUUxEYXRlIiwidG9TUUxUaW1lIiwiaW5jbHVkZVpvbmUiLCJpbmNsdWRlT2Zmc2V0U3BhY2UiLCJ0b1NRTCIsInRvU2Vjb25kcyIsInRvVW5peEludGVnZXIiLCJ0b0JTT04iLCJpbmNsdWRlQ29uZmlnIiwib3RoZXJEYXRlVGltZSIsImR1ck9wdHMiLCJpc0FycmF5Iiwib3RoZXJJc0xhdGVyIiwiZGlmZmVkIiwiaGlnaFdhdGVyIiwibG93ZXN0T3JkZXIiLCJkaWZmZXJzIiwiZGVsdGEiLCJoaWdoT3JkZXJEaWZmcyIsInJlbWFpbmluZ01pbGxpcyIsImxvd2VyT3JkZXJVbml0cyIsImRpZmZOb3ciLCJpbnB1dE1zIiwiYWRqdXN0ZWRUb1pvbmUiLCJ0b1JlbGF0aXZlIiwicGFkZGluZyIsInRvUmVsYXRpdmVDYWxlbmRhciIsImV2ZXJ5IiwiaXNEYXRlVGltZSIsImZyb21Gb3JtYXRFeHBsYWluIiwiZGF0ZVRpbWVpc2giLCJmcm9tSlNEYXRlIiwiVkVSU0lPTiIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImNoaWxkcmVuIiwiZGVmYXVsdFByb3BzIiwicmVmIiwiX19rIiwiX18iLCJfX2IiLCJfX2UiLCJfX2QiLCJfX2MiLCJfX2giLCJfX3YiLCJ2bm9kZSIsIl8iLCJjb250ZXh0IiwiZyIsIl9fciIsImRlYm91bmNlUmVuZGVyaW5nIiwic29tZSIsIl9fUCIsImoiLCJfX24iLCJvd25lclNWR0VsZW1lbnQiLCJBIiwiUCIsIk4iLCJhcHBlbmRDaGlsZCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiJCIsInNldFByb3BlcnR5IiwidGVzdCIsIkgiLCJjc3NUZXh0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIkkiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiQyIsImNvbnRleHRUeXBlIiwiX19FIiwiTyIsInN1YiIsIl9fcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiZ2V0Q2hpbGRDb250ZXh0IiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJMIiwibG9jYWxOYW1lIiwibm9kZVR5cGUiLCJkb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlRWxlbWVudCIsImRhdGEiLCJjaGlsZE5vZGVzIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJhdHRyaWJ1dGVzIiwiX19odG1sIiwiaW5uZXJIVE1MIiwiY2hlY2tlZCIsInVubW91bnQiLCJmaXJzdENoaWxkIiwiQiIsIkNvbnN1bWVyIiwiUHJvdmlkZXIiLCJzcGxpY2UiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJjb21wb25lbnREaWRDYXRjaCIsImZvcmNlVXBkYXRlIiwiUHJvbWlzZSIsInRoZW4iLCJyZXNvbHZlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZmluaXRpb24iLCJlbnVtZXJhYmxlIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJST09UX0VMRU1FTlQiLCJxdWVyeVNlbGVjdG9yIl0sIm1hcHBpbmdzIjoieUZBQUEsZUFDQSxTQUNBLFNBQ0EsU0FDQSxPQUVBLGVBQ0EsU0FHQSxNQUFhQSxVQUFhLEVBQUFDLFVBRXhCQyxjQUNFQyxRQUVBLEVBQUFDLGVBQWVDLE1BQUssSUFBTUMsS0FBS0MsT0FBT0QsS0FBS0UsU0FBU0MsS0FBS0gsT0FHM0RJLFNBQ0UsT0FDRSxXQUFLQyxNQUFNLFFBQ1Qsa0JBQ0UsV0FBS0EsTUFBTSxjQUNULDZCQUNBLFdBQUtBLE1BQU0sWUFDVCxJQUFDLEVBQUFDLE1BQUssQ0FBQ0MsTUFBUVAsS0FBS0MsTUFBTU8sVUFDMUIsSUFBQyxFQUFBQyxhQUFZLFNBS25CLFdBQUtKLE1BQU0sY0FDUEwsS0FBS1UsZ0JBTWZBLGNBQ0UsT0FBSVYsS0FBS0MsTUFBTVUsUUFBVSxFQUFBQSxNQUFNQyxTQUNyQixJQUFDLEVBQUFDLFNBQVEsTUFFVmIsS0FB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SSxDQUFDNUYsRUFBU3c4QixLQUNqQyxJQUFJLElBQUl4cEIsS0FBT3dwQixFQUNYSixFQUFvQnI1QixFQUFFeTVCLEVBQVl4cEIsS0FBU29wQixFQUFvQnI1QixFQUFFL0MsRUFBU2dULElBQzVFbFQsT0FBT0MsZUFBZUMsRUFBU2dULEVBQUssQ0FBRXlwQixZQUFZLEVBQU14dEIsSUFBS3V0QixFQUFXeHBCLE1DSjNFb3BCLEVBQW9CcjVCLEVBQUksQ0FBQ2MsRUFBS0MsSUFBVWhFLE9BQU9pRSxVQUFVSCxlQUFlSSxLQUFLSCxFQUFLQyxHQ0NsRnM0QixFQUFvQnpxQixFQUFLM1IsSUFDSCxvQkFBWDA4QixRQUEwQkEsT0FBT0MsYUFDMUM3OEIsT0FBT0MsZUFBZUMsRUFBUzA4QixPQUFPQyxZQUFhLENBQUVyaEMsTUFBTyxXQUU3RHdFLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFMUUsT0FBTyxLLE1DTHZELGVBQ0EsU0FDQSxPQUVBLE1BQU1zaEMsRUFBZWhDLFNBQVNpQyxjQUFjLFFBRTVDLEVBQUF2bEMsT0FBTyxJQUFDLEVBQUFWLEtBQUksTUFBS2dtQyxJIiwiZmlsZSI6Im1haW4uYjQ5ZTg5OGE1YjEyMTgyNWYxZWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoLCBDb21wb25lbnQgfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyBHYW1lQ29udHJvbGxlciwgR2FtZVN0YXRlLCBsZXZlbCB9IGZyb20gXCIuL0dhbWVDb250cm9sbGVyXCI7XG5pbXBvcnQgeyBTdG9yZUxldmVsIH0gZnJvbSBcIi4vU3RvcmVMZXZlbC9TdG9yZUxldmVsXCI7XG5pbXBvcnQgeyBUaW1lciB9IGZyb20gXCIuL1RpbWVyL1RpbWVyXCI7XG5pbXBvcnQgXCIuL0dhbWUuc2Nzc1wiO1xuaW1wb3J0IHsgR2FtZVRpbWVyIH0gZnJvbSBcIi4vR2FtZVRpbWVyXCI7XG5pbXBvcnQgeyBTaGlmdENvdW50ZXIgfSBmcm9tIFwiLi9TaGlmdENvdW50ZXIvU2hpZnRDb3VudGVyXCI7XG5pbXBvcnQgeyBMYXVuY2hlciB9IGZyb20gXCIuL0xhdW5jaGVyL0xhdW5jaGVyXCI7XG5cblxuZXhwb3J0IGNsYXNzIEdhbWUgZXh0ZW5kcyBDb21wb25lbnQ8YW55LCBHYW1lU3RhdGU+IHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgR2FtZUNvbnRyb2xsZXIuaW5pdCgoKSA9PiB0aGlzLnN0YXRlLCB0aGlzLnNldFN0YXRlLmJpbmQodGhpcykpO1xuICB9XG5cbiAgcmVuZGVyKCk6IGguSlNYLkVsZW1lbnQge1xuICAgIHJldHVybihcbiAgICAgIDxkaXYgY2xhc3M9XCJnYW1lXCI+XG4gICAgICAgIDxoZWFkZXI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlci1ib3hcIj5cbiAgICAgICAgICAgIDxoMT5TaGlmdHkuc2l0ZTwvaDE+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbHNcIj5cbiAgICAgICAgICAgICAgPFRpbWVyIHVudGlsPXsgdGhpcy5zdGF0ZS5lbmRUaW1lIH0gLz5cbiAgICAgICAgICAgICAgPFNoaWZ0Q291bnRlciAvPlxuICAgICAgICAgICAgICB7LyogPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBHYW1lVGltZXIucGF1c2UoKSB9PlBhdXNlPC9idXR0b24+ICovfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvaGVhZGVyPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibGV2ZWwtd3JhcFwiPlxuICAgICAgICAgIHsgdGhpcy5yZW5kZXJMZXZlbCgpIH1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyTGV2ZWwoKSA6IGguSlNYLkVsZW1lbnQge1xuICAgIGlmICh0aGlzLnN0YXRlLmxldmVsID09PSBsZXZlbC5OT19MRVZFTCkge1xuICAgICAgcmV0dXJuICg8TGF1bmNoZXIgLz4pXG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMuc3RhdGUubGV2ZWwgPT09IGxldmVsLlNUT1JFKSB7XG4gICAgICByZXR1cm4gKDxTdG9yZUxldmVsIC8+KTtcbiAgICB9XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tIFwibHV4b25cIjtcbmltcG9ydCB7IEdhbWVUaW1lciB9IGZyb20gXCIuL0dhbWVUaW1lclwiO1xuXG5jb25zdCBHQU1FX0xJTUlUX1NFQ09ORFMgPSAzMDtcblxuZXhwb3J0IGVudW0gbGV2ZWwge1xuICBOT19MRVZFTCxcbiAgU1RPUkVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHYW1lU3RhdGUge1xuICBsZXZlbDogbGV2ZWwsXG4gIHN0YXJ0VGltZTogRGF0ZVRpbWUsXG4gIGVuZFRpbWU6IERhdGVUaW1lXG59XG5cbmNsYXNzIF9HYW1lQ29udHJvbGxlciB7XG5cbiAgZ2V0U3RhdGU6ICgpID0+IEdhbWVTdGF0ZTtcbiAgc2V0U3RhdGU6IChzdGF0ZTogYW55KSA9PiB2b2lkO1xuXG4gIGluaXQoZ2V0U3RhdGU6ICgpID0+IEdhbWVTdGF0ZSwgc2V0U3RhdGU6IChzdGF0ZTogYW55KSA9PiB2b2lkKSB7XG5cbiAgICB0aGlzLmdldFN0YXRlID0gZ2V0U3RhdGU7XG4gICAgdGhpcy5zZXRTdGF0ZSA9IHNldFN0YXRlO1xuXG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHtcbiAgICAgIGxldmVsOiBsZXZlbC5OT19MRVZFTCxcbiAgICAgIHN0YXJ0VGltZTogRGF0ZVRpbWUuaW52YWxpZChcImluaXRpYWxcIiksXG4gICAgICBlbmRUaW1lOiBEYXRlVGltZS5pbnZhbGlkKFwiaW5pdGlhbFwiKSxcbiAgICB9O1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IC4uLmluaXRpYWxTdGF0ZSB9KTtcbiAgfVxuXG4gIHN0YXJ0KGxldmVsOiBsZXZlbCkge1xuICAgIGxldCBub3cgPSBEYXRlVGltZS5ub3coKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGxldmVsOiBsZXZlbCxcbiAgICAgIHN0YXJ0VGltZTogbm93LFxuICAgICAgZW5kVGltZTogbm93LnBsdXMoeyBzZWNvbmRzOiBHQU1FX0xJTUlUX1NFQ09ORFMgfSlcbiAgICB9KTtcbiAgICBHYW1lVGltZXIub25UaWNrKCgpID0+IHtcbiAgICAgIGxldCBzdGF0ZSA9IHRoaXMuZ2V0U3RhdGUoKTtcbiAgICAgIGlmIChEYXRlVGltZS5ub3coKSA+IHN0YXRlLmVuZFRpbWUpIHtcbiAgICAgICAgR2FtZVRpbWVyLnN0b3AoKTtcbiAgICAgICAgY29uc29sZS5sb2coJ09WRVInKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIEdhbWVUaW1lci5zdGFydCgpO1xuICB9XG5cbn1cblxuZXhwb3J0IGNvbnN0IEdhbWVDb250cm9sbGVyID0gbmV3IF9HYW1lQ29udHJvbGxlcigpOyIsImltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSBcImx1eG9uXCI7XG5pbXBvcnQgeyBnZXRSYW5kb21JbnRlZ2VyIH0gZnJvbSBcIi4vdXRpbC9nZXRSYW5kb21JbnRlZ2VyXCI7XG5cbmVudW0gR2FtZVRpbWVyU3RhdHVzIHtcbiAgU1RPUFBFRCxcbiAgU1RBUlRFRFxufVxuXG5jbGFzcyBfR2FtZVRpbWVyIHtcblxuICBwcml2YXRlIHRpY2tDb3VudDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSB0aWNrSGFuZGxlcnM6IEFycmF5PCh0aWNrOiBudW1iZXIpID0+IHZvaWQ+ID0gW107XG4gIHByaXZhdGUgbmV4dFRpY2s6IE5vZGVKUy5UaW1lcjtcbiAgcHJpdmF0ZSBpc1J1bm5pbmc6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwdWJsaWMgbXVsdGlwbGllcjogbnVtYmVyID0gMDtcblxuICBzdGFydCgpIHtcbiAgICB0aGlzLmlzUnVubmluZyA9IHRydWU7XG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnRpY2soKSk7XG4gIH1cblxuICBwYXVzZSgpIHtcbiAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLm5leHRUaWNrKTtcbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5uZXh0VGljayk7XG4gIH1cblxuICBvblRpY2soaGFuZGxlcjogKHRpY2s6IG51bWJlcikgPT4gdm9pZCk6IG51bWJlciB7XG4gICAgdGhpcy50aWNrSGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICByZXR1cm4gdGhpcy50aWNrSGFuZGxlcnMubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIHByaXZhdGUgdGljaygpIHtcbiAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKSB7IHJldHVybjsgfVxuICAgIHRoaXMudGlja0hhbmRsZXJzLmZvckVhY2goKGhhbmRsZXIpID0+IHtcbiAgICAgIGhhbmRsZXIodGhpcy50aWNrQ291bnQpO1xuICAgIH0pO1xuICAgIHRoaXMubmV4dFRpY2sgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMudGljaygpLCBnZXRSYW5kb21JbnRlZ2VyKDgwMCwgMTYwMCkgLSAodGhpcy5tdWx0aXBsaWVyICogMjAwKSk7XG4gIH1cblxufVxuXG5leHBvcnQgY29uc3QgR2FtZVRpbWVyID0gbmV3IF9HYW1lVGltZXIoKTsiLCJpbXBvcnQgeyBoLCBDb21wb25lbnQgfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyBHYW1lQ29udHJvbGxlciwgbGV2ZWwgfSBmcm9tIFwiLi4vR2FtZUNvbnRyb2xsZXJcIjtcbmltcG9ydCBcIi4vTGF1bmNoZXIuc2Nzc1wiO1xuXG5leHBvcnQgY2xhc3MgTGF1bmNoZXIgZXh0ZW5kcyBDb21wb25lbnQ8YW55LCBhbnk+IHtcblxuXG4gIHJlbmRlcigpIDogaC5KU1guRWxlbWVudCB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3M9XCJsYXVuY2hlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyIGZsZXggZmxleC1jb2x1bW5cIj5cbiAgICAgICAgICA8aDI+WW914oCZcmUgUnVubmluZyBPdXQgT2YgVGltZSE8L2gyPlxuXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImxhdW5jaC1jb250ZW50IGZsZXhcIj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlsbHVzdHJhdGlvblwiPlxuICAgICAgICAgICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL2RlYWwtb2YtdGhlLWRheS5wbmdcIiBoZWlnaHQ9XCI2MDBcIiB3aWR0aD1cIjYwMFwiIC8+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImluc3RydWN0aW9uc1wiPlxuICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICBHcmVhdEdldHMgaXMgZ2l2aW5nIGF3YXkgMyBmcmVlIFRoaW5nc1lvdVdhbnQmdHJhZGU7IGZvciB0aGUgbmV4dCAzMCBzZWNvbmRzIVxuICAgICAgICAgICAgICAgIENhbiB5b3UgYWRkIGFsbCB0aHJlZSB0byB5b3VyIGNhcnQ/XG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgQnV0IHRoZSBHcmVhdEdldHMgd2Vic2l0ZSBsb2FkcyB0b25zIGFzeW5jIGNvbnRlbnQgaW5cbiAgICAgICAgICAgICAgICBkaWZmZXJlbnQgc2l6ZXMsIGNhdXNpbmcgdGhlIGxheW91dCB0byBzaGlmdCBhcm91bmQgY29uc3RhbnRseS5cbiAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXtlID0+IEdhbWVDb250cm9sbGVyLnN0YXJ0KGxldmVsLlNUT1JFKSB9PlN0YXJ0ITwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8L2Rpdj5cblxuXG5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufSIsImltcG9ydCB7IGgsIENvbXBvbmVudCB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCBcIi4vTW9kYWwuc2Nzc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1vZGFsUHJvcHMge1xuICBpc09wZW46IGJvb2xlYW4sXG4gIGNvbnRlbnQ/OiBoLkpTWC5FbGVtZW50LFxuICB4QWRqdXN0PzogbnVtYmVyLFxuICB5QWRqdXN0PzogbnVtYmVyXG59XG5cbmV4cG9ydCBjbGFzcyBNb2RhbCBleHRlbmRzIENvbXBvbmVudDxNb2RhbFByb3BzLCBhbnk+IHtcblxuICByZW5kZXIoKTogaC5KU1guRWxlbWVudCB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC13cmFwXCIgc3R5bGU9e3tcImRpc3BsYXlcIjogdGhpcy5wcm9wcy5pc09wZW4gPyBcImZsZXhcIiA6IFwibm9uZVwifX0+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1ib3hcIiBzdHlsZT17e1xuICAgICAgICAgIFwibWFyZ2luLXRvcFwiOiBgJHt0aGlzLnByb3BzLnlBZGp1c3QgfHwgMH12aGAsXG4gICAgICAgICAgXCJtYXJnaW4tbGVmdFwiOiBgJHt0aGlzLnByb3BzLnhBZGp1c3QgfHwgMH12d2BcbiAgICAgICAgICB9fT5cbiAgICAgICAgICB7dGhpcy5wcm9wcy5jb250ZW50fVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn0iLCJpbXBvcnQgeyBoLCBDb21wb25lbnQgfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyBHYW1lVGltZXIgfSBmcm9tIFwiLi4vR2FtZVRpbWVyXCI7XG5pbXBvcnQgeyBnZXRSYW5kb21JbnRlZ2VyIH0gZnJvbSBcIi4uL3V0aWwvZ2V0UmFuZG9tSW50ZWdlclwiO1xuaW1wb3J0IHsgaXNTYWZhcmkgfSBmcm9tIFwiLi4vdXRpbC9pc1NhZmFyaVwiO1xuaW1wb3J0IFwiLi9TaGlmdENvdW50ZXIuc2Nzc1wiO1xuXG5pbnRlcmZhY2UgU2hpZnRDb3VudGVyU3RhdGUge1xuICBjbHM6IG51bWJlclxufVxuXG5leHBvcnQgY2xhc3MgU2hpZnRDb3VudGVyIGV4dGVuZHMgQ29tcG9uZW50PGFueSwgU2hpZnRDb3VudGVyU3RhdGU+IHtcblxuICBwcml2YXRlIG9ic2VydmVyIDogUGVyZm9ybWFuY2VPYnNlcnZlcjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBjbHM6IDBcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XG4gICAgaWYgKGlzU2FmYXJpKCkpIHtcbiAgICAgIEdhbWVUaW1lci5vblRpY2soKHRpY2spID0+IHtcbiAgICAgICAgbGV0IGNscyA9IHRoaXMuc3RhdGUuY2xzO1xuICAgICAgICBjbHMgPSBjbHMgKyAoKGdldFJhbmRvbUludGVnZXIoMTAwLCAyMDApICsgKHRpY2sqMTApKSAvIDFfMDAwKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNscyB9KTtcbiAgICAgIH0pXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyBQZXJmb3JtYW5jZU9ic2VydmVyKGVudHJ5TGlzdCA9PiB7XG4gICAgICAgIGxldCBlbnRyaWVzID0gZW50cnlMaXN0LmdldEVudHJpZXMoKSB8fCBbXTtcbiAgICAgICAgbGV0IGNscyA9IGVudHJpZXMucmVkdWNlKChjbHMsIGVudHJ5OiBhbnksIGluZGV4KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGNscyArIGVudHJ5LnZhbHVlO1xuICAgICAgICB9LCB0aGlzLnN0YXRlLmNscyk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBjbHMgfSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh7IHR5cGU6IFwibGF5b3V0LXNoaWZ0XCIsIGJ1ZmZlcmVkOiBmYWxzZSB9KTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpOiB2b2lkIHtcbiAgICB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgfVxuXG4gIHJlbmRlcigpIDogaC5KU1guRWxlbWVudCB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3M9XCJzaGlmdC1jb3VudGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJsYWJlbFwiPkNMUzwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwidmFsdWVcIj5cbiAgICAgICAgICB7IHRoaXMuc3RhdGUuY2xzLnRvRml4ZWQoNCkgfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufSIsImltcG9ydCB7IGgsIENvbXBvbmVudCB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IE1vZGFsLCBNb2RhbFByb3BzIH0gZnJvbSBcIi4uL01vZGFsL01vZGFsXCI7XG5pbXBvcnQgeyBTdG9yZUxldmVsQ29udHJvbGxlciB9IGZyb20gXCIuL1N0b3JlTGV2ZWxDb250cm9sbGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBFeHBlcmllbmNlTW9kYWwgZXh0ZW5kcyBDb21wb25lbnQ8TW9kYWxQcm9wcywgYW55PiB7XG5cbiAgcmVuZGVyKCk6IGguSlNYLkVsZW1lbnQge1xuICAgIHJldHVybiAoXG4gICAgICA8TW9kYWwgY29udGVudD17XG4gICAgICAgIDxkaXYgY2xhc3M9XCJleHBlcmllbmNlLW1vZGFsIGZsZXggZmxleC1jb2x1bW5cIj5cbiAgICAgICAgICA8aDI+SGVscCBJbXByb3ZlIE91ciBXZWJzaXRlPC9oMj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiY2xvc2VcIlxuICAgICAgICAgICAgb25Ub3VjaFN0YXJ0PXsgKCkgPT4gU3RvcmVMZXZlbENvbnRyb2xsZXIuY2xlYXJFeHBlcmllbmNlKCkgfVxuICAgICAgICAgICAgPuKclTwvYnV0dG9uPlxuICAgICAgICAgIDxwPlxuICAgICAgICAgICAgVGVsbCB1cyBhYm91dCB5b3VyIGV4cGVyaWVuY2Ugb24gb3VyIHdlYnNpdGUhIFdlIHByb21pc2UgdG8gaWdub3JlXG4gICAgICAgICAgICBpdCBlbnRpcmVseSBhbmQgY29udGludWUgd2l0aCB3aGF0IHdlIGFyZSBkb2luZy5cbiAgICAgICAgICA8L3A+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInJhdGluZ3MgZmxleCBmbGV4LWNvbHVtbiBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRpdGxlXCI+XG4gICAgICAgICAgICAgIEhvdyBsaWtlbHkgYXJlIHlvdSB0byByZWNvbW1lbmQgR3JlYXRHZXRzIHRvIGEgZnJpZW5kP1xuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGFiZWxzIGZsZXhcIj5cbiAgICAgICAgICAgICAgPGRpdj5Ob3QgTGlrZWx5PC9kaXY+XG4gICAgICAgICAgICAgIDxkaXY+VmVyeSBMaWtlbHk8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xzIGZsZXhcIj5cbiAgICAgICAgICAgICAgPGxhYmVsIG9uVG91Y2hTdGFydD17ICgpID0+IFN0b3JlTGV2ZWxDb250cm9sbGVyLmNsaWNrUmF0aW5ncygpIH0+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiPjwvaW5wdXQ+XG4gICAgICAgICAgICAgICAgPHNwYW4+MTwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgPGxhYmVsIG9uVG91Y2hTdGFydD17ICgpID0+IFN0b3JlTGV2ZWxDb250cm9sbGVyLmNsaWNrUmF0aW5ncygpIH0+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiPjwvaW5wdXQ+XG4gICAgICAgICAgICAgICAgPHNwYW4+Mjwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgPGxhYmVsIG9uVG91Y2hTdGFydD17ICgpID0+IFN0b3JlTGV2ZWxDb250cm9sbGVyLmNsaWNrUmF0aW5ncygpIH0+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiPjwvaW5wdXQ+XG4gICAgICAgICAgICAgICAgPHNwYW4+Mzwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgPGxhYmVsIG9uVG91Y2hTdGFydD17ICgpID0+IFN0b3JlTGV2ZWxDb250cm9sbGVyLmNsaWNrUmF0aW5ncygpIH0+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiPjwvaW5wdXQ+XG4gICAgICAgICAgICAgICAgPHNwYW4+NDwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgPGxhYmVsIG9uVG91Y2hTdGFydD17ICgpID0+IFN0b3JlTGV2ZWxDb250cm9sbGVyLmNsaWNrUmF0aW5ncygpIH0+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiPjwvaW5wdXQ+XG4gICAgICAgICAgICAgICAgPHNwYW4+NTwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIH0gaXNPcGVuPXt0aGlzLnByb3BzLmlzT3Blbn0geEFkanVzdD17dGhpcy5wcm9wcy54QWRqdXN0fSB5QWRqdXN0PXt0aGlzLnByb3BzLnlBZGp1c3R9Lz5cbiAgICApO1xuICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIEV4cGVyaWVuY2VUaGFua3NNb2RhbCBleHRlbmRzIENvbXBvbmVudDxNb2RhbFByb3BzLCBhbnk+IHtcblxuICByZW5kZXIoKTogaC5KU1guRWxlbWVudCB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxNb2RhbCBjb250ZW50PXtcbiAgICAgICAgPGRpdiBjbGFzcz1cImV4cGVyaWVuY2UtdGhhbmtzLW1vZGFsIGZsZXggZmxleC1jb2x1bW5cIj5cbiAgICAgICAgICA8aDI+VGhhbmtzIGZvciB5b3VyIFJhdGluZyE8L2gyPlxuICAgICAgICAgIDxoMz5FeHBlY3QgYSBsb3Qgb2Ygc3VydmV5IGVtYWlscyBmcm9tIHVzITwvaDM+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImNsb3NlXCJcbiAgICAgICAgICAgIG9uVG91Y2hTdGFydD17ICgpID0+IFN0b3JlTGV2ZWxDb250cm9sbGVyLmNsZWFyUmF0aW5nc1RoYW5rcygpIH1cbiAgICAgICAgICAgID7inJU8L2J1dHRvbj5cbiAgICAgICAgICA8cCBzdHlsZT17e2ZsZXg6IFwiMSAxIGF1dG9cIn19PlxuICAgICAgICAgICAgV2UgcmVjb3JkZWQgeW91ciByYXRpbmchIFdlIHdpbGwgY29udGludWUgdG8gYXNrIHlvdSBvdmVyIGVtYWlsIGV2ZXJ5IDItMyBkYXlzXG4gICAgICAgICAgICBmcm9tIG5vdyB1bnRpbCBldGVybml0eSwgcmVnYXJkbGVzcyBpZiB5b3UgZXZlciBzaG9wIHdpdGggdXMgYWdhaW4uXG4gICAgICAgICAgPC9wPlxuICAgICAgICAgIDxwPlxuICAgICAgICAgICAgPHN0cm9uZz5Zb3VyIFNob3BwaW5nIENhcnQgaGFzIGJlZW4gY2xlYXJlZC48L3N0cm9uZz5cbiAgICAgICAgICA8L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgfSBpc09wZW49e3RoaXMucHJvcHMuaXNPcGVufSB4QWRqdXN0PXt0aGlzLnByb3BzLnhBZGp1c3R9IHlBZGp1c3Q9e3RoaXMucHJvcHMueUFkanVzdH0vPlxuICAgICk7XG4gIH1cblxufSIsImltcG9ydCB7IGgsIENvbXBvbmVudCB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IE1vZGFsLCBNb2RhbFByb3BzIH0gZnJvbSBcIi4uL01vZGFsL01vZGFsXCI7XG5pbXBvcnQgeyBTdG9yZUxldmVsQ29udHJvbGxlciB9IGZyb20gXCIuL1N0b3JlTGV2ZWxDb250cm9sbGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBGYWlsTW9kYWwgZXh0ZW5kcyBDb21wb25lbnQ8TW9kYWxQcm9wcywgYW55PiB7XG5cbiAgcmVuZGVyKCk6IGguSlNYLkVsZW1lbnQge1xuICAgIHJldHVybiAoXG4gICAgICA8TW9kYWwgY29udGVudD17XG4gICAgICAgIDxkaXYgY2xhc3M9XCJuZXdzbGV0dGVyLW1vZGFsXCI+XG4gICAgICAgICAgICA8aDI+Sm9pbiBPdXIgTmV3c0xldHRlciBhbmQgU2F2ZSE8L2gyPlxuICAgICAgICAgICAgPGgzPkEgUmVhbGx5IEFubm95aW5nIFBvcHVwPC9oMz5cbiAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICBKb2luIG91ciBuZXdzbGV0dGVyIGFuZCB3ZSdsbCBzZW5kIHlvdSAxMCBlbWFpbHMgZXZlcnkgZGF5IGFib3V0XG4gICAgICAgICAgICAgIGNyYXBweSBwcm9kdWN0cyB0aGF0IHdlIGNhbid0IHNlbGwuXG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgPHN0cm9uZz5Zb3VyIFNob3BwaW5nIENhcnQgaGFzIGJlZW4gZW1wdGllZC48L3N0cm9uZz5cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIG9uVG91Y2hTdGFydD17ICgpID0+IFN0b3JlTGV2ZWxDb250cm9sbGVyLmRvdWJsZUZhaWwoKSB9PlllcyEgQWRkIE1lIFRvIFlvdXIgTmV3c2xldHRlcjwvYnV0dG9uPlxuICAgICAgICAgICAgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIG9uVG91Y2hTdGFydD17ICgpID0+IFN0b3JlTGV2ZWxDb250cm9sbGVyLmNsZWFyRmFpbCgpIH0+Tm8sIEdvIEJhY2s8L2E+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICB9IGlzT3Blbj17dGhpcy5wcm9wcy5pc09wZW59IHhBZGp1c3Q9e3RoaXMucHJvcHMueEFkanVzdH0geUFkanVzdD17dGhpcy5wcm9wcy55QWRqdXN0fS8+XG4gICAgKTtcbiAgfVxuXG59IiwiaW1wb3J0IHsgaCwgQ29tcG9uZW50IH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IHsgU3RvcmVMZXZlbENvbnRyb2xsZXIsIFN0b3JlTGV2ZWxTdGF0ZSB9IGZyb20gXCIuL1N0b3JlTGV2ZWxDb250cm9sbGVyXCI7XG5pbXBvcnQgeyBXaWRnZXQgfSBmcm9tIFwiLi9XaWRnZXRcIjtcbmltcG9ydCB7IEZhaWxNb2RhbCB9IGZyb20gXCIuL0ZhaWxNb2RhbFwiO1xuaW1wb3J0IHsgRXhwZXJpZW5jZU1vZGFsLCBFeHBlcmllbmNlVGhhbmtzTW9kYWwgfSBmcm9tIFwiLi9FeHBlcmllbmNlTW9kYWxcIjtcbmltcG9ydCBcIi4vU3RvcmVMZXZlbC5zY3NzXCI7XG5cbmV4cG9ydCBjbGFzcyBTdG9yZUxldmVsIGV4dGVuZHMgQ29tcG9uZW50PGFueSwgU3RvcmVMZXZlbFN0YXRlPiB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICBTdG9yZUxldmVsQ29udHJvbGxlci5pbml0KCgpID0+IHRoaXMuc3RhdGUsIHRoaXMuc2V0U3RhdGUuYmluZCh0aGlzKSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuKFxuICAgICAgPGRpdiBjbGFzcz1cInN0b3JlLWxldmVsXCI+XG4gICAgICAgIDxoZWFkZXIgY2xhc3M9XCJzdG9yZS1oZWFkZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibG9nb1wiPlxuICAgICAgICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9sb2dvLnBuZ1wiIHdpZHRoPVwiMTM2XCIgaGVpZ2h0PVwiODBcIiAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJ0XCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNhcnQtY291bnRcIj57IHRoaXMuc3RhdGUuY2xpY2tzIH08L3NwYW4+XG4gICAgICAgICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL2NhcnQuc3ZnXCI+PC9pbWc+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNhcnQtbGFiZWxcIj5DYXJ0PC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2hlYWRlcj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIndpZGdldC1ncmlkXCIgb25Ub3VjaFN0YXJ0PXsoZSkgPT4gU3RvcmVMZXZlbENvbnRyb2xsZXIuY2xpY2soLTEsIGUpIH0+XG4gICAgICAgICAge3RoaXMuc3RhdGUud2lkZ2V0cy5tYXAod2lkZ2V0U3RhdGUgPT4gPFdpZGdldCB7Li4ud2lkZ2V0U3RhdGV9IC8+KX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxGYWlsTW9kYWwgaXNPcGVuPXt0aGlzLnN0YXRlLnNob3dGYWlsTW9kYWx9IHhBZGp1c3Q9e3RoaXMuc3RhdGUubW9kYWxBZGp1c3RYfSB5QWRqdXN0PXt0aGlzLnN0YXRlLm1vZGFsQWRqdXN0WX0gLz5cbiAgICAgICAgPEV4cGVyaWVuY2VNb2RhbCBpc09wZW49e3RoaXMuc3RhdGUuc2hvd0V4cGVyaWVuY2VNb2RhbH0geEFkanVzdD17dGhpcy5zdGF0ZS5tb2RhbEFkanVzdFh9IHlBZGp1c3Q9e3RoaXMuc3RhdGUubW9kYWxBZGp1c3RZfSAvPlxuICAgICAgICA8RXhwZXJpZW5jZVRoYW5rc01vZGFsIGlzT3Blbj17dGhpcy5zdGF0ZS5zaG93RXhwZXJpZW5jZVRoYW5rc01vZGFsfSB4QWRqdXN0PXt0aGlzLnN0YXRlLm1vZGFsQWRqdXN0WH0geUFkanVzdD17dGhpcy5zdGF0ZS5tb2RhbEFkanVzdFl9IC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbn1cbiIsImltcG9ydCB7IEdhbWVDb250cm9sbGVyIH0gZnJvbSBcIi4uL0dhbWVDb250cm9sbGVyXCI7XG5pbXBvcnQgeyBHYW1lVGltZXIgfSBmcm9tIFwiLi4vR2FtZVRpbWVyXCI7XG5pbXBvcnQgeyBnZXRSYW5kb21JbnRlZ2VyIH0gZnJvbSBcIi4uL3V0aWwvZ2V0UmFuZG9tSW50ZWdlclwiO1xuXG5jb25zdCBXSURHRVRfQ09VTlQgPSAxMDtcbmNvbnN0IENMSUNLU19UT19XSU4gPSAzO1xuY29uc3QgTU9EQUxfWF9BREpVU1QgPSA0MDtcbmNvbnN0IE1PREFMX1lfQURKVVNUID0gNTA7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RvcmVMZXZlbFN0YXRlIHtcbiAgY2xpY2tzIDogbnVtYmVyXG4gIGhhc1Nob3duRXhwZXJpZW5jZU1vZGFsOiBib29sZWFuXG4gIGlzT2JqZWN0aXZlVmlzaWJsZSA6IGJvb2xlYW5cbiAgc2hvd0V4cGVyaWVuY2VNb2RhbDogYm9vbGVhblxuICBzaG93RXhwZXJpZW5jZVRoYW5rc01vZGFsOiBib29sZWFuXG4gIHNob3dGYWlsTW9kYWwgOiBib29sZWFuXG4gIG1vZGFsQWRqdXN0WCA6IG51bWJlclxuICBtb2RhbEFkanVzdFkgOiBudW1iZXJcbiAgd2lkZ2V0cyA6IFdpZGdldFN0YXRlW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBXaWRnZXRTdGF0ZSB7XG4gIGluZGV4IDogbnVtYmVyXG4gIHN0YXR1cyA6IFdpZGdldFN0YXR1c1xufVxuXG5leHBvcnQgZW51bSBXaWRnZXRTdGF0dXMge1xuICBFTVBUWSxcbiAgTE9BRElORyxcbiAgQ09OVEVOVCxcbiAgT0JKRUNUSVZFLFxuICBDT01QTEVURVxufVxuXG5jbGFzcyBfU3RvcmVMZXZlbENvbnRyb2xsZXIge1xuXG4gIGdldFN0YXRlOiAoKSA9PiBTdG9yZUxldmVsU3RhdGU7XG4gIHNldFN0YXRlOiAoc3RhdGU6IGFueSkgPT4gdm9pZDtcblxuICBpbml0KGdldFN0YXRlOiAoKSA9PiBTdG9yZUxldmVsU3RhdGUsIHNldFN0YXRlOiAoc3RhdGU6IGFueSkgPT4gdm9pZCkge1xuXG4gICAgdGhpcy5nZXRTdGF0ZSA9IGdldFN0YXRlO1xuICAgIHRoaXMuc2V0U3RhdGUgPSBzZXRTdGF0ZTtcblxuICAgIEdhbWVUaW1lci5vblRpY2soKCkgPT4gdGhpcy5vblRpY2soKSk7XG5cbiAgICBsZXQgaW5pdGlhbFN0YXRlID0ge1xuICAgICAgY2xpY2tzOiAwLFxuICAgICAgaGFzU2hvd25FeHBlcmllbmNlTW9kYWw6IGZhbHNlLFxuICAgICAgaXNPYmplY3RpdmVWaXNpYmxlOiBmYWxzZSxcbiAgICAgIHNob3dFeHBlcmllbmNlTW9kYWw6IGZhbHNlLFxuICAgICAgc2hvd0V4cGVyaWVuY2VUaGFua3NNb2RhbDogZmFsc2UsXG4gICAgICBzaG93RmFpbE1vZGFsOiBmYWxzZSxcbiAgICAgIHdpZGdldHM6IFtdXG4gICAgfTtcblxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBXSURHRVRfQ09VTlQ7IGkrKykge1xuICAgICAgbGV0IHdpZGdldCA9IHtcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIHN0YXR1czogV2lkZ2V0U3RhdHVzLkVNUFRZXG4gICAgICB9O1xuICAgICAgaW5pdGlhbFN0YXRlLndpZGdldHMucHVzaCh3aWRnZXQpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoeyAuLi5pbml0aWFsU3RhdGUgfSk7XG4gIH1cblxuICBvblRpY2soKSB7XG4gICAgbGV0IHN0YXRlID0gdGhpcy5nZXRTdGF0ZSgpO1xuXG4gICAgbGV0IHVubG9hZGVkV2lkZ2V0cyA9IHN0YXRlLndpZGdldHMuZmlsdGVyKCh3KSA9PiB3LnN0YXR1cyA9PT0gV2lkZ2V0U3RhdHVzLkVNUFRZKTtcbiAgICBpZiAodW5sb2FkZWRXaWRnZXRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5zZXRMb2FkaW5nKHVubG9hZGVkV2lkZ2V0c1swXSk7XG4gICAgICB0aGlzLnVwZGF0ZVdpZGdldFN0YXRlKHVubG9hZGVkV2lkZ2V0c1swXSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGNoYW5nZWFibGVXaWRnZXRzID0gc3RhdGUud2lkZ2V0cy5maWx0ZXIoKHcpID0+IHcuc3RhdHVzICE9PSBXaWRnZXRTdGF0dXMuTE9BRElORyk7XG4gICAgaWYgKCFjaGFuZ2VhYmxlV2lkZ2V0cy5sZW5ndGgpIHsgcmV0dXJuOyB9XG5cbiAgICBsZXQgd2lkZ2V0ID0gY2hhbmdlYWJsZVdpZGdldHNbZ2V0UmFuZG9tSW50ZWdlcigwLCBjaGFuZ2VhYmxlV2lkZ2V0cy5sZW5ndGgpXTtcblxuICAgIGlmICh3aWRnZXQuc3RhdHVzID09PSBXaWRnZXRTdGF0dXMuT0JKRUNUSVZFKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgaXNPYmplY3RpdmVWaXNpYmxlOiBmYWxzZSB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldExvYWRpbmcod2lkZ2V0KTtcbiAgICB0aGlzLnVwZGF0ZVdpZGdldFN0YXRlKHdpZGdldCk7XG4gIH1cblxuICBwcml2YXRlIHNldExvYWRpbmcod2lkZ2V0OiBXaWRnZXRTdGF0ZSkge1xuICAgIHdpZGdldC5zdGF0dXMgPSBXaWRnZXRTdGF0dXMuTE9BRElORztcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGxldCBzdGF0ZSA9IHRoaXMuZ2V0U3RhdGUoKTtcbiAgICAgIGlmICghc3RhdGUuaXNPYmplY3RpdmVWaXNpYmxlICYmIHdpZGdldC5pbmRleCA+PSAzKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc09iamVjdGl2ZVZpc2libGU6IHRydWUgfSk7XG4gICAgICAgIHdpZGdldC5zdGF0dXMgPSBXaWRnZXRTdGF0dXMuT0JKRUNUSVZFO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHdpZGdldC5zdGF0dXMgPSBXaWRnZXRTdGF0dXMuQ09OVEVOVDtcbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlV2lkZ2V0U3RhdGUod2lkZ2V0KTtcbiAgICB9LCBnZXRSYW5kb21JbnRlZ2VyKDYwMCwgMzIwMCkpXG4gIH1cblxuICBjbGljayhpbmRleDogbnVtYmVyLCBldmVudDogRXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGxldCBzdGF0ZSA9IHRoaXMuZ2V0U3RhdGUoKTtcbiAgICBsZXQgd2lkZ2V0ID0gc3RhdGUud2lkZ2V0c1tpbmRleF07XG5cbiAgICBpZiAod2lkZ2V0ICYmIHdpZGdldC5zdGF0dXMgPT09IFdpZGdldFN0YXR1cy5PQkpFQ1RJVkUpIHtcbiAgICAgIHdpZGdldC5zdGF0dXMgPSBXaWRnZXRTdGF0dXMuQ09NUExFVEU7XG4gICAgICB0aGlzLnVwZGF0ZVdpZGdldFN0YXRlKHdpZGdldCk7XG5cbiAgICAgIHN0YXRlLmNsaWNrcyA9IHN0YXRlLmNsaWNrcyArIDE7XG5cbiAgICAgIGlmICghc3RhdGUuaGFzU2hvd25FeHBlcmllbmNlTW9kYWwpIHtcbiAgICAgICAgc3RhdGUuaGFzU2hvd25FeHBlcmllbmNlTW9kYWwgPSB0cnVlO1xuICAgICAgICBzdGF0ZS5zaG93RXhwZXJpZW5jZU1vZGFsID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUubW9kYWxBZGp1c3RYID0gZ2V0UmFuZG9tSW50ZWdlcigtTU9EQUxfWF9BREpVU1QsTU9EQUxfWF9BREpVU1QpO1xuICAgICAgICBzdGF0ZS5tb2RhbEFkanVzdFkgPSBnZXRSYW5kb21JbnRlZ2VyKC1NT0RBTF9ZX0FESlVTVCxNT0RBTF9ZX0FESlVTVCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZS5jbGlja3MgPj0gQ0xJQ0tTX1RPX1dJTikge1xuICAgICAgICBhbGVydCgnWU9VIFdPTiEnKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdGF0ZS5pc09iamVjdGl2ZVZpc2libGUgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgR2FtZVRpbWVyLm11bHRpcGxpZXIgPSBzdGF0ZS5jbGlja3M7XG4gICAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc2hvd0ZhaWxNb2RhbDogdHJ1ZSxcbiAgICAgICAgbW9kYWxBZGp1c3RYOiBnZXRSYW5kb21JbnRlZ2VyKC1NT0RBTF9YX0FESlVTVCxNT0RBTF9YX0FESlVTVCksXG4gICAgICAgIG1vZGFsQWRqdXN0WTogZ2V0UmFuZG9tSW50ZWdlcigtTU9EQUxfWV9BREpVU1QsTU9EQUxfWV9BREpVU1QpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjbGVhckZhaWwoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dGYWlsTW9kYWw6IGZhbHNlIH0pO1xuICB9XG5cbiAgZG91YmxlRmFpbCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNob3dGYWlsTW9kYWw6IHRydWUsXG4gICAgICBtb2RhbEFkanVzdFg6IGdldFJhbmRvbUludGVnZXIoLU1PREFMX1hfQURKVVNULE1PREFMX1hfQURKVVNUKSxcbiAgICAgIG1vZGFsQWRqdXN0WTogZ2V0UmFuZG9tSW50ZWdlcigtTU9EQUxfWV9BREpVU1QsTU9EQUxfWV9BREpVU1QpXG4gICAgfSk7XG4gIH1cblxuICBjbGVhckV4cGVyaWVuY2UoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dFeHBlcmllbmNlTW9kYWw6IGZhbHNlIH0pO1xuICB9XG5cbiAgY2xpY2tSYXRpbmdzKCkge1xuICAgIHRoaXMucmVzZXQoKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNob3dFeHBlcmllbmNlTW9kYWw6IGZhbHNlLFxuICAgICAgc2hvd0V4cGVyaWVuY2VUaGFua3NNb2RhbDogdHJ1ZSxcbiAgICAgIG1vZGFsQWRqdXN0WDogZ2V0UmFuZG9tSW50ZWdlcigtTU9EQUxfWF9BREpVU1QsTU9EQUxfWF9BREpVU1QpLFxuICAgICAgbW9kYWxBZGp1c3RZOiBnZXRSYW5kb21JbnRlZ2VyKC1NT0RBTF9ZX0FESlVTVCxNT0RBTF9ZX0FESlVTVClcbiAgICB9KTtcbiAgfVxuXG4gIGNsZWFyUmF0aW5nc1RoYW5rcygpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2hvd0V4cGVyaWVuY2VUaGFua3NNb2RhbDogZmFsc2UgfSk7XG4gIH1cblxuICBwcml2YXRlIHJlc2V0KCkge1xuICAgIGxldCBzdGF0ZSA9IHRoaXMuZ2V0U3RhdGUoKVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY2xpY2tzOiAwLFxuICAgICAgd2lkZ2V0czogc3RhdGUud2lkZ2V0cy5tYXAoKHcpID0+IHtcbiAgICAgICAgaWYgKHcuc3RhdHVzID09PSBXaWRnZXRTdGF0dXMuQ09NUExFVEUpIHtcbiAgICAgICAgICB3LnN0YXR1cyA9IFdpZGdldFN0YXR1cy5MT0FESU5HO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3O1xuICAgICAgfSlcbiAgICB9KTtcbiAgICBHYW1lVGltZXIubXVsdGlwbGllciA9IDA7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVdpZGdldFN0YXRlKHdpZGdldCA6IFdpZGdldFN0YXRlKSB7XG4gICAgbGV0IHN0YXRlID0gdGhpcy5nZXRTdGF0ZSgpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgd2lkZ2V0czogc3RhdGUud2lkZ2V0cy5tYXAoKHcpID0+IHtcbiAgICAgICAgaWYgKHcuaW5kZXggPT09IHdpZGdldC5pbmRleCkge1xuICAgICAgICAgIHJldHVybiB7IC4uLndpZGdldCB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3O1xuICAgICAgfSlcbiAgICB9KTtcbiAgfVxuXG59XG5cbmV4cG9ydCBjb25zdCBTdG9yZUxldmVsQ29udHJvbGxlciA9IG5ldyBfU3RvcmVMZXZlbENvbnRyb2xsZXIoKTsiLCJpbXBvcnQgeyBoLCBDb21wb25lbnQgfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyBnZXRSYW5kb21JbnRlZ2VyIH0gZnJvbSBcIi4uL3V0aWwvZ2V0UmFuZG9tSW50ZWdlclwiO1xuaW1wb3J0IHsgU3RvcmVMZXZlbENvbnRyb2xsZXIsIFdpZGdldFN0YXRlLCBXaWRnZXRTdGF0dXMgfSBmcm9tIFwiLi9TdG9yZUxldmVsQ29udHJvbGxlclwiO1xuXG5jb25zdCBDT05URU5UID0gW1xuICAvLyB7XG4gIC8vICAgd2lkdGg6IDEwMCxcbiAgLy8gICBjb250ZW50OiAoXG4gIC8vICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL3RyZW5kaW5nLnBuZ1wiIGhlaWdodD1cIjQ2OFwiIHdpZHRoPVwiMjQwMFwiIC8+XG4gIC8vICAgKVxuICAvLyB9LFxuICAvLyB7XG4gIC8vICAgd2lkdGg6IDEwMCxcbiAgLy8gICBjb250ZW50OiAoXG4gIC8vICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL2Jlc3Qtc2VsbGluZy5wbmdcIiBoZWlnaHQ9XCI0NjhcIiB3aWR0aD1cIjI0MDBcIiAvPlxuICAvLyAgIClcbiAgLy8gfSxcbiAge1xuICAgIHdpZHRoOiA2MCxcbiAgICBjb250ZW50OiAoXG4gICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL3RvcC1kZWFscy5wbmdcIiBoZWlnaHQ9XCI0MDBcIiB3aWR0aD1cIjEyMDBcIiAvPlxuICAgIClcbiAgfSxcbiAge1xuICAgIHdpZHRoOiA2MCxcbiAgICBjb250ZW50OiAoXG4gICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL2JsYWNrLWZyaWRheS5wbmdcIiBoZWlnaHQ9XCI0MDBcIiB3aWR0aD1cIjEyMDBcIiAvPlxuICAgIClcbiAgfSxcbiAge1xuICAgIHdpZHRoOiA2MCxcbiAgICBjb250ZW50OiAoXG4gICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL21hY2Jvb2stYWlyLnBuZ1wiIGhlaWdodD1cIjQwMFwiIHdpZHRoPVwiMTIwMFwiIC8+XG4gICAgKVxuICB9LFxuICB7XG4gICAgd2lkdGg6IDQwLFxuICAgIGNvbnRlbnQ6IChcbiAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvc21hcnR0dnMucG5nXCIgaGVpZ2h0PVwiNDAwXCIgd2lkdGg9XCI4MDBcIiAvPlxuICAgIClcbiAgfSxcbiAge1xuICAgIHdpZHRoOiA0MCxcbiAgICBjb250ZW50OiAoXG4gICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL2Nhci1hdWRpby5wbmdcIiBoZWlnaHQ9XCI0MDBcIiB3aWR0aD1cIjgwMFwiIC8+XG4gICAgKVxuICB9LFxuICB7XG4gICAgd2lkdGg6IDQwLFxuICAgIGNvbnRlbnQ6IChcbiAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvZ2FsYXh5LXdhdGNoLnBuZ1wiIGhlaWdodD1cIjQwMFwiIHdpZHRoPVwiODAwXCIgLz5cbiAgICApXG4gIH0sXG4gIHtcbiAgICB3aWR0aDogNDAsXG4gICAgY29udGVudDogKFxuICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9raXRjaGVuLnBuZ1wiIGhlaWdodD1cIjQwMFwiIHdpZHRoPVwiODAwXCIgLz5cbiAgICApXG4gIH0sXG4gIHtcbiAgICB3aWR0aDogNDAsXG4gICAgY29udGVudDogKFxuICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9zYW1zdW5nLWdhbGF4eS5wbmdcIiBoZWlnaHQ9XCI0MDBcIiB3aWR0aD1cIjgwMFwiIC8+XG4gICAgKVxuICB9LFxuICB7XG4gICAgd2lkdGg6IDQwLFxuICAgIGNvbnRlbnQ6IChcbiAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvdmlkZW8tZ2FtZXMucG5nXCIgaGVpZ2h0PVwiNDAwXCIgd2lkdGg9XCI4MDBcIiAvPlxuICAgIClcbiAgfSxcbiAge1xuICAgIHdpZHRoOiAyMCxcbiAgICBjb250ZW50OiAoXG4gICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL2dvZC1vZi13YXIucG5nXCIgaGVpZ2h0PVwiNjAwXCIgd2lkdGg9XCI2MDBcIiAvPlxuICAgIClcbiAgfSxcbiAge1xuICAgIHdpZHRoOiAyMCxcbiAgICBjb250ZW50OiAoXG4gICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL2ludGV4LXBvb2wucG5nXCIgaGVpZ2h0PVwiNjAwXCIgd2lkdGg9XCI2MDBcIiAvPlxuICAgIClcbiAgfSxcbiAge1xuICAgIHdpZHRoOiAyMCxcbiAgICBjb250ZW50OiAoXG4gICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL2xlbm92by15b2dhLnBuZ1wiIGhlaWdodD1cIjYwMFwiIHdpZHRoPVwiNjAwXCIgLz5cbiAgICApXG4gIH0sXG4gIHtcbiAgICB3aWR0aDogMjAsXG4gICAgY29udGVudDogKFxuICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9wb2tlbW9uLnBuZ1wiIGhlaWdodD1cIjYwMFwiIHdpZHRoPVwiNjAwXCIgLz5cbiAgICApXG4gIH0sXG4gIHtcbiAgICB3aWR0aDogMjAsXG4gICAgY29udGVudDogKFxuICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9zYW1zdW5nLTI0LnBuZ1wiIGhlaWdodD1cIjYwMFwiIHdpZHRoPVwiNjAwXCIgLz5cbiAgICApXG4gIH0sXG4gIHtcbiAgICB3aWR0aDogMjAsXG4gICAgY29udGVudDogKFxuICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9nb2Qtb2Ytd2FyLnBuZ1wiIGhlaWdodD1cIjYwMFwiIHdpZHRoPVwiNjAwXCIgLz5cbiAgICApXG4gIH0sXG4gIHtcbiAgICB3aWR0aDogMjAsXG4gICAgY29udGVudDogKFxuICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9pbnRleC1wb29sLnBuZ1wiIGhlaWdodD1cIjYwMFwiIHdpZHRoPVwiNjAwXCIgLz5cbiAgICApXG4gIH0sXG4gIHtcbiAgICB3aWR0aDogMjAsXG4gICAgY29udGVudDogKFxuICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9sZW5vdm8teW9nYS5wbmdcIiBoZWlnaHQ9XCI2MDBcIiB3aWR0aD1cIjYwMFwiIC8+XG4gICAgKVxuICB9LFxuICB7XG4gICAgd2lkdGg6IDIwLFxuICAgIGNvbnRlbnQ6IChcbiAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvcG9rZW1vbi5wbmdcIiBoZWlnaHQ9XCI2MDBcIiB3aWR0aD1cIjYwMFwiIC8+XG4gICAgKVxuICB9LFxuICB7XG4gICAgd2lkdGg6IDIwLFxuICAgIGNvbnRlbnQ6IChcbiAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvc2Ftc3VuZy0yNC5wbmdcIiBoZWlnaHQ9XCI2MDBcIiB3aWR0aD1cIjYwMFwiICAvPlxuICAgIClcbiAgfSxcbl1cblxudHlwZSBSZW5kZXJPcHRpb25zID0ge1xuICB3aWR0aDogbnVtYmVyLFxuICBncm93PzogYm9vbGVhbixcbiAgaGVpZ2h0Pzogc3RyaW5nLFxuICBjb250ZW50OiBoLkpTWC5FbGVtZW50XG59XG5cbmV4cG9ydCBjbGFzcyBXaWRnZXQgZXh0ZW5kcyBDb21wb25lbnQ8V2lkZ2V0U3RhdGUsIGFueT4ge1xuXG4gIHJlbmRlcigpOiBoLkpTWC5FbGVtZW50IHtcbiAgICBpZiAodGhpcy5wcm9wcy5zdGF0dXMgPT09IFdpZGdldFN0YXR1cy5FTVBUWSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyV2lkZ2V0KHtcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGNvbnRlbnQ6IG51bGxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLnByb3BzLnN0YXR1cyA9PT0gV2lkZ2V0U3RhdHVzLkxPQURJTkcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcldpZGdldCh7XG4gICAgICAgIHdpZHRoOiAyMCxcbiAgICAgICAgaGVpZ2h0OiBcImF1dG9cIixcbiAgICAgICAgZ3JvdzogdHJ1ZSxcbiAgICAgICAgY29udGVudDogKFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2FkaW5nXCI+PGkgY2xhc3M9XCJzcGlubmVyXCI+PC9pPjwvZGl2PlxuICAgICAgICApXG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5wcm9wcy5zdGF0dXMgPT09IFdpZGdldFN0YXR1cy5DT05URU5UKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJXaWRnZXQodGhpcy5nZXRSYW5kb21Db250ZW50KCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLnByb3BzLnN0YXR1cyA9PT0gV2lkZ2V0U3RhdHVzLk9CSkVDVElWRSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyV2lkZ2V0KHtcbiAgICAgICAgd2lkdGg6IDIwLFxuICAgICAgICBjb250ZW50OiAoXG4gICAgICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9kZWFsLW9mLXRoZS1kYXkucG5nXCIgaGVpZ2h0PVwiNjAwXCIgd2lkdGg9XCI2MDBcIiAvPlxuICAgICAgICApXG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5wcm9wcy5zdGF0dXMgPT09IFdpZGdldFN0YXR1cy5DT01QTEVURSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyV2lkZ2V0KHtcbiAgICAgICAgd2lkdGg6IDIwLFxuICAgICAgICBjb250ZW50OiAoXG4gICAgICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9kZWFsLW9mLXRoZS1kYXktZG9uZS5wbmdcIiBoZWlnaHQ9XCI2MDBcIiB3aWR0aD1cIjYwMFwiIC8+XG4gICAgICAgIClcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgV2lkZ2V0ICR7dGhpcy5wcm9wcy5pbmRleH0gaW4gdW5rbm93biBzdGF0dXMgJHt0aGlzLnByb3BzLnN0YXR1c30uYCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyV2lkZ2V0KG9wdHM6IFJlbmRlck9wdGlvbnMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzcz1cIndpZGdldFwiXG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgXCJmbGV4XCI6IGAke29wdHMuZ3JvdyA/ICcxJyA6ICcwJ30gMCAke29wdHMud2lkdGh9JWAsXG4gICAgICAgICAgXCJoZWlnaHRcIjogb3B0cy5oZWlnaHQgfHwgXCJmaXQtY29udGVudFwiLFxuICAgICAgICAgIFwiZGlzcGxheVwiOiBgJHt0aGlzLnByb3BzLnN0YXR1cyA9PT0gV2lkZ2V0U3RhdHVzLkVNUFRZID8gXCJub25lXCIgOiBcImZsZXhcIiB9YFxuICAgICAgICB9fVxuICAgICAgICBvblRvdWNoU3RhcnQ9eyAoZSkgPT4gU3RvcmVMZXZlbENvbnRyb2xsZXIuY2xpY2sodGhpcy5wcm9wcy5pbmRleCwgZSkgfT5cbiAgICAgICAge29wdHMuY29udGVudH1cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UmFuZG9tQ29udGVudCgpIDogeyB3aWR0aDogbnVtYmVyLCBjb250ZW50OiBoLkpTWC5FbGVtZW50IH0ge1xuICAgIHJldHVybiBDT05URU5UW2dldFJhbmRvbUludGVnZXIoMCwgQ09OVEVOVC5sZW5ndGgpXTtcbiAgfVxufSIsImltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSBcImx1eG9uXCI7XG5pbXBvcnQgeyBoLCBDb21wb25lbnQgfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgXCIuL1RpbWVyLnNjc3NcIjtcblxuZXhwb3J0IGludGVyZmFjZSBUaW1lclByb3BzIHtcbiAgdW50aWwgOiBEYXRlVGltZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRpbWVyU3RhdGUge1xuICBzZWNvbmRzOiBudW1iZXIsXG4gIG1pbGxpc2Vjb25kczogbnVtYmVyXG59XG5cbmV4cG9ydCBjbGFzcyBUaW1lciBleHRlbmRzIENvbXBvbmVudDxUaW1lclByb3BzLCBUaW1lclN0YXRlPiB7XG5cbiAgcHJpdmF0ZSB0aW1lciA6IE5vZGVKUy5UaW1lcjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzZWNvbmRzOiAwLFxuICAgICAgbWlsbGlzZWNvbmRzOiAwXG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XG4gICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy51bnRpbC5pc1ZhbGlkKSB7IHJldHVybjsgfVxuICAgICAgbGV0IGRpZmYgPSB0aGlzLnByb3BzLnVudGlsLmRpZmYoRGF0ZVRpbWUubm93KCkpLnNoaWZ0VG8oXCJzZWNvbmRzXCIsIFwibWlsbGlzZWNvbmRzXCIpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHNlY29uZHM6IE1hdGgubWF4KGRpZmYuc2Vjb25kcywgMCksXG4gICAgICAgIG1pbGxpc2Vjb25kczogTWF0aC5tYXgoZGlmZi5taWxsaXNlY29uZHMsIDApXG4gICAgICB9KTtcbiAgICB9LCAxMDApO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKTogdm9pZCB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcbiAgfVxuXG4gIHJlbmRlcigpIDogaC5KU1guRWxlbWVudCB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3M9XCJ0aW1lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibGFiZWxcIj5UaW1lPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9e2B2YWx1ZSAke3RoaXMuc3RhdGUuc2Vjb25kcyA8PSA1ICYmIHRoaXMuc3RhdGUubWlsbGlzZWNvbmRzK3RoaXMuc3RhdGUuc2Vjb25kcyAhPT0gMCA/IFwiZGFuZ2VyXCIgOiBcIlwiIH1gfT5cbiAgICAgICAgICB7IHRoaXMuc3RhdGUuc2Vjb25kcy50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJykgfVxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWFya2VyXCI+Ljwvc3Bhbj5cbiAgICAgICAgICB7IHRoaXMuc3RhdGUubWlsbGlzZWNvbmRzLnRvU3RyaW5nKCkucGFkRW5kKDMsICcwJykgfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufSIsImV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21JbnRlZ2VyKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcikgOiBudW1iZXIge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKSArIG1pbjtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBpc1NhZmFyaSgpIDogYm9vbGVhbiB7XG4gIC8vaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzk0NDQ2MC9kZXRlY3Qtc2FmYXJpLWJyb3dzZXJcbiAgcmV0dXJuIHR5cGVvZiAod2luZG93IGFzIGFueSkuR2VzdHVyZUV2ZW50ID09PSBcImZ1bmN0aW9uXCJcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLy8gdGhlc2UgYXJlbid0IHJlYWxseSBwcml2YXRlLCBidXQgbm9yIGFyZSB0aGV5IHJlYWxseSB1c2VmdWwgdG8gZG9jdW1lbnRcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBMdXhvbkVycm9yIGV4dGVuZHMgRXJyb3Ige31cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbmNsYXNzIEludmFsaWREYXRlVGltZUVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7XG4gIGNvbnN0cnVjdG9yKHJlYXNvbikge1xuICAgIHN1cGVyKGBJbnZhbGlkIERhdGVUaW1lOiAke3JlYXNvbi50b01lc3NhZ2UoKX1gKTtcbiAgfVxuXG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuY2xhc3MgSW52YWxpZEludGVydmFsRXJyb3IgZXh0ZW5kcyBMdXhvbkVycm9yIHtcbiAgY29uc3RydWN0b3IocmVhc29uKSB7XG4gICAgc3VwZXIoYEludmFsaWQgSW50ZXJ2YWw6ICR7cmVhc29uLnRvTWVzc2FnZSgpfWApO1xuICB9XG5cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jbGFzcyBJbnZhbGlkRHVyYXRpb25FcnJvciBleHRlbmRzIEx1eG9uRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihyZWFzb24pIHtcbiAgICBzdXBlcihgSW52YWxpZCBEdXJhdGlvbjogJHtyZWFzb24udG9NZXNzYWdlKCl9YCk7XG4gIH1cblxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmNsYXNzIENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7fVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmNsYXNzIEludmFsaWRVbml0RXJyb3IgZXh0ZW5kcyBMdXhvbkVycm9yIHtcbiAgY29uc3RydWN0b3IodW5pdCkge1xuICAgIHN1cGVyKGBJbnZhbGlkIHVuaXQgJHt1bml0fWApO1xuICB9XG5cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jbGFzcyBJbnZhbGlkQXJndW1lbnRFcnJvciBleHRlbmRzIEx1eG9uRXJyb3Ige31cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jbGFzcyBab25lSXNBYnN0cmFjdEVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiWm9uZSBpcyBhbiBhYnN0cmFjdCBjbGFzc1wiKTtcbiAgfVxuXG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgbiA9IFwibnVtZXJpY1wiLFxuICAgICAgcyA9IFwic2hvcnRcIixcbiAgICAgIGwgPSBcImxvbmdcIjtcbmNvbnN0IERBVEVfU0hPUlQgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBuLFxuICBkYXk6IG5cbn07XG5jb25zdCBEQVRFX01FRCA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IHMsXG4gIGRheTogblxufTtcbmNvbnN0IERBVEVfTUVEX1dJVEhfV0VFS0RBWSA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IHMsXG4gIGRheTogbixcbiAgd2Vla2RheTogc1xufTtcbmNvbnN0IERBVEVfRlVMTCA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IGwsXG4gIGRheTogblxufTtcbmNvbnN0IERBVEVfSFVHRSA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IGwsXG4gIGRheTogbixcbiAgd2Vla2RheTogbFxufTtcbmNvbnN0IFRJTUVfU0lNUExFID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG5cbn07XG5jb25zdCBUSU1FX1dJVEhfU0VDT05EUyA9IHtcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG5cbn07XG5jb25zdCBUSU1FX1dJVEhfU0hPUlRfT0ZGU0VUID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgdGltZVpvbmVOYW1lOiBzXG59O1xuY29uc3QgVElNRV9XSVRIX0xPTkdfT0ZGU0VUID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgdGltZVpvbmVOYW1lOiBsXG59O1xuY29uc3QgVElNRV8yNF9TSU1QTEUgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgaG91ckN5Y2xlOiBcImgyM1wiXG59O1xuY29uc3QgVElNRV8yNF9XSVRIX1NFQ09ORFMgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICBob3VyQ3ljbGU6IFwiaDIzXCJcbn07XG5jb25zdCBUSU1FXzI0X1dJVEhfU0hPUlRfT0ZGU0VUID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgaG91ckN5Y2xlOiBcImgyM1wiLFxuICB0aW1lWm9uZU5hbWU6IHNcbn07XG5jb25zdCBUSU1FXzI0X1dJVEhfTE9OR19PRkZTRVQgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICBob3VyQ3ljbGU6IFwiaDIzXCIsXG4gIHRpbWVab25lTmFtZTogbFxufTtcbmNvbnN0IERBVEVUSU1FX1NIT1JUID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbixcbiAgZGF5OiBuLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG5cbn07XG5jb25zdCBEQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFMgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBuLFxuICBkYXk6IG4sXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuXG59O1xuY29uc3QgREFURVRJTUVfTUVEID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogcyxcbiAgZGF5OiBuLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG5cbn07XG5jb25zdCBEQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogcyxcbiAgZGF5OiBuLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogblxufTtcbmNvbnN0IERBVEVUSU1FX01FRF9XSVRIX1dFRUtEQVkgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBzLFxuICBkYXk6IG4sXG4gIHdlZWtkYXk6IHMsXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogblxufTtcbmNvbnN0IERBVEVUSU1FX0ZVTEwgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBsLFxuICBkYXk6IG4sXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgdGltZVpvbmVOYW1lOiBzXG59O1xuY29uc3QgREFURVRJTUVfRlVMTF9XSVRIX1NFQ09ORFMgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBsLFxuICBkYXk6IG4sXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICB0aW1lWm9uZU5hbWU6IHNcbn07XG5jb25zdCBEQVRFVElNRV9IVUdFID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuLFxuICB3ZWVrZGF5OiBsLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHRpbWVab25lTmFtZTogbFxufTtcbmNvbnN0IERBVEVUSU1FX0hVR0VfV0lUSF9TRUNPTkRTID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuLFxuICB3ZWVrZGF5OiBsLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgdGltZVpvbmVOYW1lOiBsXG59O1xuXG4vKlxuICBUaGlzIGlzIGp1c3QgYSBqdW5rIGRyYXdlciwgY29udGFpbmluZyBhbnl0aGluZyB1c2VkIGFjcm9zcyBtdWx0aXBsZSBjbGFzc2VzLlxuICBCZWNhdXNlIEx1eG9uIGlzIHNtYWxsKGlzaCksIHRoaXMgc2hvdWxkIHN0YXkgc21hbGwgYW5kIHdlIHdvbid0IHdvcnJ5IGFib3V0IHNwbGl0dGluZ1xuICBpdCB1cCBpbnRvLCBzYXksIHBhcnNpbmdVdGlsLmpzIGFuZCBiYXNpY1V0aWwuanMgYW5kIHNvIG9uLiBCdXQgdGhleSBhcmUgZGl2aWRlZCB1cCBieSBmZWF0dXJlIGFyZWEuXG4qL1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG4vLyBUWVBFU1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gXCJ1bmRlZmluZWRcIjtcbn1cbmZ1bmN0aW9uIGlzTnVtYmVyKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSBcIm51bWJlclwiO1xufVxuZnVuY3Rpb24gaXNJbnRlZ2VyKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSBcIm51bWJlclwiICYmIG8gJSAxID09PSAwO1xufVxuZnVuY3Rpb24gaXNTdHJpbmcobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09IFwic3RyaW5nXCI7XG59XG5mdW5jdGlvbiBpc0RhdGUobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pID09PSBcIltvYmplY3QgRGF0ZV1cIjtcbn0gLy8gQ0FQQUJJTElUSUVTXG5cbmZ1bmN0aW9uIGhhc1JlbGF0aXZlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB0eXBlb2YgSW50bCAhPT0gXCJ1bmRlZmluZWRcIiAmJiAhIUludGwuUmVsYXRpdmVUaW1lRm9ybWF0O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59IC8vIE9CSkVDVFMgQU5EIEFSUkFZU1xuXG5mdW5jdGlvbiBtYXliZUFycmF5KHRoaW5nKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHRoaW5nKSA/IHRoaW5nIDogW3RoaW5nXTtcbn1cbmZ1bmN0aW9uIGJlc3RCeShhcnIsIGJ5LCBjb21wYXJlKSB7XG4gIGlmIChhcnIubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBhcnIucmVkdWNlKChiZXN0LCBuZXh0KSA9PiB7XG4gICAgY29uc3QgcGFpciA9IFtieShuZXh0KSwgbmV4dF07XG5cbiAgICBpZiAoIWJlc3QpIHtcbiAgICAgIHJldHVybiBwYWlyO1xuICAgIH0gZWxzZSBpZiAoY29tcGFyZShiZXN0WzBdLCBwYWlyWzBdKSA9PT0gYmVzdFswXSkge1xuICAgICAgcmV0dXJuIGJlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYWlyO1xuICAgIH1cbiAgfSwgbnVsbClbMV07XG59XG5mdW5jdGlvbiBwaWNrKG9iaiwga2V5cykge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoKGEsIGspID0+IHtcbiAgICBhW2tdID0gb2JqW2tdO1xuICAgIHJldHVybiBhO1xuICB9LCB7fSk7XG59XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufSAvLyBOVU1CRVJTIEFORCBTVFJJTkdTXG5cbmZ1bmN0aW9uIGludGVnZXJCZXR3ZWVuKHRoaW5nLCBib3R0b20sIHRvcCkge1xuICByZXR1cm4gaXNJbnRlZ2VyKHRoaW5nKSAmJiB0aGluZyA+PSBib3R0b20gJiYgdGhpbmcgPD0gdG9wO1xufSAvLyB4ICUgbiBidXQgdGFrZXMgdGhlIHNpZ24gb2YgbiBpbnN0ZWFkIG9mIHhcblxuZnVuY3Rpb24gZmxvb3JNb2QoeCwgbikge1xuICByZXR1cm4geCAtIG4gKiBNYXRoLmZsb29yKHggLyBuKTtcbn1cbmZ1bmN0aW9uIHBhZFN0YXJ0KGlucHV0LCBuID0gMikge1xuICBjb25zdCBpc05lZyA9IGlucHV0IDwgMDtcbiAgbGV0IHBhZGRlZDtcblxuICBpZiAoaXNOZWcpIHtcbiAgICBwYWRkZWQgPSBcIi1cIiArIChcIlwiICsgLWlucHV0KS5wYWRTdGFydChuLCBcIjBcIik7XG4gIH0gZWxzZSB7XG4gICAgcGFkZGVkID0gKFwiXCIgKyBpbnB1dCkucGFkU3RhcnQobiwgXCIwXCIpO1xuICB9XG5cbiAgcmV0dXJuIHBhZGRlZDtcbn1cbmZ1bmN0aW9uIHBhcnNlSW50ZWdlcihzdHJpbmcpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHN0cmluZykgfHwgc3RyaW5nID09PSBudWxsIHx8IHN0cmluZyA9PT0gXCJcIikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHN0cmluZywgMTApO1xuICB9XG59XG5mdW5jdGlvbiBwYXJzZUZsb2F0aW5nKHN0cmluZykge1xuICBpZiAoaXNVbmRlZmluZWQoc3RyaW5nKSB8fCBzdHJpbmcgPT09IG51bGwgfHwgc3RyaW5nID09PSBcIlwiKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChzdHJpbmcpO1xuICB9XG59XG5mdW5jdGlvbiBwYXJzZU1pbGxpcyhmcmFjdGlvbikge1xuICAvLyBSZXR1cm4gdW5kZWZpbmVkIChpbnN0ZWFkIG9mIDApIGluIHRoZXNlIGNhc2VzLCB3aGVyZSBmcmFjdGlvbiBpcyBub3Qgc2V0XG4gIGlmIChpc1VuZGVmaW5lZChmcmFjdGlvbikgfHwgZnJhY3Rpb24gPT09IG51bGwgfHwgZnJhY3Rpb24gPT09IFwiXCIpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGYgPSBwYXJzZUZsb2F0KFwiMC5cIiArIGZyYWN0aW9uKSAqIDEwMDA7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoZik7XG4gIH1cbn1cbmZ1bmN0aW9uIHJvdW5kVG8obnVtYmVyLCBkaWdpdHMsIHRvd2FyZFplcm8gPSBmYWxzZSkge1xuICBjb25zdCBmYWN0b3IgPSAxMCAqKiBkaWdpdHMsXG4gICAgICAgIHJvdW5kZXIgPSB0b3dhcmRaZXJvID8gTWF0aC50cnVuYyA6IE1hdGgucm91bmQ7XG4gIHJldHVybiByb3VuZGVyKG51bWJlciAqIGZhY3RvcikgLyBmYWN0b3I7XG59IC8vIERBVEUgQkFTSUNTXG5cbmZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICByZXR1cm4geWVhciAlIDQgPT09IDAgJiYgKHllYXIgJSAxMDAgIT09IDAgfHwgeWVhciAlIDQwMCA9PT0gMCk7XG59XG5mdW5jdGlvbiBkYXlzSW5ZZWFyKHllYXIpIHtcbiAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjU7XG59XG5mdW5jdGlvbiBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICBjb25zdCBtb2RNb250aCA9IGZsb29yTW9kKG1vbnRoIC0gMSwgMTIpICsgMSxcbiAgICAgICAgbW9kWWVhciA9IHllYXIgKyAobW9udGggLSBtb2RNb250aCkgLyAxMjtcblxuICBpZiAobW9kTW9udGggPT09IDIpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcihtb2RZZWFyKSA/IDI5IDogMjg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFszMSwgbnVsbCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdW21vZE1vbnRoIC0gMV07XG4gIH1cbn0gLy8gY292ZXJ0IGEgY2FsZW5kYXIgb2JqZWN0IHRvIGEgbG9jYWwgdGltZXN0YW1wIChlcG9jaCwgYnV0IHdpdGggdGhlIG9mZnNldCBiYWtlZCBpbilcblxuZnVuY3Rpb24gb2JqVG9Mb2NhbFRTKG9iaikge1xuICBsZXQgZCA9IERhdGUuVVRDKG9iai55ZWFyLCBvYmoubW9udGggLSAxLCBvYmouZGF5LCBvYmouaG91ciwgb2JqLm1pbnV0ZSwgb2JqLnNlY29uZCwgb2JqLm1pbGxpc2Vjb25kKTsgLy8gZm9yIGxlZ2FjeSByZWFzb25zLCB5ZWFycyBiZXR3ZWVuIDAgYW5kIDk5IGFyZSBpbnRlcnByZXRlZCBhcyAxOVhYOyByZXZlcnQgdGhhdFxuXG4gIGlmIChvYmoueWVhciA8IDEwMCAmJiBvYmoueWVhciA+PSAwKSB7XG4gICAgZCA9IG5ldyBEYXRlKGQpO1xuICAgIGQuc2V0VVRDRnVsbFllYXIoZC5nZXRVVENGdWxsWWVhcigpIC0gMTkwMCk7XG4gIH1cblxuICByZXR1cm4gK2Q7XG59XG5mdW5jdGlvbiB3ZWVrc0luV2Vla1llYXIod2Vla1llYXIpIHtcbiAgY29uc3QgcDEgPSAod2Vla1llYXIgKyBNYXRoLmZsb29yKHdlZWtZZWFyIC8gNCkgLSBNYXRoLmZsb29yKHdlZWtZZWFyIC8gMTAwKSArIE1hdGguZmxvb3Iod2Vla1llYXIgLyA0MDApKSAlIDcsXG4gICAgICAgIGxhc3QgPSB3ZWVrWWVhciAtIDEsXG4gICAgICAgIHAyID0gKGxhc3QgKyBNYXRoLmZsb29yKGxhc3QgLyA0KSAtIE1hdGguZmxvb3IobGFzdCAvIDEwMCkgKyBNYXRoLmZsb29yKGxhc3QgLyA0MDApKSAlIDc7XG4gIHJldHVybiBwMSA9PT0gNCB8fCBwMiA9PT0gMyA/IDUzIDogNTI7XG59XG5mdW5jdGlvbiB1bnRydW5jYXRlWWVhcih5ZWFyKSB7XG4gIGlmICh5ZWFyID4gOTkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHJldHVybiB5ZWFyID4gNjAgPyAxOTAwICsgeWVhciA6IDIwMDAgKyB5ZWFyO1xufSAvLyBQQVJTSU5HXG5cbmZ1bmN0aW9uIHBhcnNlWm9uZUluZm8odHMsIG9mZnNldEZvcm1hdCwgbG9jYWxlLCB0aW1lWm9uZSA9IG51bGwpIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRzKSxcbiAgICAgICAgaW50bE9wdHMgPSB7XG4gICAgaG91ckN5Y2xlOiBcImgyM1wiLFxuICAgIHllYXI6IFwibnVtZXJpY1wiLFxuICAgIG1vbnRoOiBcIjItZGlnaXRcIixcbiAgICBkYXk6IFwiMi1kaWdpdFwiLFxuICAgIGhvdXI6IFwiMi1kaWdpdFwiLFxuICAgIG1pbnV0ZTogXCIyLWRpZ2l0XCJcbiAgfTtcblxuICBpZiAodGltZVpvbmUpIHtcbiAgICBpbnRsT3B0cy50aW1lWm9uZSA9IHRpbWVab25lO1xuICB9XG5cbiAgY29uc3QgbW9kaWZpZWQgPSB7XG4gICAgdGltZVpvbmVOYW1lOiBvZmZzZXRGb3JtYXQsXG4gICAgLi4uaW50bE9wdHNcbiAgfTtcbiAgY29uc3QgcGFyc2VkID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBtb2RpZmllZCkuZm9ybWF0VG9QYXJ0cyhkYXRlKS5maW5kKG0gPT4gbS50eXBlLnRvTG93ZXJDYXNlKCkgPT09IFwidGltZXpvbmVuYW1lXCIpO1xuICByZXR1cm4gcGFyc2VkID8gcGFyc2VkLnZhbHVlIDogbnVsbDtcbn0gLy8gc2lnbmVkT2Zmc2V0KCctNScsICczMCcpIC0+IC0zMzBcblxuZnVuY3Rpb24gc2lnbmVkT2Zmc2V0KG9mZkhvdXJTdHIsIG9mZk1pbnV0ZVN0cikge1xuICBsZXQgb2ZmSG91ciA9IHBhcnNlSW50KG9mZkhvdXJTdHIsIDEwKTsgLy8gZG9uJ3QgfHwgdGhpcyBiZWNhdXNlIHdlIHdhbnQgdG8gcHJlc2VydmUgLTBcblxuICBpZiAoTnVtYmVyLmlzTmFOKG9mZkhvdXIpKSB7XG4gICAgb2ZmSG91ciA9IDA7XG4gIH1cblxuICBjb25zdCBvZmZNaW4gPSBwYXJzZUludChvZmZNaW51dGVTdHIsIDEwKSB8fCAwLFxuICAgICAgICBvZmZNaW5TaWduZWQgPSBvZmZIb3VyIDwgMCB8fCBPYmplY3QuaXMob2ZmSG91ciwgLTApID8gLW9mZk1pbiA6IG9mZk1pbjtcbiAgcmV0dXJuIG9mZkhvdXIgKiA2MCArIG9mZk1pblNpZ25lZDtcbn0gLy8gQ09FUkNJT05cblxuZnVuY3Rpb24gYXNOdW1iZXIodmFsdWUpIHtcbiAgY29uc3QgbnVtZXJpY1ZhbHVlID0gTnVtYmVyKHZhbHVlKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIgfHwgdmFsdWUgPT09IFwiXCIgfHwgTnVtYmVyLmlzTmFOKG51bWVyaWNWYWx1ZSkpIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihgSW52YWxpZCB1bml0IHZhbHVlICR7dmFsdWV9YCk7XG4gIHJldHVybiBudW1lcmljVmFsdWU7XG59XG5mdW5jdGlvbiBub3JtYWxpemVPYmplY3Qob2JqLCBub3JtYWxpemVyKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWQgPSB7fTtcblxuICBmb3IgKGNvbnN0IHUgaW4gb2JqKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KG9iaiwgdSkpIHtcbiAgICAgIGNvbnN0IHYgPSBvYmpbdV07XG4gICAgICBpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgbm9ybWFsaXplZFtub3JtYWxpemVyKHUpXSA9IGFzTnVtYmVyKHYpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBub3JtYWxpemVkO1xufVxuZnVuY3Rpb24gZm9ybWF0T2Zmc2V0KG9mZnNldCwgZm9ybWF0KSB7XG4gIGNvbnN0IGhvdXJzID0gTWF0aC50cnVuYyhNYXRoLmFicyhvZmZzZXQgLyA2MCkpLFxuICAgICAgICBtaW51dGVzID0gTWF0aC50cnVuYyhNYXRoLmFicyhvZmZzZXQgJSA2MCkpLFxuICAgICAgICBzaWduID0gb2Zmc2V0ID49IDAgPyBcIitcIiA6IFwiLVwiO1xuXG4gIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgY2FzZSBcInNob3J0XCI6XG4gICAgICByZXR1cm4gYCR7c2lnbn0ke3BhZFN0YXJ0KGhvdXJzLCAyKX06JHtwYWRTdGFydChtaW51dGVzLCAyKX1gO1xuXG4gICAgY2FzZSBcIm5hcnJvd1wiOlxuICAgICAgcmV0dXJuIGAke3NpZ259JHtob3Vyc30ke21pbnV0ZXMgPiAwID8gYDoke21pbnV0ZXN9YCA6IFwiXCJ9YDtcblxuICAgIGNhc2UgXCJ0ZWNoaWVcIjpcbiAgICAgIHJldHVybiBgJHtzaWdufSR7cGFkU3RhcnQoaG91cnMsIDIpfSR7cGFkU3RhcnQobWludXRlcywgMil9YDtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgVmFsdWUgZm9ybWF0ICR7Zm9ybWF0fSBpcyBvdXQgb2YgcmFuZ2UgZm9yIHByb3BlcnR5IGZvcm1hdGApO1xuICB9XG59XG5mdW5jdGlvbiB0aW1lT2JqZWN0KG9iaikge1xuICByZXR1cm4gcGljayhvYmosIFtcImhvdXJcIiwgXCJtaW51dGVcIiwgXCJzZWNvbmRcIiwgXCJtaWxsaXNlY29uZFwiXSk7XG59XG5jb25zdCBpYW5hUmVnZXggPSAvW0EtWmEtel8rLV17MSwyNTZ9KD86Oj9cXC9bQS1aYS16MC05XystXXsxLDI1Nn0oPzpcXC9bQS1aYS16MC05XystXXsxLDI1Nn0pPyk/LztcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuY29uc3QgbW9udGhzTG9uZyA9IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdO1xuY29uc3QgbW9udGhzU2hvcnQgPSBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl07XG5jb25zdCBtb250aHNOYXJyb3cgPSBbXCJKXCIsIFwiRlwiLCBcIk1cIiwgXCJBXCIsIFwiTVwiLCBcIkpcIiwgXCJKXCIsIFwiQVwiLCBcIlNcIiwgXCJPXCIsIFwiTlwiLCBcIkRcIl07XG5mdW5jdGlvbiBtb250aHMobGVuZ3RoKSB7XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSBcIm5hcnJvd1wiOlxuICAgICAgcmV0dXJuIFsuLi5tb250aHNOYXJyb3ddO1xuXG4gICAgY2FzZSBcInNob3J0XCI6XG4gICAgICByZXR1cm4gWy4uLm1vbnRoc1Nob3J0XTtcblxuICAgIGNhc2UgXCJsb25nXCI6XG4gICAgICByZXR1cm4gWy4uLm1vbnRoc0xvbmddO1xuXG4gICAgY2FzZSBcIm51bWVyaWNcIjpcbiAgICAgIHJldHVybiBbXCIxXCIsIFwiMlwiLCBcIjNcIiwgXCI0XCIsIFwiNVwiLCBcIjZcIiwgXCI3XCIsIFwiOFwiLCBcIjlcIiwgXCIxMFwiLCBcIjExXCIsIFwiMTJcIl07XG5cbiAgICBjYXNlIFwiMi1kaWdpdFwiOlxuICAgICAgcmV0dXJuIFtcIjAxXCIsIFwiMDJcIiwgXCIwM1wiLCBcIjA0XCIsIFwiMDVcIiwgXCIwNlwiLCBcIjA3XCIsIFwiMDhcIiwgXCIwOVwiLCBcIjEwXCIsIFwiMTFcIiwgXCIxMlwiXTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuY29uc3Qgd2Vla2RheXNMb25nID0gW1wiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIiwgXCJTdW5kYXlcIl07XG5jb25zdCB3ZWVrZGF5c1Nob3J0ID0gW1wiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCIsIFwiU3VuXCJdO1xuY29uc3Qgd2Vla2RheXNOYXJyb3cgPSBbXCJNXCIsIFwiVFwiLCBcIldcIiwgXCJUXCIsIFwiRlwiLCBcIlNcIiwgXCJTXCJdO1xuZnVuY3Rpb24gd2Vla2RheXMobGVuZ3RoKSB7XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSBcIm5hcnJvd1wiOlxuICAgICAgcmV0dXJuIFsuLi53ZWVrZGF5c05hcnJvd107XG5cbiAgICBjYXNlIFwic2hvcnRcIjpcbiAgICAgIHJldHVybiBbLi4ud2Vla2RheXNTaG9ydF07XG5cbiAgICBjYXNlIFwibG9uZ1wiOlxuICAgICAgcmV0dXJuIFsuLi53ZWVrZGF5c0xvbmddO1xuXG4gICAgY2FzZSBcIm51bWVyaWNcIjpcbiAgICAgIHJldHVybiBbXCIxXCIsIFwiMlwiLCBcIjNcIiwgXCI0XCIsIFwiNVwiLCBcIjZcIiwgXCI3XCJdO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5jb25zdCBtZXJpZGllbXMgPSBbXCJBTVwiLCBcIlBNXCJdO1xuY29uc3QgZXJhc0xvbmcgPSBbXCJCZWZvcmUgQ2hyaXN0XCIsIFwiQW5ubyBEb21pbmlcIl07XG5jb25zdCBlcmFzU2hvcnQgPSBbXCJCQ1wiLCBcIkFEXCJdO1xuY29uc3QgZXJhc05hcnJvdyA9IFtcIkJcIiwgXCJBXCJdO1xuZnVuY3Rpb24gZXJhcyhsZW5ndGgpIHtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIFwibmFycm93XCI6XG4gICAgICByZXR1cm4gWy4uLmVyYXNOYXJyb3ddO1xuXG4gICAgY2FzZSBcInNob3J0XCI6XG4gICAgICByZXR1cm4gWy4uLmVyYXNTaG9ydF07XG5cbiAgICBjYXNlIFwibG9uZ1wiOlxuICAgICAgcmV0dXJuIFsuLi5lcmFzTG9uZ107XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIG1lcmlkaWVtRm9yRGF0ZVRpbWUoZHQpIHtcbiAgcmV0dXJuIG1lcmlkaWVtc1tkdC5ob3VyIDwgMTIgPyAwIDogMV07XG59XG5mdW5jdGlvbiB3ZWVrZGF5Rm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkge1xuICByZXR1cm4gd2Vla2RheXMobGVuZ3RoKVtkdC53ZWVrZGF5IC0gMV07XG59XG5mdW5jdGlvbiBtb250aEZvckRhdGVUaW1lKGR0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIG1vbnRocyhsZW5ndGgpW2R0Lm1vbnRoIC0gMV07XG59XG5mdW5jdGlvbiBlcmFGb3JEYXRlVGltZShkdCwgbGVuZ3RoKSB7XG4gIHJldHVybiBlcmFzKGxlbmd0aClbZHQueWVhciA8IDAgPyAwIDogMV07XG59XG5mdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZVRpbWUodW5pdCwgY291bnQsIG51bWVyaWMgPSBcImFsd2F5c1wiLCBuYXJyb3cgPSBmYWxzZSkge1xuICBjb25zdCB1bml0cyA9IHtcbiAgICB5ZWFyczogW1wieWVhclwiLCBcInlyLlwiXSxcbiAgICBxdWFydGVyczogW1wicXVhcnRlclwiLCBcInF0ci5cIl0sXG4gICAgbW9udGhzOiBbXCJtb250aFwiLCBcIm1vLlwiXSxcbiAgICB3ZWVrczogW1wid2Vla1wiLCBcIndrLlwiXSxcbiAgICBkYXlzOiBbXCJkYXlcIiwgXCJkYXlcIiwgXCJkYXlzXCJdLFxuICAgIGhvdXJzOiBbXCJob3VyXCIsIFwiaHIuXCJdLFxuICAgIG1pbnV0ZXM6IFtcIm1pbnV0ZVwiLCBcIm1pbi5cIl0sXG4gICAgc2Vjb25kczogW1wic2Vjb25kXCIsIFwic2VjLlwiXVxuICB9O1xuICBjb25zdCBsYXN0YWJsZSA9IFtcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIl0uaW5kZXhPZih1bml0KSA9PT0gLTE7XG5cbiAgaWYgKG51bWVyaWMgPT09IFwiYXV0b1wiICYmIGxhc3RhYmxlKSB7XG4gICAgY29uc3QgaXNEYXkgPSB1bml0ID09PSBcImRheXNcIjtcblxuICAgIHN3aXRjaCAoY291bnQpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIGlzRGF5ID8gXCJ0b21vcnJvd1wiIDogYG5leHQgJHt1bml0c1t1bml0XVswXX1gO1xuXG4gICAgICBjYXNlIC0xOlxuICAgICAgICByZXR1cm4gaXNEYXkgPyBcInllc3RlcmRheVwiIDogYGxhc3QgJHt1bml0c1t1bml0XVswXX1gO1xuXG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiBpc0RheSA/IFwidG9kYXlcIiA6IGB0aGlzICR7dW5pdHNbdW5pdF1bMF19YDtcblxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGlzSW5QYXN0ID0gT2JqZWN0LmlzKGNvdW50LCAtMCkgfHwgY291bnQgPCAwLFxuICAgICAgICBmbXRWYWx1ZSA9IE1hdGguYWJzKGNvdW50KSxcbiAgICAgICAgc2luZ3VsYXIgPSBmbXRWYWx1ZSA9PT0gMSxcbiAgICAgICAgbGlsVW5pdHMgPSB1bml0c1t1bml0XSxcbiAgICAgICAgZm10VW5pdCA9IG5hcnJvdyA/IHNpbmd1bGFyID8gbGlsVW5pdHNbMV0gOiBsaWxVbml0c1syXSB8fCBsaWxVbml0c1sxXSA6IHNpbmd1bGFyID8gdW5pdHNbdW5pdF1bMF0gOiB1bml0O1xuICByZXR1cm4gaXNJblBhc3QgPyBgJHtmbXRWYWx1ZX0gJHtmbXRVbml0fSBhZ29gIDogYGluICR7Zm10VmFsdWV9ICR7Zm10VW5pdH1gO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlUb2tlbnMoc3BsaXRzLCB0b2tlblRvU3RyaW5nKSB7XG4gIGxldCBzID0gXCJcIjtcblxuICBmb3IgKGNvbnN0IHRva2VuIG9mIHNwbGl0cykge1xuICAgIGlmICh0b2tlbi5saXRlcmFsKSB7XG4gICAgICBzICs9IHRva2VuLnZhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcyArPSB0b2tlblRvU3RyaW5nKHRva2VuLnZhbCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHM7XG59XG5cbmNvbnN0IG1hY3JvVG9rZW5Ub0Zvcm1hdE9wdHMgPSB7XG4gIEQ6IERBVEVfU0hPUlQsXG4gIEREOiBEQVRFX01FRCxcbiAgREREOiBEQVRFX0ZVTEwsXG4gIEREREQ6IERBVEVfSFVHRSxcbiAgdDogVElNRV9TSU1QTEUsXG4gIHR0OiBUSU1FX1dJVEhfU0VDT05EUyxcbiAgdHR0OiBUSU1FX1dJVEhfU0hPUlRfT0ZGU0VULFxuICB0dHR0OiBUSU1FX1dJVEhfTE9OR19PRkZTRVQsXG4gIFQ6IFRJTUVfMjRfU0lNUExFLFxuICBUVDogVElNRV8yNF9XSVRIX1NFQ09ORFMsXG4gIFRUVDogVElNRV8yNF9XSVRIX1NIT1JUX09GRlNFVCxcbiAgVFRUVDogVElNRV8yNF9XSVRIX0xPTkdfT0ZGU0VULFxuICBmOiBEQVRFVElNRV9TSE9SVCxcbiAgZmY6IERBVEVUSU1FX01FRCxcbiAgZmZmOiBEQVRFVElNRV9GVUxMLFxuICBmZmZmOiBEQVRFVElNRV9IVUdFLFxuICBGOiBEQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFMsXG4gIEZGOiBEQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTLFxuICBGRkY6IERBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTLFxuICBGRkZGOiBEQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EU1xufTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jbGFzcyBGb3JtYXR0ZXIge1xuICBzdGF0aWMgY3JlYXRlKGxvY2FsZSwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBGb3JtYXR0ZXIobG9jYWxlLCBvcHRzKTtcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZUZvcm1hdChmbXQpIHtcbiAgICBsZXQgY3VycmVudCA9IG51bGwsXG4gICAgICAgIGN1cnJlbnRGdWxsID0gXCJcIixcbiAgICAgICAgYnJhY2tldGVkID0gZmFsc2U7XG4gICAgY29uc3Qgc3BsaXRzID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZtdC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYyA9IGZtdC5jaGFyQXQoaSk7XG5cbiAgICAgIGlmIChjID09PSBcIidcIikge1xuICAgICAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNwbGl0cy5wdXNoKHtcbiAgICAgICAgICAgIGxpdGVyYWw6IGJyYWNrZXRlZCxcbiAgICAgICAgICAgIHZhbDogY3VycmVudEZ1bGxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPSBudWxsO1xuICAgICAgICBjdXJyZW50RnVsbCA9IFwiXCI7XG4gICAgICAgIGJyYWNrZXRlZCA9ICFicmFja2V0ZWQ7XG4gICAgICB9IGVsc2UgaWYgKGJyYWNrZXRlZCkge1xuICAgICAgICBjdXJyZW50RnVsbCArPSBjO1xuICAgICAgfSBlbHNlIGlmIChjID09PSBjdXJyZW50KSB7XG4gICAgICAgIGN1cnJlbnRGdWxsICs9IGM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNwbGl0cy5wdXNoKHtcbiAgICAgICAgICAgIGxpdGVyYWw6IGZhbHNlLFxuICAgICAgICAgICAgdmFsOiBjdXJyZW50RnVsbFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudEZ1bGwgPSBjO1xuICAgICAgICBjdXJyZW50ID0gYztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgc3BsaXRzLnB1c2goe1xuICAgICAgICBsaXRlcmFsOiBicmFja2V0ZWQsXG4gICAgICAgIHZhbDogY3VycmVudEZ1bGxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzcGxpdHM7XG4gIH1cblxuICBzdGF0aWMgbWFjcm9Ub2tlblRvRm9ybWF0T3B0cyh0b2tlbikge1xuICAgIHJldHVybiBtYWNyb1Rva2VuVG9Gb3JtYXRPcHRzW3Rva2VuXTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGxvY2FsZSwgZm9ybWF0T3B0cykge1xuICAgIHRoaXMub3B0cyA9IGZvcm1hdE9wdHM7XG4gICAgdGhpcy5sb2MgPSBsb2NhbGU7XG4gICAgdGhpcy5zeXN0ZW1Mb2MgPSBudWxsO1xuICB9XG5cbiAgZm9ybWF0V2l0aFN5c3RlbURlZmF1bHQoZHQsIG9wdHMpIHtcbiAgICBpZiAodGhpcy5zeXN0ZW1Mb2MgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuc3lzdGVtTG9jID0gdGhpcy5sb2MucmVkZWZhdWx0VG9TeXN0ZW0oKTtcbiAgICB9XG5cbiAgICBjb25zdCBkZiA9IHRoaXMuc3lzdGVtTG9jLmR0Rm9ybWF0dGVyKGR0LCB7IC4uLnRoaXMub3B0cyxcbiAgICAgIC4uLm9wdHNcbiAgICB9KTtcbiAgICByZXR1cm4gZGYuZm9ybWF0KCk7XG4gIH1cblxuICBmb3JtYXREYXRlVGltZShkdCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgZGYgPSB0aGlzLmxvYy5kdEZvcm1hdHRlcihkdCwgeyAuLi50aGlzLm9wdHMsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgcmV0dXJuIGRmLmZvcm1hdCgpO1xuICB9XG5cbiAgZm9ybWF0RGF0ZVRpbWVQYXJ0cyhkdCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgZGYgPSB0aGlzLmxvYy5kdEZvcm1hdHRlcihkdCwgeyAuLi50aGlzLm9wdHMsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgcmV0dXJuIGRmLmZvcm1hdFRvUGFydHMoKTtcbiAgfVxuXG4gIHJlc29sdmVkT3B0aW9ucyhkdCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgZGYgPSB0aGlzLmxvYy5kdEZvcm1hdHRlcihkdCwgeyAuLi50aGlzLm9wdHMsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgcmV0dXJuIGRmLnJlc29sdmVkT3B0aW9ucygpO1xuICB9XG5cbiAgbnVtKG4sIHAgPSAwKSB7XG4gICAgLy8gd2UgZ2V0IHNvbWUgcGVyZiBvdXQgb2YgZG9pbmcgdGhpcyBoZXJlLCBhbm5veWluZ2x5XG4gICAgaWYgKHRoaXMub3B0cy5mb3JjZVNpbXBsZSkge1xuICAgICAgcmV0dXJuIHBhZFN0YXJ0KG4sIHApO1xuICAgIH1cblxuICAgIGNvbnN0IG9wdHMgPSB7IC4uLnRoaXMub3B0c1xuICAgIH07XG5cbiAgICBpZiAocCA+IDApIHtcbiAgICAgIG9wdHMucGFkVG8gPSBwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmxvYy5udW1iZXJGb3JtYXR0ZXIob3B0cykuZm9ybWF0KG4pO1xuICB9XG5cbiAgZm9ybWF0RGF0ZVRpbWVGcm9tU3RyaW5nKGR0LCBmbXQpIHtcbiAgICBjb25zdCBrbm93bkVuZ2xpc2ggPSB0aGlzLmxvYy5saXN0aW5nTW9kZSgpID09PSBcImVuXCIsXG4gICAgICAgICAgdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPSB0aGlzLmxvYy5vdXRwdXRDYWxlbmRhciAmJiB0aGlzLmxvYy5vdXRwdXRDYWxlbmRhciAhPT0gXCJncmVnb3J5XCIsXG4gICAgICAgICAgc3RyaW5nID0gKG9wdHMsIGV4dHJhY3QpID0+IHRoaXMubG9jLmV4dHJhY3QoZHQsIG9wdHMsIGV4dHJhY3QpLFxuICAgICAgICAgIGZvcm1hdE9mZnNldCA9IG9wdHMgPT4ge1xuICAgICAgaWYgKGR0LmlzT2Zmc2V0Rml4ZWQgJiYgZHQub2Zmc2V0ID09PSAwICYmIG9wdHMuYWxsb3daKSB7XG4gICAgICAgIHJldHVybiBcIlpcIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGR0LmlzVmFsaWQgPyBkdC56b25lLmZvcm1hdE9mZnNldChkdC50cywgb3B0cy5mb3JtYXQpIDogXCJcIjtcbiAgICB9LFxuICAgICAgICAgIG1lcmlkaWVtID0gKCkgPT4ga25vd25FbmdsaXNoID8gbWVyaWRpZW1Gb3JEYXRlVGltZShkdCkgOiBzdHJpbmcoe1xuICAgICAgaG91cjogXCJudW1lcmljXCIsXG4gICAgICBob3VyQ3ljbGU6IFwiaDEyXCJcbiAgICB9LCBcImRheXBlcmlvZFwiKSxcbiAgICAgICAgICBtb250aCA9IChsZW5ndGgsIHN0YW5kYWxvbmUpID0+IGtub3duRW5nbGlzaCA/IG1vbnRoRm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkgOiBzdHJpbmcoc3RhbmRhbG9uZSA/IHtcbiAgICAgIG1vbnRoOiBsZW5ndGhcbiAgICB9IDoge1xuICAgICAgbW9udGg6IGxlbmd0aCxcbiAgICAgIGRheTogXCJudW1lcmljXCJcbiAgICB9LCBcIm1vbnRoXCIpLFxuICAgICAgICAgIHdlZWtkYXkgPSAobGVuZ3RoLCBzdGFuZGFsb25lKSA9PiBrbm93bkVuZ2xpc2ggPyB3ZWVrZGF5Rm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkgOiBzdHJpbmcoc3RhbmRhbG9uZSA/IHtcbiAgICAgIHdlZWtkYXk6IGxlbmd0aFxuICAgIH0gOiB7XG4gICAgICB3ZWVrZGF5OiBsZW5ndGgsXG4gICAgICBtb250aDogXCJsb25nXCIsXG4gICAgICBkYXk6IFwibnVtZXJpY1wiXG4gICAgfSwgXCJ3ZWVrZGF5XCIpLFxuICAgICAgICAgIG1heWJlTWFjcm8gPSB0b2tlbiA9PiB7XG4gICAgICBjb25zdCBmb3JtYXRPcHRzID0gRm9ybWF0dGVyLm1hY3JvVG9rZW5Ub0Zvcm1hdE9wdHModG9rZW4pO1xuXG4gICAgICBpZiAoZm9ybWF0T3B0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRXaXRoU3lzdGVtRGVmYXVsdChkdCwgZm9ybWF0T3B0cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgICBlcmEgPSBsZW5ndGggPT4ga25vd25FbmdsaXNoID8gZXJhRm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkgOiBzdHJpbmcoe1xuICAgICAgZXJhOiBsZW5ndGhcbiAgICB9LCBcImVyYVwiKSxcbiAgICAgICAgICB0b2tlblRvU3RyaW5nID0gdG9rZW4gPT4ge1xuICAgICAgLy8gV2hlcmUgcG9zc2libGU6IGh0dHA6Ly9jbGRyLnVuaWNvZGUub3JnL3RyYW5zbGF0aW9uL2RhdGUtdGltZS0xL2RhdGUtdGltZSNUT0MtU3RhbmRhbG9uZS12cy4tRm9ybWF0LVN0eWxlc1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAvLyBtc1xuICAgICAgICBjYXNlIFwiU1wiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5taWxsaXNlY29uZCk7XG5cbiAgICAgICAgY2FzZSBcInVcIjogLy8gZmFsbHMgdGhyb3VnaFxuXG4gICAgICAgIGNhc2UgXCJTU1NcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubWlsbGlzZWNvbmQsIDMpO1xuICAgICAgICAvLyBzZWNvbmRzXG5cbiAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQuc2Vjb25kKTtcblxuICAgICAgICBjYXNlIFwic3NcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQuc2Vjb25kLCAyKTtcbiAgICAgICAgLy8gZnJhY3Rpb25hbCBzZWNvbmRzXG5cbiAgICAgICAgY2FzZSBcInV1XCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKE1hdGguZmxvb3IoZHQubWlsbGlzZWNvbmQgLyAxMCksIDIpO1xuXG4gICAgICAgIGNhc2UgXCJ1dXVcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oTWF0aC5mbG9vcihkdC5taWxsaXNlY29uZCAvIDEwMCkpO1xuICAgICAgICAvLyBtaW51dGVzXG5cbiAgICAgICAgY2FzZSBcIm1cIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubWludXRlKTtcblxuICAgICAgICBjYXNlIFwibW1cIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubWludXRlLCAyKTtcbiAgICAgICAgLy8gaG91cnNcblxuICAgICAgICBjYXNlIFwiaFwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5ob3VyICUgMTIgPT09IDAgPyAxMiA6IGR0LmhvdXIgJSAxMik7XG5cbiAgICAgICAgY2FzZSBcImhoXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LmhvdXIgJSAxMiA9PT0gMCA/IDEyIDogZHQuaG91ciAlIDEyLCAyKTtcblxuICAgICAgICBjYXNlIFwiSFwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5ob3VyKTtcblxuICAgICAgICBjYXNlIFwiSEhcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQuaG91ciwgMik7XG4gICAgICAgIC8vIG9mZnNldFxuXG4gICAgICAgIGNhc2UgXCJaXCI6XG4gICAgICAgICAgLy8gbGlrZSArNlxuICAgICAgICAgIHJldHVybiBmb3JtYXRPZmZzZXQoe1xuICAgICAgICAgICAgZm9ybWF0OiBcIm5hcnJvd1wiLFxuICAgICAgICAgICAgYWxsb3daOiB0aGlzLm9wdHMuYWxsb3daXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSBcIlpaXCI6XG4gICAgICAgICAgLy8gbGlrZSArMDY6MDBcbiAgICAgICAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHtcbiAgICAgICAgICAgIGZvcm1hdDogXCJzaG9ydFwiLFxuICAgICAgICAgICAgYWxsb3daOiB0aGlzLm9wdHMuYWxsb3daXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSBcIlpaWlwiOlxuICAgICAgICAgIC8vIGxpa2UgKzA2MDBcbiAgICAgICAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHtcbiAgICAgICAgICAgIGZvcm1hdDogXCJ0ZWNoaWVcIixcbiAgICAgICAgICAgIGFsbG93WjogdGhpcy5vcHRzLmFsbG93WlxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNhc2UgXCJaWlpaXCI6XG4gICAgICAgICAgLy8gbGlrZSBFU1RcbiAgICAgICAgICByZXR1cm4gZHQuem9uZS5vZmZzZXROYW1lKGR0LnRzLCB7XG4gICAgICAgICAgICBmb3JtYXQ6IFwic2hvcnRcIixcbiAgICAgICAgICAgIGxvY2FsZTogdGhpcy5sb2MubG9jYWxlXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSBcIlpaWlpaXCI6XG4gICAgICAgICAgLy8gbGlrZSBFYXN0ZXJuIFN0YW5kYXJkIFRpbWVcbiAgICAgICAgICByZXR1cm4gZHQuem9uZS5vZmZzZXROYW1lKGR0LnRzLCB7XG4gICAgICAgICAgICBmb3JtYXQ6IFwibG9uZ1wiLFxuICAgICAgICAgICAgbG9jYWxlOiB0aGlzLmxvYy5sb2NhbGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gem9uZVxuXG4gICAgICAgIGNhc2UgXCJ6XCI6XG4gICAgICAgICAgLy8gbGlrZSBBbWVyaWNhL05ld19Zb3JrXG4gICAgICAgICAgcmV0dXJuIGR0LnpvbmVOYW1lO1xuICAgICAgICAvLyBtZXJpZGllbXNcblxuICAgICAgICBjYXNlIFwiYVwiOlxuICAgICAgICAgIHJldHVybiBtZXJpZGllbSgpO1xuICAgICAgICAvLyBkYXRlc1xuXG4gICAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHtcbiAgICAgICAgICAgIGRheTogXCJudW1lcmljXCJcbiAgICAgICAgICB9LCBcImRheVwiKSA6IHRoaXMubnVtKGR0LmRheSk7XG5cbiAgICAgICAgY2FzZSBcImRkXCI6XG4gICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHtcbiAgICAgICAgICAgIGRheTogXCIyLWRpZ2l0XCJcbiAgICAgICAgICB9LCBcImRheVwiKSA6IHRoaXMubnVtKGR0LmRheSwgMik7XG4gICAgICAgIC8vIHdlZWtkYXlzIC0gc3RhbmRhbG9uZVxuXG4gICAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgICAgLy8gbGlrZSAxXG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtkYXkpO1xuXG4gICAgICAgIGNhc2UgXCJjY2NcIjpcbiAgICAgICAgICAvLyBsaWtlICdUdWVzJ1xuICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwic2hvcnRcIiwgdHJ1ZSk7XG5cbiAgICAgICAgY2FzZSBcImNjY2NcIjpcbiAgICAgICAgICAvLyBsaWtlICdUdWVzZGF5J1xuICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwibG9uZ1wiLCB0cnVlKTtcblxuICAgICAgICBjYXNlIFwiY2NjY2NcIjpcbiAgICAgICAgICAvLyBsaWtlICdUJ1xuICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwibmFycm93XCIsIHRydWUpO1xuICAgICAgICAvLyB3ZWVrZGF5cyAtIGZvcm1hdFxuXG4gICAgICAgIGNhc2UgXCJFXCI6XG4gICAgICAgICAgLy8gbGlrZSAxXG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtkYXkpO1xuXG4gICAgICAgIGNhc2UgXCJFRUVcIjpcbiAgICAgICAgICAvLyBsaWtlICdUdWVzJ1xuICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwic2hvcnRcIiwgZmFsc2UpO1xuXG4gICAgICAgIGNhc2UgXCJFRUVFXCI6XG4gICAgICAgICAgLy8gbGlrZSAnVHVlc2RheSdcbiAgICAgICAgICByZXR1cm4gd2Vla2RheShcImxvbmdcIiwgZmFsc2UpO1xuXG4gICAgICAgIGNhc2UgXCJFRUVFRVwiOlxuICAgICAgICAgIC8vIGxpa2UgJ1QnXG4gICAgICAgICAgcmV0dXJuIHdlZWtkYXkoXCJuYXJyb3dcIiwgZmFsc2UpO1xuICAgICAgICAvLyBtb250aHMgLSBzdGFuZGFsb25lXG5cbiAgICAgICAgY2FzZSBcIkxcIjpcbiAgICAgICAgICAvLyBsaWtlIDFcbiAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoe1xuICAgICAgICAgICAgbW9udGg6IFwibnVtZXJpY1wiLFxuICAgICAgICAgICAgZGF5OiBcIm51bWVyaWNcIlxuICAgICAgICAgIH0sIFwibW9udGhcIikgOiB0aGlzLm51bShkdC5tb250aCk7XG5cbiAgICAgICAgY2FzZSBcIkxMXCI6XG4gICAgICAgICAgLy8gbGlrZSAwMSwgZG9lc24ndCBzZWVtIHRvIHdvcmtcbiAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoe1xuICAgICAgICAgICAgbW9udGg6IFwiMi1kaWdpdFwiLFxuICAgICAgICAgICAgZGF5OiBcIm51bWVyaWNcIlxuICAgICAgICAgIH0sIFwibW9udGhcIikgOiB0aGlzLm51bShkdC5tb250aCwgMik7XG5cbiAgICAgICAgY2FzZSBcIkxMTFwiOlxuICAgICAgICAgIC8vIGxpa2UgSmFuXG4gICAgICAgICAgcmV0dXJuIG1vbnRoKFwic2hvcnRcIiwgdHJ1ZSk7XG5cbiAgICAgICAgY2FzZSBcIkxMTExcIjpcbiAgICAgICAgICAvLyBsaWtlIEphbnVhcnlcbiAgICAgICAgICByZXR1cm4gbW9udGgoXCJsb25nXCIsIHRydWUpO1xuXG4gICAgICAgIGNhc2UgXCJMTExMTFwiOlxuICAgICAgICAgIC8vIGxpa2UgSlxuICAgICAgICAgIHJldHVybiBtb250aChcIm5hcnJvd1wiLCB0cnVlKTtcbiAgICAgICAgLy8gbW9udGhzIC0gZm9ybWF0XG5cbiAgICAgICAgY2FzZSBcIk1cIjpcbiAgICAgICAgICAvLyBsaWtlIDFcbiAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoe1xuICAgICAgICAgICAgbW9udGg6IFwibnVtZXJpY1wiXG4gICAgICAgICAgfSwgXCJtb250aFwiKSA6IHRoaXMubnVtKGR0Lm1vbnRoKTtcblxuICAgICAgICBjYXNlIFwiTU1cIjpcbiAgICAgICAgICAvLyBsaWtlIDAxXG4gICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHtcbiAgICAgICAgICAgIG1vbnRoOiBcIjItZGlnaXRcIlxuICAgICAgICAgIH0sIFwibW9udGhcIikgOiB0aGlzLm51bShkdC5tb250aCwgMik7XG5cbiAgICAgICAgY2FzZSBcIk1NTVwiOlxuICAgICAgICAgIC8vIGxpa2UgSmFuXG4gICAgICAgICAgcmV0dXJuIG1vbnRoKFwic2hvcnRcIiwgZmFsc2UpO1xuXG4gICAgICAgIGNhc2UgXCJNTU1NXCI6XG4gICAgICAgICAgLy8gbGlrZSBKYW51YXJ5XG4gICAgICAgICAgcmV0dXJuIG1vbnRoKFwibG9uZ1wiLCBmYWxzZSk7XG5cbiAgICAgICAgY2FzZSBcIk1NTU1NXCI6XG4gICAgICAgICAgLy8gbGlrZSBKXG4gICAgICAgICAgcmV0dXJuIG1vbnRoKFwibmFycm93XCIsIGZhbHNlKTtcbiAgICAgICAgLy8geWVhcnNcblxuICAgICAgICBjYXNlIFwieVwiOlxuICAgICAgICAgIC8vIGxpa2UgMjAxNFxuICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZyh7XG4gICAgICAgICAgICB5ZWFyOiBcIm51bWVyaWNcIlxuICAgICAgICAgIH0sIFwieWVhclwiKSA6IHRoaXMubnVtKGR0LnllYXIpO1xuXG4gICAgICAgIGNhc2UgXCJ5eVwiOlxuICAgICAgICAgIC8vIGxpa2UgMTRcbiAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoe1xuICAgICAgICAgICAgeWVhcjogXCIyLWRpZ2l0XCJcbiAgICAgICAgICB9LCBcInllYXJcIikgOiB0aGlzLm51bShkdC55ZWFyLnRvU3RyaW5nKCkuc2xpY2UoLTIpLCAyKTtcblxuICAgICAgICBjYXNlIFwieXl5eVwiOlxuICAgICAgICAgIC8vIGxpa2UgMDAxMlxuICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZyh7XG4gICAgICAgICAgICB5ZWFyOiBcIm51bWVyaWNcIlxuICAgICAgICAgIH0sIFwieWVhclwiKSA6IHRoaXMubnVtKGR0LnllYXIsIDQpO1xuXG4gICAgICAgIGNhc2UgXCJ5eXl5eXlcIjpcbiAgICAgICAgICAvLyBsaWtlIDAwMDAxMlxuICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZyh7XG4gICAgICAgICAgICB5ZWFyOiBcIm51bWVyaWNcIlxuICAgICAgICAgIH0sIFwieWVhclwiKSA6IHRoaXMubnVtKGR0LnllYXIsIDYpO1xuICAgICAgICAvLyBlcmFzXG5cbiAgICAgICAgY2FzZSBcIkdcIjpcbiAgICAgICAgICAvLyBsaWtlIEFEXG4gICAgICAgICAgcmV0dXJuIGVyYShcInNob3J0XCIpO1xuXG4gICAgICAgIGNhc2UgXCJHR1wiOlxuICAgICAgICAgIC8vIGxpa2UgQW5ubyBEb21pbmlcbiAgICAgICAgICByZXR1cm4gZXJhKFwibG9uZ1wiKTtcblxuICAgICAgICBjYXNlIFwiR0dHR0dcIjpcbiAgICAgICAgICByZXR1cm4gZXJhKFwibmFycm93XCIpO1xuXG4gICAgICAgIGNhc2UgXCJra1wiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrWWVhci50b1N0cmluZygpLnNsaWNlKC0yKSwgMik7XG5cbiAgICAgICAgY2FzZSBcImtra2tcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQud2Vla1llYXIsIDQpO1xuXG4gICAgICAgIGNhc2UgXCJXXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtOdW1iZXIpO1xuXG4gICAgICAgIGNhc2UgXCJXV1wiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrTnVtYmVyLCAyKTtcblxuICAgICAgICBjYXNlIFwib1wiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5vcmRpbmFsKTtcblxuICAgICAgICBjYXNlIFwib29vXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0Lm9yZGluYWwsIDMpO1xuXG4gICAgICAgIGNhc2UgXCJxXCI6XG4gICAgICAgICAgLy8gbGlrZSAxXG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LnF1YXJ0ZXIpO1xuXG4gICAgICAgIGNhc2UgXCJxcVwiOlxuICAgICAgICAgIC8vIGxpa2UgMDFcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQucXVhcnRlciwgMik7XG5cbiAgICAgICAgY2FzZSBcIlhcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oTWF0aC5mbG9vcihkdC50cyAvIDEwMDApKTtcblxuICAgICAgICBjYXNlIFwieFwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC50cyk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF5YmVNYWNybyh0b2tlbik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBzdHJpbmdpZnlUb2tlbnMoRm9ybWF0dGVyLnBhcnNlRm9ybWF0KGZtdCksIHRva2VuVG9TdHJpbmcpO1xuICB9XG5cbiAgZm9ybWF0RHVyYXRpb25Gcm9tU3RyaW5nKGR1ciwgZm10KSB7XG4gICAgY29uc3QgdG9rZW5Ub0ZpZWxkID0gdG9rZW4gPT4ge1xuICAgICAgc3dpdGNoICh0b2tlblswXSkge1xuICAgICAgICBjYXNlIFwiU1wiOlxuICAgICAgICAgIHJldHVybiBcIm1pbGxpc2Vjb25kXCI7XG5cbiAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICByZXR1cm4gXCJzZWNvbmRcIjtcblxuICAgICAgICBjYXNlIFwibVwiOlxuICAgICAgICAgIHJldHVybiBcIm1pbnV0ZVwiO1xuXG4gICAgICAgIGNhc2UgXCJoXCI6XG4gICAgICAgICAgcmV0dXJuIFwiaG91clwiO1xuXG4gICAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgICAgcmV0dXJuIFwiZGF5XCI7XG5cbiAgICAgICAgY2FzZSBcIndcIjpcbiAgICAgICAgICByZXR1cm4gXCJ3ZWVrXCI7XG5cbiAgICAgICAgY2FzZSBcIk1cIjpcbiAgICAgICAgICByZXR1cm4gXCJtb250aFwiO1xuXG4gICAgICAgIGNhc2UgXCJ5XCI6XG4gICAgICAgICAgcmV0dXJuIFwieWVhclwiO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgICB0b2tlblRvU3RyaW5nID0gbGlsZHVyID0+IHRva2VuID0+IHtcbiAgICAgIGNvbnN0IG1hcHBlZCA9IHRva2VuVG9GaWVsZCh0b2tlbik7XG5cbiAgICAgIGlmIChtYXBwZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubnVtKGxpbGR1ci5nZXQobWFwcGVkKSwgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgIH1cbiAgICB9LFxuICAgICAgICAgIHRva2VucyA9IEZvcm1hdHRlci5wYXJzZUZvcm1hdChmbXQpLFxuICAgICAgICAgIHJlYWxUb2tlbnMgPSB0b2tlbnMucmVkdWNlKChmb3VuZCwge1xuICAgICAgbGl0ZXJhbCxcbiAgICAgIHZhbFxuICAgIH0pID0+IGxpdGVyYWwgPyBmb3VuZCA6IGZvdW5kLmNvbmNhdCh2YWwpLCBbXSksXG4gICAgICAgICAgY29sbGFwc2VkID0gZHVyLnNoaWZ0VG8oLi4ucmVhbFRva2Vucy5tYXAodG9rZW5Ub0ZpZWxkKS5maWx0ZXIodCA9PiB0KSk7XG5cbiAgICByZXR1cm4gc3RyaW5naWZ5VG9rZW5zKHRva2VucywgdG9rZW5Ub1N0cmluZyhjb2xsYXBzZWQpKTtcbiAgfVxuXG59XG5cbmNsYXNzIEludmFsaWQge1xuICBjb25zdHJ1Y3RvcihyZWFzb24sIGV4cGxhbmF0aW9uKSB7XG4gICAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgdGhpcy5leHBsYW5hdGlvbiA9IGV4cGxhbmF0aW9uO1xuICB9XG5cbiAgdG9NZXNzYWdlKCkge1xuICAgIGlmICh0aGlzLmV4cGxhbmF0aW9uKSB7XG4gICAgICByZXR1cm4gYCR7dGhpcy5yZWFzb259OiAke3RoaXMuZXhwbGFuYXRpb259YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxuXG59XG5cbi8qKlxuICogQGludGVyZmFjZVxuICovXG5cbmNsYXNzIFpvbmUge1xuICAvKipcbiAgICogVGhlIHR5cGUgb2Ygem9uZVxuICAgKiBAYWJzdHJhY3RcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCB0eXBlKCkge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoaXMgem9uZS5cbiAgICogQGFic3RyYWN0XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IG5hbWUoKSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuXG4gIGdldCBpYW5hTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIG9mZnNldCBpcyBrbm93biB0byBiZSBmaXhlZCBmb3IgdGhlIHdob2xlIHllYXIuXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBnZXQgaXNVbml2ZXJzYWwoKSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb2Zmc2V0J3MgY29tbW9uIG5hbWUgKHN1Y2ggYXMgRVNUKSBhdCB0aGUgc3BlY2lmaWVkIHRpbWVzdGFtcFxuICAgKiBAYWJzdHJhY3RcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRzIC0gRXBvY2ggbWlsbGlzZWNvbmRzIGZvciB3aGljaCB0byBnZXQgdGhlIG5hbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBPcHRpb25zIHRvIGFmZmVjdCB0aGUgZm9ybWF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZvcm1hdCAtIFdoYXQgc3R5bGUgb2Ygb2Zmc2V0IHRvIHJldHVybi4gQWNjZXB0cyAnbG9uZycgb3IgJ3Nob3J0Jy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubG9jYWxlIC0gV2hhdCBsb2NhbGUgdG8gcmV0dXJuIHRoZSBvZmZzZXQgbmFtZSBpbi5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIG9mZnNldE5hbWUodHMsIG9wdHMpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBvZmZzZXQncyB2YWx1ZSBhcyBhIHN0cmluZ1xuICAgKiBAYWJzdHJhY3RcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRzIC0gRXBvY2ggbWlsbGlzZWNvbmRzIGZvciB3aGljaCB0byBnZXQgdGhlIG9mZnNldFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0IC0gV2hhdCBzdHlsZSBvZiBvZmZzZXQgdG8gcmV0dXJuLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQWNjZXB0cyAnbmFycm93JywgJ3Nob3J0Jywgb3IgJ3RlY2hpZScuIFJldHVybmluZyAnKzYnLCAnKzA2OjAwJywgb3IgJyswNjAwJyByZXNwZWN0aXZlbHlcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIGZvcm1hdE9mZnNldCh0cywgZm9ybWF0KSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSBvZmZzZXQgaW4gbWludXRlcyBmb3IgdGhpcyB6b25lIGF0IHRoZSBzcGVjaWZpZWQgdGltZXN0YW1wLlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRzIC0gRXBvY2ggbWlsbGlzZWNvbmRzIGZvciB3aGljaCB0byBjb21wdXRlIHRoZSBvZmZzZXRcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cblxuXG4gIG9mZnNldCh0cykge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgWm9uZSBpcyBlcXVhbCB0byBhbm90aGVyIHpvbmVcbiAgICogQGFic3RyYWN0XG4gICAqIEBwYXJhbSB7Wm9uZX0gb3RoZXJab25lIC0gdGhlIHpvbmUgdG8gY29tcGFyZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIGVxdWFscyhvdGhlclpvbmUpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIFpvbmUgaXMgdmFsaWQuXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBnZXQgaXNWYWxpZCgpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG5cbn1cblxubGV0IHNpbmdsZXRvbiQxID0gbnVsbDtcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgbG9jYWwgem9uZSBmb3IgdGhpcyBKYXZhU2NyaXB0IGVudmlyb25tZW50LlxuICogQGltcGxlbWVudHMge1pvbmV9XG4gKi9cblxuY2xhc3MgU3lzdGVtWm9uZSBleHRlbmRzIFpvbmUge1xuICAvKipcbiAgICogR2V0IGEgc2luZ2xldG9uIGluc3RhbmNlIG9mIHRoZSBsb2NhbCB6b25lXG4gICAqIEByZXR1cm4ge1N5c3RlbVpvbmV9XG4gICAqL1xuICBzdGF0aWMgZ2V0IGluc3RhbmNlKCkge1xuICAgIGlmIChzaW5nbGV0b24kMSA9PT0gbnVsbCkge1xuICAgICAgc2luZ2xldG9uJDEgPSBuZXcgU3lzdGVtWm9uZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBzaW5nbGV0b24kMTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuIFwic3lzdGVtXCI7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cblxuXG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLnRpbWVab25lO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBnZXQgaXNVbml2ZXJzYWwoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBvZmZzZXROYW1lKHRzLCB7XG4gICAgZm9ybWF0LFxuICAgIGxvY2FsZVxuICB9KSB7XG4gICAgcmV0dXJuIHBhcnNlWm9uZUluZm8odHMsIGZvcm1hdCwgbG9jYWxlKTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZm9ybWF0T2Zmc2V0KHRzLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHRoaXMub2Zmc2V0KHRzKSwgZm9ybWF0KTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgb2Zmc2V0KHRzKSB7XG4gICAgcmV0dXJuIC1uZXcgRGF0ZSh0cykuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZXF1YWxzKG90aGVyWm9uZSkge1xuICAgIHJldHVybiBvdGhlclpvbmUudHlwZSA9PT0gXCJzeXN0ZW1cIjtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxufVxuXG5sZXQgZHRmQ2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gbWFrZURURih6b25lKSB7XG4gIGlmICghZHRmQ2FjaGVbem9uZV0pIHtcbiAgICBkdGZDYWNoZVt6b25lXSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFwiZW4tVVNcIiwge1xuICAgICAgaG91cjEyOiBmYWxzZSxcbiAgICAgIHRpbWVab25lOiB6b25lLFxuICAgICAgeWVhcjogXCJudW1lcmljXCIsXG4gICAgICBtb250aDogXCIyLWRpZ2l0XCIsXG4gICAgICBkYXk6IFwiMi1kaWdpdFwiLFxuICAgICAgaG91cjogXCIyLWRpZ2l0XCIsXG4gICAgICBtaW51dGU6IFwiMi1kaWdpdFwiLFxuICAgICAgc2Vjb25kOiBcIjItZGlnaXRcIixcbiAgICAgIGVyYTogXCJzaG9ydFwiXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZHRmQ2FjaGVbem9uZV07XG59XG5cbmNvbnN0IHR5cGVUb1BvcyA9IHtcbiAgeWVhcjogMCxcbiAgbW9udGg6IDEsXG4gIGRheTogMixcbiAgZXJhOiAzLFxuICBob3VyOiA0LFxuICBtaW51dGU6IDUsXG4gIHNlY29uZDogNlxufTtcblxuZnVuY3Rpb24gaGFja3lPZmZzZXQoZHRmLCBkYXRlKSB7XG4gIGNvbnN0IGZvcm1hdHRlZCA9IGR0Zi5mb3JtYXQoZGF0ZSkucmVwbGFjZSgvXFx1MjAwRS9nLCBcIlwiKSxcbiAgICAgICAgcGFyc2VkID0gLyhcXGQrKVxcLyhcXGQrKVxcLyhcXGQrKSAoQUR8QkMpLD8gKFxcZCspOihcXGQrKTooXFxkKykvLmV4ZWMoZm9ybWF0dGVkKSxcbiAgICAgICAgWywgZk1vbnRoLCBmRGF5LCBmWWVhciwgZmFkT3JCYywgZkhvdXIsIGZNaW51dGUsIGZTZWNvbmRdID0gcGFyc2VkO1xuICByZXR1cm4gW2ZZZWFyLCBmTW9udGgsIGZEYXksIGZhZE9yQmMsIGZIb3VyLCBmTWludXRlLCBmU2Vjb25kXTtcbn1cblxuZnVuY3Rpb24gcGFydHNPZmZzZXQoZHRmLCBkYXRlKSB7XG4gIGNvbnN0IGZvcm1hdHRlZCA9IGR0Zi5mb3JtYXRUb1BhcnRzKGRhdGUpO1xuICBjb25zdCBmaWxsZWQgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGZvcm1hdHRlZC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHtcbiAgICAgIHR5cGUsXG4gICAgICB2YWx1ZVxuICAgIH0gPSBmb3JtYXR0ZWRbaV07XG4gICAgY29uc3QgcG9zID0gdHlwZVRvUG9zW3R5cGVdO1xuXG4gICAgaWYgKHR5cGUgPT09IFwiZXJhXCIpIHtcbiAgICAgIGZpbGxlZFtwb3NdID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmICghaXNVbmRlZmluZWQocG9zKSkge1xuICAgICAgZmlsbGVkW3Bvc10gPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmaWxsZWQ7XG59XG5cbmxldCBpYW5hWm9uZUNhY2hlID0ge307XG4vKipcbiAqIEEgem9uZSBpZGVudGlmaWVkIGJ5IGFuIElBTkEgaWRlbnRpZmllciwgbGlrZSBBbWVyaWNhL05ld19Zb3JrXG4gKiBAaW1wbGVtZW50cyB7Wm9uZX1cbiAqL1xuXG5jbGFzcyBJQU5BWm9uZSBleHRlbmRzIFpvbmUge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBab25lIG5hbWVcbiAgICogQHJldHVybiB7SUFOQVpvbmV9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlKG5hbWUpIHtcbiAgICBpZiAoIWlhbmFab25lQ2FjaGVbbmFtZV0pIHtcbiAgICAgIGlhbmFab25lQ2FjaGVbbmFtZV0gPSBuZXcgSUFOQVpvbmUobmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlhbmFab25lQ2FjaGVbbmFtZV07XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IGxvY2FsIGNhY2hlcy4gU2hvdWxkIG9ubHkgYmUgbmVjZXNzYXJ5IGluIHRlc3Rpbmcgc2NlbmFyaW9zLlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cblxuXG4gIHN0YXRpYyByZXNldENhY2hlKCkge1xuICAgIGlhbmFab25lQ2FjaGUgPSB7fTtcbiAgICBkdGZDYWNoZSA9IHt9O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHN0cmluZyBpcyBhIHZhbGlkIHNwZWNpZmllci4gVGhpcyBvbmx5IGNoZWNrcyB0aGUgc3RyaW5nJ3MgZm9ybWF0LCBub3QgdGhhdCB0aGUgc3BlY2lmaWVyIGlkZW50aWZpZXMgYSBrbm93biB6b25lOyBzZWUgaXNWYWxpZFpvbmUgZm9yIHRoYXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzIC0gVGhlIHN0cmluZyB0byBjaGVjayB2YWxpZGl0eSBvblxuICAgKiBAZXhhbXBsZSBJQU5BWm9uZS5pc1ZhbGlkU3BlY2lmaWVyKFwiQW1lcmljYS9OZXdfWW9ya1wiKSAvLz0+IHRydWVcbiAgICogQGV4YW1wbGUgSUFOQVpvbmUuaXNWYWxpZFNwZWNpZmllcihcIlNwb3J0fn5ibG9ycFwiKSAvLz0+IGZhbHNlXG4gICAqIEBkZXByZWNhdGVkIFRoaXMgbWV0aG9kIHJldHVybnMgZmFsc2UgZm9yIHNvbWUgdmFsaWQgSUFOQSBuYW1lcy4gVXNlIGlzVmFsaWRab25lIGluc3RlYWQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuXG5cbiAgc3RhdGljIGlzVmFsaWRTcGVjaWZpZXIocykge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWRab25lKHMpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHN0cmluZyBpZGVudGlmaWVzIGEgcmVhbCB6b25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB6b25lIC0gVGhlIHN0cmluZyB0byBjaGVja1xuICAgKiBAZXhhbXBsZSBJQU5BWm9uZS5pc1ZhbGlkWm9uZShcIkFtZXJpY2EvTmV3X1lvcmtcIikgLy89PiB0cnVlXG4gICAqIEBleGFtcGxlIElBTkFab25lLmlzVmFsaWRab25lKFwiRmFudGFzaWEvQ2FzdGxlXCIpIC8vPT4gZmFsc2VcbiAgICogQGV4YW1wbGUgSUFOQVpvbmUuaXNWYWxpZFpvbmUoXCJTcG9ydH5+YmxvcnBcIikgLy89PiBmYWxzZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIHN0YXRpYyBpc1ZhbGlkWm9uZSh6b25lKSB7XG4gICAgaWYgKCF6b25lKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFwiZW4tVVNcIiwge1xuICAgICAgICB0aW1lWm9uZTogem9uZVxuICAgICAgfSkuZm9ybWF0KCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IobmFtZSkge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqIEBwcml2YXRlICoqL1xuXG4gICAgdGhpcy56b25lTmFtZSA9IG5hbWU7XG4gICAgLyoqIEBwcml2YXRlICoqL1xuXG4gICAgdGhpcy52YWxpZCA9IElBTkFab25lLmlzVmFsaWRab25lKG5hbWUpO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gXCJpYW5hXCI7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cblxuXG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLnpvbmVOYW1lO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBnZXQgaXNVbml2ZXJzYWwoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBvZmZzZXROYW1lKHRzLCB7XG4gICAgZm9ybWF0LFxuICAgIGxvY2FsZVxuICB9KSB7XG4gICAgcmV0dXJuIHBhcnNlWm9uZUluZm8odHMsIGZvcm1hdCwgbG9jYWxlLCB0aGlzLm5hbWUpO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBmb3JtYXRPZmZzZXQodHMsIGZvcm1hdCkge1xuICAgIHJldHVybiBmb3JtYXRPZmZzZXQodGhpcy5vZmZzZXQodHMpLCBmb3JtYXQpO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBvZmZzZXQodHMpIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodHMpO1xuICAgIGlmIChpc05hTihkYXRlKSkgcmV0dXJuIE5hTjtcbiAgICBjb25zdCBkdGYgPSBtYWtlRFRGKHRoaXMubmFtZSk7XG4gICAgbGV0IFt5ZWFyLCBtb250aCwgZGF5LCBhZE9yQmMsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kXSA9IGR0Zi5mb3JtYXRUb1BhcnRzID8gcGFydHNPZmZzZXQoZHRmLCBkYXRlKSA6IGhhY2t5T2Zmc2V0KGR0ZiwgZGF0ZSk7XG5cbiAgICBpZiAoYWRPckJjID09PSBcIkJDXCIpIHtcbiAgICAgIHllYXIgPSAtTWF0aC5hYnMoeWVhcikgKyAxO1xuICAgIH0gLy8gYmVjYXVzZSB3ZSdyZSB1c2luZyBob3VyMTIgYW5kIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEwMjU1NjQmY2FuPTImcT0lMjIyNCUzQTAwJTIyJTIwZGF0ZXRpbWVmb3JtYXRcblxuXG4gICAgY29uc3QgYWRqdXN0ZWRIb3VyID0gaG91ciA9PT0gMjQgPyAwIDogaG91cjtcbiAgICBjb25zdCBhc1VUQyA9IG9ialRvTG9jYWxUUyh7XG4gICAgICB5ZWFyLFxuICAgICAgbW9udGgsXG4gICAgICBkYXksXG4gICAgICBob3VyOiBhZGp1c3RlZEhvdXIsXG4gICAgICBtaW51dGUsXG4gICAgICBzZWNvbmQsXG4gICAgICBtaWxsaXNlY29uZDogMFxuICAgIH0pO1xuICAgIGxldCBhc1RTID0gK2RhdGU7XG4gICAgY29uc3Qgb3ZlciA9IGFzVFMgJSAxMDAwO1xuICAgIGFzVFMgLT0gb3ZlciA+PSAwID8gb3ZlciA6IDEwMDAgKyBvdmVyO1xuICAgIHJldHVybiAoYXNVVEMgLSBhc1RTKSAvICg2MCAqIDEwMDApO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBlcXVhbHMob3RoZXJab25lKSB7XG4gICAgcmV0dXJuIG90aGVyWm9uZS50eXBlID09PSBcImlhbmFcIiAmJiBvdGhlclpvbmUubmFtZSA9PT0gdGhpcy5uYW1lO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZDtcbiAgfVxuXG59XG5cbmxldCBzaW5nbGV0b24gPSBudWxsO1xuLyoqXG4gKiBBIHpvbmUgd2l0aCBhIGZpeGVkIG9mZnNldCAobWVhbmluZyBubyBEU1QpXG4gKiBAaW1wbGVtZW50cyB7Wm9uZX1cbiAqL1xuXG5jbGFzcyBGaXhlZE9mZnNldFpvbmUgZXh0ZW5kcyBab25lIHtcbiAgLyoqXG4gICAqIEdldCBhIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiBVVENcbiAgICogQHJldHVybiB7Rml4ZWRPZmZzZXRab25lfVxuICAgKi9cbiAgc3RhdGljIGdldCB1dGNJbnN0YW5jZSgpIHtcbiAgICBpZiAoc2luZ2xldG9uID09PSBudWxsKSB7XG4gICAgICBzaW5nbGV0b24gPSBuZXcgRml4ZWRPZmZzZXRab25lKDApO1xuICAgIH1cblxuICAgIHJldHVybiBzaW5nbGV0b247XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhbiBpbnN0YW5jZSB3aXRoIGEgc3BlY2lmaWVkIG9mZnNldFxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IC0gVGhlIG9mZnNldCBpbiBtaW51dGVzXG4gICAqIEByZXR1cm4ge0ZpeGVkT2Zmc2V0Wm9uZX1cbiAgICovXG5cblxuICBzdGF0aWMgaW5zdGFuY2Uob2Zmc2V0KSB7XG4gICAgcmV0dXJuIG9mZnNldCA9PT0gMCA/IEZpeGVkT2Zmc2V0Wm9uZS51dGNJbnN0YW5jZSA6IG5ldyBGaXhlZE9mZnNldFpvbmUob2Zmc2V0KTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFuIGluc3RhbmNlIG9mIEZpeGVkT2Zmc2V0Wm9uZSBmcm9tIGEgVVRDIG9mZnNldCBzdHJpbmcsIGxpa2UgXCJVVEMrNlwiXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzIC0gVGhlIG9mZnNldCBzdHJpbmcgdG8gcGFyc2VcbiAgICogQGV4YW1wbGUgRml4ZWRPZmZzZXRab25lLnBhcnNlU3BlY2lmaWVyKFwiVVRDKzZcIilcbiAgICogQGV4YW1wbGUgRml4ZWRPZmZzZXRab25lLnBhcnNlU3BlY2lmaWVyKFwiVVRDKzA2XCIpXG4gICAqIEBleGFtcGxlIEZpeGVkT2Zmc2V0Wm9uZS5wYXJzZVNwZWNpZmllcihcIlVUQy02OjAwXCIpXG4gICAqIEByZXR1cm4ge0ZpeGVkT2Zmc2V0Wm9uZX1cbiAgICovXG5cblxuICBzdGF0aWMgcGFyc2VTcGVjaWZpZXIocykge1xuICAgIGlmIChzKSB7XG4gICAgICBjb25zdCByID0gcy5tYXRjaCgvXnV0Yyg/OihbKy1dXFxkezEsMn0pKD86OihcXGR7Mn0pKT8pPyQvaSk7XG5cbiAgICAgIGlmIChyKSB7XG4gICAgICAgIHJldHVybiBuZXcgRml4ZWRPZmZzZXRab25lKHNpZ25lZE9mZnNldChyWzFdLCByWzJdKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihvZmZzZXQpIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKiBAcHJpdmF0ZSAqKi9cblxuICAgIHRoaXMuZml4ZWQgPSBvZmZzZXQ7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cblxuXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiBcImZpeGVkXCI7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cblxuXG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmZpeGVkID09PSAwID8gXCJVVENcIiA6IGBVVEMke2Zvcm1hdE9mZnNldCh0aGlzLmZpeGVkLCBcIm5hcnJvd1wiKX1gO1xuICB9XG5cbiAgZ2V0IGlhbmFOYW1lKCkge1xuICAgIGlmICh0aGlzLmZpeGVkID09PSAwKSB7XG4gICAgICByZXR1cm4gXCJFdGMvVVRDXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgRXRjL0dNVCR7Zm9ybWF0T2Zmc2V0KC10aGlzLmZpeGVkLCBcIm5hcnJvd1wiKX1gO1xuICAgIH1cbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgb2Zmc2V0TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBmb3JtYXRPZmZzZXQodHMsIGZvcm1hdCkge1xuICAgIHJldHVybiBmb3JtYXRPZmZzZXQodGhpcy5maXhlZCwgZm9ybWF0KTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZ2V0IGlzVW5pdmVyc2FsKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBvZmZzZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZml4ZWQ7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cblxuXG4gIGVxdWFscyhvdGhlclpvbmUpIHtcbiAgICByZXR1cm4gb3RoZXJab25lLnR5cGUgPT09IFwiZml4ZWRcIiAmJiBvdGhlclpvbmUuZml4ZWQgPT09IHRoaXMuZml4ZWQ7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cblxuXG4gIGdldCBpc1ZhbGlkKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbn1cblxuLyoqXG4gKiBBIHpvbmUgdGhhdCBmYWlsZWQgdG8gcGFyc2UuIFlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byBpbnN0YW50aWF0ZSB0aGlzLlxuICogQGltcGxlbWVudHMge1pvbmV9XG4gKi9cblxuY2xhc3MgSW52YWxpZFpvbmUgZXh0ZW5kcyBab25lIHtcbiAgY29uc3RydWN0b3Ioem9uZU5hbWUpIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKiAgQHByaXZhdGUgKi9cblxuICAgIHRoaXMuem9uZU5hbWUgPSB6b25lTmFtZTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuIFwiaW52YWxpZFwiO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy56b25lTmFtZTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZ2V0IGlzVW5pdmVyc2FsKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgb2Zmc2V0TmFtZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZm9ybWF0T2Zmc2V0KCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBvZmZzZXQoKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZXF1YWxzKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVab25lKGlucHV0LCBkZWZhdWx0Wm9uZSkge1xuXG4gIGlmIChpc1VuZGVmaW5lZChpbnB1dCkgfHwgaW5wdXQgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZGVmYXVsdFpvbmU7XG4gIH0gZWxzZSBpZiAoaW5wdXQgaW5zdGFuY2VvZiBab25lKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9IGVsc2UgaWYgKGlzU3RyaW5nKGlucHV0KSkge1xuICAgIGNvbnN0IGxvd2VyZWQgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChsb3dlcmVkID09PSBcImRlZmF1bHRcIikgcmV0dXJuIGRlZmF1bHRab25lO2Vsc2UgaWYgKGxvd2VyZWQgPT09IFwibG9jYWxcIiB8fCBsb3dlcmVkID09PSBcInN5c3RlbVwiKSByZXR1cm4gU3lzdGVtWm9uZS5pbnN0YW5jZTtlbHNlIGlmIChsb3dlcmVkID09PSBcInV0Y1wiIHx8IGxvd2VyZWQgPT09IFwiZ210XCIpIHJldHVybiBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2U7ZWxzZSByZXR1cm4gRml4ZWRPZmZzZXRab25lLnBhcnNlU3BlY2lmaWVyKGxvd2VyZWQpIHx8IElBTkFab25lLmNyZWF0ZShpbnB1dCk7XG4gIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgcmV0dXJuIEZpeGVkT2Zmc2V0Wm9uZS5pbnN0YW5jZShpbnB1dCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcIm9iamVjdFwiICYmIGlucHV0Lm9mZnNldCAmJiB0eXBlb2YgaW5wdXQub2Zmc2V0ID09PSBcIm51bWJlclwiKSB7XG4gICAgLy8gVGhpcyBpcyBkdW1iLCBidXQgdGhlIGluc3RhbmNlb2YgY2hlY2sgYWJvdmUgZG9lc24ndCBzZWVtIHRvIHJlYWxseSB3b3JrXG4gICAgLy8gc28gd2UncmUgZHVjayBjaGVja2luZyBpdFxuICAgIHJldHVybiBpbnB1dDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEludmFsaWRab25lKGlucHV0KTtcbiAgfVxufVxuXG5sZXQgbm93ID0gKCkgPT4gRGF0ZS5ub3coKSxcbiAgICBkZWZhdWx0Wm9uZSA9IFwic3lzdGVtXCIsXG4gICAgZGVmYXVsdExvY2FsZSA9IG51bGwsXG4gICAgZGVmYXVsdE51bWJlcmluZ1N5c3RlbSA9IG51bGwsXG4gICAgZGVmYXVsdE91dHB1dENhbGVuZGFyID0gbnVsbCxcbiAgICB0aHJvd09uSW52YWxpZDtcbi8qKlxuICogU2V0dGluZ3MgY29udGFpbnMgc3RhdGljIGdldHRlcnMgYW5kIHNldHRlcnMgdGhhdCBjb250cm9sIEx1eG9uJ3Mgb3ZlcmFsbCBiZWhhdmlvci4gTHV4b24gaXMgYSBzaW1wbGUgbGlicmFyeSB3aXRoIGZldyBvcHRpb25zLCBidXQgdGhlIG9uZXMgaXQgZG9lcyBoYXZlIGxpdmUgaGVyZS5cbiAqL1xuXG5cbmNsYXNzIFNldHRpbmdzIHtcbiAgLyoqXG4gICAqIEdldCB0aGUgY2FsbGJhY2sgZm9yIHJldHVybmluZyB0aGUgY3VycmVudCB0aW1lc3RhbXAuXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICovXG4gIHN0YXRpYyBnZXQgbm93KCkge1xuICAgIHJldHVybiBub3c7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgY2FsbGJhY2sgZm9yIHJldHVybmluZyB0aGUgY3VycmVudCB0aW1lc3RhbXAuXG4gICAqIFRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgbnVtYmVyLCB3aGljaCB3aWxsIGJlIGludGVycHJldGVkIGFzIGFuIEVwb2NoIG1pbGxpc2Vjb25kIGNvdW50XG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQGV4YW1wbGUgU2V0dGluZ3Mubm93ID0gKCkgPT4gRGF0ZS5ub3coKSArIDMwMDAgLy8gcHJldGVuZCBpdCBpcyAzIHNlY29uZHMgaW4gdGhlIGZ1dHVyZVxuICAgKiBAZXhhbXBsZSBTZXR0aW5ncy5ub3cgPSAoKSA9PiAwIC8vIGFsd2F5cyBwcmV0ZW5kIGl0J3MgSmFuIDEsIDE5NzAgYXQgbWlkbmlnaHQgaW4gVVRDIHRpbWVcbiAgICovXG5cblxuICBzdGF0aWMgc2V0IG5vdyhuKSB7XG4gICAgbm93ID0gbjtcbiAgfVxuICAvKipcbiAgICogU2V0IHRoZSBkZWZhdWx0IHRpbWUgem9uZSB0byBjcmVhdGUgRGF0ZVRpbWVzIGluLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgKiBVc2UgdGhlIHZhbHVlIFwic3lzdGVtXCIgdG8gcmVzZXQgdGhpcyB2YWx1ZSB0byB0aGUgc3lzdGVtJ3MgdGltZSB6b25lLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHN0YXRpYyBzZXQgZGVmYXVsdFpvbmUoem9uZSkge1xuICAgIGRlZmF1bHRab25lID0gem9uZTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBkZWZhdWx0IHRpbWUgem9uZSBvYmplY3QgY3VycmVudGx5IHVzZWQgdG8gY3JlYXRlIERhdGVUaW1lcy4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgdGhlIHN5c3RlbSdzIHRpbWUgem9uZSAodGhlIG9uZSBzZXQgb24gdGhlIG1hY2hpbmUgdGhhdCBydW5zIHRoaXMgY29kZSkuXG4gICAqIEB0eXBlIHtab25lfVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgZGVmYXVsdFpvbmUoKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZVpvbmUoZGVmYXVsdFpvbmUsIFN5c3RlbVpvbmUuaW5zdGFuY2UpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGRlZmF1bHQgbG9jYWxlIHRvIGNyZWF0ZSBEYXRlVGltZXMgd2l0aC4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG5cblxuICBzdGF0aWMgZ2V0IGRlZmF1bHRMb2NhbGUoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRMb2NhbGU7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgZGVmYXVsdCBsb2NhbGUgdG8gY3JlYXRlIERhdGVUaW1lcyB3aXRoLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHN0YXRpYyBzZXQgZGVmYXVsdExvY2FsZShsb2NhbGUpIHtcbiAgICBkZWZhdWx0TG9jYWxlID0gbG9jYWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGRlZmF1bHQgbnVtYmVyaW5nIHN5c3RlbSB0byBjcmVhdGUgRGF0ZVRpbWVzIHdpdGguIERvZXMgbm90IGFmZmVjdCBleGlzdGluZyBpbnN0YW5jZXMuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBkZWZhdWx0TnVtYmVyaW5nU3lzdGVtKCkge1xuICAgIHJldHVybiBkZWZhdWx0TnVtYmVyaW5nU3lzdGVtO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIGRlZmF1bHQgbnVtYmVyaW5nIHN5c3RlbSB0byBjcmVhdGUgRGF0ZVRpbWVzIHdpdGguIERvZXMgbm90IGFmZmVjdCBleGlzdGluZyBpbnN0YW5jZXMuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgc3RhdGljIHNldCBkZWZhdWx0TnVtYmVyaW5nU3lzdGVtKG51bWJlcmluZ1N5c3RlbSkge1xuICAgIGRlZmF1bHROdW1iZXJpbmdTeXN0ZW0gPSBudW1iZXJpbmdTeXN0ZW07XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgZGVmYXVsdCBvdXRwdXQgY2FsZW5kYXIgdG8gY3JlYXRlIERhdGVUaW1lcyB3aXRoLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE91dHB1dENhbGVuZGFyKCkge1xuICAgIHJldHVybiBkZWZhdWx0T3V0cHV0Q2FsZW5kYXI7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgZGVmYXVsdCBvdXRwdXQgY2FsZW5kYXIgdG8gY3JlYXRlIERhdGVUaW1lcyB3aXRoLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHN0YXRpYyBzZXQgZGVmYXVsdE91dHB1dENhbGVuZGFyKG91dHB1dENhbGVuZGFyKSB7XG4gICAgZGVmYXVsdE91dHB1dENhbGVuZGFyID0gb3V0cHV0Q2FsZW5kYXI7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB3aGV0aGVyIEx1eG9uIHdpbGwgdGhyb3cgd2hlbiBpdCBlbmNvdW50ZXJzIGludmFsaWQgRGF0ZVRpbWVzLCBEdXJhdGlvbnMsIG9yIEludGVydmFsc1xuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBzdGF0aWMgZ2V0IHRocm93T25JbnZhbGlkKCkge1xuICAgIHJldHVybiB0aHJvd09uSW52YWxpZDtcbiAgfVxuICAvKipcbiAgICogU2V0IHdoZXRoZXIgTHV4b24gd2lsbCB0aHJvdyB3aGVuIGl0IGVuY291bnRlcnMgaW52YWxpZCBEYXRlVGltZXMsIER1cmF0aW9ucywgb3IgSW50ZXJ2YWxzXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cblxuXG4gIHN0YXRpYyBzZXQgdGhyb3dPbkludmFsaWQodCkge1xuICAgIHRocm93T25JbnZhbGlkID0gdDtcbiAgfVxuICAvKipcbiAgICogUmVzZXQgTHV4b24ncyBnbG9iYWwgY2FjaGVzLiBTaG91bGQgb25seSBiZSBuZWNlc3NhcnkgaW4gdGVzdGluZyBzY2VuYXJpb3MuXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuXG5cbiAgc3RhdGljIHJlc2V0Q2FjaGVzKCkge1xuICAgIExvY2FsZS5yZXNldENhY2hlKCk7XG4gICAgSUFOQVpvbmUucmVzZXRDYWNoZSgpO1xuICB9XG5cbn1cblxubGV0IGludGxMRkNhY2hlID0ge307XG5cbmZ1bmN0aW9uIGdldENhY2hlZExGKGxvY1N0cmluZywgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IGtleSA9IEpTT04uc3RyaW5naWZ5KFtsb2NTdHJpbmcsIG9wdHNdKTtcbiAgbGV0IGR0ZiA9IGludGxMRkNhY2hlW2tleV07XG5cbiAgaWYgKCFkdGYpIHtcbiAgICBkdGYgPSBuZXcgSW50bC5MaXN0Rm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bExGQ2FjaGVba2V5XSA9IGR0ZjtcbiAgfVxuXG4gIHJldHVybiBkdGY7XG59XG5cbmxldCBpbnRsRFRDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBnZXRDYWNoZWREVEYobG9jU3RyaW5nLCBvcHRzID0ge30pIHtcbiAgY29uc3Qga2V5ID0gSlNPTi5zdHJpbmdpZnkoW2xvY1N0cmluZywgb3B0c10pO1xuICBsZXQgZHRmID0gaW50bERUQ2FjaGVba2V5XTtcblxuICBpZiAoIWR0Zikge1xuICAgIGR0ZiA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bERUQ2FjaGVba2V5XSA9IGR0ZjtcbiAgfVxuXG4gIHJldHVybiBkdGY7XG59XG5cbmxldCBpbnRsTnVtQ2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gZ2V0Q2FjaGVkSU5GKGxvY1N0cmluZywgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IGtleSA9IEpTT04uc3RyaW5naWZ5KFtsb2NTdHJpbmcsIG9wdHNdKTtcbiAgbGV0IGluZiA9IGludGxOdW1DYWNoZVtrZXldO1xuXG4gIGlmICghaW5mKSB7XG4gICAgaW5mID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bE51bUNhY2hlW2tleV0gPSBpbmY7XG4gIH1cblxuICByZXR1cm4gaW5mO1xufVxuXG5sZXQgaW50bFJlbENhY2hlID0ge307XG5cbmZ1bmN0aW9uIGdldENhY2hlZFJURihsb2NTdHJpbmcsIG9wdHMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgYmFzZSxcbiAgICAuLi5jYWNoZUtleU9wdHNcbiAgfSA9IG9wdHM7IC8vIGV4Y2x1ZGUgYGJhc2VgIGZyb20gdGhlIG9wdGlvbnNcblxuICBjb25zdCBrZXkgPSBKU09OLnN0cmluZ2lmeShbbG9jU3RyaW5nLCBjYWNoZUtleU9wdHNdKTtcbiAgbGV0IGluZiA9IGludGxSZWxDYWNoZVtrZXldO1xuXG4gIGlmICghaW5mKSB7XG4gICAgaW5mID0gbmV3IEludGwuUmVsYXRpdmVUaW1lRm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bFJlbENhY2hlW2tleV0gPSBpbmY7XG4gIH1cblxuICByZXR1cm4gaW5mO1xufVxuXG5sZXQgc3lzTG9jYWxlQ2FjaGUgPSBudWxsO1xuXG5mdW5jdGlvbiBzeXN0ZW1Mb2NhbGUoKSB7XG4gIGlmIChzeXNMb2NhbGVDYWNoZSkge1xuICAgIHJldHVybiBzeXNMb2NhbGVDYWNoZTtcbiAgfSBlbHNlIHtcbiAgICBzeXNMb2NhbGVDYWNoZSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkubG9jYWxlO1xuICAgIHJldHVybiBzeXNMb2NhbGVDYWNoZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZUxvY2FsZVN0cmluZyhsb2NhbGVTdHIpIHtcbiAgLy8gSSByZWFsbHkgd2FudCB0byBhdm9pZCB3cml0aW5nIGEgQkNQIDQ3IHBhcnNlclxuICAvLyBzZWUsIGUuZy4gaHR0cHM6Ly9naXRodWIuY29tL3dvb29ybS9iY3AtNDdcbiAgLy8gSW5zdGVhZCwgd2UnbGwgZG8gdGhpczpcbiAgLy8gYSkgaWYgdGhlIHN0cmluZyBoYXMgbm8gLXUgZXh0ZW5zaW9ucywganVzdCBsZWF2ZSBpdCBhbG9uZVxuICAvLyBiKSBpZiBpdCBkb2VzLCB1c2UgSW50bCB0byByZXNvbHZlIGV2ZXJ5dGhpbmdcbiAgLy8gYykgaWYgSW50bCBmYWlscywgdHJ5IGFnYWluIHdpdGhvdXQgdGhlIC11XG4gIGNvbnN0IHVJbmRleCA9IGxvY2FsZVN0ci5pbmRleE9mKFwiLXUtXCIpO1xuXG4gIGlmICh1SW5kZXggPT09IC0xKSB7XG4gICAgcmV0dXJuIFtsb2NhbGVTdHJdO1xuICB9IGVsc2Uge1xuICAgIGxldCBvcHRpb25zO1xuICAgIGNvbnN0IHNtYWxsZXIgPSBsb2NhbGVTdHIuc3Vic3RyaW5nKDAsIHVJbmRleCk7XG5cbiAgICB0cnkge1xuICAgICAgb3B0aW9ucyA9IGdldENhY2hlZERURihsb2NhbGVTdHIpLnJlc29sdmVkT3B0aW9ucygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIG9wdGlvbnMgPSBnZXRDYWNoZWREVEYoc21hbGxlcikucmVzb2x2ZWRPcHRpb25zKCk7XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgbnVtYmVyaW5nU3lzdGVtLFxuICAgICAgY2FsZW5kYXJcbiAgICB9ID0gb3B0aW9uczsgLy8gcmV0dXJuIHRoZSBzbWFsbGVyIG9uZSBzbyB0aGF0IHdlIGNhbiBhcHBlbmQgdGhlIGNhbGVuZGFyIGFuZCBudW1iZXJpbmcgb3ZlcnJpZGVzIHRvIGl0XG5cbiAgICByZXR1cm4gW3NtYWxsZXIsIG51bWJlcmluZ1N5c3RlbSwgY2FsZW5kYXJdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludGxDb25maWdTdHJpbmcobG9jYWxlU3RyLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyKSB7XG4gIGlmIChvdXRwdXRDYWxlbmRhciB8fCBudW1iZXJpbmdTeXN0ZW0pIHtcbiAgICBsb2NhbGVTdHIgKz0gXCItdVwiO1xuXG4gICAgaWYgKG91dHB1dENhbGVuZGFyKSB7XG4gICAgICBsb2NhbGVTdHIgKz0gYC1jYS0ke291dHB1dENhbGVuZGFyfWA7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlcmluZ1N5c3RlbSkge1xuICAgICAgbG9jYWxlU3RyICs9IGAtbnUtJHtudW1iZXJpbmdTeXN0ZW19YDtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9jYWxlU3RyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsb2NhbGVTdHI7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwTW9udGhzKGYpIHtcbiAgY29uc3QgbXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8PSAxMjsgaSsrKSB7XG4gICAgY29uc3QgZHQgPSBEYXRlVGltZS51dGMoMjAxNiwgaSwgMSk7XG4gICAgbXMucHVzaChmKGR0KSk7XG4gIH1cblxuICByZXR1cm4gbXM7XG59XG5cbmZ1bmN0aW9uIG1hcFdlZWtkYXlzKGYpIHtcbiAgY29uc3QgbXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8PSA3OyBpKyspIHtcbiAgICBjb25zdCBkdCA9IERhdGVUaW1lLnV0YygyMDE2LCAxMSwgMTMgKyBpKTtcbiAgICBtcy5wdXNoKGYoZHQpKTtcbiAgfVxuXG4gIHJldHVybiBtcztcbn1cblxuZnVuY3Rpb24gbGlzdFN0dWZmKGxvYywgbGVuZ3RoLCBkZWZhdWx0T0ssIGVuZ2xpc2hGbiwgaW50bEZuKSB7XG4gIGNvbnN0IG1vZGUgPSBsb2MubGlzdGluZ01vZGUoZGVmYXVsdE9LKTtcblxuICBpZiAobW9kZSA9PT0gXCJlcnJvclwiKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gZWxzZSBpZiAobW9kZSA9PT0gXCJlblwiKSB7XG4gICAgcmV0dXJuIGVuZ2xpc2hGbihsZW5ndGgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbnRsRm4obGVuZ3RoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdXBwb3J0c0Zhc3ROdW1iZXJzKGxvYykge1xuICBpZiAobG9jLm51bWJlcmluZ1N5c3RlbSAmJiBsb2MubnVtYmVyaW5nU3lzdGVtICE9PSBcImxhdG5cIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbG9jLm51bWJlcmluZ1N5c3RlbSA9PT0gXCJsYXRuXCIgfHwgIWxvYy5sb2NhbGUgfHwgbG9jLmxvY2FsZS5zdGFydHNXaXRoKFwiZW5cIikgfHwgbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jLmludGwpLnJlc29sdmVkT3B0aW9ucygpLm51bWJlcmluZ1N5c3RlbSA9PT0gXCJsYXRuXCI7XG4gIH1cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbmNsYXNzIFBvbHlOdW1iZXJGb3JtYXR0ZXIge1xuICBjb25zdHJ1Y3RvcihpbnRsLCBmb3JjZVNpbXBsZSwgb3B0cykge1xuICAgIHRoaXMucGFkVG8gPSBvcHRzLnBhZFRvIHx8IDA7XG4gICAgdGhpcy5mbG9vciA9IG9wdHMuZmxvb3IgfHwgZmFsc2U7XG4gICAgY29uc3Qge1xuICAgICAgcGFkVG8sXG4gICAgICBmbG9vcixcbiAgICAgIC4uLm90aGVyT3B0c1xuICAgIH0gPSBvcHRzO1xuXG4gICAgaWYgKCFmb3JjZVNpbXBsZSB8fCBPYmplY3Qua2V5cyhvdGhlck9wdHMpLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGludGxPcHRzID0ge1xuICAgICAgICB1c2VHcm91cGluZzogZmFsc2UsXG4gICAgICAgIC4uLm9wdHNcbiAgICAgIH07XG4gICAgICBpZiAob3B0cy5wYWRUbyA+IDApIGludGxPcHRzLm1pbmltdW1JbnRlZ2VyRGlnaXRzID0gb3B0cy5wYWRUbztcbiAgICAgIHRoaXMuaW5mID0gZ2V0Q2FjaGVkSU5GKGludGwsIGludGxPcHRzKTtcbiAgICB9XG4gIH1cblxuICBmb3JtYXQoaSkge1xuICAgIGlmICh0aGlzLmluZikge1xuICAgICAgY29uc3QgZml4ZWQgPSB0aGlzLmZsb29yID8gTWF0aC5mbG9vcihpKSA6IGk7XG4gICAgICByZXR1cm4gdGhpcy5pbmYuZm9ybWF0KGZpeGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdG8gbWF0Y2ggdGhlIGJyb3dzZXIncyBudW1iZXJmb3JtYXR0ZXIgZGVmYXVsdHNcbiAgICAgIGNvbnN0IGZpeGVkID0gdGhpcy5mbG9vciA/IE1hdGguZmxvb3IoaSkgOiByb3VuZFRvKGksIDMpO1xuICAgICAgcmV0dXJuIHBhZFN0YXJ0KGZpeGVkLCB0aGlzLnBhZFRvKTtcbiAgICB9XG4gIH1cblxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuY2xhc3MgUG9seURhdGVGb3JtYXR0ZXIge1xuICBjb25zdHJ1Y3RvcihkdCwgaW50bCwgb3B0cykge1xuICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gICAgbGV0IHo7XG5cbiAgICBpZiAoZHQuem9uZS5pc1VuaXZlcnNhbCkge1xuICAgICAgLy8gVVRDLTggb3IgRXRjL1VUQy04IGFyZSBub3QgcGFydCBvZiB0emRhdGEsIG9ubHkgRXRjL0dNVCs4IGFuZCB0aGUgbGlrZS5cbiAgICAgIC8vIFRoYXQgaXMgd2h5IGZpeGVkLW9mZnNldCBUWiBpcyBzZXQgdG8gdGhhdCB1bmxlc3MgaXQgaXM6XG4gICAgICAvLyAxLiBSZXByZXNlbnRpbmcgb2Zmc2V0IDAgd2hlbiBVVEMgaXMgdXNlZCB0byBtYWludGFpbiBwcmV2aW91cyBiZWhhdmlvciBhbmQgZG9lcyBub3QgYmVjb21lIEdNVC5cbiAgICAgIC8vIDIuIFVuc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyOlxuICAgICAgLy8gICAgLSBzb21lIGRvIG5vdCBzdXBwb3J0IEV0Yy9cbiAgICAgIC8vICAgIC0gPCBFdGMvR01ULTE0LCA+IEV0Yy9HTVQrMTIsIGFuZCAzMC1taW51dGUgb3IgNDUtbWludXRlIG9mZnNldHMgYXJlIG5vdCBwYXJ0IG9mIHR6ZGF0YVxuICAgICAgY29uc3QgZ210T2Zmc2V0ID0gLTEgKiAoZHQub2Zmc2V0IC8gNjApO1xuICAgICAgY29uc3Qgb2Zmc2V0WiA9IGdtdE9mZnNldCA+PSAwID8gYEV0Yy9HTVQrJHtnbXRPZmZzZXR9YCA6IGBFdGMvR01UJHtnbXRPZmZzZXR9YDtcblxuICAgICAgaWYgKGR0Lm9mZnNldCAhPT0gMCAmJiBJQU5BWm9uZS5jcmVhdGUob2Zmc2V0WikudmFsaWQpIHtcbiAgICAgICAgeiA9IG9mZnNldFo7XG4gICAgICAgIHRoaXMuZHQgPSBkdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vdCBhbGwgZml4ZWQtb2Zmc2V0IHpvbmVzIGxpa2UgRXRjLys0OjMwIGFyZSBwcmVzZW50IGluIHR6ZGF0YS5cbiAgICAgICAgLy8gU28gd2UgaGF2ZSB0byBtYWtlIGRvLiBUd28gY2FzZXM6XG4gICAgICAgIC8vIDEuIFRoZSBmb3JtYXQgb3B0aW9ucyB0ZWxsIHVzIHRvIHNob3cgdGhlIHpvbmUuIFdlIGNhbid0IGRvIHRoYXQsIHNvIHRoZSBiZXN0XG4gICAgICAgIC8vIHdlIGNhbiBkbyBpcyBmb3JtYXQgdGhlIGRhdGUgaW4gVVRDLlxuICAgICAgICAvLyAyLiBUaGUgZm9ybWF0IG9wdGlvbnMgZG9uJ3QgdGVsbCB1cyB0byBzaG93IHRoZSB6b25lLiBUaGVuIHdlIGNhbiBhZGp1c3QgdGhlbVxuICAgICAgICAvLyB0aGUgdGltZSBhbmQgdGVsbCB0aGUgZm9ybWF0dGVyIHRvIHNob3cgaXQgdG8gdXMgaW4gVVRDLCBzbyB0aGF0IHRoZSB0aW1lIGlzIHJpZ2h0XG4gICAgICAgIC8vIGFuZCB0aGUgYmFkIHpvbmUgZG9lc24ndCBzaG93IHVwLlxuICAgICAgICB6ID0gXCJVVENcIjtcblxuICAgICAgICBpZiAob3B0cy50aW1lWm9uZU5hbWUpIHtcbiAgICAgICAgICB0aGlzLmR0ID0gZHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kdCA9IGR0Lm9mZnNldCA9PT0gMCA/IGR0IDogRGF0ZVRpbWUuZnJvbU1pbGxpcyhkdC50cyArIGR0Lm9mZnNldCAqIDYwICogMTAwMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGR0LnpvbmUudHlwZSA9PT0gXCJzeXN0ZW1cIikge1xuICAgICAgdGhpcy5kdCA9IGR0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmR0ID0gZHQ7XG4gICAgICB6ID0gZHQuem9uZS5uYW1lO1xuICAgIH1cblxuICAgIGNvbnN0IGludGxPcHRzID0geyAuLi50aGlzLm9wdHNcbiAgICB9O1xuXG4gICAgaWYgKHopIHtcbiAgICAgIGludGxPcHRzLnRpbWVab25lID0gejtcbiAgICB9XG5cbiAgICB0aGlzLmR0ZiA9IGdldENhY2hlZERURihpbnRsLCBpbnRsT3B0cyk7XG4gIH1cblxuICBmb3JtYXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZHRmLmZvcm1hdCh0aGlzLmR0LnRvSlNEYXRlKCkpO1xuICB9XG5cbiAgZm9ybWF0VG9QYXJ0cygpIHtcbiAgICByZXR1cm4gdGhpcy5kdGYuZm9ybWF0VG9QYXJ0cyh0aGlzLmR0LnRvSlNEYXRlKCkpO1xuICB9XG5cbiAgcmVzb2x2ZWRPcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLmR0Zi5yZXNvbHZlZE9wdGlvbnMoKTtcbiAgfVxuXG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5jbGFzcyBQb2x5UmVsRm9ybWF0dGVyIHtcbiAgY29uc3RydWN0b3IoaW50bCwgaXNFbmdsaXNoLCBvcHRzKSB7XG4gICAgdGhpcy5vcHRzID0ge1xuICAgICAgc3R5bGU6IFwibG9uZ1wiLFxuICAgICAgLi4ub3B0c1xuICAgIH07XG5cbiAgICBpZiAoIWlzRW5nbGlzaCAmJiBoYXNSZWxhdGl2ZSgpKSB7XG4gICAgICB0aGlzLnJ0ZiA9IGdldENhY2hlZFJURihpbnRsLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICBmb3JtYXQoY291bnQsIHVuaXQpIHtcbiAgICBpZiAodGhpcy5ydGYpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ0Zi5mb3JtYXQoY291bnQsIHVuaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZm9ybWF0UmVsYXRpdmVUaW1lKHVuaXQsIGNvdW50LCB0aGlzLm9wdHMubnVtZXJpYywgdGhpcy5vcHRzLnN0eWxlICE9PSBcImxvbmdcIik7XG4gICAgfVxuICB9XG5cbiAgZm9ybWF0VG9QYXJ0cyhjb3VudCwgdW5pdCkge1xuICAgIGlmICh0aGlzLnJ0Zikge1xuICAgICAgcmV0dXJuIHRoaXMucnRmLmZvcm1hdFRvUGFydHMoY291bnQsIHVuaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG5cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbmNsYXNzIExvY2FsZSB7XG4gIHN0YXRpYyBmcm9tT3B0cyhvcHRzKSB7XG4gICAgcmV0dXJuIExvY2FsZS5jcmVhdGUob3B0cy5sb2NhbGUsIG9wdHMubnVtYmVyaW5nU3lzdGVtLCBvcHRzLm91dHB1dENhbGVuZGFyLCBvcHRzLmRlZmF1bHRUb0VOKTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyLCBkZWZhdWx0VG9FTiA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc3BlY2lmaWVkTG9jYWxlID0gbG9jYWxlIHx8IFNldHRpbmdzLmRlZmF1bHRMb2NhbGU7IC8vIHRoZSBzeXN0ZW0gbG9jYWxlIGlzIHVzZWZ1bCBmb3IgaHVtYW4gcmVhZGFibGUgc3RyaW5ncyBidXQgYW5ub3lpbmcgZm9yIHBhcnNpbmcvZm9ybWF0dGluZyBrbm93biBmb3JtYXRzXG5cbiAgICBjb25zdCBsb2NhbGVSID0gc3BlY2lmaWVkTG9jYWxlIHx8IChkZWZhdWx0VG9FTiA/IFwiZW4tVVNcIiA6IHN5c3RlbUxvY2FsZSgpKTtcbiAgICBjb25zdCBudW1iZXJpbmdTeXN0ZW1SID0gbnVtYmVyaW5nU3lzdGVtIHx8IFNldHRpbmdzLmRlZmF1bHROdW1iZXJpbmdTeXN0ZW07XG4gICAgY29uc3Qgb3V0cHV0Q2FsZW5kYXJSID0gb3V0cHV0Q2FsZW5kYXIgfHwgU2V0dGluZ3MuZGVmYXVsdE91dHB1dENhbGVuZGFyO1xuICAgIHJldHVybiBuZXcgTG9jYWxlKGxvY2FsZVIsIG51bWJlcmluZ1N5c3RlbVIsIG91dHB1dENhbGVuZGFyUiwgc3BlY2lmaWVkTG9jYWxlKTtcbiAgfVxuXG4gIHN0YXRpYyByZXNldENhY2hlKCkge1xuICAgIHN5c0xvY2FsZUNhY2hlID0gbnVsbDtcbiAgICBpbnRsRFRDYWNoZSA9IHt9O1xuICAgIGludGxOdW1DYWNoZSA9IHt9O1xuICAgIGludGxSZWxDYWNoZSA9IHt9O1xuICB9XG5cbiAgc3RhdGljIGZyb21PYmplY3Qoe1xuICAgIGxvY2FsZSxcbiAgICBudW1iZXJpbmdTeXN0ZW0sXG4gICAgb3V0cHV0Q2FsZW5kYXJcbiAgfSA9IHt9KSB7XG4gICAgcmV0dXJuIExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGxvY2FsZSwgbnVtYmVyaW5nLCBvdXRwdXRDYWxlbmRhciwgc3BlY2lmaWVkTG9jYWxlKSB7XG4gICAgY29uc3QgW3BhcnNlZExvY2FsZSwgcGFyc2VkTnVtYmVyaW5nU3lzdGVtLCBwYXJzZWRPdXRwdXRDYWxlbmRhcl0gPSBwYXJzZUxvY2FsZVN0cmluZyhsb2NhbGUpO1xuICAgIHRoaXMubG9jYWxlID0gcGFyc2VkTG9jYWxlO1xuICAgIHRoaXMubnVtYmVyaW5nU3lzdGVtID0gbnVtYmVyaW5nIHx8IHBhcnNlZE51bWJlcmluZ1N5c3RlbSB8fCBudWxsO1xuICAgIHRoaXMub3V0cHV0Q2FsZW5kYXIgPSBvdXRwdXRDYWxlbmRhciB8fCBwYXJzZWRPdXRwdXRDYWxlbmRhciB8fCBudWxsO1xuICAgIHRoaXMuaW50bCA9IGludGxDb25maWdTdHJpbmcodGhpcy5sb2NhbGUsIHRoaXMubnVtYmVyaW5nU3lzdGVtLCB0aGlzLm91dHB1dENhbGVuZGFyKTtcbiAgICB0aGlzLndlZWtkYXlzQ2FjaGUgPSB7XG4gICAgICBmb3JtYXQ6IHt9LFxuICAgICAgc3RhbmRhbG9uZToge31cbiAgICB9O1xuICAgIHRoaXMubW9udGhzQ2FjaGUgPSB7XG4gICAgICBmb3JtYXQ6IHt9LFxuICAgICAgc3RhbmRhbG9uZToge31cbiAgICB9O1xuICAgIHRoaXMubWVyaWRpZW1DYWNoZSA9IG51bGw7XG4gICAgdGhpcy5lcmFDYWNoZSA9IHt9O1xuICAgIHRoaXMuc3BlY2lmaWVkTG9jYWxlID0gc3BlY2lmaWVkTG9jYWxlO1xuICAgIHRoaXMuZmFzdE51bWJlcnNDYWNoZWQgPSBudWxsO1xuICB9XG5cbiAgZ2V0IGZhc3ROdW1iZXJzKCkge1xuICAgIGlmICh0aGlzLmZhc3ROdW1iZXJzQ2FjaGVkID09IG51bGwpIHtcbiAgICAgIHRoaXMuZmFzdE51bWJlcnNDYWNoZWQgPSBzdXBwb3J0c0Zhc3ROdW1iZXJzKHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmZhc3ROdW1iZXJzQ2FjaGVkO1xuICB9XG5cbiAgbGlzdGluZ01vZGUoKSB7XG4gICAgY29uc3QgaXNBY3R1YWxseUVuID0gdGhpcy5pc0VuZ2xpc2goKTtcbiAgICBjb25zdCBoYXNOb1dlaXJkbmVzcyA9ICh0aGlzLm51bWJlcmluZ1N5c3RlbSA9PT0gbnVsbCB8fCB0aGlzLm51bWJlcmluZ1N5c3RlbSA9PT0gXCJsYXRuXCIpICYmICh0aGlzLm91dHB1dENhbGVuZGFyID09PSBudWxsIHx8IHRoaXMub3V0cHV0Q2FsZW5kYXIgPT09IFwiZ3JlZ29yeVwiKTtcbiAgICByZXR1cm4gaXNBY3R1YWxseUVuICYmIGhhc05vV2VpcmRuZXNzID8gXCJlblwiIDogXCJpbnRsXCI7XG4gIH1cblxuICBjbG9uZShhbHRzKSB7XG4gICAgaWYgKCFhbHRzIHx8IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFsdHMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKGFsdHMubG9jYWxlIHx8IHRoaXMuc3BlY2lmaWVkTG9jYWxlLCBhbHRzLm51bWJlcmluZ1N5c3RlbSB8fCB0aGlzLm51bWJlcmluZ1N5c3RlbSwgYWx0cy5vdXRwdXRDYWxlbmRhciB8fCB0aGlzLm91dHB1dENhbGVuZGFyLCBhbHRzLmRlZmF1bHRUb0VOIHx8IGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICByZWRlZmF1bHRUb0VOKGFsdHMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKHsgLi4uYWx0cyxcbiAgICAgIGRlZmF1bHRUb0VOOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICByZWRlZmF1bHRUb1N5c3RlbShhbHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSh7IC4uLmFsdHMsXG4gICAgICBkZWZhdWx0VG9FTjogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIG1vbnRocyhsZW5ndGgsIGZvcm1hdCA9IGZhbHNlLCBkZWZhdWx0T0sgPSB0cnVlKSB7XG4gICAgcmV0dXJuIGxpc3RTdHVmZih0aGlzLCBsZW5ndGgsIGRlZmF1bHRPSywgbW9udGhzLCAoKSA9PiB7XG4gICAgICBjb25zdCBpbnRsID0gZm9ybWF0ID8ge1xuICAgICAgICBtb250aDogbGVuZ3RoLFxuICAgICAgICBkYXk6IFwibnVtZXJpY1wiXG4gICAgICB9IDoge1xuICAgICAgICBtb250aDogbGVuZ3RoXG4gICAgICB9LFxuICAgICAgICAgICAgZm9ybWF0U3RyID0gZm9ybWF0ID8gXCJmb3JtYXRcIiA6IFwic3RhbmRhbG9uZVwiO1xuXG4gICAgICBpZiAoIXRoaXMubW9udGhzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdKSB7XG4gICAgICAgIHRoaXMubW9udGhzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdID0gbWFwTW9udGhzKGR0ID0+IHRoaXMuZXh0cmFjdChkdCwgaW50bCwgXCJtb250aFwiKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLm1vbnRoc0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXTtcbiAgICB9KTtcbiAgfVxuXG4gIHdlZWtkYXlzKGxlbmd0aCwgZm9ybWF0ID0gZmFsc2UsIGRlZmF1bHRPSyA9IHRydWUpIHtcbiAgICByZXR1cm4gbGlzdFN0dWZmKHRoaXMsIGxlbmd0aCwgZGVmYXVsdE9LLCB3ZWVrZGF5cywgKCkgPT4ge1xuICAgICAgY29uc3QgaW50bCA9IGZvcm1hdCA/IHtcbiAgICAgICAgd2Vla2RheTogbGVuZ3RoLFxuICAgICAgICB5ZWFyOiBcIm51bWVyaWNcIixcbiAgICAgICAgbW9udGg6IFwibG9uZ1wiLFxuICAgICAgICBkYXk6IFwibnVtZXJpY1wiXG4gICAgICB9IDoge1xuICAgICAgICB3ZWVrZGF5OiBsZW5ndGhcbiAgICAgIH0sXG4gICAgICAgICAgICBmb3JtYXRTdHIgPSBmb3JtYXQgPyBcImZvcm1hdFwiIDogXCJzdGFuZGFsb25lXCI7XG5cbiAgICAgIGlmICghdGhpcy53ZWVrZGF5c0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXSkge1xuICAgICAgICB0aGlzLndlZWtkYXlzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdID0gbWFwV2Vla2RheXMoZHQgPT4gdGhpcy5leHRyYWN0KGR0LCBpbnRsLCBcIndlZWtkYXlcIikpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy53ZWVrZGF5c0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXTtcbiAgICB9KTtcbiAgfVxuXG4gIG1lcmlkaWVtcyhkZWZhdWx0T0sgPSB0cnVlKSB7XG4gICAgcmV0dXJuIGxpc3RTdHVmZih0aGlzLCB1bmRlZmluZWQsIGRlZmF1bHRPSywgKCkgPT4gbWVyaWRpZW1zLCAoKSA9PiB7XG4gICAgICAvLyBJbiB0aGVvcnkgdGhlcmUgY291bGQgYmUgYXJpYml0cmFyeSBkYXkgcGVyaW9kcy4gV2UncmUgZ29ubmEgYXNzdW1lIHRoZXJlIGFyZSBleGFjdGx5IHR3b1xuICAgICAgLy8gZm9yIEFNIGFuZCBQTS4gVGhpcyBpcyBwcm9iYWJseSB3cm9uZywgYnV0IGl0J3MgbWFrZXMgcGFyc2luZyB3YXkgZWFzaWVyLlxuICAgICAgaWYgKCF0aGlzLm1lcmlkaWVtQ2FjaGUpIHtcbiAgICAgICAgY29uc3QgaW50bCA9IHtcbiAgICAgICAgICBob3VyOiBcIm51bWVyaWNcIixcbiAgICAgICAgICBob3VyQ3ljbGU6IFwiaDEyXCJcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tZXJpZGllbUNhY2hlID0gW0RhdGVUaW1lLnV0YygyMDE2LCAxMSwgMTMsIDkpLCBEYXRlVGltZS51dGMoMjAxNiwgMTEsIDEzLCAxOSldLm1hcChkdCA9PiB0aGlzLmV4dHJhY3QoZHQsIGludGwsIFwiZGF5cGVyaW9kXCIpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMubWVyaWRpZW1DYWNoZTtcbiAgICB9KTtcbiAgfVxuXG4gIGVyYXMobGVuZ3RoLCBkZWZhdWx0T0sgPSB0cnVlKSB7XG4gICAgcmV0dXJuIGxpc3RTdHVmZih0aGlzLCBsZW5ndGgsIGRlZmF1bHRPSywgZXJhcywgKCkgPT4ge1xuICAgICAgY29uc3QgaW50bCA9IHtcbiAgICAgICAgZXJhOiBsZW5ndGhcbiAgICAgIH07IC8vIFRoaXMgaXMgcHJvYmxlbWF0aWMuIERpZmZlcmVudCBjYWxlbmRhcnMgYXJlIGdvaW5nIHRvIGRlZmluZSBlcmFzIHRvdGFsbHkgZGlmZmVyZW50bHkuIFdoYXQgSSBuZWVkIGlzIHRoZSBtaW5pbXVtIHNldCBvZiBkYXRlc1xuICAgICAgLy8gdG8gZGVmaW5pdGVseSBlbnVtZXJhdGUgdGhlbS5cblxuICAgICAgaWYgKCF0aGlzLmVyYUNhY2hlW2xlbmd0aF0pIHtcbiAgICAgICAgdGhpcy5lcmFDYWNoZVtsZW5ndGhdID0gW0RhdGVUaW1lLnV0YygtNDAsIDEsIDEpLCBEYXRlVGltZS51dGMoMjAxNywgMSwgMSldLm1hcChkdCA9PiB0aGlzLmV4dHJhY3QoZHQsIGludGwsIFwiZXJhXCIpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZXJhQ2FjaGVbbGVuZ3RoXTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4dHJhY3QoZHQsIGludGxPcHRzLCBmaWVsZCkge1xuICAgIGNvbnN0IGRmID0gdGhpcy5kdEZvcm1hdHRlcihkdCwgaW50bE9wdHMpLFxuICAgICAgICAgIHJlc3VsdHMgPSBkZi5mb3JtYXRUb1BhcnRzKCksXG4gICAgICAgICAgbWF0Y2hpbmcgPSByZXN1bHRzLmZpbmQobSA9PiBtLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gZmllbGQpO1xuICAgIHJldHVybiBtYXRjaGluZyA/IG1hdGNoaW5nLnZhbHVlIDogbnVsbDtcbiAgfVxuXG4gIG51bWJlckZvcm1hdHRlcihvcHRzID0ge30pIHtcbiAgICAvLyB0aGlzIGZvcmNlc2ltcGxlIG9wdGlvbiBpcyBuZXZlciB1c2VkICh0aGUgb25seSBjYWxsZXIgc2hvcnQtY2lyY3VpdHMgb24gaXQsIGJ1dCBpdCBzZWVtcyBzYWZlciB0byBsZWF2ZSlcbiAgICAvLyAoaW4gY29udHJhc3QsIHRoZSByZXN0IG9mIHRoZSBjb25kaXRpb24gaXMgdXNlZCBoZWF2aWx5KVxuICAgIHJldHVybiBuZXcgUG9seU51bWJlckZvcm1hdHRlcih0aGlzLmludGwsIG9wdHMuZm9yY2VTaW1wbGUgfHwgdGhpcy5mYXN0TnVtYmVycywgb3B0cyk7XG4gIH1cblxuICBkdEZvcm1hdHRlcihkdCwgaW50bE9wdHMgPSB7fSkge1xuICAgIHJldHVybiBuZXcgUG9seURhdGVGb3JtYXR0ZXIoZHQsIHRoaXMuaW50bCwgaW50bE9wdHMpO1xuICB9XG5cbiAgcmVsRm9ybWF0dGVyKG9wdHMgPSB7fSkge1xuICAgIHJldHVybiBuZXcgUG9seVJlbEZvcm1hdHRlcih0aGlzLmludGwsIHRoaXMuaXNFbmdsaXNoKCksIG9wdHMpO1xuICB9XG5cbiAgbGlzdEZvcm1hdHRlcihvcHRzID0ge30pIHtcbiAgICByZXR1cm4gZ2V0Q2FjaGVkTEYodGhpcy5pbnRsLCBvcHRzKTtcbiAgfVxuXG4gIGlzRW5nbGlzaCgpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGUgPT09IFwiZW5cIiB8fCB0aGlzLmxvY2FsZS50b0xvd2VyQ2FzZSgpID09PSBcImVuLXVzXCIgfHwgbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQodGhpcy5pbnRsKS5yZXNvbHZlZE9wdGlvbnMoKS5sb2NhbGUuc3RhcnRzV2l0aChcImVuLXVzXCIpO1xuICB9XG5cbiAgZXF1YWxzKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlID09PSBvdGhlci5sb2NhbGUgJiYgdGhpcy5udW1iZXJpbmdTeXN0ZW0gPT09IG90aGVyLm51bWJlcmluZ1N5c3RlbSAmJiB0aGlzLm91dHB1dENhbGVuZGFyID09PSBvdGhlci5vdXRwdXRDYWxlbmRhcjtcbiAgfVxuXG59XG5cbi8qXG4gKiBUaGlzIGZpbGUgaGFuZGxlcyBwYXJzaW5nIGZvciB3ZWxsLXNwZWNpZmllZCBmb3JtYXRzLiBIZXJlJ3MgaG93IGl0IHdvcmtzOlxuICogVHdvIHRoaW5ncyBnbyBpbnRvIHBhcnNpbmc6IGEgcmVnZXggdG8gbWF0Y2ggd2l0aCBhbmQgYW4gZXh0cmFjdG9yIHRvIHRha2UgYXBhcnQgdGhlIGdyb3VwcyBpbiB0aGUgbWF0Y2guXG4gKiBBbiBleHRyYWN0b3IgaXMganVzdCBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSByZWdleCBtYXRjaCBhcnJheSBhbmQgcmV0dXJucyBhIHsgeWVhcjogLi4uLCBtb250aDogLi4uIH0gb2JqZWN0XG4gKiBwYXJzZSgpIGRvZXMgdGhlIHdvcmsgb2YgZXhlY3V0aW5nIHRoZSByZWdleCBhbmQgYXBwbHlpbmcgdGhlIGV4dHJhY3Rvci4gSXQgdGFrZXMgbXVsdGlwbGUgcmVnZXgvZXh0cmFjdG9yIHBhaXJzIHRvIHRyeSBpbiBzZXF1ZW5jZS5cbiAqIEV4dHJhY3RvcnMgY2FuIHRha2UgYSBcImN1cnNvclwiIHJlcHJlc2VudGluZyB0aGUgb2Zmc2V0IGluIHRoZSBtYXRjaCB0byBsb29rIGF0LiBUaGlzIG1ha2VzIGl0IGVhc3kgdG8gY29tYmluZSBleHRyYWN0b3JzLlxuICogY29tYmluZUV4dHJhY3RvcnMoKSBkb2VzIHRoZSB3b3JrIG9mIGNvbWJpbmluZyB0aGVtLCBrZWVwaW5nIHRyYWNrIG9mIHRoZSBjdXJzb3IgdGhyb3VnaCBtdWx0aXBsZSBleHRyYWN0aW9ucy5cbiAqIFNvbWUgZXh0cmFjdGlvbnMgYXJlIHN1cGVyIGR1bWIgYW5kIHNpbXBsZVBhcnNlIGFuZCBmcm9tU3RyaW5ncyBoZWxwIERSWSB0aGVtLlxuICovXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWdleGVzKC4uLnJlZ2V4ZXMpIHtcbiAgY29uc3QgZnVsbCA9IHJlZ2V4ZXMucmVkdWNlKChmLCByKSA9PiBmICsgci5zb3VyY2UsIFwiXCIpO1xuICByZXR1cm4gUmVnRXhwKGBeJHtmdWxsfSRgKTtcbn1cblxuZnVuY3Rpb24gY29tYmluZUV4dHJhY3RvcnMoLi4uZXh0cmFjdG9ycykge1xuICByZXR1cm4gbSA9PiBleHRyYWN0b3JzLnJlZHVjZSgoW21lcmdlZFZhbHMsIG1lcmdlZFpvbmUsIGN1cnNvcl0sIGV4KSA9PiB7XG4gICAgY29uc3QgW3ZhbCwgem9uZSwgbmV4dF0gPSBleChtLCBjdXJzb3IpO1xuICAgIHJldHVybiBbeyAuLi5tZXJnZWRWYWxzLFxuICAgICAgLi4udmFsXG4gICAgfSwgem9uZSB8fCBtZXJnZWRab25lLCBuZXh0XTtcbiAgfSwgW3t9LCBudWxsLCAxXSkuc2xpY2UoMCwgMik7XG59XG5cbmZ1bmN0aW9uIHBhcnNlKHMsIC4uLnBhdHRlcm5zKSB7XG4gIGlmIChzID09IG51bGwpIHtcbiAgICByZXR1cm4gW251bGwsIG51bGxdO1xuICB9XG5cbiAgZm9yIChjb25zdCBbcmVnZXgsIGV4dHJhY3Rvcl0gb2YgcGF0dGVybnMpIHtcbiAgICBjb25zdCBtID0gcmVnZXguZXhlYyhzKTtcblxuICAgIGlmIChtKSB7XG4gICAgICByZXR1cm4gZXh0cmFjdG9yKG0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbbnVsbCwgbnVsbF07XG59XG5cbmZ1bmN0aW9uIHNpbXBsZVBhcnNlKC4uLmtleXMpIHtcbiAgcmV0dXJuIChtYXRjaCwgY3Vyc29yKSA9PiB7XG4gICAgY29uc3QgcmV0ID0ge307XG4gICAgbGV0IGk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgcmV0W2tleXNbaV1dID0gcGFyc2VJbnRlZ2VyKG1hdGNoW2N1cnNvciArIGldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW3JldCwgbnVsbCwgY3Vyc29yICsgaV07XG4gIH07XG59IC8vIElTTyBhbmQgU1FMIHBhcnNpbmdcblxuXG5jb25zdCBvZmZzZXRSZWdleCA9IC8oPzooWil8KFsrLV1cXGRcXGQpKD86Oj8oXFxkXFxkKSk/KS87XG5jb25zdCBpc29FeHRlbmRlZFpvbmUgPSBgKD86JHtvZmZzZXRSZWdleC5zb3VyY2V9Pyg/OlxcXFxbKCR7aWFuYVJlZ2V4LnNvdXJjZX0pXFxcXF0pPyk/YDtcbmNvbnN0IGlzb1RpbWVCYXNlUmVnZXggPSAvKFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86Oj8oXFxkXFxkKSg/OlsuLF0oXFxkezEsMzB9KSk/KT8pPy87XG5jb25zdCBpc29UaW1lUmVnZXggPSBSZWdFeHAoYCR7aXNvVGltZUJhc2VSZWdleC5zb3VyY2V9JHtpc29FeHRlbmRlZFpvbmV9YCk7XG5jb25zdCBpc29UaW1lRXh0ZW5zaW9uUmVnZXggPSBSZWdFeHAoYCg/OlQke2lzb1RpbWVSZWdleC5zb3VyY2V9KT9gKTtcbmNvbnN0IGlzb1ltZFJlZ2V4ID0gLyhbKy1dXFxkezZ9fFxcZHs0fSkoPzotPyhcXGRcXGQpKD86LT8oXFxkXFxkKSk/KT8vO1xuY29uc3QgaXNvV2Vla1JlZ2V4ID0gLyhcXGR7NH0pLT9XKFxcZFxcZCkoPzotPyhcXGQpKT8vO1xuY29uc3QgaXNvT3JkaW5hbFJlZ2V4ID0gLyhcXGR7NH0pLT8oXFxkezN9KS87XG5jb25zdCBleHRyYWN0SVNPV2Vla0RhdGEgPSBzaW1wbGVQYXJzZShcIndlZWtZZWFyXCIsIFwid2Vla051bWJlclwiLCBcIndlZWtEYXlcIik7XG5jb25zdCBleHRyYWN0SVNPT3JkaW5hbERhdGEgPSBzaW1wbGVQYXJzZShcInllYXJcIiwgXCJvcmRpbmFsXCIpO1xuY29uc3Qgc3FsWW1kUmVnZXggPSAvKFxcZHs0fSktKFxcZFxcZCktKFxcZFxcZCkvOyAvLyBkdW1iZWQtZG93biB2ZXJzaW9uIG9mIHRoZSBJU08gb25lXG5cbmNvbnN0IHNxbFRpbWVSZWdleCA9IFJlZ0V4cChgJHtpc29UaW1lQmFzZVJlZ2V4LnNvdXJjZX0gPyg/OiR7b2Zmc2V0UmVnZXguc291cmNlfXwoJHtpYW5hUmVnZXguc291cmNlfSkpP2ApO1xuY29uc3Qgc3FsVGltZUV4dGVuc2lvblJlZ2V4ID0gUmVnRXhwKGAoPzogJHtzcWxUaW1lUmVnZXguc291cmNlfSk/YCk7XG5cbmZ1bmN0aW9uIGludChtYXRjaCwgcG9zLCBmYWxsYmFjaykge1xuICBjb25zdCBtID0gbWF0Y2hbcG9zXTtcbiAgcmV0dXJuIGlzVW5kZWZpbmVkKG0pID8gZmFsbGJhY2sgOiBwYXJzZUludGVnZXIobSk7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RJU09ZbWQobWF0Y2gsIGN1cnNvcikge1xuICBjb25zdCBpdGVtID0ge1xuICAgIHllYXI6IGludChtYXRjaCwgY3Vyc29yKSxcbiAgICBtb250aDogaW50KG1hdGNoLCBjdXJzb3IgKyAxLCAxKSxcbiAgICBkYXk6IGludChtYXRjaCwgY3Vyc29yICsgMiwgMSlcbiAgfTtcbiAgcmV0dXJuIFtpdGVtLCBudWxsLCBjdXJzb3IgKyAzXTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdElTT1RpbWUobWF0Y2gsIGN1cnNvcikge1xuICBjb25zdCBpdGVtID0ge1xuICAgIGhvdXJzOiBpbnQobWF0Y2gsIGN1cnNvciwgMCksXG4gICAgbWludXRlczogaW50KG1hdGNoLCBjdXJzb3IgKyAxLCAwKSxcbiAgICBzZWNvbmRzOiBpbnQobWF0Y2gsIGN1cnNvciArIDIsIDApLFxuICAgIG1pbGxpc2Vjb25kczogcGFyc2VNaWxsaXMobWF0Y2hbY3Vyc29yICsgM10pXG4gIH07XG4gIHJldHVybiBbaXRlbSwgbnVsbCwgY3Vyc29yICsgNF07XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RJU09PZmZzZXQobWF0Y2gsIGN1cnNvcikge1xuICBjb25zdCBsb2NhbCA9ICFtYXRjaFtjdXJzb3JdICYmICFtYXRjaFtjdXJzb3IgKyAxXSxcbiAgICAgICAgZnVsbE9mZnNldCA9IHNpZ25lZE9mZnNldChtYXRjaFtjdXJzb3IgKyAxXSwgbWF0Y2hbY3Vyc29yICsgMl0pLFxuICAgICAgICB6b25lID0gbG9jYWwgPyBudWxsIDogRml4ZWRPZmZzZXRab25lLmluc3RhbmNlKGZ1bGxPZmZzZXQpO1xuICByZXR1cm4gW3t9LCB6b25lLCBjdXJzb3IgKyAzXTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdElBTkFab25lKG1hdGNoLCBjdXJzb3IpIHtcbiAgY29uc3Qgem9uZSA9IG1hdGNoW2N1cnNvcl0gPyBJQU5BWm9uZS5jcmVhdGUobWF0Y2hbY3Vyc29yXSkgOiBudWxsO1xuICByZXR1cm4gW3t9LCB6b25lLCBjdXJzb3IgKyAxXTtcbn0gLy8gSVNPIHRpbWUgcGFyc2luZ1xuXG5cbmNvbnN0IGlzb1RpbWVPbmx5ID0gUmVnRXhwKGBeVD8ke2lzb1RpbWVCYXNlUmVnZXguc291cmNlfSRgKTsgLy8gSVNPIGR1cmF0aW9uIHBhcnNpbmdcblxuY29uc3QgaXNvRHVyYXRpb24gPSAvXi0/UCg/Oig/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KVkpPyg/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KU0pPyg/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KVcpPyg/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KUQpPyg/OlQoPzooLT9cXGR7MSwyMH0oPzpcXC5cXGR7MSwyMH0pPylIKT8oPzooLT9cXGR7MSwyMH0oPzpcXC5cXGR7MSwyMH0pPylNKT8oPzooLT9cXGR7MSwyMH0pKD86Wy4sXSgtP1xcZHsxLDIwfSkpP1MpPyk/KSQvO1xuXG5mdW5jdGlvbiBleHRyYWN0SVNPRHVyYXRpb24obWF0Y2gpIHtcbiAgY29uc3QgW3MsIHllYXJTdHIsIG1vbnRoU3RyLCB3ZWVrU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyLCBtaWxsaXNlY29uZHNTdHJdID0gbWF0Y2g7XG4gIGNvbnN0IGhhc05lZ2F0aXZlUHJlZml4ID0gc1swXSA9PT0gXCItXCI7XG4gIGNvbnN0IG5lZ2F0aXZlU2Vjb25kcyA9IHNlY29uZFN0ciAmJiBzZWNvbmRTdHJbMF0gPT09IFwiLVwiO1xuXG4gIGNvbnN0IG1heWJlTmVnYXRlID0gKG51bSwgZm9yY2UgPSBmYWxzZSkgPT4gbnVtICE9PSB1bmRlZmluZWQgJiYgKGZvcmNlIHx8IG51bSAmJiBoYXNOZWdhdGl2ZVByZWZpeCkgPyAtbnVtIDogbnVtO1xuXG4gIHJldHVybiBbe1xuICAgIHllYXJzOiBtYXliZU5lZ2F0ZShwYXJzZUZsb2F0aW5nKHllYXJTdHIpKSxcbiAgICBtb250aHM6IG1heWJlTmVnYXRlKHBhcnNlRmxvYXRpbmcobW9udGhTdHIpKSxcbiAgICB3ZWVrczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyh3ZWVrU3RyKSksXG4gICAgZGF5czogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhkYXlTdHIpKSxcbiAgICBob3VyczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhob3VyU3RyKSksXG4gICAgbWludXRlczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhtaW51dGVTdHIpKSxcbiAgICBzZWNvbmRzOiBtYXliZU5lZ2F0ZShwYXJzZUZsb2F0aW5nKHNlY29uZFN0ciksIHNlY29uZFN0ciA9PT0gXCItMFwiKSxcbiAgICBtaWxsaXNlY29uZHM6IG1heWJlTmVnYXRlKHBhcnNlTWlsbGlzKG1pbGxpc2Vjb25kc1N0ciksIG5lZ2F0aXZlU2Vjb25kcylcbiAgfV07XG59IC8vIFRoZXNlIGFyZSBhIGxpdHRsZSBicmFpbmRlYWQuIEVEVCAqc2hvdWxkKiB0ZWxsIHVzIHRoYXQgd2UncmUgaW4sIHNheSwgQW1lcmljYS9OZXdfWW9ya1xuLy8gYW5kIG5vdCBqdXN0IHRoYXQgd2UncmUgaW4gLTI0MCAqcmlnaHQgbm93Ki4gQnV0IHNpbmNlIEkgZG9uJ3QgdGhpbmsgdGhlc2UgYXJlIHVzZWQgdGhhdCBvZnRlblxuLy8gSSdtIGp1c3QgZ29pbmcgdG8gaWdub3JlIHRoYXRcblxuXG5jb25zdCBvYnNPZmZzZXRzID0ge1xuICBHTVQ6IDAsXG4gIEVEVDogLTQgKiA2MCxcbiAgRVNUOiAtNSAqIDYwLFxuICBDRFQ6IC01ICogNjAsXG4gIENTVDogLTYgKiA2MCxcbiAgTURUOiAtNiAqIDYwLFxuICBNU1Q6IC03ICogNjAsXG4gIFBEVDogLTcgKiA2MCxcbiAgUFNUOiAtOCAqIDYwXG59O1xuXG5mdW5jdGlvbiBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cikge1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgeWVhcjogeWVhclN0ci5sZW5ndGggPT09IDIgPyB1bnRydW5jYXRlWWVhcihwYXJzZUludGVnZXIoeWVhclN0cikpIDogcGFyc2VJbnRlZ2VyKHllYXJTdHIpLFxuICAgIG1vbnRoOiBtb250aHNTaG9ydC5pbmRleE9mKG1vbnRoU3RyKSArIDEsXG4gICAgZGF5OiBwYXJzZUludGVnZXIoZGF5U3RyKSxcbiAgICBob3VyOiBwYXJzZUludGVnZXIoaG91clN0ciksXG4gICAgbWludXRlOiBwYXJzZUludGVnZXIobWludXRlU3RyKVxuICB9O1xuICBpZiAoc2Vjb25kU3RyKSByZXN1bHQuc2Vjb25kID0gcGFyc2VJbnRlZ2VyKHNlY29uZFN0cik7XG5cbiAgaWYgKHdlZWtkYXlTdHIpIHtcbiAgICByZXN1bHQud2Vla2RheSA9IHdlZWtkYXlTdHIubGVuZ3RoID4gMyA/IHdlZWtkYXlzTG9uZy5pbmRleE9mKHdlZWtkYXlTdHIpICsgMSA6IHdlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSArIDE7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSAvLyBSRkMgMjgyMi81MzIyXG5cblxuY29uc3QgcmZjMjgyMiA9IC9eKD86KE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksXFxzKT8oXFxkezEsMn0pXFxzKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxccyhcXGR7Miw0fSlcXHMoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKSk/XFxzKD86KFVUfEdNVHxbRUNNUF1bU0RdVCl8KFtael0pfCg/OihbKy1dXFxkXFxkKShcXGRcXGQpKSkkLztcblxuZnVuY3Rpb24gZXh0cmFjdFJGQzI4MjIobWF0Y2gpIHtcbiAgY29uc3QgWywgd2Vla2RheVN0ciwgZGF5U3RyLCBtb250aFN0ciwgeWVhclN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIsIG9ic09mZnNldCwgbWlsT2Zmc2V0LCBvZmZIb3VyU3RyLCBvZmZNaW51dGVTdHJdID0gbWF0Y2gsXG4gICAgICAgIHJlc3VsdCA9IGZyb21TdHJpbmdzKHdlZWtkYXlTdHIsIHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyKTtcbiAgbGV0IG9mZnNldDtcblxuICBpZiAob2JzT2Zmc2V0KSB7XG4gICAgb2Zmc2V0ID0gb2JzT2Zmc2V0c1tvYnNPZmZzZXRdO1xuICB9IGVsc2UgaWYgKG1pbE9mZnNldCkge1xuICAgIG9mZnNldCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0ID0gc2lnbmVkT2Zmc2V0KG9mZkhvdXJTdHIsIG9mZk1pbnV0ZVN0cik7XG4gIH1cblxuICByZXR1cm4gW3Jlc3VsdCwgbmV3IEZpeGVkT2Zmc2V0Wm9uZShvZmZzZXQpXTtcbn1cblxuZnVuY3Rpb24gcHJlcHJvY2Vzc1JGQzI4MjIocykge1xuICAvLyBSZW1vdmUgY29tbWVudHMgYW5kIGZvbGRpbmcgd2hpdGVzcGFjZSBhbmQgcmVwbGFjZSBtdWx0aXBsZS1zcGFjZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuICByZXR1cm4gcy5yZXBsYWNlKC9cXChbXildKlxcKXxbXFxuXFx0XS9nLCBcIiBcIikucmVwbGFjZSgvKFxcc1xccyspL2csIFwiIFwiKS50cmltKCk7XG59IC8vIGh0dHAgZGF0ZVxuXG5cbmNvbnN0IHJmYzExMjMgPSAvXihNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pLCAoXFxkXFxkKSAoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpIChcXGR7NH0pIChcXGRcXGQpOihcXGRcXGQpOihcXGRcXGQpIEdNVCQvLFxuICAgICAgcmZjODUwID0gL14oTW9uZGF5fFR1ZXNkYXl8V2VkbmVzZGF5fFRodXJzZGF5fEZyaWRheXxTYXR1cmRheXxTdW5kYXkpLCAoXFxkXFxkKS0oSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpLShcXGRcXGQpIChcXGRcXGQpOihcXGRcXGQpOihcXGRcXGQpIEdNVCQvLFxuICAgICAgYXNjaWkgPSAvXihNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pIChKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYykgKCBcXGR8XFxkXFxkKSAoXFxkXFxkKTooXFxkXFxkKTooXFxkXFxkKSAoXFxkezR9KSQvO1xuXG5mdW5jdGlvbiBleHRyYWN0UkZDMTEyM09yODUwKG1hdGNoKSB7XG4gIGNvbnN0IFssIHdlZWtkYXlTdHIsIGRheVN0ciwgbW9udGhTdHIsIHllYXJTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyXSA9IG1hdGNoLFxuICAgICAgICByZXN1bHQgPSBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cik7XG4gIHJldHVybiBbcmVzdWx0LCBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2VdO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0QVNDSUkobWF0Y2gpIHtcbiAgY29uc3QgWywgd2Vla2RheVN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIsIHllYXJTdHJdID0gbWF0Y2gsXG4gICAgICAgIHJlc3VsdCA9IGZyb21TdHJpbmdzKHdlZWtkYXlTdHIsIHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyKTtcbiAgcmV0dXJuIFtyZXN1bHQsIEZpeGVkT2Zmc2V0Wm9uZS51dGNJbnN0YW5jZV07XG59XG5cbmNvbnN0IGlzb1ltZFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXggPSBjb21iaW5lUmVnZXhlcyhpc29ZbWRSZWdleCwgaXNvVGltZUV4dGVuc2lvblJlZ2V4KTtcbmNvbnN0IGlzb1dlZWtXaXRoVGltZUV4dGVuc2lvblJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoaXNvV2Vla1JlZ2V4LCBpc29UaW1lRXh0ZW5zaW9uUmVnZXgpO1xuY29uc3QgaXNvT3JkaW5hbFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXggPSBjb21iaW5lUmVnZXhlcyhpc29PcmRpbmFsUmVnZXgsIGlzb1RpbWVFeHRlbnNpb25SZWdleCk7XG5jb25zdCBpc29UaW1lQ29tYmluZWRSZWdleCA9IGNvbWJpbmVSZWdleGVzKGlzb1RpbWVSZWdleCk7XG5jb25zdCBleHRyYWN0SVNPWW1kVGltZUFuZE9mZnNldCA9IGNvbWJpbmVFeHRyYWN0b3JzKGV4dHJhY3RJU09ZbWQsIGV4dHJhY3RJU09UaW1lLCBleHRyYWN0SVNPT2Zmc2V0LCBleHRyYWN0SUFOQVpvbmUpO1xuY29uc3QgZXh0cmFjdElTT1dlZWtUaW1lQW5kT2Zmc2V0ID0gY29tYmluZUV4dHJhY3RvcnMoZXh0cmFjdElTT1dlZWtEYXRhLCBleHRyYWN0SVNPVGltZSwgZXh0cmFjdElTT09mZnNldCwgZXh0cmFjdElBTkFab25lKTtcbmNvbnN0IGV4dHJhY3RJU09PcmRpbmFsRGF0ZUFuZFRpbWUgPSBjb21iaW5lRXh0cmFjdG9ycyhleHRyYWN0SVNPT3JkaW5hbERhdGEsIGV4dHJhY3RJU09UaW1lLCBleHRyYWN0SVNPT2Zmc2V0LCBleHRyYWN0SUFOQVpvbmUpO1xuY29uc3QgZXh0cmFjdElTT1RpbWVBbmRPZmZzZXQgPSBjb21iaW5lRXh0cmFjdG9ycyhleHRyYWN0SVNPVGltZSwgZXh0cmFjdElTT09mZnNldCwgZXh0cmFjdElBTkFab25lKTtcbi8qXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlSVNPRGF0ZShzKSB7XG4gIHJldHVybiBwYXJzZShzLCBbaXNvWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCwgZXh0cmFjdElTT1ltZFRpbWVBbmRPZmZzZXRdLCBbaXNvV2Vla1dpdGhUaW1lRXh0ZW5zaW9uUmVnZXgsIGV4dHJhY3RJU09XZWVrVGltZUFuZE9mZnNldF0sIFtpc29PcmRpbmFsV2l0aFRpbWVFeHRlbnNpb25SZWdleCwgZXh0cmFjdElTT09yZGluYWxEYXRlQW5kVGltZV0sIFtpc29UaW1lQ29tYmluZWRSZWdleCwgZXh0cmFjdElTT1RpbWVBbmRPZmZzZXRdKTtcbn1cbmZ1bmN0aW9uIHBhcnNlUkZDMjgyMkRhdGUocykge1xuICByZXR1cm4gcGFyc2UocHJlcHJvY2Vzc1JGQzI4MjIocyksIFtyZmMyODIyLCBleHRyYWN0UkZDMjgyMl0pO1xufVxuZnVuY3Rpb24gcGFyc2VIVFRQRGF0ZShzKSB7XG4gIHJldHVybiBwYXJzZShzLCBbcmZjMTEyMywgZXh0cmFjdFJGQzExMjNPcjg1MF0sIFtyZmM4NTAsIGV4dHJhY3RSRkMxMTIzT3I4NTBdLCBbYXNjaWksIGV4dHJhY3RBU0NJSV0pO1xufVxuZnVuY3Rpb24gcGFyc2VJU09EdXJhdGlvbihzKSB7XG4gIHJldHVybiBwYXJzZShzLCBbaXNvRHVyYXRpb24sIGV4dHJhY3RJU09EdXJhdGlvbl0pO1xufVxuY29uc3QgZXh0cmFjdElTT1RpbWVPbmx5ID0gY29tYmluZUV4dHJhY3RvcnMoZXh0cmFjdElTT1RpbWUpO1xuZnVuY3Rpb24gcGFyc2VJU09UaW1lT25seShzKSB7XG4gIHJldHVybiBwYXJzZShzLCBbaXNvVGltZU9ubHksIGV4dHJhY3RJU09UaW1lT25seV0pO1xufVxuY29uc3Qgc3FsWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCA9IGNvbWJpbmVSZWdleGVzKHNxbFltZFJlZ2V4LCBzcWxUaW1lRXh0ZW5zaW9uUmVnZXgpO1xuY29uc3Qgc3FsVGltZUNvbWJpbmVkUmVnZXggPSBjb21iaW5lUmVnZXhlcyhzcWxUaW1lUmVnZXgpO1xuY29uc3QgZXh0cmFjdElTT1RpbWVPZmZzZXRBbmRJQU5BWm9uZSA9IGNvbWJpbmVFeHRyYWN0b3JzKGV4dHJhY3RJU09UaW1lLCBleHRyYWN0SVNPT2Zmc2V0LCBleHRyYWN0SUFOQVpvbmUpO1xuZnVuY3Rpb24gcGFyc2VTUUwocykge1xuICByZXR1cm4gcGFyc2UocywgW3NxbFltZFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXgsIGV4dHJhY3RJU09ZbWRUaW1lQW5kT2Zmc2V0XSwgW3NxbFRpbWVDb21iaW5lZFJlZ2V4LCBleHRyYWN0SVNPVGltZU9mZnNldEFuZElBTkFab25lXSk7XG59XG5cbmNvbnN0IElOVkFMSUQkMiA9IFwiSW52YWxpZCBEdXJhdGlvblwiOyAvLyB1bml0IGNvbnZlcnNpb24gY29uc3RhbnRzXG5cbmNvbnN0IGxvd09yZGVyTWF0cml4ID0ge1xuICB3ZWVrczoge1xuICAgIGRheXM6IDcsXG4gICAgaG91cnM6IDcgKiAyNCxcbiAgICBtaW51dGVzOiA3ICogMjQgKiA2MCxcbiAgICBzZWNvbmRzOiA3ICogMjQgKiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogNyAqIDI0ICogNjAgKiA2MCAqIDEwMDBcbiAgfSxcbiAgZGF5czoge1xuICAgIGhvdXJzOiAyNCxcbiAgICBtaW51dGVzOiAyNCAqIDYwLFxuICAgIHNlY29uZHM6IDI0ICogNjAgKiA2MCxcbiAgICBtaWxsaXNlY29uZHM6IDI0ICogNjAgKiA2MCAqIDEwMDBcbiAgfSxcbiAgaG91cnM6IHtcbiAgICBtaW51dGVzOiA2MCxcbiAgICBzZWNvbmRzOiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogNjAgKiA2MCAqIDEwMDBcbiAgfSxcbiAgbWludXRlczoge1xuICAgIHNlY29uZHM6IDYwLFxuICAgIG1pbGxpc2Vjb25kczogNjAgKiAxMDAwXG4gIH0sXG4gIHNlY29uZHM6IHtcbiAgICBtaWxsaXNlY29uZHM6IDEwMDBcbiAgfVxufSxcbiAgICAgIGNhc3VhbE1hdHJpeCA9IHtcbiAgeWVhcnM6IHtcbiAgICBxdWFydGVyczogNCxcbiAgICBtb250aHM6IDEyLFxuICAgIHdlZWtzOiA1MixcbiAgICBkYXlzOiAzNjUsXG4gICAgaG91cnM6IDM2NSAqIDI0LFxuICAgIG1pbnV0ZXM6IDM2NSAqIDI0ICogNjAsXG4gICAgc2Vjb25kczogMzY1ICogMjQgKiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogMzY1ICogMjQgKiA2MCAqIDYwICogMTAwMFxuICB9LFxuICBxdWFydGVyczoge1xuICAgIG1vbnRoczogMyxcbiAgICB3ZWVrczogMTMsXG4gICAgZGF5czogOTEsXG4gICAgaG91cnM6IDkxICogMjQsXG4gICAgbWludXRlczogOTEgKiAyNCAqIDYwLFxuICAgIHNlY29uZHM6IDkxICogMjQgKiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogOTEgKiAyNCAqIDYwICogNjAgKiAxMDAwXG4gIH0sXG4gIG1vbnRoczoge1xuICAgIHdlZWtzOiA0LFxuICAgIGRheXM6IDMwLFxuICAgIGhvdXJzOiAzMCAqIDI0LFxuICAgIG1pbnV0ZXM6IDMwICogMjQgKiA2MCxcbiAgICBzZWNvbmRzOiAzMCAqIDI0ICogNjAgKiA2MCxcbiAgICBtaWxsaXNlY29uZHM6IDMwICogMjQgKiA2MCAqIDYwICogMTAwMFxuICB9LFxuICAuLi5sb3dPcmRlck1hdHJpeFxufSxcbiAgICAgIGRheXNJblllYXJBY2N1cmF0ZSA9IDE0NjA5Ny4wIC8gNDAwLFxuICAgICAgZGF5c0luTW9udGhBY2N1cmF0ZSA9IDE0NjA5Ny4wIC8gNDgwMCxcbiAgICAgIGFjY3VyYXRlTWF0cml4ID0ge1xuICB5ZWFyczoge1xuICAgIHF1YXJ0ZXJzOiA0LFxuICAgIG1vbnRoczogMTIsXG4gICAgd2Vla3M6IGRheXNJblllYXJBY2N1cmF0ZSAvIDcsXG4gICAgZGF5czogZGF5c0luWWVhckFjY3VyYXRlLFxuICAgIGhvdXJzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCxcbiAgICBtaW51dGVzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwLFxuICAgIHNlY29uZHM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCxcbiAgICBtaWxsaXNlY29uZHM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCAqIDEwMDBcbiAgfSxcbiAgcXVhcnRlcnM6IHtcbiAgICBtb250aHM6IDMsXG4gICAgd2Vla3M6IGRheXNJblllYXJBY2N1cmF0ZSAvIDI4LFxuICAgIGRheXM6IGRheXNJblllYXJBY2N1cmF0ZSAvIDQsXG4gICAgaG91cnM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0IC8gNCxcbiAgICBtaW51dGVzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwIC8gNCxcbiAgICBzZWNvbmRzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwICogNjAgLyA0LFxuICAgIG1pbGxpc2Vjb25kczogZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCAqIDYwICogMTAwMCAvIDRcbiAgfSxcbiAgbW9udGhzOiB7XG4gICAgd2Vla3M6IGRheXNJbk1vbnRoQWNjdXJhdGUgLyA3LFxuICAgIGRheXM6IGRheXNJbk1vbnRoQWNjdXJhdGUsXG4gICAgaG91cnM6IGRheXNJbk1vbnRoQWNjdXJhdGUgKiAyNCxcbiAgICBtaW51dGVzOiBkYXlzSW5Nb250aEFjY3VyYXRlICogMjQgKiA2MCxcbiAgICBzZWNvbmRzOiBkYXlzSW5Nb250aEFjY3VyYXRlICogMjQgKiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogZGF5c0luTW9udGhBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCAqIDEwMDBcbiAgfSxcbiAgLi4ubG93T3JkZXJNYXRyaXhcbn07IC8vIHVuaXRzIG9yZGVyZWQgYnkgc2l6ZVxuXG5jb25zdCBvcmRlcmVkVW5pdHMkMSA9IFtcInllYXJzXCIsIFwicXVhcnRlcnNcIiwgXCJtb250aHNcIiwgXCJ3ZWVrc1wiLCBcImRheXNcIiwgXCJob3Vyc1wiLCBcIm1pbnV0ZXNcIiwgXCJzZWNvbmRzXCIsIFwibWlsbGlzZWNvbmRzXCJdO1xuY29uc3QgcmV2ZXJzZVVuaXRzID0gb3JkZXJlZFVuaXRzJDEuc2xpY2UoMCkucmV2ZXJzZSgpOyAvLyBjbG9uZSByZWFsbHkgbWVhbnMgXCJjcmVhdGUgYW5vdGhlciBpbnN0YW5jZSBqdXN0IGxpa2UgdGhpcyBvbmUsIGJ1dCB3aXRoIHRoZXNlIGNoYW5nZXNcIlxuXG5mdW5jdGlvbiBjbG9uZSQxKGR1ciwgYWx0cywgY2xlYXIgPSBmYWxzZSkge1xuICAvLyBkZWVwIG1lcmdlIGZvciB2YWxzXG4gIGNvbnN0IGNvbmYgPSB7XG4gICAgdmFsdWVzOiBjbGVhciA/IGFsdHMudmFsdWVzIDogeyAuLi5kdXIudmFsdWVzLFxuICAgICAgLi4uKGFsdHMudmFsdWVzIHx8IHt9KVxuICAgIH0sXG4gICAgbG9jOiBkdXIubG9jLmNsb25lKGFsdHMubG9jKSxcbiAgICBjb252ZXJzaW9uQWNjdXJhY3k6IGFsdHMuY29udmVyc2lvbkFjY3VyYWN5IHx8IGR1ci5jb252ZXJzaW9uQWNjdXJhY3lcbiAgfTtcbiAgcmV0dXJuIG5ldyBEdXJhdGlvbihjb25mKTtcbn1cblxuZnVuY3Rpb24gYW50aVRydW5jKG4pIHtcbiAgcmV0dXJuIG4gPCAwID8gTWF0aC5mbG9vcihuKSA6IE1hdGguY2VpbChuKTtcbn0gLy8gTkI6IG11dGF0ZXMgcGFyYW1ldGVyc1xuXG5cbmZ1bmN0aW9uIGNvbnZlcnQobWF0cml4LCBmcm9tTWFwLCBmcm9tVW5pdCwgdG9NYXAsIHRvVW5pdCkge1xuICBjb25zdCBjb252ID0gbWF0cml4W3RvVW5pdF1bZnJvbVVuaXRdLFxuICAgICAgICByYXcgPSBmcm9tTWFwW2Zyb21Vbml0XSAvIGNvbnYsXG4gICAgICAgIHNhbWVTaWduID0gTWF0aC5zaWduKHJhdykgPT09IE1hdGguc2lnbih0b01hcFt0b1VuaXRdKSxcbiAgICAgICAgLy8gb2ssIHNvIHRoaXMgaXMgd2lsZCwgYnV0IHNlZSB0aGUgbWF0cml4IGluIHRoZSB0ZXN0c1xuICBhZGRlZCA9ICFzYW1lU2lnbiAmJiB0b01hcFt0b1VuaXRdICE9PSAwICYmIE1hdGguYWJzKHJhdykgPD0gMSA/IGFudGlUcnVuYyhyYXcpIDogTWF0aC50cnVuYyhyYXcpO1xuICB0b01hcFt0b1VuaXRdICs9IGFkZGVkO1xuICBmcm9tTWFwW2Zyb21Vbml0XSAtPSBhZGRlZCAqIGNvbnY7XG59IC8vIE5COiBtdXRhdGVzIHBhcmFtZXRlcnNcblxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZXMobWF0cml4LCB2YWxzKSB7XG4gIHJldmVyc2VVbml0cy5yZWR1Y2UoKHByZXZpb3VzLCBjdXJyZW50KSA9PiB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh2YWxzW2N1cnJlbnRdKSkge1xuICAgICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICAgIGNvbnZlcnQobWF0cml4LCB2YWxzLCBwcmV2aW91cywgdmFscywgY3VycmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcHJldmlvdXM7XG4gICAgfVxuICB9LCBudWxsKTtcbn1cbi8qKlxuICogQSBEdXJhdGlvbiBvYmplY3QgcmVwcmVzZW50cyBhIHBlcmlvZCBvZiB0aW1lLCBsaWtlIFwiMiBtb250aHNcIiBvciBcIjEgZGF5LCAxIGhvdXJcIi4gQ29uY2VwdHVhbGx5LCBpdCdzIGp1c3QgYSBtYXAgb2YgdW5pdHMgdG8gdGhlaXIgcXVhbnRpdGllcywgYWNjb21wYW5pZWQgYnkgc29tZSBhZGRpdGlvbmFsIGNvbmZpZ3VyYXRpb24gYW5kIG1ldGhvZHMgZm9yIGNyZWF0aW5nLCBwYXJzaW5nLCBpbnRlcnJvZ2F0aW5nLCB0cmFuc2Zvcm1pbmcsIGFuZCBmb3JtYXR0aW5nIHRoZW0uIFRoZXkgY2FuIGJlIHVzZWQgb24gdGhlaXIgb3duIG9yIGluIGNvbmp1bmN0aW9uIHdpdGggb3RoZXIgTHV4b24gdHlwZXM7IGZvciBleGFtcGxlLCB5b3UgY2FuIHVzZSB7QGxpbmsgRGF0ZVRpbWUjcGx1c30gdG8gYWRkIGEgRHVyYXRpb24gb2JqZWN0IHRvIGEgRGF0ZVRpbWUsIHByb2R1Y2luZyBhbm90aGVyIERhdGVUaW1lLlxuICpcbiAqIEhlcmUgaXMgYSBicmllZiBvdmVydmlldyBvZiBjb21tb25seSB1c2VkIG1ldGhvZHMgYW5kIGdldHRlcnMgaW4gRHVyYXRpb246XG4gKlxuICogKiAqKkNyZWF0aW9uKiogVG8gY3JlYXRlIGEgRHVyYXRpb24sIHVzZSB7QGxpbmsgRHVyYXRpb24jZnJvbU1pbGxpc30sIHtAbGluayBEdXJhdGlvbiNmcm9tT2JqZWN0fSwgb3Ige0BsaW5rIER1cmF0aW9uI2Zyb21JU099LlxuICogKiAqKlVuaXQgdmFsdWVzKiogU2VlIHRoZSB7QGxpbmsgRHVyYXRpb24jeWVhcnN9LCB7QGxpbmsgRHVyYXRpb24jbW9udGhzfSwge0BsaW5rIER1cmF0aW9uI3dlZWtzfSwge0BsaW5rIER1cmF0aW9uI2RheXN9LCB7QGxpbmsgRHVyYXRpb24jaG91cnN9LCB7QGxpbmsgRHVyYXRpb24jbWludXRlc30sIHtAbGluayBEdXJhdGlvbiNzZWNvbmRzfSwge0BsaW5rIER1cmF0aW9uI21pbGxpc2Vjb25kc30gYWNjZXNzb3JzLlxuICogKiAqKkNvbmZpZ3VyYXRpb24qKiBTZWUgIHtAbGluayBEdXJhdGlvbiNsb2NhbGV9IGFuZCB7QGxpbmsgRHVyYXRpb24jbnVtYmVyaW5nU3lzdGVtfSBhY2Nlc3NvcnMuXG4gKiAqICoqVHJhbnNmb3JtYXRpb24qKiBUbyBjcmVhdGUgbmV3IER1cmF0aW9ucyBvdXQgb2Ygb2xkIG9uZXMgdXNlIHtAbGluayBEdXJhdGlvbiNwbHVzfSwge0BsaW5rIER1cmF0aW9uI21pbnVzfSwge0BsaW5rIER1cmF0aW9uI25vcm1hbGl6ZX0sIHtAbGluayBEdXJhdGlvbiNzZXR9LCB7QGxpbmsgRHVyYXRpb24jcmVjb25maWd1cmV9LCB7QGxpbmsgRHVyYXRpb24jc2hpZnRUb30sIGFuZCB7QGxpbmsgRHVyYXRpb24jbmVnYXRlfS5cbiAqICogKipPdXRwdXQqKiBUbyBjb252ZXJ0IHRoZSBEdXJhdGlvbiBpbnRvIG90aGVyIHJlcHJlc2VudGF0aW9ucywgc2VlIHtAbGluayBEdXJhdGlvbiNhc30sIHtAbGluayBEdXJhdGlvbiN0b0lTT30sIHtAbGluayBEdXJhdGlvbiN0b0Zvcm1hdH0sIGFuZCB7QGxpbmsgRHVyYXRpb24jdG9KU09OfVxuICpcbiAqIFRoZXJlJ3MgYXJlIG1vcmUgbWV0aG9kcyBkb2N1bWVudGVkIGJlbG93LiBJbiBhZGRpdGlvbiwgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gc3VidGxlciB0b3BpY3MgbGlrZSBpbnRlcm5hdGlvbmFsaXphdGlvbiBhbmQgdmFsaWRpdHksIHNlZSB0aGUgZXh0ZXJuYWwgZG9jdW1lbnRhdGlvbi5cbiAqL1xuXG5cbmNsYXNzIER1cmF0aW9uIHtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBjb25zdCBhY2N1cmF0ZSA9IGNvbmZpZy5jb252ZXJzaW9uQWNjdXJhY3kgPT09IFwibG9uZ3Rlcm1cIiB8fCBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMudmFsdWVzID0gY29uZmlnLnZhbHVlcztcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMubG9jID0gY29uZmlnLmxvYyB8fCBMb2NhbGUuY3JlYXRlKCk7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLmNvbnZlcnNpb25BY2N1cmFjeSA9IGFjY3VyYXRlID8gXCJsb25ndGVybVwiIDogXCJjYXN1YWxcIjtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMuaW52YWxpZCA9IGNvbmZpZy5pbnZhbGlkIHx8IG51bGw7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLm1hdHJpeCA9IGFjY3VyYXRlID8gYWNjdXJhdGVNYXRyaXggOiBjYXN1YWxNYXRyaXg7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLmlzTHV4b25EdXJhdGlvbiA9IHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBEdXJhdGlvbiBmcm9tIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IG9mIG1pbGxpc2Vjb25kc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgZm9yIHBhcnNpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nZW4tVVMnXSAtIHRoZSBsb2NhbGUgdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuXG5cbiAgc3RhdGljIGZyb21NaWxsaXMoY291bnQsIG9wdHMpIHtcbiAgICByZXR1cm4gRHVyYXRpb24uZnJvbU9iamVjdCh7XG4gICAgICBtaWxsaXNlY29uZHM6IGNvdW50XG4gICAgfSwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIER1cmF0aW9uIGZyb20gYSBKYXZhU2NyaXB0IG9iamVjdCB3aXRoIGtleXMgbGlrZSAneWVhcnMnIGFuZCAnaG91cnMnLlxuICAgKiBJZiB0aGlzIG9iamVjdCBpcyBlbXB0eSB0aGVuIGEgemVybyBtaWxsaXNlY29uZHMgZHVyYXRpb24gaXMgcmV0dXJuZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSB0aGUgb2JqZWN0IHRvIGNyZWF0ZSB0aGUgRGF0ZVRpbWUgZnJvbVxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLnllYXJzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoucXVhcnRlcnNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5tb250aHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai53ZWVrc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLmRheXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5ob3Vyc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm1pbnV0ZXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5zZWNvbmRzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cz1bXV0gLSBvcHRpb25zIGZvciBjcmVhdGluZyB0aGlzIER1cmF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J2VuLVVTJ10gLSB0aGUgbG9jYWxlIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cblxuXG4gIHN0YXRpYyBmcm9tT2JqZWN0KG9iaiwgb3B0cyA9IHt9KSB7XG4gICAgaWYgKG9iaiA9PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihgRHVyYXRpb24uZnJvbU9iamVjdDogYXJndW1lbnQgZXhwZWN0ZWQgdG8gYmUgYW4gb2JqZWN0LCBnb3QgJHtvYmogPT09IG51bGwgPyBcIm51bGxcIiA6IHR5cGVvZiBvYmp9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEdXJhdGlvbih7XG4gICAgICB2YWx1ZXM6IG5vcm1hbGl6ZU9iamVjdChvYmosIER1cmF0aW9uLm5vcm1hbGl6ZVVuaXQpLFxuICAgICAgbG9jOiBMb2NhbGUuZnJvbU9iamVjdChvcHRzKSxcbiAgICAgIGNvbnZlcnNpb25BY2N1cmFjeTogb3B0cy5jb252ZXJzaW9uQWNjdXJhY3lcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgRHVyYXRpb24gZnJvbSBEdXJhdGlvbkxpa2UuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0IHwgbnVtYmVyIHwgRHVyYXRpb259IGR1cmF0aW9uTGlrZVxuICAgKiBPbmUgb2Y6XG4gICAqIC0gb2JqZWN0IHdpdGgga2V5cyBsaWtlICd5ZWFycycgYW5kICdob3VycycuXG4gICAqIC0gbnVtYmVyIHJlcHJlc2VudGluZyBtaWxsaXNlY29uZHNcbiAgICogLSBEdXJhdGlvbiBpbnN0YW5jZVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG5cblxuICBzdGF0aWMgZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbkxpa2UpIHtcbiAgICBpZiAoaXNOdW1iZXIoZHVyYXRpb25MaWtlKSkge1xuICAgICAgcmV0dXJuIER1cmF0aW9uLmZyb21NaWxsaXMoZHVyYXRpb25MaWtlKTtcbiAgICB9IGVsc2UgaWYgKER1cmF0aW9uLmlzRHVyYXRpb24oZHVyYXRpb25MaWtlKSkge1xuICAgICAgcmV0dXJuIGR1cmF0aW9uTGlrZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkdXJhdGlvbkxpa2UgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5mcm9tT2JqZWN0KGR1cmF0aW9uTGlrZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihgVW5rbm93biBkdXJhdGlvbiBhcmd1bWVudCAke2R1cmF0aW9uTGlrZX0gb2YgdHlwZSAke3R5cGVvZiBkdXJhdGlvbkxpa2V9YCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEdXJhdGlvbiBmcm9tIGFuIElTTyA4NjAxIGR1cmF0aW9uIHN0cmluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0ZXh0IHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyBmb3IgcGFyc2luZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gdGhlIGxvY2FsZSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5jb252ZXJzaW9uQWNjdXJhY3k9J2Nhc3VhbCddIC0gdGhlIGNvbnZlcnNpb24gc3lzdGVtIHRvIHVzZVxuICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI0R1cmF0aW9uc1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPKCdQM1k2TTFXNERUMTJIMzBNNVMnKS50b09iamVjdCgpIC8vPT4geyB5ZWFyczogMywgbW9udGhzOiA2LCB3ZWVrczogMSwgZGF5czogNCwgaG91cnM6IDEyLCBtaW51dGVzOiAzMCwgc2Vjb25kczogNSB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU08oJ1BUMjNIJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDIzIH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbUlTTygnUDVZM00nKS50b09iamVjdCgpIC8vPT4geyB5ZWFyczogNSwgbW9udGhzOiAzIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuXG5cbiAgc3RhdGljIGZyb21JU08odGV4dCwgb3B0cykge1xuICAgIGNvbnN0IFtwYXJzZWRdID0gcGFyc2VJU09EdXJhdGlvbih0ZXh0KTtcblxuICAgIGlmIChwYXJzZWQpIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5mcm9tT2JqZWN0KHBhcnNlZCwgb3B0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5pbnZhbGlkKFwidW5wYXJzYWJsZVwiLCBgdGhlIGlucHV0IFwiJHt0ZXh0fVwiIGNhbid0IGJlIHBhcnNlZCBhcyBJU08gODYwMWApO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgRHVyYXRpb24gZnJvbSBhbiBJU08gODYwMSB0aW1lIHN0cmluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0ZXh0IHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyBmb3IgcGFyc2luZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gdGhlIGxvY2FsZSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5jb252ZXJzaW9uQWNjdXJhY3k9J2Nhc3VhbCddIC0gdGhlIGNvbnZlcnNpb24gc3lzdGVtIHRvIHVzZVxuICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI1RpbWVzXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU09UaW1lKCcxMToyMjozMy40NDQnKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMTEsIG1pbnV0ZXM6IDIyLCBzZWNvbmRzOiAzMywgbWlsbGlzZWNvbmRzOiA0NDQgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPVGltZSgnMTE6MDAnKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMTEsIG1pbnV0ZXM6IDAsIHNlY29uZHM6IDAgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPVGltZSgnVDExOjAwJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDExLCBtaW51dGVzOiAwLCBzZWNvbmRzOiAwIH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbUlTT1RpbWUoJzExMDAnKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMTEsIG1pbnV0ZXM6IDAsIHNlY29uZHM6IDAgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPVGltZSgnVDExMDAnKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMTEsIG1pbnV0ZXM6IDAsIHNlY29uZHM6IDAgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG5cblxuICBzdGF0aWMgZnJvbUlTT1RpbWUodGV4dCwgb3B0cykge1xuICAgIGNvbnN0IFtwYXJzZWRdID0gcGFyc2VJU09UaW1lT25seSh0ZXh0KTtcblxuICAgIGlmIChwYXJzZWQpIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5mcm9tT2JqZWN0KHBhcnNlZCwgb3B0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5pbnZhbGlkKFwidW5wYXJzYWJsZVwiLCBgdGhlIGlucHV0IFwiJHt0ZXh0fVwiIGNhbid0IGJlIHBhcnNlZCBhcyBJU08gODYwMWApO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuIGludmFsaWQgRHVyYXRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gLSBzaW1wbGUgc3RyaW5nIG9mIHdoeSB0aGlzIGRhdGV0aW1lIGlzIGludmFsaWQuIFNob3VsZCBub3QgY29udGFpbiBwYXJhbWV0ZXJzIG9yIGFueXRoaW5nIGVsc2UgZGF0YS1kZXBlbmRlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtleHBsYW5hdGlvbj1udWxsXSAtIGxvbmdlciBleHBsYW5hdGlvbiwgbWF5IGluY2x1ZGUgcGFyYW1ldGVycyBhbmQgb3RoZXIgdXNlZnVsIGRlYnVnZ2luZyBpbmZvcm1hdGlvblxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG5cblxuICBzdGF0aWMgaW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uID0gbnVsbCkge1xuICAgIGlmICghcmVhc29uKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJuZWVkIHRvIHNwZWNpZnkgYSByZWFzb24gdGhlIER1cmF0aW9uIGlzIGludmFsaWRcIik7XG4gICAgfVxuXG4gICAgY29uc3QgaW52YWxpZCA9IHJlYXNvbiBpbnN0YW5jZW9mIEludmFsaWQgPyByZWFzb24gOiBuZXcgSW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uKTtcblxuICAgIGlmIChTZXR0aW5ncy50aHJvd09uSW52YWxpZCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWREdXJhdGlvbkVycm9yKGludmFsaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IER1cmF0aW9uKHtcbiAgICAgICAgaW52YWxpZFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuXG4gIHN0YXRpYyBub3JtYWxpemVVbml0KHVuaXQpIHtcbiAgICBjb25zdCBub3JtYWxpemVkID0ge1xuICAgICAgeWVhcjogXCJ5ZWFyc1wiLFxuICAgICAgeWVhcnM6IFwieWVhcnNcIixcbiAgICAgIHF1YXJ0ZXI6IFwicXVhcnRlcnNcIixcbiAgICAgIHF1YXJ0ZXJzOiBcInF1YXJ0ZXJzXCIsXG4gICAgICBtb250aDogXCJtb250aHNcIixcbiAgICAgIG1vbnRoczogXCJtb250aHNcIixcbiAgICAgIHdlZWs6IFwid2Vla3NcIixcbiAgICAgIHdlZWtzOiBcIndlZWtzXCIsXG4gICAgICBkYXk6IFwiZGF5c1wiLFxuICAgICAgZGF5czogXCJkYXlzXCIsXG4gICAgICBob3VyOiBcImhvdXJzXCIsXG4gICAgICBob3VyczogXCJob3Vyc1wiLFxuICAgICAgbWludXRlOiBcIm1pbnV0ZXNcIixcbiAgICAgIG1pbnV0ZXM6IFwibWludXRlc1wiLFxuICAgICAgc2Vjb25kOiBcInNlY29uZHNcIixcbiAgICAgIHNlY29uZHM6IFwic2Vjb25kc1wiLFxuICAgICAgbWlsbGlzZWNvbmQ6IFwibWlsbGlzZWNvbmRzXCIsXG4gICAgICBtaWxsaXNlY29uZHM6IFwibWlsbGlzZWNvbmRzXCJcbiAgICB9W3VuaXQgPyB1bml0LnRvTG93ZXJDYXNlKCkgOiB1bml0XTtcbiAgICBpZiAoIW5vcm1hbGl6ZWQpIHRocm93IG5ldyBJbnZhbGlkVW5pdEVycm9yKHVuaXQpO1xuICAgIHJldHVybiBub3JtYWxpemVkO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBvYmplY3QgaXMgYSBEdXJhdGlvbi4gV29ya3MgYWNyb3NzIGNvbnRleHQgYm91bmRhcmllc1xuICAgKiBAcGFyYW0ge29iamVjdH0gb1xuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIHN0YXRpYyBpc0R1cmF0aW9uKG8pIHtcbiAgICByZXR1cm4gbyAmJiBvLmlzTHV4b25EdXJhdGlvbiB8fCBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogR2V0ICB0aGUgbG9jYWxlIG9mIGEgRHVyYXRpb24sIHN1Y2ggJ2VuLUdCJ1xuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cblxuXG4gIGdldCBsb2NhbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMubG9jLmxvY2FsZSA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgbnVtYmVyaW5nIHN5c3RlbSBvZiBhIER1cmF0aW9uLCBzdWNoICdiZW5nJy4gVGhlIG51bWJlcmluZyBzeXN0ZW0gaXMgdXNlZCB3aGVuIGZvcm1hdHRpbmcgdGhlIER1cmF0aW9uXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IG51bWJlcmluZ1N5c3RlbSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2MubnVtYmVyaW5nU3lzdGVtIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uIGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBmb3JtYXQgc3RyaW5nLiBZb3UgbWF5IHVzZSB0aGVzZSB0b2tlbnM6XG4gICAqICogYFNgIGZvciBtaWxsaXNlY29uZHNcbiAgICogKiBgc2AgZm9yIHNlY29uZHNcbiAgICogKiBgbWAgZm9yIG1pbnV0ZXNcbiAgICogKiBgaGAgZm9yIGhvdXJzXG4gICAqICogYGRgIGZvciBkYXlzXG4gICAqICogYHdgIGZvciB3ZWVrc1xuICAgKiAqIGBNYCBmb3IgbW9udGhzXG4gICAqICogYHlgIGZvciB5ZWFyc1xuICAgKiBOb3RlczpcbiAgICogKiBBZGQgcGFkZGluZyBieSByZXBlYXRpbmcgdGhlIHRva2VuLCBlLmcuIFwieXlcIiBwYWRzIHRoZSB5ZWFycyB0byB0d28gZGlnaXRzLCBcImhoaGhcIiBwYWRzIHRoZSBob3VycyBvdXQgdG8gZm91ciBkaWdpdHNcbiAgICogKiBUb2tlbnMgY2FuIGJlIGVzY2FwZWQgYnkgd3JhcHBpbmcgd2l0aCBzaW5nbGUgcXVvdGVzLlxuICAgKiAqIFRoZSBkdXJhdGlvbiB3aWxsIGJlIGNvbnZlcnRlZCB0byB0aGUgc2V0IG9mIHVuaXRzIGluIHRoZSBmb3JtYXQgc3RyaW5nIHVzaW5nIHtAbGluayBEdXJhdGlvbiNzaGlmdFRvfSBhbmQgdGhlIER1cmF0aW9ucydzIGNvbnZlcnNpb24gYWNjdXJhY3kgc2V0dGluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGZtdCAtIHRoZSBmb3JtYXQgc3RyaW5nXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmZsb29yPXRydWVdIC0gZmxvb3IgbnVtZXJpY2FsIHZhbHVlc1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDEsIGRheXM6IDYsIHNlY29uZHM6IDIgfSkudG9Gb3JtYXQoXCJ5IGQgc1wiKSAvLz0+IFwiMSA2IDJcIlxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDEsIGRheXM6IDYsIHNlY29uZHM6IDIgfSkudG9Gb3JtYXQoXCJ5eSBkZCBzc3NcIikgLy89PiBcIjAxIDA2IDAwMlwiXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMSwgZGF5czogNiwgc2Vjb25kczogMiB9KS50b0Zvcm1hdChcIk0gU1wiKSAvLz0+IFwiMTIgNTE4NDAyMDAwXCJcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHRvRm9ybWF0KGZtdCwgb3B0cyA9IHt9KSB7XG4gICAgLy8gcmV2ZXJzZS1jb21wYXQgc2luY2UgMS4yOyB3ZSBhbHdheXMgcm91bmQgZG93biBub3csIG5ldmVyIHVwLCBhbmQgd2UgZG8gaXQgYnkgZGVmYXVsdFxuICAgIGNvbnN0IGZtdE9wdHMgPSB7IC4uLm9wdHMsXG4gICAgICBmbG9vcjogb3B0cy5yb3VuZCAhPT0gZmFsc2UgJiYgb3B0cy5mbG9vciAhPT0gZmFsc2VcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBGb3JtYXR0ZXIuY3JlYXRlKHRoaXMubG9jLCBmbXRPcHRzKS5mb3JtYXREdXJhdGlvbkZyb21TdHJpbmcodGhpcywgZm10KSA6IElOVkFMSUQkMjtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIER1cmF0aW9uIHdpdGggYWxsIHVuaXRzIGluY2x1ZGVkLlxuICAgKiBUbyBtb2RpZnkgaXRzIGJlaGF2aW9yIHVzZSB0aGUgYGxpc3RTdHlsZWAgYW5kIGFueSBJbnRsLk51bWJlckZvcm1hdCBvcHRpb24sIHRob3VnaCBgdW5pdERpc3BsYXlgIGlzIGVzcGVjaWFsbHkgcmVsZXZhbnQuXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSW50bC9OdW1iZXJGb3JtYXRcbiAgICogQHBhcmFtIG9wdHMgLSBPbiBvcHRpb24gb2JqZWN0IHRvIG92ZXJyaWRlIHRoZSBmb3JtYXR0aW5nLiBBY2NlcHRzIHRoZSBzYW1lIGtleXMgYXMgdGhlIG9wdGlvbnMgcGFyYW1ldGVyIG9mIHRoZSBuYXRpdmUgYEludC5OdW1iZXJGb3JtYXRgIGNvbnN0cnVjdG9yLCBhcyB3ZWxsIGFzIGBsaXN0U3R5bGVgLlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqc1xuICAgKiB2YXIgZHVyID0gRHVyYXRpb24uZnJvbU9iamVjdCh7IGRheXM6IDEsIGhvdXJzOiA1LCBtaW51dGVzOiA2IH0pXG4gICAqIGR1ci50b0h1bWFuKCkgLy89PiAnMSBkYXksIDUgaG91cnMsIDYgbWludXRlcydcbiAgICogZHVyLnRvSHVtYW4oeyBsaXN0U3R5bGU6IFwibG9uZ1wiIH0pIC8vPT4gJzEgZGF5LCA1IGhvdXJzLCBhbmQgNiBtaW51dGVzJ1xuICAgKiBkdXIudG9IdW1hbih7IHVuaXREaXNwbGF5OiBcInNob3J0XCIgfSkgLy89PiAnMSBkYXksIDUgaHIsIDYgbWluJ1xuICAgKiBgYGBcbiAgICovXG5cblxuICB0b0h1bWFuKG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IGwgPSBvcmRlcmVkVW5pdHMkMS5tYXAodW5pdCA9PiB7XG4gICAgICBjb25zdCB2YWwgPSB0aGlzLnZhbHVlc1t1bml0XTtcblxuICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmxvYy5udW1iZXJGb3JtYXR0ZXIoe1xuICAgICAgICBzdHlsZTogXCJ1bml0XCIsXG4gICAgICAgIHVuaXREaXNwbGF5OiBcImxvbmdcIixcbiAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgdW5pdDogdW5pdC5zbGljZSgwLCAtMSlcbiAgICAgIH0pLmZvcm1hdCh2YWwpO1xuICAgIH0pLmZpbHRlcihuID0+IG4pO1xuICAgIHJldHVybiB0aGlzLmxvYy5saXN0Rm9ybWF0dGVyKHtcbiAgICAgIHR5cGU6IFwiY29uanVuY3Rpb25cIixcbiAgICAgIHN0eWxlOiBvcHRzLmxpc3RTdHlsZSB8fCBcIm5hcnJvd1wiLFxuICAgICAgLi4ub3B0c1xuICAgIH0pLmZvcm1hdChsKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0IHdpdGggdGhpcyBEdXJhdGlvbidzIHZhbHVlcy5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAxLCBkYXlzOiA2LCBzZWNvbmRzOiAyIH0pLnRvT2JqZWN0KCkgLy89PiB7IHllYXJzOiAxLCBkYXlzOiA2LCBzZWNvbmRzOiAyIH1cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHRvT2JqZWN0KCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4ge307XG4gICAgcmV0dXJuIHsgLi4udGhpcy52YWx1ZXNcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEdXJhdGlvbi5cbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNEdXJhdGlvbnNcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAzLCBzZWNvbmRzOiA0NSB9KS50b0lTTygpIC8vPT4gJ1AzWVQ0NVMnXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBtb250aHM6IDQsIHNlY29uZHM6IDQ1IH0pLnRvSVNPKCkgLy89PiAnUDRNVDQ1UydcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IG1vbnRoczogNSB9KS50b0lTTygpIC8vPT4gJ1A1TSdcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IG1pbnV0ZXM6IDUgfSkudG9JU08oKSAvLz0+ICdQVDVNJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgbWlsbGlzZWNvbmRzOiA2IH0pLnRvSVNPKCkgLy89PiAnUFQwLjAwNlMnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG5cblxuICB0b0lTTygpIHtcbiAgICAvLyB3ZSBjb3VsZCB1c2UgdGhlIGZvcm1hdHRlciwgYnV0IHRoaXMgaXMgYW4gZWFzaWVyIHdheSB0byBnZXQgdGhlIG1pbmltdW0gc3RyaW5nXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsO1xuICAgIGxldCBzID0gXCJQXCI7XG4gICAgaWYgKHRoaXMueWVhcnMgIT09IDApIHMgKz0gdGhpcy55ZWFycyArIFwiWVwiO1xuICAgIGlmICh0aGlzLm1vbnRocyAhPT0gMCB8fCB0aGlzLnF1YXJ0ZXJzICE9PSAwKSBzICs9IHRoaXMubW9udGhzICsgdGhpcy5xdWFydGVycyAqIDMgKyBcIk1cIjtcbiAgICBpZiAodGhpcy53ZWVrcyAhPT0gMCkgcyArPSB0aGlzLndlZWtzICsgXCJXXCI7XG4gICAgaWYgKHRoaXMuZGF5cyAhPT0gMCkgcyArPSB0aGlzLmRheXMgKyBcIkRcIjtcbiAgICBpZiAodGhpcy5ob3VycyAhPT0gMCB8fCB0aGlzLm1pbnV0ZXMgIT09IDAgfHwgdGhpcy5zZWNvbmRzICE9PSAwIHx8IHRoaXMubWlsbGlzZWNvbmRzICE9PSAwKSBzICs9IFwiVFwiO1xuICAgIGlmICh0aGlzLmhvdXJzICE9PSAwKSBzICs9IHRoaXMuaG91cnMgKyBcIkhcIjtcbiAgICBpZiAodGhpcy5taW51dGVzICE9PSAwKSBzICs9IHRoaXMubWludXRlcyArIFwiTVwiO1xuICAgIGlmICh0aGlzLnNlY29uZHMgIT09IDAgfHwgdGhpcy5taWxsaXNlY29uZHMgIT09IDApIC8vIHRoaXMgd2lsbCBoYW5kbGUgXCJmbG9hdGluZyBwb2ludCBtYWRuZXNzXCIgYnkgcmVtb3ZpbmcgZXh0cmEgZGVjaW1hbCBwbGFjZXNcbiAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU4ODAwNC9pcy1mbG9hdGluZy1wb2ludC1tYXRoLWJyb2tlblxuICAgICAgcyArPSByb3VuZFRvKHRoaXMuc2Vjb25kcyArIHRoaXMubWlsbGlzZWNvbmRzIC8gMTAwMCwgMykgKyBcIlNcIjtcbiAgICBpZiAocyA9PT0gXCJQXCIpIHMgKz0gXCJUMFNcIjtcbiAgICByZXR1cm4gcztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRHVyYXRpb24sIGZvcm1hdHRlZCBhcyBhIHRpbWUgb2YgZGF5LlxuICAgKiBOb3RlIHRoYXQgdGhpcyB3aWxsIHJldHVybiBudWxsIGlmIHRoZSBkdXJhdGlvbiBpcyBpbnZhbGlkLCBuZWdhdGl2ZSwgb3IgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIDI0IGhvdXJzLlxuICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI1RpbWVzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnN1cHByZXNzTWlsbGlzZWNvbmRzPWZhbHNlXSAtIGV4Y2x1ZGUgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGZvcm1hdCBpZiB0aGV5J3JlIDBcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zdXBwcmVzc1NlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBzZWNvbmRzIGZyb20gdGhlIGZvcm1hdCBpZiB0aGV5J3JlIDBcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlUHJlZml4PWZhbHNlXSAtIGluY2x1ZGUgdGhlIGBUYCBwcmVmaXhcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmZvcm1hdD0nZXh0ZW5kZWQnXSAtIGNob29zZSBiZXR3ZWVuIHRoZSBiYXNpYyBhbmQgZXh0ZW5kZWQgZm9ybWF0XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMTEgfSkudG9JU09UaW1lKCkgLy89PiAnMTE6MDA6MDAuMDAwJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDExIH0pLnRvSVNPVGltZSh7IHN1cHByZXNzTWlsbGlzZWNvbmRzOiB0cnVlIH0pIC8vPT4gJzExOjAwOjAwJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDExIH0pLnRvSVNPVGltZSh7IHN1cHByZXNzU2Vjb25kczogdHJ1ZSB9KSAvLz0+ICcxMTowMCdcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxMSB9KS50b0lTT1RpbWUoeyBpbmNsdWRlUHJlZml4OiB0cnVlIH0pIC8vPT4gJ1QxMTowMDowMC4wMDAnXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMTEgfSkudG9JU09UaW1lKHsgZm9ybWF0OiAnYmFzaWMnIH0pIC8vPT4gJzExMDAwMC4wMDAnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG5cblxuICB0b0lTT1RpbWUob3B0cyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IG1pbGxpcyA9IHRoaXMudG9NaWxsaXMoKTtcbiAgICBpZiAobWlsbGlzIDwgMCB8fCBtaWxsaXMgPj0gODY0MDAwMDApIHJldHVybiBudWxsO1xuICAgIG9wdHMgPSB7XG4gICAgICBzdXBwcmVzc01pbGxpc2Vjb25kczogZmFsc2UsXG4gICAgICBzdXBwcmVzc1NlY29uZHM6IGZhbHNlLFxuICAgICAgaW5jbHVkZVByZWZpeDogZmFsc2UsXG4gICAgICBmb3JtYXQ6IFwiZXh0ZW5kZWRcIixcbiAgICAgIC4uLm9wdHNcbiAgICB9O1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5zaGlmdFRvKFwiaG91cnNcIiwgXCJtaW51dGVzXCIsIFwic2Vjb25kc1wiLCBcIm1pbGxpc2Vjb25kc1wiKTtcbiAgICBsZXQgZm10ID0gb3B0cy5mb3JtYXQgPT09IFwiYmFzaWNcIiA/IFwiaGhtbVwiIDogXCJoaDptbVwiO1xuXG4gICAgaWYgKCFvcHRzLnN1cHByZXNzU2Vjb25kcyB8fCB2YWx1ZS5zZWNvbmRzICE9PSAwIHx8IHZhbHVlLm1pbGxpc2Vjb25kcyAhPT0gMCkge1xuICAgICAgZm10ICs9IG9wdHMuZm9ybWF0ID09PSBcImJhc2ljXCIgPyBcInNzXCIgOiBcIjpzc1wiO1xuXG4gICAgICBpZiAoIW9wdHMuc3VwcHJlc3NNaWxsaXNlY29uZHMgfHwgdmFsdWUubWlsbGlzZWNvbmRzICE9PSAwKSB7XG4gICAgICAgIGZtdCArPSBcIi5TU1NcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgc3RyID0gdmFsdWUudG9Gb3JtYXQoZm10KTtcblxuICAgIGlmIChvcHRzLmluY2x1ZGVQcmVmaXgpIHtcbiAgICAgIHN0ciA9IFwiVFwiICsgc3RyO1xuICAgIH1cblxuICAgIHJldHVybiBzdHI7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEdXJhdGlvbiBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIEpTT04uXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG5cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9JU08oKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gZGVidWdnaW5nLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9JU08oKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBtaWxsaXNlY29uZHMgdmFsdWUgb2YgdGhpcyBEdXJhdGlvbi5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cblxuXG4gIHRvTWlsbGlzKCkge1xuICAgIHJldHVybiB0aGlzLmFzKFwibWlsbGlzZWNvbmRzXCIpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG1pbGxpc2Vjb25kcyB2YWx1ZSBvZiB0aGlzIER1cmF0aW9uLiBBbGlhcyBvZiB7QGxpbmsgdG9NaWxsaXN9XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG5cblxuICB2YWx1ZU9mKCkge1xuICAgIHJldHVybiB0aGlzLnRvTWlsbGlzKCk7XG4gIH1cbiAgLyoqXG4gICAqIE1ha2UgdGhpcyBEdXJhdGlvbiBsb25nZXIgYnkgdGhlIHNwZWNpZmllZCBhbW91bnQuIFJldHVybiBhIG5ld2x5LWNvbnN0cnVjdGVkIER1cmF0aW9uLlxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBhZGQuIEVpdGhlciBhIEx1eG9uIER1cmF0aW9uLCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIHRoZSBvYmplY3QgYXJndW1lbnQgdG8gRHVyYXRpb24uZnJvbU9iamVjdCgpXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cblxuXG4gIHBsdXMoZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbiksXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICBmb3IgKGNvbnN0IGsgb2Ygb3JkZXJlZFVuaXRzJDEpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eShkdXIudmFsdWVzLCBrKSB8fCBoYXNPd25Qcm9wZXJ0eSh0aGlzLnZhbHVlcywgaykpIHtcbiAgICAgICAgcmVzdWx0W2tdID0gZHVyLmdldChrKSArIHRoaXMuZ2V0KGspO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIHtcbiAgICAgIHZhbHVlczogcmVzdWx0XG4gICAgfSwgdHJ1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIE1ha2UgdGhpcyBEdXJhdGlvbiBzaG9ydGVyIGJ5IHRoZSBzcGVjaWZpZWQgYW1vdW50LiBSZXR1cm4gYSBuZXdseS1jb25zdHJ1Y3RlZCBEdXJhdGlvbi5cbiAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBhbW91bnQgdG8gc3VidHJhY3QuIEVpdGhlciBhIEx1eG9uIER1cmF0aW9uLCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIHRoZSBvYmplY3QgYXJndW1lbnQgdG8gRHVyYXRpb24uZnJvbU9iamVjdCgpXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cblxuXG4gIG1pbnVzKGR1cmF0aW9uKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pO1xuICAgIHJldHVybiB0aGlzLnBsdXMoZHVyLm5lZ2F0ZSgpKTtcbiAgfVxuICAvKipcbiAgICogU2NhbGUgdGhpcyBEdXJhdGlvbiBieSB0aGUgc3BlY2lmaWVkIGFtb3VudC4gUmV0dXJuIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIGVhY2ggdW5pdC4gQXJpdHkgaXMgMSBvciAyOiB0aGUgdmFsdWUgb2YgdGhlIHVuaXQgYW5kLCBvcHRpb25hbGx5LCB0aGUgdW5pdCBuYW1lLiBNdXN0IHJldHVybiBhIG51bWJlci5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBtaW51dGVzOiAzMCB9KS5tYXBVbml0cyh4ID0+IHggKiAyKSAvLz0+IHsgaG91cnM6IDIsIG1pbnV0ZXM6IDYwIH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBtaW51dGVzOiAzMCB9KS5tYXBVbml0cygoeCwgdSkgPT4gdSA9PT0gXCJob3VyXCIgPyB4ICogMiA6IHgpIC8vPT4geyBob3VyczogMiwgbWludXRlczogMzAgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG5cblxuICBtYXBVbml0cyhmbikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcblxuICAgIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyh0aGlzLnZhbHVlcykpIHtcbiAgICAgIHJlc3VsdFtrXSA9IGFzTnVtYmVyKGZuKHRoaXMudmFsdWVzW2tdLCBrKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lJDEodGhpcywge1xuICAgICAgdmFsdWVzOiByZXN1bHRcbiAgICB9LCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSB2YWx1ZSBvZiB1bml0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIGEgdW5pdCBzdWNoIGFzICdtaW51dGUnIG9yICdkYXknXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe3llYXJzOiAyLCBkYXlzOiAzfSkuZ2V0KCd5ZWFycycpIC8vPT4gMlxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHt5ZWFyczogMiwgZGF5czogM30pLmdldCgnbW9udGhzJykgLy89PiAwXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe3llYXJzOiAyLCBkYXlzOiAzfSkuZ2V0KCdkYXlzJykgLy89PiAzXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG5cblxuICBnZXQodW5pdCkge1xuICAgIHJldHVybiB0aGlzW0R1cmF0aW9uLm5vcm1hbGl6ZVVuaXQodW5pdCldO1xuICB9XG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSB2YWx1ZXMgb2Ygc3BlY2lmaWVkIHVuaXRzLiBSZXR1cm4gYSBuZXdseS1jb25zdHJ1Y3RlZCBEdXJhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlcyAtIGEgbWFwcGluZyBvZiB1bml0cyB0byBudW1iZXJzXG4gICAqIEBleGFtcGxlIGR1ci5zZXQoeyB5ZWFyczogMjAxNyB9KVxuICAgKiBAZXhhbXBsZSBkdXIuc2V0KHsgaG91cnM6IDgsIG1pbnV0ZXM6IDMwIH0pXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cblxuXG4gIHNldCh2YWx1ZXMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgbWl4ZWQgPSB7IC4uLnRoaXMudmFsdWVzLFxuICAgICAgLi4ubm9ybWFsaXplT2JqZWN0KHZhbHVlcywgRHVyYXRpb24ubm9ybWFsaXplVW5pdClcbiAgICB9O1xuICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIHtcbiAgICAgIHZhbHVlczogbWl4ZWRcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgbG9jYWxlIGFuZC9vciBudW1iZXJpbmdTeXN0ZW0uICBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uXG4gICAqIEBleGFtcGxlIGR1ci5yZWNvbmZpZ3VyZSh7IGxvY2FsZTogJ2VuLUdCJyB9KVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG5cblxuICByZWNvbmZpZ3VyZSh7XG4gICAgbG9jYWxlLFxuICAgIG51bWJlcmluZ1N5c3RlbSxcbiAgICBjb252ZXJzaW9uQWNjdXJhY3lcbiAgfSA9IHt9KSB7XG4gICAgY29uc3QgbG9jID0gdGhpcy5sb2MuY2xvbmUoe1xuICAgICAgbG9jYWxlLFxuICAgICAgbnVtYmVyaW5nU3lzdGVtXG4gICAgfSksXG4gICAgICAgICAgb3B0cyA9IHtcbiAgICAgIGxvY1xuICAgIH07XG5cbiAgICBpZiAoY29udmVyc2lvbkFjY3VyYWN5KSB7XG4gICAgICBvcHRzLmNvbnZlcnNpb25BY2N1cmFjeSA9IGNvbnZlcnNpb25BY2N1cmFjeTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmUkMSh0aGlzLCBvcHRzKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGR1cmF0aW9uIGluIHRoZSBzcGVjaWZpZWQgdW5pdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBhIHVuaXQgc3VjaCBhcyAnbWludXRlcycgb3IgJ2RheXMnXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe3llYXJzOiAxfSkuYXMoJ2RheXMnKSAvLz0+IDM2NVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHt5ZWFyczogMX0pLmFzKCdtb250aHMnKSAvLz0+IDEyXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe2hvdXJzOiA2MH0pLmFzKCdkYXlzJykgLy89PiAyLjVcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGFzKHVuaXQpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5zaGlmdFRvKHVuaXQpLmdldCh1bml0KSA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogUmVkdWNlIHRoaXMgRHVyYXRpb24gdG8gaXRzIGNhbm9uaWNhbCByZXByZXNlbnRhdGlvbiBpbiBpdHMgY3VycmVudCB1bml0cy5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAyLCBkYXlzOiA1MDAwIH0pLm5vcm1hbGl6ZSgpLnRvT2JqZWN0KCkgLy89PiB7IHllYXJzOiAxNSwgZGF5czogMjU1IH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxMiwgbWludXRlczogLTQ1IH0pLm5vcm1hbGl6ZSgpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMSwgbWludXRlczogMTUgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG5cblxuICBub3JtYWxpemUoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IHZhbHMgPSB0aGlzLnRvT2JqZWN0KCk7XG4gICAgbm9ybWFsaXplVmFsdWVzKHRoaXMubWF0cml4LCB2YWxzKTtcbiAgICByZXR1cm4gY2xvbmUkMSh0aGlzLCB7XG4gICAgICB2YWx1ZXM6IHZhbHNcbiAgICB9LCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydCB0aGlzIER1cmF0aW9uIGludG8gaXRzIHJlcHJlc2VudGF0aW9uIGluIGEgZGlmZmVyZW50IHNldCBvZiB1bml0cy5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBzZWNvbmRzOiAzMCB9KS5zaGlmdFRvKCdtaW51dGVzJywgJ21pbGxpc2Vjb25kcycpLnRvT2JqZWN0KCkgLy89PiB7IG1pbnV0ZXM6IDYwLCBtaWxsaXNlY29uZHM6IDMwMDAwIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuXG5cbiAgc2hpZnRUbyguLi51bml0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcblxuICAgIGlmICh1bml0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHVuaXRzID0gdW5pdHMubWFwKHUgPT4gRHVyYXRpb24ubm9ybWFsaXplVW5pdCh1KSk7XG4gICAgY29uc3QgYnVpbHQgPSB7fSxcbiAgICAgICAgICBhY2N1bXVsYXRlZCA9IHt9LFxuICAgICAgICAgIHZhbHMgPSB0aGlzLnRvT2JqZWN0KCk7XG4gICAgbGV0IGxhc3RVbml0O1xuXG4gICAgZm9yIChjb25zdCBrIG9mIG9yZGVyZWRVbml0cyQxKSB7XG4gICAgICBpZiAodW5pdHMuaW5kZXhPZihrKSA+PSAwKSB7XG4gICAgICAgIGxhc3RVbml0ID0gaztcbiAgICAgICAgbGV0IG93biA9IDA7IC8vIGFueXRoaW5nIHdlIGhhdmVuJ3QgYm9pbGVkIGRvd24geWV0IHNob3VsZCBnZXQgYm9pbGVkIHRvIHRoaXMgdW5pdFxuXG4gICAgICAgIGZvciAoY29uc3QgYWsgaW4gYWNjdW11bGF0ZWQpIHtcbiAgICAgICAgICBvd24gKz0gdGhpcy5tYXRyaXhbYWtdW2tdICogYWNjdW11bGF0ZWRbYWtdO1xuICAgICAgICAgIGFjY3VtdWxhdGVkW2FrXSA9IDA7XG4gICAgICAgIH0gLy8gcGx1cyBhbnl0aGluZyB0aGF0J3MgYWxyZWFkeSBpbiB0aGlzIHVuaXRcblxuXG4gICAgICAgIGlmIChpc051bWJlcih2YWxzW2tdKSkge1xuICAgICAgICAgIG93biArPSB2YWxzW2tdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaSA9IE1hdGgudHJ1bmMob3duKTtcbiAgICAgICAgYnVpbHRba10gPSBpO1xuICAgICAgICBhY2N1bXVsYXRlZFtrXSA9IChvd24gKiAxMDAwIC0gaSAqIDEwMDApIC8gMTAwMDsgLy8gcGx1cyBhbnl0aGluZyBmdXJ0aGVyIGRvd24gdGhlIGNoYWluIHRoYXQgc2hvdWxkIGJlIHJvbGxlZCB1cCBpbiB0byB0aGlzXG5cbiAgICAgICAgZm9yIChjb25zdCBkb3duIGluIHZhbHMpIHtcbiAgICAgICAgICBpZiAob3JkZXJlZFVuaXRzJDEuaW5kZXhPZihkb3duKSA+IG9yZGVyZWRVbml0cyQxLmluZGV4T2YoaykpIHtcbiAgICAgICAgICAgIGNvbnZlcnQodGhpcy5tYXRyaXgsIHZhbHMsIGRvd24sIGJ1aWx0LCBrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gb3RoZXJ3aXNlLCBrZWVwIGl0IGluIHRoZSB3aW5ncyB0byBib2lsIGl0IGxhdGVyXG5cbiAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIodmFsc1trXSkpIHtcbiAgICAgICAgYWNjdW11bGF0ZWRba10gPSB2YWxzW2tdO1xuICAgICAgfVxuICAgIH0gLy8gYW55dGhpbmcgbGVmdG92ZXIgYmVjb21lcyB0aGUgZGVjaW1hbCBmb3IgdGhlIGxhc3QgdW5pdFxuICAgIC8vIGxhc3RVbml0IG11c3QgYmUgZGVmaW5lZCBzaW5jZSB1bml0cyBpcyBub3QgZW1wdHlcblxuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gYWNjdW11bGF0ZWQpIHtcbiAgICAgIGlmIChhY2N1bXVsYXRlZFtrZXldICE9PSAwKSB7XG4gICAgICAgIGJ1aWx0W2xhc3RVbml0XSArPSBrZXkgPT09IGxhc3RVbml0ID8gYWNjdW11bGF0ZWRba2V5XSA6IGFjY3VtdWxhdGVkW2tleV0gLyB0aGlzLm1hdHJpeFtsYXN0VW5pdF1ba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmUkMSh0aGlzLCB7XG4gICAgICB2YWx1ZXM6IGJ1aWx0XG4gICAgfSwgdHJ1ZSkubm9ybWFsaXplKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbmVnYXRpdmUgb2YgdGhpcyBEdXJhdGlvbi5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBzZWNvbmRzOiAzMCB9KS5uZWdhdGUoKS50b09iamVjdCgpIC8vPT4geyBob3VyczogLTEsIHNlY29uZHM6IC0zMCB9XG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cblxuXG4gIG5lZ2F0ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgbmVnYXRlZCA9IHt9O1xuXG4gICAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKHRoaXMudmFsdWVzKSkge1xuICAgICAgbmVnYXRlZFtrXSA9IHRoaXMudmFsdWVzW2tdID09PSAwID8gMCA6IC10aGlzLnZhbHVlc1trXTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmUkMSh0aGlzLCB7XG4gICAgICB2YWx1ZXM6IG5lZ2F0ZWRcbiAgICB9LCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSB5ZWFycy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgeWVhcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLnllYXJzIHx8IDAgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgcXVhcnRlcnMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IHF1YXJ0ZXJzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5xdWFydGVycyB8fCAwIDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIG1vbnRocy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgbW9udGhzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5tb250aHMgfHwgMCA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSB3ZWVrc1xuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGdldCB3ZWVrcygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMud2Vla3MgfHwgMCA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBkYXlzLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGdldCBkYXlzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5kYXlzIHx8IDAgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgaG91cnMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IGhvdXJzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5ob3VycyB8fCAwIDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIG1pbnV0ZXMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IG1pbnV0ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLm1pbnV0ZXMgfHwgMCA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBzZWNvbmRzLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IHNlY29uZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLnNlY29uZHMgfHwgMCA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBtaWxsaXNlY29uZHMuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgbWlsbGlzZWNvbmRzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5taWxsaXNlY29uZHMgfHwgMCA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBEdXJhdGlvbiBpcyBpbnZhbGlkLiBJbnZhbGlkIGR1cmF0aW9ucyBhcmUgcmV0dXJuZWQgYnkgZGlmZiBvcGVyYXRpb25zXG4gICAqIG9uIGludmFsaWQgRGF0ZVRpbWVzIG9yIEludGVydmFscy5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID09PSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGVycm9yIGNvZGUgaWYgdGhpcyBEdXJhdGlvbiBiZWNhbWUgaW52YWxpZCwgb3IgbnVsbCBpZiB0aGUgRHVyYXRpb24gaXMgdmFsaWRcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIGdldCBpbnZhbGlkUmVhc29uKCkge1xuICAgIHJldHVybiB0aGlzLmludmFsaWQgPyB0aGlzLmludmFsaWQucmVhc29uIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBleHBsYW5hdGlvbiBvZiB3aHkgdGhpcyBEdXJhdGlvbiBiZWNhbWUgaW52YWxpZCwgb3IgbnVsbCBpZiB0aGUgRHVyYXRpb24gaXMgdmFsaWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG5cblxuICBnZXQgaW52YWxpZEV4cGxhbmF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmludmFsaWQgPyB0aGlzLmludmFsaWQuZXhwbGFuYXRpb24gOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBFcXVhbGl0eSBjaGVja1xuICAgKiBUd28gRHVyYXRpb25zIGFyZSBlcXVhbCBpZmYgdGhleSBoYXZlIHRoZSBzYW1lIHVuaXRzIGFuZCB0aGUgc2FtZSB2YWx1ZXMgZm9yIGVhY2ggdW5pdC5cbiAgICogQHBhcmFtIHtEdXJhdGlvbn0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBlcXVhbHMob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXIuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5sb2MuZXF1YWxzKG90aGVyLmxvYykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcSh2MSwgdjIpIHtcbiAgICAgIC8vIENvbnNpZGVyIDAgYW5kIHVuZGVmaW5lZCBhcyBlcXVhbFxuICAgICAgaWYgKHYxID09PSB1bmRlZmluZWQgfHwgdjEgPT09IDApIHJldHVybiB2MiA9PT0gdW5kZWZpbmVkIHx8IHYyID09PSAwO1xuICAgICAgcmV0dXJuIHYxID09PSB2MjtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHUgb2Ygb3JkZXJlZFVuaXRzJDEpIHtcbiAgICAgIGlmICghZXEodGhpcy52YWx1ZXNbdV0sIG90aGVyLnZhbHVlc1t1XSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbn1cblxuY29uc3QgSU5WQUxJRCQxID0gXCJJbnZhbGlkIEludGVydmFsXCI7IC8vIGNoZWNrcyBpZiB0aGUgc3RhcnQgaXMgZXF1YWwgdG8gb3IgYmVmb3JlIHRoZSBlbmRcblxuZnVuY3Rpb24gdmFsaWRhdGVTdGFydEVuZChzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQgfHwgIXN0YXJ0LmlzVmFsaWQpIHtcbiAgICByZXR1cm4gSW50ZXJ2YWwuaW52YWxpZChcIm1pc3Npbmcgb3IgaW52YWxpZCBzdGFydFwiKTtcbiAgfSBlbHNlIGlmICghZW5kIHx8ICFlbmQuaXNWYWxpZCkge1xuICAgIHJldHVybiBJbnRlcnZhbC5pbnZhbGlkKFwibWlzc2luZyBvciBpbnZhbGlkIGVuZFwiKTtcbiAgfSBlbHNlIGlmIChlbmQgPCBzdGFydCkge1xuICAgIHJldHVybiBJbnRlcnZhbC5pbnZhbGlkKFwiZW5kIGJlZm9yZSBzdGFydFwiLCBgVGhlIGVuZCBvZiBhbiBpbnRlcnZhbCBtdXN0IGJlIGFmdGVyIGl0cyBzdGFydCwgYnV0IHlvdSBoYWQgc3RhcnQ9JHtzdGFydC50b0lTTygpfSBhbmQgZW5kPSR7ZW5kLnRvSVNPKCl9YCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbi8qKlxuICogQW4gSW50ZXJ2YWwgb2JqZWN0IHJlcHJlc2VudHMgYSBoYWxmLW9wZW4gaW50ZXJ2YWwgb2YgdGltZSwgd2hlcmUgZWFjaCBlbmRwb2ludCBpcyBhIHtAbGluayBEYXRlVGltZX0uIENvbmNlcHR1YWxseSwgaXQncyBhIGNvbnRhaW5lciBmb3IgdGhvc2UgdHdvIGVuZHBvaW50cywgYWNjb21wYW5pZWQgYnkgbWV0aG9kcyBmb3IgY3JlYXRpbmcsIHBhcnNpbmcsIGludGVycm9nYXRpbmcsIGNvbXBhcmluZywgdHJhbnNmb3JtaW5nLCBhbmQgZm9ybWF0dGluZyB0aGVtLlxuICpcbiAqIEhlcmUgaXMgYSBicmllZiBvdmVydmlldyBvZiB0aGUgbW9zdCBjb21tb25seSB1c2VkIG1ldGhvZHMgYW5kIGdldHRlcnMgaW4gSW50ZXJ2YWw6XG4gKlxuICogKiAqKkNyZWF0aW9uKiogVG8gY3JlYXRlIGFuIEludGVydmFsLCB1c2Uge0BsaW5rIEludGVydmFsI2Zyb21EYXRlVGltZXN9LCB7QGxpbmsgSW50ZXJ2YWwjYWZ0ZXJ9LCB7QGxpbmsgSW50ZXJ2YWwjYmVmb3JlfSwgb3Ige0BsaW5rIEludGVydmFsI2Zyb21JU099LlxuICogKiAqKkFjY2Vzc29ycyoqIFVzZSB7QGxpbmsgSW50ZXJ2YWwjc3RhcnR9IGFuZCB7QGxpbmsgSW50ZXJ2YWwjZW5kfSB0byBnZXQgdGhlIHN0YXJ0IGFuZCBlbmQuXG4gKiAqICoqSW50ZXJyb2dhdGlvbioqIFRvIGFuYWx5emUgdGhlIEludGVydmFsLCB1c2Uge0BsaW5rIEludGVydmFsI2NvdW50fSwge0BsaW5rIEludGVydmFsI2xlbmd0aH0sIHtAbGluayBJbnRlcnZhbCNoYXNTYW1lfSwge0BsaW5rIEludGVydmFsI2NvbnRhaW5zfSwge0BsaW5rIEludGVydmFsI2lzQWZ0ZXJ9LCBvciB7QGxpbmsgSW50ZXJ2YWwjaXNCZWZvcmV9LlxuICogKiAqKlRyYW5zZm9ybWF0aW9uKiogVG8gY3JlYXRlIG90aGVyIEludGVydmFscyBvdXQgb2YgdGhpcyBvbmUsIHVzZSB7QGxpbmsgSW50ZXJ2YWwjc2V0fSwge0BsaW5rIEludGVydmFsI3NwbGl0QXR9LCB7QGxpbmsgSW50ZXJ2YWwjc3BsaXRCeX0sIHtAbGluayBJbnRlcnZhbCNkaXZpZGVFcXVhbGx5fSwge0BsaW5rIEludGVydmFsI21lcmdlfSwge0BsaW5rIEludGVydmFsI3hvcn0sIHtAbGluayBJbnRlcnZhbCN1bmlvbn0sIHtAbGluayBJbnRlcnZhbCNpbnRlcnNlY3Rpb259LCBvciB7QGxpbmsgSW50ZXJ2YWwjZGlmZmVyZW5jZX0uXG4gKiAqICoqQ29tcGFyaXNvbioqIFRvIGNvbXBhcmUgdGhpcyBJbnRlcnZhbCB0byBhbm90aGVyIG9uZSwgdXNlIHtAbGluayBJbnRlcnZhbCNlcXVhbHN9LCB7QGxpbmsgSW50ZXJ2YWwjb3ZlcmxhcHN9LCB7QGxpbmsgSW50ZXJ2YWwjYWJ1dHNTdGFydH0sIHtAbGluayBJbnRlcnZhbCNhYnV0c0VuZH0sIHtAbGluayBJbnRlcnZhbCNlbmd1bGZzfVxuICogKiAqKk91dHB1dCoqIFRvIGNvbnZlcnQgdGhlIEludGVydmFsIGludG8gb3RoZXIgcmVwcmVzZW50YXRpb25zLCBzZWUge0BsaW5rIEludGVydmFsI3RvU3RyaW5nfSwge0BsaW5rIEludGVydmFsI3RvSVNPfSwge0BsaW5rIEludGVydmFsI3RvSVNPRGF0ZX0sIHtAbGluayBJbnRlcnZhbCN0b0lTT1RpbWV9LCB7QGxpbmsgSW50ZXJ2YWwjdG9Gb3JtYXR9LCBhbmQge0BsaW5rIEludGVydmFsI3RvRHVyYXRpb259LlxuICovXG5cblxuY2xhc3MgSW50ZXJ2YWwge1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMucyA9IGNvbmZpZy5zdGFydDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMuZSA9IGNvbmZpZy5lbmQ7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLmludmFsaWQgPSBjb25maWcuaW52YWxpZCB8fCBudWxsO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy5pc0x1eG9uSW50ZXJ2YWwgPSB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW52YWxpZCBJbnRlcnZhbC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiAtIHNpbXBsZSBzdHJpbmcgb2Ygd2h5IHRoaXMgSW50ZXJ2YWwgaXMgaW52YWxpZC4gU2hvdWxkIG5vdCBjb250YWluIHBhcmFtZXRlcnMgb3IgYW55dGhpbmcgZWxzZSBkYXRhLWRlcGVuZGVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2V4cGxhbmF0aW9uPW51bGxdIC0gbG9uZ2VyIGV4cGxhbmF0aW9uLCBtYXkgaW5jbHVkZSBwYXJhbWV0ZXJzIGFuZCBvdGhlciB1c2VmdWwgZGVidWdnaW5nIGluZm9ybWF0aW9uXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cblxuXG4gIHN0YXRpYyBpbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24gPSBudWxsKSB7XG4gICAgaWYgKCFyZWFzb24pIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm5lZWQgdG8gc3BlY2lmeSBhIHJlYXNvbiB0aGUgSW50ZXJ2YWwgaXMgaW52YWxpZFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbnZhbGlkID0gcmVhc29uIGluc3RhbmNlb2YgSW52YWxpZCA/IHJlYXNvbiA6IG5ldyBJbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24pO1xuXG4gICAgaWYgKFNldHRpbmdzLnRocm93T25JbnZhbGlkKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEludGVydmFsRXJyb3IoaW52YWxpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgSW50ZXJ2YWwoe1xuICAgICAgICBpbnZhbGlkXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGEgc3RhcnQgRGF0ZVRpbWUgYW5kIGFuIGVuZCBEYXRlVGltZS4gSW5jbHVzaXZlIG9mIHRoZSBzdGFydCBidXQgbm90IHRoZSBlbmQuXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV8RGF0ZXxPYmplY3R9IHN0YXJ0XG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV8RGF0ZXxPYmplY3R9IGVuZFxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG5cblxuICBzdGF0aWMgZnJvbURhdGVUaW1lcyhzdGFydCwgZW5kKSB7XG4gICAgY29uc3QgYnVpbHRTdGFydCA9IGZyaWVuZGx5RGF0ZVRpbWUoc3RhcnQpLFxuICAgICAgICAgIGJ1aWx0RW5kID0gZnJpZW5kbHlEYXRlVGltZShlbmQpO1xuICAgIGNvbnN0IHZhbGlkYXRlRXJyb3IgPSB2YWxpZGF0ZVN0YXJ0RW5kKGJ1aWx0U3RhcnQsIGJ1aWx0RW5kKTtcblxuICAgIGlmICh2YWxpZGF0ZUVycm9yID09IG51bGwpIHtcbiAgICAgIHJldHVybiBuZXcgSW50ZXJ2YWwoe1xuICAgICAgICBzdGFydDogYnVpbHRTdGFydCxcbiAgICAgICAgZW5kOiBidWlsdEVuZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZUVycm9yO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuIEludGVydmFsIGZyb20gYSBzdGFydCBEYXRlVGltZSBhbmQgYSBEdXJhdGlvbiB0byBleHRlbmQgdG8uXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV8RGF0ZXxPYmplY3R9IHN0YXJ0XG4gICAqIEBwYXJhbSB7RHVyYXRpb258T2JqZWN0fG51bWJlcn0gZHVyYXRpb24gLSB0aGUgbGVuZ3RoIG9mIHRoZSBJbnRlcnZhbC5cbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuXG5cbiAgc3RhdGljIGFmdGVyKHN0YXJ0LCBkdXJhdGlvbikge1xuICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pLFxuICAgICAgICAgIGR0ID0gZnJpZW5kbHlEYXRlVGltZShzdGFydCk7XG4gICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQsIGR0LnBsdXMoZHVyKSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGFuIGVuZCBEYXRlVGltZSBhbmQgYSBEdXJhdGlvbiB0byBleHRlbmQgYmFja3dhcmRzIHRvLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfERhdGV8T2JqZWN0fSBlbmRcbiAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIHRoZSBsZW5ndGggb2YgdGhlIEludGVydmFsLlxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG5cblxuICBzdGF0aWMgYmVmb3JlKGVuZCwgZHVyYXRpb24pIHtcbiAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uKSxcbiAgICAgICAgICBkdCA9IGZyaWVuZGx5RGF0ZVRpbWUoZW5kKTtcbiAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdC5taW51cyhkdXIpLCBkdCk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGFuIElTTyA4NjAxIHN0cmluZy5cbiAgICogQWNjZXB0cyBgPHN0YXJ0Pi88ZW5kPmAsIGA8c3RhcnQ+LzxkdXJhdGlvbj5gLCBhbmQgYDxkdXJhdGlvbj4vPGVuZD5gIGZvcm1hdHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIElTTyBzdHJpbmcgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXSAtIG9wdGlvbnMgdG8gcGFzcyB7QGxpbmsgRGF0ZVRpbWUjZnJvbUlTT30gYW5kIG9wdGlvbmFsbHkge0BsaW5rIER1cmF0aW9uI2Zyb21JU099XG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHNcbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuXG5cbiAgc3RhdGljIGZyb21JU08odGV4dCwgb3B0cykge1xuICAgIGNvbnN0IFtzLCBlXSA9ICh0ZXh0IHx8IFwiXCIpLnNwbGl0KFwiL1wiLCAyKTtcblxuICAgIGlmIChzICYmIGUpIHtcbiAgICAgIGxldCBzdGFydCwgc3RhcnRJc1ZhbGlkO1xuXG4gICAgICB0cnkge1xuICAgICAgICBzdGFydCA9IERhdGVUaW1lLmZyb21JU08ocywgb3B0cyk7XG4gICAgICAgIHN0YXJ0SXNWYWxpZCA9IHN0YXJ0LmlzVmFsaWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHN0YXJ0SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBsZXQgZW5kLCBlbmRJc1ZhbGlkO1xuXG4gICAgICB0cnkge1xuICAgICAgICBlbmQgPSBEYXRlVGltZS5mcm9tSVNPKGUsIG9wdHMpO1xuICAgICAgICBlbmRJc1ZhbGlkID0gZW5kLmlzVmFsaWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGVuZElzVmFsaWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXJ0SXNWYWxpZCAmJiBlbmRJc1ZhbGlkKSB7XG4gICAgICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhcnRJc1ZhbGlkKSB7XG4gICAgICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21JU08oZSwgb3B0cyk7XG5cbiAgICAgICAgaWYgKGR1ci5pc1ZhbGlkKSB7XG4gICAgICAgICAgcmV0dXJuIEludGVydmFsLmFmdGVyKHN0YXJ0LCBkdXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGVuZElzVmFsaWQpIHtcbiAgICAgICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUlTTyhzLCBvcHRzKTtcblxuICAgICAgICBpZiAoZHVyLmlzVmFsaWQpIHtcbiAgICAgICAgICByZXR1cm4gSW50ZXJ2YWwuYmVmb3JlKGVuZCwgZHVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBJbnRlcnZhbC5pbnZhbGlkKFwidW5wYXJzYWJsZVwiLCBgdGhlIGlucHV0IFwiJHt0ZXh0fVwiIGNhbid0IGJlIHBhcnNlZCBhcyBJU08gODYwMWApO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBvYmplY3QgaXMgYW4gSW50ZXJ2YWwuIFdvcmtzIGFjcm9zcyBjb250ZXh0IGJvdW5kYXJpZXNcbiAgICogQHBhcmFtIHtvYmplY3R9IG9cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBzdGF0aWMgaXNJbnRlcnZhbChvKSB7XG4gICAgcmV0dXJuIG8gJiYgby5pc0x1eG9uSW50ZXJ2YWwgfHwgZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0YXJ0IG9mIHRoZSBJbnRlcnZhbFxuICAgKiBAdHlwZSB7RGF0ZVRpbWV9XG4gICAqL1xuXG5cbiAgZ2V0IHN0YXJ0KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnMgOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBlbmQgb2YgdGhlIEludGVydmFsXG4gICAqIEB0eXBlIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBnZXQgZW5kKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmUgOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIGVuZCBpcyBhdCBsZWFzdCBpdHMgc3RhcnQsIG1lYW5pbmcgdGhhdCB0aGUgSW50ZXJ2YWwgaXNuJ3QgJ2JhY2t3YXJkcycuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cblxuXG4gIGdldCBpc1ZhbGlkKCkge1xuICAgIHJldHVybiB0aGlzLmludmFsaWRSZWFzb24gPT09IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gZXJyb3IgY29kZSBpZiB0aGlzIEludGVydmFsIGlzIGludmFsaWQsIG9yIG51bGwgaWYgdGhlIEludGVydmFsIGlzIHZhbGlkXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IGludmFsaWRSZWFzb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5yZWFzb24gOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGV4cGxhbmF0aW9uIG9mIHdoeSB0aGlzIEludGVydmFsIGJlY2FtZSBpbnZhbGlkLCBvciBudWxsIGlmIHRoZSBJbnRlcnZhbCBpcyB2YWxpZFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cblxuXG4gIGdldCBpbnZhbGlkRXhwbGFuYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5leHBsYW5hdGlvbiA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgSW50ZXJ2YWwgaW4gdGhlIHNwZWNpZmllZCB1bml0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIHRoZSB1bml0IChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byByZXR1cm4gdGhlIGxlbmd0aCBpbi5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGxlbmd0aCh1bml0ID0gXCJtaWxsaXNlY29uZHNcIikge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnRvRHVyYXRpb24oLi4uW3VuaXRdKS5nZXQodW5pdCkgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNvdW50IG9mIG1pbnV0ZXMsIGhvdXJzLCBkYXlzLCBtb250aHMsIG9yIHllYXJzIGluY2x1ZGVkIGluIHRoZSBJbnRlcnZhbCwgZXZlbiBpbiBwYXJ0LlxuICAgKiBVbmxpa2Uge0BsaW5rIEludGVydmFsI2xlbmd0aH0gdGhpcyBjb3VudHMgc2VjdGlvbnMgb2YgdGhlIGNhbGVuZGFyLCBub3QgcGVyaW9kcyBvZiB0aW1lLCBlLmcuIHNwZWNpZnlpbmcgJ2RheSdcbiAgICogYXNrcyAnd2hhdCBkYXRlcyBhcmUgaW5jbHVkZWQgaW4gdGhpcyBpbnRlcnZhbD8nLCBub3QgJ2hvdyBtYW55IGRheXMgbG9uZyBpcyB0aGlzIGludGVydmFsPydcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt1bml0PSdtaWxsaXNlY29uZHMnXSAtIHRoZSB1bml0IG9mIHRpbWUgdG8gY291bnQuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG5cblxuICBjb3VudCh1bml0ID0gXCJtaWxsaXNlY29uZHNcIikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gTmFOO1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5zdGFydC5zdGFydE9mKHVuaXQpLFxuICAgICAgICAgIGVuZCA9IHRoaXMuZW5kLnN0YXJ0T2YodW5pdCk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoZW5kLmRpZmYoc3RhcnQsIHVuaXQpLmdldCh1bml0KSkgKyAxO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIHN0YXJ0IGFuZCBlbmQgYXJlIGJvdGggaW4gdGhlIHNhbWUgdW5pdCBvZiB0aW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gdGhlIHVuaXQgb2YgdGltZSB0byBjaGVjayBzYW1lbmVzcyBvblxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIGhhc1NhbWUodW5pdCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmlzRW1wdHkoKSB8fCB0aGlzLmUubWludXMoMSkuaGFzU2FtZSh0aGlzLnMsIHVuaXQpIDogZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwgaGFzIHRoZSBzYW1lIHN0YXJ0IGFuZCBlbmQgRGF0ZVRpbWVzLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMucy52YWx1ZU9mKCkgPT09IHRoaXMuZS52YWx1ZU9mKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwncyBzdGFydCBpcyBhZnRlciB0aGUgc3BlY2lmaWVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBkYXRlVGltZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIGlzQWZ0ZXIoZGF0ZVRpbWUpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLnMgPiBkYXRlVGltZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIGVuZCBpcyBiZWZvcmUgdGhlIHNwZWNpZmllZCBEYXRlVGltZS5cbiAgICogQHBhcmFtIHtEYXRlVGltZX0gZGF0ZVRpbWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBpc0JlZm9yZShkYXRlVGltZSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXMuZSA8PSBkYXRlVGltZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCBjb250YWlucyB0aGUgc3BlY2lmaWVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBkYXRlVGltZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIGNvbnRhaW5zKGRhdGVUaW1lKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5zIDw9IGRhdGVUaW1lICYmIHRoaXMuZSA+IGRhdGVUaW1lO1xuICB9XG4gIC8qKlxuICAgKiBcIlNldHNcIiB0aGUgc3RhcnQgYW5kL29yIGVuZCBkYXRlcy4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIEludGVydmFsLlxuICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzIC0gdGhlIHZhbHVlcyB0byBzZXRcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gdmFsdWVzLnN0YXJ0IC0gdGhlIHN0YXJ0aW5nIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IHZhbHVlcy5lbmQgLSB0aGUgZW5kaW5nIERhdGVUaW1lXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cblxuXG4gIHNldCh7XG4gICAgc3RhcnQsXG4gICAgZW5kXG4gIH0gPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzdGFydCB8fCB0aGlzLnMsIGVuZCB8fCB0aGlzLmUpO1xuICB9XG4gIC8qKlxuICAgKiBTcGxpdCB0aGlzIEludGVydmFsIGF0IGVhY2ggb2YgdGhlIHNwZWNpZmllZCBEYXRlVGltZXNcbiAgICogQHBhcmFtIHsuLi5EYXRlVGltZX0gZGF0ZVRpbWVzIC0gdGhlIHVuaXQgb2YgdGltZSB0byBjb3VudC5cbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuXG5cbiAgc3BsaXRBdCguLi5kYXRlVGltZXMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIFtdO1xuICAgIGNvbnN0IHNvcnRlZCA9IGRhdGVUaW1lcy5tYXAoZnJpZW5kbHlEYXRlVGltZSkuZmlsdGVyKGQgPT4gdGhpcy5jb250YWlucyhkKSkuc29ydCgpLFxuICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICBsZXQge1xuICAgICAgc1xuICAgIH0gPSB0aGlzLFxuICAgICAgICBpID0gMDtcblxuICAgIHdoaWxlIChzIDwgdGhpcy5lKSB7XG4gICAgICBjb25zdCBhZGRlZCA9IHNvcnRlZFtpXSB8fCB0aGlzLmUsXG4gICAgICAgICAgICBuZXh0ID0gK2FkZGVkID4gK3RoaXMuZSA/IHRoaXMuZSA6IGFkZGVkO1xuICAgICAgcmVzdWx0cy5wdXNoKEludGVydmFsLmZyb21EYXRlVGltZXMocywgbmV4dCkpO1xuICAgICAgcyA9IG5leHQ7XG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH1cbiAgLyoqXG4gICAqIFNwbGl0IHRoaXMgSW50ZXJ2YWwgaW50byBzbWFsbGVyIEludGVydmFscywgZWFjaCBvZiB0aGUgc3BlY2lmaWVkIGxlbmd0aC5cbiAgICogTGVmdCBvdmVyIHRpbWUgaXMgZ3JvdXBlZCBpbnRvIGEgc21hbGxlciBpbnRlcnZhbFxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGxlbmd0aCBvZiBlYWNoIHJlc3VsdGluZyBpbnRlcnZhbC5cbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuXG5cbiAgc3BsaXRCeShkdXJhdGlvbikge1xuICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pO1xuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQgfHwgIWR1ci5pc1ZhbGlkIHx8IGR1ci5hcyhcIm1pbGxpc2Vjb25kc1wiKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGxldCB7XG4gICAgICBzXG4gICAgfSA9IHRoaXMsXG4gICAgICAgIGlkeCA9IDEsXG4gICAgICAgIG5leHQ7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuXG4gICAgd2hpbGUgKHMgPCB0aGlzLmUpIHtcbiAgICAgIGNvbnN0IGFkZGVkID0gdGhpcy5zdGFydC5wbHVzKGR1ci5tYXBVbml0cyh4ID0+IHggKiBpZHgpKTtcbiAgICAgIG5leHQgPSArYWRkZWQgPiArdGhpcy5lID8gdGhpcy5lIDogYWRkZWQ7XG4gICAgICByZXN1bHRzLnB1c2goSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzLCBuZXh0KSk7XG4gICAgICBzID0gbmV4dDtcbiAgICAgIGlkeCArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG4gIC8qKlxuICAgKiBTcGxpdCB0aGlzIEludGVydmFsIGludG8gdGhlIHNwZWNpZmllZCBudW1iZXIgb2Ygc21hbGxlciBpbnRlcnZhbHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJPZlBhcnRzIC0gVGhlIG51bWJlciBvZiBJbnRlcnZhbHMgdG8gZGl2aWRlIHRoZSBJbnRlcnZhbCBpbnRvLlxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG5cblxuICBkaXZpZGVFcXVhbGx5KG51bWJlck9mUGFydHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIFtdO1xuICAgIHJldHVybiB0aGlzLnNwbGl0QnkodGhpcy5sZW5ndGgoKSAvIG51bWJlck9mUGFydHMpLnNsaWNlKDAsIG51bWJlck9mUGFydHMpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIG92ZXJsYXBzIHdpdGggdGhlIHNwZWNpZmllZCBJbnRlcnZhbFxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIG92ZXJsYXBzKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZSA+IG90aGVyLnMgJiYgdGhpcy5zIDwgb3RoZXIuZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIGVuZCBpcyBhZGphY2VudCB0byB0aGUgc3BlY2lmaWVkIEludGVydmFsJ3Mgc3RhcnQuXG4gICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuXG5cbiAgYWJ1dHNTdGFydChvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICt0aGlzLmUgPT09ICtvdGhlci5zO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsJ3Mgc3RhcnQgaXMgYWRqYWNlbnQgdG8gdGhlIHNwZWNpZmllZCBJbnRlcnZhbCdzIGVuZC5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBhYnV0c0VuZChvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICtvdGhlci5lID09PSArdGhpcy5zO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIGVuZ3VsZnMgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIHNwZWNpZmllZCBJbnRlcnZhbC5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBlbmd1bGZzKG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5zIDw9IG90aGVyLnMgJiYgdGhpcy5lID49IG90aGVyLmU7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwgaGFzIHRoZSBzYW1lIHN0YXJ0IGFuZCBlbmQgYXMgdGhlIHNwZWNpZmllZCBJbnRlcnZhbC5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBlcXVhbHMob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXIuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnMuZXF1YWxzKG90aGVyLnMpICYmIHRoaXMuZS5lcXVhbHMob3RoZXIuZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhbiBJbnRlcnZhbCByZXByZXNlbnRpbmcgdGhlIGludGVyc2VjdGlvbiBvZiB0aGlzIEludGVydmFsIGFuZCB0aGUgc3BlY2lmaWVkIEludGVydmFsLlxuICAgKiBTcGVjaWZpY2FsbHksIHRoZSByZXN1bHRpbmcgSW50ZXJ2YWwgaGFzIHRoZSBtYXhpbXVtIHN0YXJ0IHRpbWUgYW5kIHRoZSBtaW5pbXVtIGVuZCB0aW1lIG9mIHRoZSB0d28gSW50ZXJ2YWxzLlxuICAgKiBSZXR1cm5zIG51bGwgaWYgdGhlIGludGVyc2VjdGlvbiBpcyBlbXB0eSwgbWVhbmluZywgdGhlIGludGVydmFscyBkb24ndCBpbnRlcnNlY3QuXG4gICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cblxuXG4gIGludGVyc2VjdGlvbihvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBzID0gdGhpcy5zID4gb3RoZXIucyA/IHRoaXMucyA6IG90aGVyLnMsXG4gICAgICAgICAgZSA9IHRoaXMuZSA8IG90aGVyLmUgPyB0aGlzLmUgOiBvdGhlci5lO1xuXG4gICAgaWYgKHMgPj0gZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHMsIGUpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIEludGVydmFsIHJlcHJlc2VudGluZyB0aGUgdW5pb24gb2YgdGhpcyBJbnRlcnZhbCBhbmQgdGhlIHNwZWNpZmllZCBJbnRlcnZhbC5cbiAgICogU3BlY2lmaWNhbGx5LCB0aGUgcmVzdWx0aW5nIEludGVydmFsIGhhcyB0aGUgbWluaW11bSBzdGFydCB0aW1lIGFuZCB0aGUgbWF4aW11bSBlbmQgdGltZSBvZiB0aGUgdHdvIEludGVydmFscy5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuXG5cbiAgdW5pb24ob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgcyA9IHRoaXMucyA8IG90aGVyLnMgPyB0aGlzLnMgOiBvdGhlci5zLFxuICAgICAgICAgIGUgPSB0aGlzLmUgPiBvdGhlci5lID8gdGhpcy5lIDogb3RoZXIuZTtcbiAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzLCBlKTtcbiAgfVxuICAvKipcbiAgICogTWVyZ2UgYW4gYXJyYXkgb2YgSW50ZXJ2YWxzIGludG8gYSBlcXVpdmFsZW50IG1pbmltYWwgc2V0IG9mIEludGVydmFscy5cbiAgICogQ29tYmluZXMgb3ZlcmxhcHBpbmcgYW5kIGFkamFjZW50IEludGVydmFscy5cbiAgICogQHBhcmFtIHtBcnJheX0gaW50ZXJ2YWxzXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cblxuXG4gIHN0YXRpYyBtZXJnZShpbnRlcnZhbHMpIHtcbiAgICBjb25zdCBbZm91bmQsIGZpbmFsXSA9IGludGVydmFscy5zb3J0KChhLCBiKSA9PiBhLnMgLSBiLnMpLnJlZHVjZSgoW3NvZmFyLCBjdXJyZW50XSwgaXRlbSkgPT4ge1xuICAgICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICAgIHJldHVybiBbc29mYXIsIGl0ZW1dO1xuICAgICAgfSBlbHNlIGlmIChjdXJyZW50Lm92ZXJsYXBzKGl0ZW0pIHx8IGN1cnJlbnQuYWJ1dHNTdGFydChpdGVtKSkge1xuICAgICAgICByZXR1cm4gW3NvZmFyLCBjdXJyZW50LnVuaW9uKGl0ZW0pXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbc29mYXIuY29uY2F0KFtjdXJyZW50XSksIGl0ZW1dO1xuICAgICAgfVxuICAgIH0sIFtbXSwgbnVsbF0pO1xuXG4gICAgaWYgKGZpbmFsKSB7XG4gICAgICBmb3VuZC5wdXNoKGZpbmFsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm91bmQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBJbnRlcnZhbHMgcmVwcmVzZW50aW5nIHRoZSBzcGFucyBvZiB0aW1lIHRoYXQgb25seSBhcHBlYXIgaW4gb25lIG9mIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWxzLlxuICAgKiBAcGFyYW0ge0FycmF5fSBpbnRlcnZhbHNcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuXG5cbiAgc3RhdGljIHhvcihpbnRlcnZhbHMpIHtcbiAgICBsZXQgc3RhcnQgPSBudWxsLFxuICAgICAgICBjdXJyZW50Q291bnQgPSAwO1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXSxcbiAgICAgICAgICBlbmRzID0gaW50ZXJ2YWxzLm1hcChpID0+IFt7XG4gICAgICB0aW1lOiBpLnMsXG4gICAgICB0eXBlOiBcInNcIlxuICAgIH0sIHtcbiAgICAgIHRpbWU6IGkuZSxcbiAgICAgIHR5cGU6IFwiZVwiXG4gICAgfV0pLFxuICAgICAgICAgIGZsYXR0ZW5lZCA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQoLi4uZW5kcyksXG4gICAgICAgICAgYXJyID0gZmxhdHRlbmVkLnNvcnQoKGEsIGIpID0+IGEudGltZSAtIGIudGltZSk7XG5cbiAgICBmb3IgKGNvbnN0IGkgb2YgYXJyKSB7XG4gICAgICBjdXJyZW50Q291bnQgKz0gaS50eXBlID09PSBcInNcIiA/IDEgOiAtMTtcblxuICAgICAgaWYgKGN1cnJlbnRDb3VudCA9PT0gMSkge1xuICAgICAgICBzdGFydCA9IGkudGltZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGFydCAmJiArc3RhcnQgIT09ICtpLnRpbWUpIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2goSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzdGFydCwgaS50aW1lKSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIEludGVydmFsLm1lcmdlKHJlc3VsdHMpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gSW50ZXJ2YWwgcmVwcmVzZW50aW5nIHRoZSBzcGFuIG9mIHRpbWUgaW4gdGhpcyBJbnRlcnZhbCB0aGF0IGRvZXNuJ3Qgb3ZlcmxhcCB3aXRoIGFueSBvZiB0aGUgc3BlY2lmaWVkIEludGVydmFscy5cbiAgICogQHBhcmFtIHsuLi5JbnRlcnZhbH0gaW50ZXJ2YWxzXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cblxuXG4gIGRpZmZlcmVuY2UoLi4uaW50ZXJ2YWxzKSB7XG4gICAgcmV0dXJuIEludGVydmFsLnhvcihbdGhpc10uY29uY2F0KGludGVydmFscykpLm1hcChpID0+IHRoaXMuaW50ZXJzZWN0aW9uKGkpKS5maWx0ZXIoaSA9PiBpICYmICFpLmlzRW1wdHkoKSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBJbnRlcnZhbCBhcHByb3ByaWF0ZSBmb3IgZGVidWdnaW5nLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEJDE7XG4gICAgcmV0dXJuIGBbJHt0aGlzLnMudG9JU08oKX0g4oCTICR7dGhpcy5lLnRvSVNPKCl9KWA7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIEludGVydmFsLlxuICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI1RpbWVfaW50ZXJ2YWxzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gVGhlIHNhbWUgb3B0aW9ucyBhcyB7QGxpbmsgRGF0ZVRpbWUjdG9JU099XG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG5cblxuICB0b0lTTyhvcHRzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEJDE7XG4gICAgcmV0dXJuIGAke3RoaXMucy50b0lTTyhvcHRzKX0vJHt0aGlzLmUudG9JU08ob3B0cyl9YDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGRhdGUgb2YgdGhpcyBJbnRlcnZhbC5cbiAgICogVGhlIHRpbWUgY29tcG9uZW50cyBhcmUgaWdub3JlZC5cbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNUaW1lX2ludGVydmFsc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9JU09EYXRlKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gSU5WQUxJRCQxO1xuICAgIHJldHVybiBgJHt0aGlzLnMudG9JU09EYXRlKCl9LyR7dGhpcy5lLnRvSVNPRGF0ZSgpfWA7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aW1lIG9mIHRoaXMgSW50ZXJ2YWwuXG4gICAqIFRoZSBkYXRlIGNvbXBvbmVudHMgYXJlIGlnbm9yZWQuXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBUaGUgc2FtZSBvcHRpb25zIGFzIHtAbGluayBEYXRlVGltZSN0b0lTT31cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHRvSVNPVGltZShvcHRzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEJDE7XG4gICAgcmV0dXJuIGAke3RoaXMucy50b0lTT1RpbWUob3B0cyl9LyR7dGhpcy5lLnRvSVNPVGltZShvcHRzKX1gO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgSW50ZXJ2YWwgZm9ybWF0dGVkIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGZvcm1hdCBzdHJpbmcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRlRm9ybWF0IC0gdGhlIGZvcm1hdCBzdHJpbmcuIFRoaXMgc3RyaW5nIGZvcm1hdHMgdGhlIHN0YXJ0IGFuZCBlbmQgdGltZS4gU2VlIHtAbGluayBEYXRlVGltZSN0b0Zvcm1hdH0gZm9yIGRldGFpbHMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc2VwYXJhdG9yID0gICcg4oCTICddIC0gYSBzZXBhcmF0b3IgdG8gcGxhY2UgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZCByZXByZXNlbnRhdGlvbnNcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHRvRm9ybWF0KGRhdGVGb3JtYXQsIHtcbiAgICBzZXBhcmF0b3IgPSBcIiDigJMgXCJcbiAgfSA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEJDE7XG4gICAgcmV0dXJuIGAke3RoaXMucy50b0Zvcm1hdChkYXRlRm9ybWF0KX0ke3NlcGFyYXRvcn0ke3RoaXMuZS50b0Zvcm1hdChkYXRlRm9ybWF0KX1gO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYSBEdXJhdGlvbiByZXByZXNlbnRpbmcgdGhlIHRpbWUgc3Bhbm5lZCBieSB0aGlzIGludGVydmFsLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gW3VuaXQ9WydtaWxsaXNlY29uZHMnXV0gLSB0aGUgdW5pdCBvciB1bml0cyAoc3VjaCBhcyAnaG91cnMnIG9yICdkYXlzJykgdG8gaW5jbHVkZSBpbiB0aGUgZHVyYXRpb24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0aGF0IGFmZmVjdCB0aGUgY3JlYXRpb24gb2YgdGhlIER1cmF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5jb252ZXJzaW9uQWNjdXJhY3k9J2Nhc3VhbCddIC0gdGhlIGNvbnZlcnNpb24gc3lzdGVtIHRvIHVzZVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS50b0R1cmF0aW9uKCkudG9PYmplY3QoKSAvLz0+IHsgbWlsbGlzZWNvbmRzOiA4ODQ4OTI1NyB9XG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLnRvRHVyYXRpb24oJ2RheXMnKS50b09iamVjdCgpIC8vPT4geyBkYXlzOiAxLjAyNDE4MTIxNTI3Nzc3NzggfVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS50b0R1cmF0aW9uKFsnaG91cnMnLCAnbWludXRlcyddKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMjQsIG1pbnV0ZXM6IDM0LjgyMDk1IH1cbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdDEsIGR0MikudG9EdXJhdGlvbihbJ2hvdXJzJywgJ21pbnV0ZXMnLCAnc2Vjb25kcyddKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMjQsIG1pbnV0ZXM6IDM0LCBzZWNvbmRzOiA0OS4yNTcgfVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS50b0R1cmF0aW9uKCdzZWNvbmRzJykudG9PYmplY3QoKSAvLz0+IHsgc2Vjb25kczogODg0ODkuMjU3IH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuXG5cbiAgdG9EdXJhdGlvbih1bml0LCBvcHRzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5pbnZhbGlkKHRoaXMuaW52YWxpZFJlYXNvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZS5kaWZmKHRoaXMucywgdW5pdCwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIFJ1biBtYXBGbiBvbiB0aGUgaW50ZXJ2YWwgc3RhcnQgYW5kIGVuZCwgcmV0dXJuaW5nIGEgbmV3IEludGVydmFsIGZyb20gdGhlIHJlc3VsdGluZyBEYXRlVGltZXNcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWFwRm5cbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLm1hcEVuZHBvaW50cyhlbmRwb2ludCA9PiBlbmRwb2ludC50b1VUQygpKVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS5tYXBFbmRwb2ludHMoZW5kcG9pbnQgPT4gZW5kcG9pbnQucGx1cyh7IGhvdXJzOiAyIH0pKVxuICAgKi9cblxuXG4gIG1hcEVuZHBvaW50cyhtYXBGbikge1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKG1hcEZuKHRoaXMucyksIG1hcEZuKHRoaXMuZSkpO1xuICB9XG5cbn1cblxuLyoqXG4gKiBUaGUgSW5mbyBjbGFzcyBjb250YWlucyBzdGF0aWMgbWV0aG9kcyBmb3IgcmV0cmlldmluZyBnZW5lcmFsIHRpbWUgYW5kIGRhdGUgcmVsYXRlZCBkYXRhLiBGb3IgZXhhbXBsZSwgaXQgaGFzIG1ldGhvZHMgZm9yIGZpbmRpbmcgb3V0IGlmIGEgdGltZSB6b25lIGhhcyBhIERTVCwgZm9yIGxpc3RpbmcgdGhlIG1vbnRocyBpbiBhbnkgc3VwcG9ydGVkIGxvY2FsZSwgYW5kIGZvciBkaXNjb3ZlcmluZyB3aGljaCBvZiBMdXhvbiBmZWF0dXJlcyBhcmUgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LlxuICovXG5cbmNsYXNzIEluZm8ge1xuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhlIHNwZWNpZmllZCB6b25lIGNvbnRhaW5zIGEgRFNULlxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbem9uZT0nbG9jYWwnXSAtIFpvbmUgdG8gY2hlY2suIERlZmF1bHRzIHRvIHRoZSBlbnZpcm9ubWVudCdzIGxvY2FsIHpvbmUuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaGFzRFNUKHpvbmUgPSBTZXR0aW5ncy5kZWZhdWx0Wm9uZSkge1xuICAgIGNvbnN0IHByb3RvID0gRGF0ZVRpbWUubm93KCkuc2V0Wm9uZSh6b25lKS5zZXQoe1xuICAgICAgbW9udGg6IDEyXG4gICAgfSk7XG4gICAgcmV0dXJuICF6b25lLmlzVW5pdmVyc2FsICYmIHByb3RvLm9mZnNldCAhPT0gcHJvdG8uc2V0KHtcbiAgICAgIG1vbnRoOiA2XG4gICAgfSkub2Zmc2V0O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGUgc3BlY2lmaWVkIHpvbmUgaXMgYSB2YWxpZCBJQU5BIHNwZWNpZmllci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHpvbmUgLSBab25lIHRvIGNoZWNrXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuXG5cbiAgc3RhdGljIGlzVmFsaWRJQU5BWm9uZSh6b25lKSB7XG4gICAgcmV0dXJuIElBTkFab25lLmlzVmFsaWRab25lKHpvbmUpO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgaW5wdXQgaW50byBhIHtAbGluayBab25lfSBpbnN0YW5jZS5cbiAgICpcbiAgICogKiBJZiBgaW5wdXRgIGlzIGFscmVhZHkgYSBab25lIGluc3RhbmNlLCBpdCBpcyByZXR1cm5lZCB1bmNoYW5nZWQuXG4gICAqICogSWYgYGlucHV0YCBpcyBhIHN0cmluZyBjb250YWluaW5nIGEgdmFsaWQgdGltZSB6b25lIG5hbWUsIGEgWm9uZSBpbnN0YW5jZVxuICAgKiAgIHdpdGggdGhhdCBuYW1lIGlzIHJldHVybmVkLlxuICAgKiAqIElmIGBpbnB1dGAgaXMgYSBzdHJpbmcgdGhhdCBkb2Vzbid0IHJlZmVyIHRvIGEga25vd24gdGltZSB6b25lLCBhIFpvbmVcbiAgICogICBpbnN0YW5jZSB3aXRoIHtAbGluayBab25lI2lzVmFsaWR9ID09IGZhbHNlIGlzIHJldHVybmVkLlxuICAgKiAqIElmIGBpbnB1dCBpcyBhIG51bWJlciwgYSBab25lIGluc3RhbmNlIHdpdGggdGhlIHNwZWNpZmllZCBmaXhlZCBvZmZzZXRcbiAgICogICBpbiBtaW51dGVzIGlzIHJldHVybmVkLlxuICAgKiAqIElmIGBpbnB1dGAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLCB0aGUgZGVmYXVsdCB6b25lIGlzIHJldHVybmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfG51bWJlcn0gW2lucHV0XSAtIHRoZSB2YWx1ZSB0byBiZSBjb252ZXJ0ZWRcbiAgICogQHJldHVybiB7Wm9uZX1cbiAgICovXG5cblxuICBzdGF0aWMgbm9ybWFsaXplWm9uZShpbnB1dCkge1xuICAgIHJldHVybiBub3JtYWxpemVab25lKGlucHV0LCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBzdGFuZGFsb25lIG1vbnRoIG5hbWVzLlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGVUaW1lRm9ybWF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdsb25nJ10gLSB0aGUgbGVuZ3RoIG9mIHRoZSBtb250aCByZXByZXNlbnRhdGlvbiwgc3VjaCBhcyBcIm51bWVyaWNcIiwgXCIyLWRpZ2l0XCIsIFwibmFycm93XCIsIFwic2hvcnRcIiwgXCJsb25nXCJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGVdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5udW1iZXJpbmdTeXN0ZW09bnVsbF0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jT2JqPW51bGxdIC0gYW4gZXhpc3RpbmcgbG9jYWxlIG9iamVjdCB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm91dHB1dENhbGVuZGFyPSdncmVnb3J5J10gLSB0aGUgY2FsZW5kYXJcbiAgICogQGV4YW1wbGUgSW5mby5tb250aHMoKVswXSAvLz0+ICdKYW51YXJ5J1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnc2hvcnQnKVswXSAvLz0+ICdKYW4nXG4gICAqIEBleGFtcGxlIEluZm8ubW9udGhzKCdudW1lcmljJylbMF0gLy89PiAnMSdcbiAgICogQGV4YW1wbGUgSW5mby5tb250aHMoJ3Nob3J0JywgeyBsb2NhbGU6ICdmci1DQScgfSApWzBdIC8vPT4gJ2phbnYuJ1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnbnVtZXJpYycsIHsgbG9jYWxlOiAnYXInIH0pWzBdIC8vPT4gJ9mhJ1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnbG9uZycsIHsgb3V0cHV0Q2FsZW5kYXI6ICdpc2xhbWljJyB9KVswXSAvLz0+ICdSYWJpyrsgSSdcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuXG5cbiAgc3RhdGljIG1vbnRocyhsZW5ndGggPSBcImxvbmdcIiwge1xuICAgIGxvY2FsZSA9IG51bGwsXG4gICAgbnVtYmVyaW5nU3lzdGVtID0gbnVsbCxcbiAgICBsb2NPYmogPSBudWxsLFxuICAgIG91dHB1dENhbGVuZGFyID0gXCJncmVnb3J5XCJcbiAgfSA9IHt9KSB7XG4gICAgcmV0dXJuIChsb2NPYmogfHwgTG9jYWxlLmNyZWF0ZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXIpKS5tb250aHMobGVuZ3RoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIGZvcm1hdCBtb250aCBuYW1lcy5cbiAgICogRm9ybWF0IG1vbnRocyBkaWZmZXIgZnJvbSBzdGFuZGFsb25lIG1vbnRocyBpbiB0aGF0IHRoZXkncmUgbWVhbnQgdG8gYXBwZWFyIG5leHQgdG8gdGhlIGRheSBvZiB0aGUgbW9udGguIEluIHNvbWUgbGFuZ3VhZ2VzLCB0aGF0XG4gICAqIGNoYW5nZXMgdGhlIHN0cmluZy5cbiAgICogU2VlIHtAbGluayBJbmZvI21vbnRoc31cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsZW5ndGg9J2xvbmcnXSAtIHRoZSBsZW5ndGggb2YgdGhlIG1vbnRoIHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzIFwibnVtZXJpY1wiLCBcIjItZGlnaXRcIiwgXCJuYXJyb3dcIiwgXCJzaG9ydFwiLCBcImxvbmdcIlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZV0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm51bWJlcmluZ1N5c3RlbT1udWxsXSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NPYmo9bnVsbF0gLSBhbiBleGlzdGluZyBsb2NhbGUgb2JqZWN0IHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMub3V0cHV0Q2FsZW5kYXI9J2dyZWdvcnknXSAtIHRoZSBjYWxlbmRhclxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG5cblxuICBzdGF0aWMgbW9udGhzRm9ybWF0KGxlbmd0aCA9IFwibG9uZ1wiLCB7XG4gICAgbG9jYWxlID0gbnVsbCxcbiAgICBudW1iZXJpbmdTeXN0ZW0gPSBudWxsLFxuICAgIGxvY09iaiA9IG51bGwsXG4gICAgb3V0cHV0Q2FsZW5kYXIgPSBcImdyZWdvcnlcIlxuICB9ID0ge30pIHtcbiAgICByZXR1cm4gKGxvY09iaiB8fCBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcikpLm1vbnRocyhsZW5ndGgsIHRydWUpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2Ygc3RhbmRhbG9uZSB3ZWVrIG5hbWVzLlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGVUaW1lRm9ybWF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdsb25nJ10gLSB0aGUgbGVuZ3RoIG9mIHRoZSB3ZWVrZGF5IHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzIFwibmFycm93XCIsIFwic2hvcnRcIiwgXCJsb25nXCIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlXSAtIHRoZSBsb2NhbGUgY29kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubnVtYmVyaW5nU3lzdGVtPW51bGxdIC0gdGhlIG51bWJlcmluZyBzeXN0ZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY09iaj1udWxsXSAtIGFuIGV4aXN0aW5nIGxvY2FsZSBvYmplY3QgdG8gdXNlXG4gICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoKVswXSAvLz0+ICdNb25kYXknXG4gICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoJ3Nob3J0JylbMF0gLy89PiAnTW9uJ1xuICAgKiBAZXhhbXBsZSBJbmZvLndlZWtkYXlzKCdzaG9ydCcsIHsgbG9jYWxlOiAnZnItQ0EnIH0pWzBdIC8vPT4gJ2x1bi4nXG4gICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoJ3Nob3J0JywgeyBsb2NhbGU6ICdhcicgfSlbMF0gLy89PiAn2KfZhNin2KvZhtmK2YYnXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cblxuXG4gIHN0YXRpYyB3ZWVrZGF5cyhsZW5ndGggPSBcImxvbmdcIiwge1xuICAgIGxvY2FsZSA9IG51bGwsXG4gICAgbnVtYmVyaW5nU3lzdGVtID0gbnVsbCxcbiAgICBsb2NPYmogPSBudWxsXG4gIH0gPSB7fSkge1xuICAgIHJldHVybiAobG9jT2JqIHx8IExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG51bGwpKS53ZWVrZGF5cyhsZW5ndGgpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgZm9ybWF0IHdlZWsgbmFtZXMuXG4gICAqIEZvcm1hdCB3ZWVrZGF5cyBkaWZmZXIgZnJvbSBzdGFuZGFsb25lIHdlZWtkYXlzIGluIHRoYXQgdGhleSdyZSBtZWFudCB0byBhcHBlYXIgbmV4dCB0byBtb3JlIGRhdGUgaW5mb3JtYXRpb24uIEluIHNvbWUgbGFuZ3VhZ2VzLCB0aGF0XG4gICAqIGNoYW5nZXMgdGhlIHN0cmluZy5cbiAgICogU2VlIHtAbGluayBJbmZvI3dlZWtkYXlzfVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2xlbmd0aD0nbG9uZyddIC0gdGhlIGxlbmd0aCBvZiB0aGUgbW9udGggcmVwcmVzZW50YXRpb24sIHN1Y2ggYXMgXCJuYXJyb3dcIiwgXCJzaG9ydFwiLCBcImxvbmdcIi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9bnVsbF0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm51bWJlcmluZ1N5c3RlbT1udWxsXSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NPYmo9bnVsbF0gLSBhbiBleGlzdGluZyBsb2NhbGUgb2JqZWN0IHRvIHVzZVxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG5cblxuICBzdGF0aWMgd2Vla2RheXNGb3JtYXQobGVuZ3RoID0gXCJsb25nXCIsIHtcbiAgICBsb2NhbGUgPSBudWxsLFxuICAgIG51bWJlcmluZ1N5c3RlbSA9IG51bGwsXG4gICAgbG9jT2JqID0gbnVsbFxuICB9ID0ge30pIHtcbiAgICByZXR1cm4gKGxvY09iaiB8fCBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBudWxsKSkud2Vla2RheXMobGVuZ3RoLCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIG1lcmlkaWVtcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGVdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBleGFtcGxlIEluZm8ubWVyaWRpZW1zKCkgLy89PiBbICdBTScsICdQTScgXVxuICAgKiBAZXhhbXBsZSBJbmZvLm1lcmlkaWVtcyh7IGxvY2FsZTogJ215JyB9KSAvLz0+IFsgJ+GAlOGAtuGAlOGAgOGAuicsICfhgIrhgJThgLEnIF1cbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuXG5cbiAgc3RhdGljIG1lcmlkaWVtcyh7XG4gICAgbG9jYWxlID0gbnVsbFxuICB9ID0ge30pIHtcbiAgICByZXR1cm4gTG9jYWxlLmNyZWF0ZShsb2NhbGUpLm1lcmlkaWVtcygpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgZXJhcywgc3VjaCBhcyBbJ0JDJywgJ0FEJ10uIFRoZSBsb2NhbGUgY2FuIGJlIHNwZWNpZmllZCwgYnV0IHRoZSBjYWxlbmRhciBzeXN0ZW0gaXMgYWx3YXlzIEdyZWdvcmlhbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsZW5ndGg9J3Nob3J0J10gLSB0aGUgbGVuZ3RoIG9mIHRoZSBlcmEgcmVwcmVzZW50YXRpb24sIHN1Y2ggYXMgXCJzaG9ydFwiIG9yIFwibG9uZ1wiLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZV0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQGV4YW1wbGUgSW5mby5lcmFzKCkgLy89PiBbICdCQycsICdBRCcgXVxuICAgKiBAZXhhbXBsZSBJbmZvLmVyYXMoJ2xvbmcnKSAvLz0+IFsgJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknIF1cbiAgICogQGV4YW1wbGUgSW5mby5lcmFzKCdsb25nJywgeyBsb2NhbGU6ICdmcicgfSkgLy89PiBbICdhdmFudCBKw6lzdXMtQ2hyaXN0JywgJ2FwcsOocyBKw6lzdXMtQ2hyaXN0JyBdXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cblxuXG4gIHN0YXRpYyBlcmFzKGxlbmd0aCA9IFwic2hvcnRcIiwge1xuICAgIGxvY2FsZSA9IG51bGxcbiAgfSA9IHt9KSB7XG4gICAgcmV0dXJuIExvY2FsZS5jcmVhdGUobG9jYWxlLCBudWxsLCBcImdyZWdvcnlcIikuZXJhcyhsZW5ndGgpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHNldCBvZiBhdmFpbGFibGUgZmVhdHVyZXMgaW4gdGhpcyBlbnZpcm9ubWVudC5cbiAgICogU29tZSBmZWF0dXJlcyBvZiBMdXhvbiBhcmUgbm90IGF2YWlsYWJsZSBpbiBhbGwgZW52aXJvbm1lbnRzLiBGb3IgZXhhbXBsZSwgb24gb2xkZXIgYnJvd3NlcnMsIHJlbGF0aXZlIHRpbWUgZm9ybWF0dGluZyBzdXBwb3J0IGlzIG5vdCBhdmFpbGFibGUuIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgaWYgdGhhdCdzIHRoZSBjYXNlLlxuICAgKiBLZXlzOlxuICAgKiAqIGByZWxhdGl2ZWA6IHdoZXRoZXIgdGhpcyBlbnZpcm9ubWVudCBzdXBwb3J0cyByZWxhdGl2ZSB0aW1lIGZvcm1hdHRpbmdcbiAgICogQGV4YW1wbGUgSW5mby5mZWF0dXJlcygpIC8vPT4geyByZWxhdGl2ZTogZmFsc2UgfVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGZlYXR1cmVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZWxhdGl2ZTogaGFzUmVsYXRpdmUoKVxuICAgIH07XG4gIH1cblxufVxuXG5mdW5jdGlvbiBkYXlEaWZmKGVhcmxpZXIsIGxhdGVyKSB7XG4gIGNvbnN0IHV0Y0RheVN0YXJ0ID0gZHQgPT4gZHQudG9VVEMoMCwge1xuICAgIGtlZXBMb2NhbFRpbWU6IHRydWVcbiAgfSkuc3RhcnRPZihcImRheVwiKS52YWx1ZU9mKCksXG4gICAgICAgIG1zID0gdXRjRGF5U3RhcnQobGF0ZXIpIC0gdXRjRGF5U3RhcnQoZWFybGllcik7XG5cbiAgcmV0dXJuIE1hdGguZmxvb3IoRHVyYXRpb24uZnJvbU1pbGxpcyhtcykuYXMoXCJkYXlzXCIpKTtcbn1cblxuZnVuY3Rpb24gaGlnaE9yZGVyRGlmZnMoY3Vyc29yLCBsYXRlciwgdW5pdHMpIHtcbiAgY29uc3QgZGlmZmVycyA9IFtbXCJ5ZWFyc1wiLCAoYSwgYikgPT4gYi55ZWFyIC0gYS55ZWFyXSwgW1wicXVhcnRlcnNcIiwgKGEsIGIpID0+IGIucXVhcnRlciAtIGEucXVhcnRlcl0sIFtcIm1vbnRoc1wiLCAoYSwgYikgPT4gYi5tb250aCAtIGEubW9udGggKyAoYi55ZWFyIC0gYS55ZWFyKSAqIDEyXSwgW1wid2Vla3NcIiwgKGEsIGIpID0+IHtcbiAgICBjb25zdCBkYXlzID0gZGF5RGlmZihhLCBiKTtcbiAgICByZXR1cm4gKGRheXMgLSBkYXlzICUgNykgLyA3O1xuICB9XSwgW1wiZGF5c1wiLCBkYXlEaWZmXV07XG4gIGNvbnN0IHJlc3VsdHMgPSB7fTtcbiAgbGV0IGxvd2VzdE9yZGVyLCBoaWdoV2F0ZXI7XG5cbiAgZm9yIChjb25zdCBbdW5pdCwgZGlmZmVyXSBvZiBkaWZmZXJzKSB7XG4gICAgaWYgKHVuaXRzLmluZGV4T2YodW5pdCkgPj0gMCkge1xuICAgICAgbG93ZXN0T3JkZXIgPSB1bml0O1xuICAgICAgbGV0IGRlbHRhID0gZGlmZmVyKGN1cnNvciwgbGF0ZXIpO1xuICAgICAgaGlnaFdhdGVyID0gY3Vyc29yLnBsdXMoe1xuICAgICAgICBbdW5pdF06IGRlbHRhXG4gICAgICB9KTtcblxuICAgICAgaWYgKGhpZ2hXYXRlciA+IGxhdGVyKSB7XG4gICAgICAgIGN1cnNvciA9IGN1cnNvci5wbHVzKHtcbiAgICAgICAgICBbdW5pdF06IGRlbHRhIC0gMVxuICAgICAgICB9KTtcbiAgICAgICAgZGVsdGEgLT0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnNvciA9IGhpZ2hXYXRlcjtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0c1t1bml0XSA9IGRlbHRhO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbY3Vyc29yLCByZXN1bHRzLCBoaWdoV2F0ZXIsIGxvd2VzdE9yZGVyXTtcbn1cblxuZnVuY3Rpb24gZGlmZiAoZWFybGllciwgbGF0ZXIsIHVuaXRzLCBvcHRzKSB7XG4gIGxldCBbY3Vyc29yLCByZXN1bHRzLCBoaWdoV2F0ZXIsIGxvd2VzdE9yZGVyXSA9IGhpZ2hPcmRlckRpZmZzKGVhcmxpZXIsIGxhdGVyLCB1bml0cyk7XG4gIGNvbnN0IHJlbWFpbmluZ01pbGxpcyA9IGxhdGVyIC0gY3Vyc29yO1xuICBjb25zdCBsb3dlck9yZGVyVW5pdHMgPSB1bml0cy5maWx0ZXIodSA9PiBbXCJob3Vyc1wiLCBcIm1pbnV0ZXNcIiwgXCJzZWNvbmRzXCIsIFwibWlsbGlzZWNvbmRzXCJdLmluZGV4T2YodSkgPj0gMCk7XG5cbiAgaWYgKGxvd2VyT3JkZXJVbml0cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaGlnaFdhdGVyIDwgbGF0ZXIpIHtcbiAgICAgIGhpZ2hXYXRlciA9IGN1cnNvci5wbHVzKHtcbiAgICAgICAgW2xvd2VzdE9yZGVyXTogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGhpZ2hXYXRlciAhPT0gY3Vyc29yKSB7XG4gICAgICByZXN1bHRzW2xvd2VzdE9yZGVyXSA9IChyZXN1bHRzW2xvd2VzdE9yZGVyXSB8fCAwKSArIHJlbWFpbmluZ01pbGxpcyAvIChoaWdoV2F0ZXIgLSBjdXJzb3IpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGR1cmF0aW9uID0gRHVyYXRpb24uZnJvbU9iamVjdChyZXN1bHRzLCBvcHRzKTtcblxuICBpZiAobG93ZXJPcmRlclVuaXRzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gRHVyYXRpb24uZnJvbU1pbGxpcyhyZW1haW5pbmdNaWxsaXMsIG9wdHMpLnNoaWZ0VG8oLi4ubG93ZXJPcmRlclVuaXRzKS5wbHVzKGR1cmF0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZHVyYXRpb247XG4gIH1cbn1cblxuY29uc3QgbnVtYmVyaW5nU3lzdGVtcyA9IHtcbiAgYXJhYjogXCJbXFx1MDY2MC1cXHUwNjY5XVwiLFxuICBhcmFiZXh0OiBcIltcXHUwNkYwLVxcdTA2RjldXCIsXG4gIGJhbGk6IFwiW1xcdTFCNTAtXFx1MUI1OV1cIixcbiAgYmVuZzogXCJbXFx1MDlFNi1cXHUwOUVGXVwiLFxuICBkZXZhOiBcIltcXHUwOTY2LVxcdTA5NkZdXCIsXG4gIGZ1bGx3aWRlOiBcIltcXHVGRjEwLVxcdUZGMTldXCIsXG4gIGd1anI6IFwiW1xcdTBBRTYtXFx1MEFFRl1cIixcbiAgaGFuaWRlYzogXCJb44CHfOS4gHzkuox85LiJfOWbm3zkupR85YWtfOS4g3zlhat85LmdXVwiLFxuICBraG1yOiBcIltcXHUxN0UwLVxcdTE3RTldXCIsXG4gIGtuZGE6IFwiW1xcdTBDRTYtXFx1MENFRl1cIixcbiAgbGFvbzogXCJbXFx1MEVEMC1cXHUwRUQ5XVwiLFxuICBsaW1iOiBcIltcXHUxOTQ2LVxcdTE5NEZdXCIsXG4gIG1seW06IFwiW1xcdTBENjYtXFx1MEQ2Rl1cIixcbiAgbW9uZzogXCJbXFx1MTgxMC1cXHUxODE5XVwiLFxuICBteW1yOiBcIltcXHUxMDQwLVxcdTEwNDldXCIsXG4gIG9yeWE6IFwiW1xcdTBCNjYtXFx1MEI2Rl1cIixcbiAgdGFtbGRlYzogXCJbXFx1MEJFNi1cXHUwQkVGXVwiLFxuICB0ZWx1OiBcIltcXHUwQzY2LVxcdTBDNkZdXCIsXG4gIHRoYWk6IFwiW1xcdTBFNTAtXFx1MEU1OV1cIixcbiAgdGlidDogXCJbXFx1MEYyMC1cXHUwRjI5XVwiLFxuICBsYXRuOiBcIlxcXFxkXCJcbn07XG5jb25zdCBudW1iZXJpbmdTeXN0ZW1zVVRGMTYgPSB7XG4gIGFyYWI6IFsxNjMyLCAxNjQxXSxcbiAgYXJhYmV4dDogWzE3NzYsIDE3ODVdLFxuICBiYWxpOiBbNjk5MiwgNzAwMV0sXG4gIGJlbmc6IFsyNTM0LCAyNTQzXSxcbiAgZGV2YTogWzI0MDYsIDI0MTVdLFxuICBmdWxsd2lkZTogWzY1Mjk2LCA2NTMwM10sXG4gIGd1anI6IFsyNzkwLCAyNzk5XSxcbiAga2htcjogWzYxMTIsIDYxMjFdLFxuICBrbmRhOiBbMzMwMiwgMzMxMV0sXG4gIGxhb286IFszNzkyLCAzODAxXSxcbiAgbGltYjogWzY0NzAsIDY0NzldLFxuICBtbHltOiBbMzQzMCwgMzQzOV0sXG4gIG1vbmc6IFs2MTYwLCA2MTY5XSxcbiAgbXltcjogWzQxNjAsIDQxNjldLFxuICBvcnlhOiBbMjkxOCwgMjkyN10sXG4gIHRhbWxkZWM6IFszMDQ2LCAzMDU1XSxcbiAgdGVsdTogWzMxNzQsIDMxODNdLFxuICB0aGFpOiBbMzY2NCwgMzY3M10sXG4gIHRpYnQ6IFszODcyLCAzODgxXVxufTtcbmNvbnN0IGhhbmlkZWNDaGFycyA9IG51bWJlcmluZ1N5c3RlbXMuaGFuaWRlYy5yZXBsYWNlKC9bXFxbfFxcXV0vZywgXCJcIikuc3BsaXQoXCJcIik7XG5mdW5jdGlvbiBwYXJzZURpZ2l0cyhzdHIpIHtcbiAgbGV0IHZhbHVlID0gcGFyc2VJbnQoc3RyLCAxMCk7XG5cbiAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgIHZhbHVlID0gXCJcIjtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgIGlmIChzdHJbaV0uc2VhcmNoKG51bWJlcmluZ1N5c3RlbXMuaGFuaWRlYykgIT09IC0xKSB7XG4gICAgICAgIHZhbHVlICs9IGhhbmlkZWNDaGFycy5pbmRleE9mKHN0cltpXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBudW1iZXJpbmdTeXN0ZW1zVVRGMTYpIHtcbiAgICAgICAgICBjb25zdCBbbWluLCBtYXhdID0gbnVtYmVyaW5nU3lzdGVtc1VURjE2W2tleV07XG5cbiAgICAgICAgICBpZiAoY29kZSA+PSBtaW4gJiYgY29kZSA8PSBtYXgpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IGNvZGUgLSBtaW47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5mdW5jdGlvbiBkaWdpdFJlZ2V4KHtcbiAgbnVtYmVyaW5nU3lzdGVtXG59LCBhcHBlbmQgPSBcIlwiKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKGAke251bWJlcmluZ1N5c3RlbXNbbnVtYmVyaW5nU3lzdGVtIHx8IFwibGF0blwiXX0ke2FwcGVuZH1gKTtcbn1cblxuY29uc3QgTUlTU0lOR19GVFAgPSBcIm1pc3NpbmcgSW50bC5EYXRlVGltZUZvcm1hdC5mb3JtYXRUb1BhcnRzIHN1cHBvcnRcIjtcblxuZnVuY3Rpb24gaW50VW5pdChyZWdleCwgcG9zdCA9IGkgPT4gaSkge1xuICByZXR1cm4ge1xuICAgIHJlZ2V4LFxuICAgIGRlc2VyOiAoW3NdKSA9PiBwb3N0KHBhcnNlRGlnaXRzKHMpKVxuICB9O1xufVxuXG5jb25zdCBOQlNQID0gU3RyaW5nLmZyb21DaGFyQ29kZSgxNjApO1xuY29uc3Qgc3BhY2VPck5CU1AgPSBgWyAke05CU1B9XWA7XG5jb25zdCBzcGFjZU9yTkJTUFJlZ0V4cCA9IG5ldyBSZWdFeHAoc3BhY2VPck5CU1AsIFwiZ1wiKTtcblxuZnVuY3Rpb24gZml4TGlzdFJlZ2V4KHMpIHtcbiAgLy8gbWFrZSBkb3RzIG9wdGlvbmFsIGFuZCBhbHNvIG1ha2UgdGhlbSBsaXRlcmFsXG4gIC8vIG1ha2Ugc3BhY2UgYW5kIG5vbiBicmVha2FibGUgc3BhY2UgY2hhcmFjdGVycyBpbnRlcmNoYW5nZWFibGVcbiAgcmV0dXJuIHMucmVwbGFjZSgvXFwuL2csIFwiXFxcXC4/XCIpLnJlcGxhY2Uoc3BhY2VPck5CU1BSZWdFeHAsIHNwYWNlT3JOQlNQKTtcbn1cblxuZnVuY3Rpb24gc3RyaXBJbnNlbnNpdGl2aXRpZXMocykge1xuICByZXR1cm4gcy5yZXBsYWNlKC9cXC4vZywgXCJcIikgLy8gaWdub3JlIGRvdHMgdGhhdCB3ZXJlIG1hZGUgb3B0aW9uYWxcbiAgLnJlcGxhY2Uoc3BhY2VPck5CU1BSZWdFeHAsIFwiIFwiKSAvLyBpbnRlcmNoYW5nZSBzcGFjZSBhbmQgbmJzcFxuICAudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gb25lT2Yoc3RyaW5ncywgc3RhcnRJbmRleCkge1xuICBpZiAoc3RyaW5ncyA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICByZWdleDogUmVnRXhwKHN0cmluZ3MubWFwKGZpeExpc3RSZWdleCkuam9pbihcInxcIikpLFxuICAgICAgZGVzZXI6IChbc10pID0+IHN0cmluZ3MuZmluZEluZGV4KGkgPT4gc3RyaXBJbnNlbnNpdGl2aXRpZXMocykgPT09IHN0cmlwSW5zZW5zaXRpdml0aWVzKGkpKSArIHN0YXJ0SW5kZXhcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIG9mZnNldChyZWdleCwgZ3JvdXBzKSB7XG4gIHJldHVybiB7XG4gICAgcmVnZXgsXG4gICAgZGVzZXI6IChbLCBoLCBtXSkgPT4gc2lnbmVkT2Zmc2V0KGgsIG0pLFxuICAgIGdyb3Vwc1xuICB9O1xufVxuXG5mdW5jdGlvbiBzaW1wbGUocmVnZXgpIHtcbiAgcmV0dXJuIHtcbiAgICByZWdleCxcbiAgICBkZXNlcjogKFtzXSkgPT4gc1xuICB9O1xufVxuXG5mdW5jdGlvbiBlc2NhcGVUb2tlbih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUucmVwbGFjZSgvW1xcLVxcW1xcXXt9KCkqKz8uLFxcXFxcXF4kfCNcXHNdL2csIFwiXFxcXCQmXCIpO1xufVxuXG5mdW5jdGlvbiB1bml0Rm9yVG9rZW4odG9rZW4sIGxvYykge1xuICBjb25zdCBvbmUgPSBkaWdpdFJlZ2V4KGxvYyksXG4gICAgICAgIHR3byA9IGRpZ2l0UmVnZXgobG9jLCBcInsyfVwiKSxcbiAgICAgICAgdGhyZWUgPSBkaWdpdFJlZ2V4KGxvYywgXCJ7M31cIiksXG4gICAgICAgIGZvdXIgPSBkaWdpdFJlZ2V4KGxvYywgXCJ7NH1cIiksXG4gICAgICAgIHNpeCA9IGRpZ2l0UmVnZXgobG9jLCBcIns2fVwiKSxcbiAgICAgICAgb25lT3JUd28gPSBkaWdpdFJlZ2V4KGxvYywgXCJ7MSwyfVwiKSxcbiAgICAgICAgb25lVG9UaHJlZSA9IGRpZ2l0UmVnZXgobG9jLCBcInsxLDN9XCIpLFxuICAgICAgICBvbmVUb1NpeCA9IGRpZ2l0UmVnZXgobG9jLCBcInsxLDZ9XCIpLFxuICAgICAgICBvbmVUb05pbmUgPSBkaWdpdFJlZ2V4KGxvYywgXCJ7MSw5fVwiKSxcbiAgICAgICAgdHdvVG9Gb3VyID0gZGlnaXRSZWdleChsb2MsIFwiezIsNH1cIiksXG4gICAgICAgIGZvdXJUb1NpeCA9IGRpZ2l0UmVnZXgobG9jLCBcIns0LDZ9XCIpLFxuICAgICAgICBsaXRlcmFsID0gdCA9PiAoe1xuICAgIHJlZ2V4OiBSZWdFeHAoZXNjYXBlVG9rZW4odC52YWwpKSxcbiAgICBkZXNlcjogKFtzXSkgPT4gcyxcbiAgICBsaXRlcmFsOiB0cnVlXG4gIH0pLFxuICAgICAgICB1bml0YXRlID0gdCA9PiB7XG4gICAgaWYgKHRva2VuLmxpdGVyYWwpIHtcbiAgICAgIHJldHVybiBsaXRlcmFsKHQpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodC52YWwpIHtcbiAgICAgIC8vIGVyYVxuICAgICAgY2FzZSBcIkdcIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5lcmFzKFwic2hvcnRcIiwgZmFsc2UpLCAwKTtcblxuICAgICAgY2FzZSBcIkdHXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2MuZXJhcyhcImxvbmdcIiwgZmFsc2UpLCAwKTtcbiAgICAgIC8vIHllYXJzXG5cbiAgICAgIGNhc2UgXCJ5XCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZVRvU2l4KTtcblxuICAgICAgY2FzZSBcInl5XCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3b1RvRm91ciwgdW50cnVuY2F0ZVllYXIpO1xuXG4gICAgICBjYXNlIFwieXl5eVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChmb3VyKTtcblxuICAgICAgY2FzZSBcInl5eXl5XCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KGZvdXJUb1NpeCk7XG5cbiAgICAgIGNhc2UgXCJ5eXl5eXlcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQoc2l4KTtcbiAgICAgIC8vIG1vbnRoc1xuXG4gICAgICBjYXNlIFwiTVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG5cbiAgICAgIGNhc2UgXCJNTVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuXG4gICAgICBjYXNlIFwiTU1NXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2MubW9udGhzKFwic2hvcnRcIiwgdHJ1ZSwgZmFsc2UpLCAxKTtcblxuICAgICAgY2FzZSBcIk1NTU1cIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoXCJsb25nXCIsIHRydWUsIGZhbHNlKSwgMSk7XG5cbiAgICAgIGNhc2UgXCJMXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcblxuICAgICAgY2FzZSBcIkxMXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG5cbiAgICAgIGNhc2UgXCJMTExcIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoXCJzaG9ydFwiLCBmYWxzZSwgZmFsc2UpLCAxKTtcblxuICAgICAgY2FzZSBcIkxMTExcIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoXCJsb25nXCIsIGZhbHNlLCBmYWxzZSksIDEpO1xuICAgICAgLy8gZGF0ZXNcblxuICAgICAgY2FzZSBcImRcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuXG4gICAgICBjYXNlIFwiZGRcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgIC8vIG9yZGluYWxzXG5cbiAgICAgIGNhc2UgXCJvXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZVRvVGhyZWUpO1xuXG4gICAgICBjYXNlIFwib29vXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHRocmVlKTtcbiAgICAgIC8vIHRpbWVcblxuICAgICAgY2FzZSBcIkhIXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG5cbiAgICAgIGNhc2UgXCJIXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcblxuICAgICAgY2FzZSBcImhoXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG5cbiAgICAgIGNhc2UgXCJoXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcblxuICAgICAgY2FzZSBcIm1tXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG5cbiAgICAgIGNhc2UgXCJtXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcblxuICAgICAgY2FzZSBcInFcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuXG4gICAgICBjYXNlIFwicXFcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcblxuICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuXG4gICAgICBjYXNlIFwic3NcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcblxuICAgICAgY2FzZSBcIlNcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lVG9UaHJlZSk7XG5cbiAgICAgIGNhc2UgXCJTU1NcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodGhyZWUpO1xuXG4gICAgICBjYXNlIFwidVwiOlxuICAgICAgICByZXR1cm4gc2ltcGxlKG9uZVRvTmluZSk7XG5cbiAgICAgIGNhc2UgXCJ1dVwiOlxuICAgICAgICByZXR1cm4gc2ltcGxlKG9uZU9yVHdvKTtcblxuICAgICAgY2FzZSBcInV1dVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmUpO1xuICAgICAgLy8gbWVyaWRpZW1cblxuICAgICAgY2FzZSBcImFcIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tZXJpZGllbXMoKSwgMCk7XG4gICAgICAvLyB3ZWVrWWVhciAoaylcblxuICAgICAgY2FzZSBcImtra2tcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQoZm91cik7XG5cbiAgICAgIGNhc2UgXCJra1wiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d29Ub0ZvdXIsIHVudHJ1bmNhdGVZZWFyKTtcbiAgICAgIC8vIHdlZWtOdW1iZXIgKFcpXG5cbiAgICAgIGNhc2UgXCJXXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcblxuICAgICAgY2FzZSBcIldXXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG4gICAgICAvLyB3ZWVrZGF5c1xuXG4gICAgICBjYXNlIFwiRVwiOlxuICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lKTtcblxuICAgICAgY2FzZSBcIkVFRVwiOlxuICAgICAgICByZXR1cm4gb25lT2YobG9jLndlZWtkYXlzKFwic2hvcnRcIiwgZmFsc2UsIGZhbHNlKSwgMSk7XG5cbiAgICAgIGNhc2UgXCJFRUVFXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoXCJsb25nXCIsIGZhbHNlLCBmYWxzZSksIDEpO1xuXG4gICAgICBjYXNlIFwiY2NjXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoXCJzaG9ydFwiLCB0cnVlLCBmYWxzZSksIDEpO1xuXG4gICAgICBjYXNlIFwiY2NjY1wiOlxuICAgICAgICByZXR1cm4gb25lT2YobG9jLndlZWtkYXlzKFwibG9uZ1wiLCB0cnVlLCBmYWxzZSksIDEpO1xuICAgICAgLy8gb2Zmc2V0L3pvbmVcblxuICAgICAgY2FzZSBcIlpcIjpcbiAgICAgIGNhc2UgXCJaWlwiOlxuICAgICAgICByZXR1cm4gb2Zmc2V0KG5ldyBSZWdFeHAoYChbKy1dJHtvbmVPclR3by5zb3VyY2V9KSg/OjooJHt0d28uc291cmNlfSkpP2ApLCAyKTtcblxuICAgICAgY2FzZSBcIlpaWlwiOlxuICAgICAgICByZXR1cm4gb2Zmc2V0KG5ldyBSZWdFeHAoYChbKy1dJHtvbmVPclR3by5zb3VyY2V9KSgke3R3by5zb3VyY2V9KT9gKSwgMik7XG4gICAgICAvLyB3ZSBkb24ndCBzdXBwb3J0IFpaWlogKFBTVCkgb3IgWlpaWlogKFBhY2lmaWMgU3RhbmRhcmQgVGltZSkgaW4gcGFyc2luZ1xuICAgICAgLy8gYmVjYXVzZSB3ZSBkb24ndCBoYXZlIGFueSB3YXkgdG8gZmlndXJlIG91dCB3aGF0IHRoZXkgYXJlXG5cbiAgICAgIGNhc2UgXCJ6XCI6XG4gICAgICAgIHJldHVybiBzaW1wbGUoL1thLXpfKy0vXXsxLDI1Nn0/L2kpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbGl0ZXJhbCh0KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdW5pdCA9IHVuaXRhdGUodG9rZW4pIHx8IHtcbiAgICBpbnZhbGlkUmVhc29uOiBNSVNTSU5HX0ZUUFxuICB9O1xuICB1bml0LnRva2VuID0gdG9rZW47XG4gIHJldHVybiB1bml0O1xufVxuXG5jb25zdCBwYXJ0VHlwZVN0eWxlVG9Ub2tlblZhbCA9IHtcbiAgeWVhcjoge1xuICAgIFwiMi1kaWdpdFwiOiBcInl5XCIsXG4gICAgbnVtZXJpYzogXCJ5eXl5eVwiXG4gIH0sXG4gIG1vbnRoOiB7XG4gICAgbnVtZXJpYzogXCJNXCIsXG4gICAgXCIyLWRpZ2l0XCI6IFwiTU1cIixcbiAgICBzaG9ydDogXCJNTU1cIixcbiAgICBsb25nOiBcIk1NTU1cIlxuICB9LFxuICBkYXk6IHtcbiAgICBudW1lcmljOiBcImRcIixcbiAgICBcIjItZGlnaXRcIjogXCJkZFwiXG4gIH0sXG4gIHdlZWtkYXk6IHtcbiAgICBzaG9ydDogXCJFRUVcIixcbiAgICBsb25nOiBcIkVFRUVcIlxuICB9LFxuICBkYXlwZXJpb2Q6IFwiYVwiLFxuICBkYXlQZXJpb2Q6IFwiYVwiLFxuICBob3VyOiB7XG4gICAgbnVtZXJpYzogXCJoXCIsXG4gICAgXCIyLWRpZ2l0XCI6IFwiaGhcIlxuICB9LFxuICBtaW51dGU6IHtcbiAgICBudW1lcmljOiBcIm1cIixcbiAgICBcIjItZGlnaXRcIjogXCJtbVwiXG4gIH0sXG4gIHNlY29uZDoge1xuICAgIG51bWVyaWM6IFwic1wiLFxuICAgIFwiMi1kaWdpdFwiOiBcInNzXCJcbiAgfSxcbiAgdGltZVpvbmVOYW1lOiB7XG4gICAgbG9uZzogXCJaWlpaWlwiLFxuICAgIHNob3J0OiBcIlpaWlwiXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHRva2VuRm9yUGFydChwYXJ0LCBsb2NhbGUsIGZvcm1hdE9wdHMpIHtcbiAgY29uc3Qge1xuICAgIHR5cGUsXG4gICAgdmFsdWVcbiAgfSA9IHBhcnQ7XG5cbiAgaWYgKHR5cGUgPT09IFwibGl0ZXJhbFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxpdGVyYWw6IHRydWUsXG4gICAgICB2YWw6IHZhbHVlXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IHN0eWxlID0gZm9ybWF0T3B0c1t0eXBlXTtcbiAgbGV0IHZhbCA9IHBhcnRUeXBlU3R5bGVUb1Rva2VuVmFsW3R5cGVdO1xuXG4gIGlmICh0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiKSB7XG4gICAgdmFsID0gdmFsW3N0eWxlXTtcbiAgfVxuXG4gIGlmICh2YWwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGl0ZXJhbDogZmFsc2UsXG4gICAgICB2YWxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gYnVpbGRSZWdleCh1bml0cykge1xuICBjb25zdCByZSA9IHVuaXRzLm1hcCh1ID0+IHUucmVnZXgpLnJlZHVjZSgoZiwgcikgPT4gYCR7Zn0oJHtyLnNvdXJjZX0pYCwgXCJcIik7XG4gIHJldHVybiBbYF4ke3JlfSRgLCB1bml0c107XG59XG5cbmZ1bmN0aW9uIG1hdGNoKGlucHV0LCByZWdleCwgaGFuZGxlcnMpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IGlucHV0Lm1hdGNoKHJlZ2V4KTtcblxuICBpZiAobWF0Y2hlcykge1xuICAgIGNvbnN0IGFsbCA9IHt9O1xuICAgIGxldCBtYXRjaEluZGV4ID0gMTtcblxuICAgIGZvciAoY29uc3QgaSBpbiBoYW5kbGVycykge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5KGhhbmRsZXJzLCBpKSkge1xuICAgICAgICBjb25zdCBoID0gaGFuZGxlcnNbaV0sXG4gICAgICAgICAgICAgIGdyb3VwcyA9IGguZ3JvdXBzID8gaC5ncm91cHMgKyAxIDogMTtcblxuICAgICAgICBpZiAoIWgubGl0ZXJhbCAmJiBoLnRva2VuKSB7XG4gICAgICAgICAgYWxsW2gudG9rZW4udmFsWzBdXSA9IGguZGVzZXIobWF0Y2hlcy5zbGljZShtYXRjaEluZGV4LCBtYXRjaEluZGV4ICsgZ3JvdXBzKSk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXRjaEluZGV4ICs9IGdyb3VwcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gW21hdGNoZXMsIGFsbF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFttYXRjaGVzLCB7fV07XG4gIH1cbn1cblxuZnVuY3Rpb24gZGF0ZVRpbWVGcm9tTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIGNvbnN0IHRvRmllbGQgPSB0b2tlbiA9PiB7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSBcIlNcIjpcbiAgICAgICAgcmV0dXJuIFwibWlsbGlzZWNvbmRcIjtcblxuICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgcmV0dXJuIFwic2Vjb25kXCI7XG5cbiAgICAgIGNhc2UgXCJtXCI6XG4gICAgICAgIHJldHVybiBcIm1pbnV0ZVwiO1xuXG4gICAgICBjYXNlIFwiaFwiOlxuICAgICAgY2FzZSBcIkhcIjpcbiAgICAgICAgcmV0dXJuIFwiaG91clwiO1xuXG4gICAgICBjYXNlIFwiZFwiOlxuICAgICAgICByZXR1cm4gXCJkYXlcIjtcblxuICAgICAgY2FzZSBcIm9cIjpcbiAgICAgICAgcmV0dXJuIFwib3JkaW5hbFwiO1xuXG4gICAgICBjYXNlIFwiTFwiOlxuICAgICAgY2FzZSBcIk1cIjpcbiAgICAgICAgcmV0dXJuIFwibW9udGhcIjtcblxuICAgICAgY2FzZSBcInlcIjpcbiAgICAgICAgcmV0dXJuIFwieWVhclwiO1xuXG4gICAgICBjYXNlIFwiRVwiOlxuICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgcmV0dXJuIFwid2Vla2RheVwiO1xuXG4gICAgICBjYXNlIFwiV1wiOlxuICAgICAgICByZXR1cm4gXCJ3ZWVrTnVtYmVyXCI7XG5cbiAgICAgIGNhc2UgXCJrXCI6XG4gICAgICAgIHJldHVybiBcIndlZWtZZWFyXCI7XG5cbiAgICAgIGNhc2UgXCJxXCI6XG4gICAgICAgIHJldHVybiBcInF1YXJ0ZXJcIjtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuXG4gIGxldCB6b25lID0gbnVsbDtcbiAgbGV0IHNwZWNpZmljT2Zmc2V0O1xuXG4gIGlmICghaXNVbmRlZmluZWQobWF0Y2hlcy56KSkge1xuICAgIHpvbmUgPSBJQU5BWm9uZS5jcmVhdGUobWF0Y2hlcy56KTtcbiAgfVxuXG4gIGlmICghaXNVbmRlZmluZWQobWF0Y2hlcy5aKSkge1xuICAgIGlmICghem9uZSkge1xuICAgICAgem9uZSA9IG5ldyBGaXhlZE9mZnNldFpvbmUobWF0Y2hlcy5aKTtcbiAgICB9XG5cbiAgICBzcGVjaWZpY09mZnNldCA9IG1hdGNoZXMuWjtcbiAgfVxuXG4gIGlmICghaXNVbmRlZmluZWQobWF0Y2hlcy5xKSkge1xuICAgIG1hdGNoZXMuTSA9IChtYXRjaGVzLnEgLSAxKSAqIDMgKyAxO1xuICB9XG5cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLmgpKSB7XG4gICAgaWYgKG1hdGNoZXMuaCA8IDEyICYmIG1hdGNoZXMuYSA9PT0gMSkge1xuICAgICAgbWF0Y2hlcy5oICs9IDEyO1xuICAgIH0gZWxzZSBpZiAobWF0Y2hlcy5oID09PSAxMiAmJiBtYXRjaGVzLmEgPT09IDApIHtcbiAgICAgIG1hdGNoZXMuaCA9IDA7XG4gICAgfVxuICB9XG5cbiAgaWYgKG1hdGNoZXMuRyA9PT0gMCAmJiBtYXRjaGVzLnkpIHtcbiAgICBtYXRjaGVzLnkgPSAtbWF0Y2hlcy55O1xuICB9XG5cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLnUpKSB7XG4gICAgbWF0Y2hlcy5TID0gcGFyc2VNaWxsaXMobWF0Y2hlcy51KTtcbiAgfVxuXG4gIGNvbnN0IHZhbHMgPSBPYmplY3Qua2V5cyhtYXRjaGVzKS5yZWR1Y2UoKHIsIGspID0+IHtcbiAgICBjb25zdCBmID0gdG9GaWVsZChrKTtcblxuICAgIGlmIChmKSB7XG4gICAgICByW2ZdID0gbWF0Y2hlc1trXTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfSwge30pO1xuICByZXR1cm4gW3ZhbHMsIHpvbmUsIHNwZWNpZmljT2Zmc2V0XTtcbn1cblxubGV0IGR1bW15RGF0ZVRpbWVDYWNoZSA9IG51bGw7XG5cbmZ1bmN0aW9uIGdldER1bW15RGF0ZVRpbWUoKSB7XG4gIGlmICghZHVtbXlEYXRlVGltZUNhY2hlKSB7XG4gICAgZHVtbXlEYXRlVGltZUNhY2hlID0gRGF0ZVRpbWUuZnJvbU1pbGxpcygxNTU1NTU1NTU1NTU1KTtcbiAgfVxuXG4gIHJldHVybiBkdW1teURhdGVUaW1lQ2FjaGU7XG59XG5cbmZ1bmN0aW9uIG1heWJlRXhwYW5kTWFjcm9Ub2tlbih0b2tlbiwgbG9jYWxlKSB7XG4gIGlmICh0b2tlbi5saXRlcmFsKSB7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9XG5cbiAgY29uc3QgZm9ybWF0T3B0cyA9IEZvcm1hdHRlci5tYWNyb1Rva2VuVG9Gb3JtYXRPcHRzKHRva2VuLnZhbCk7XG4gIGNvbnN0IHRva2VucyA9IGZvcm1hdE9wdHNUb1Rva2Vucyhmb3JtYXRPcHRzLCBsb2NhbGUpO1xuXG4gIGlmICh0b2tlbnMgPT0gbnVsbCB8fCB0b2tlbnMuaW5jbHVkZXModW5kZWZpbmVkKSkge1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnM7XG59XG5cbmZ1bmN0aW9uIGV4cGFuZE1hY3JvVG9rZW5zKHRva2VucywgbG9jYWxlKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0KC4uLnRva2Vucy5tYXAodCA9PiBtYXliZUV4cGFuZE1hY3JvVG9rZW4odCwgbG9jYWxlKSkpO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gZXhwbGFpbkZyb21Ub2tlbnMobG9jYWxlLCBpbnB1dCwgZm9ybWF0KSB7XG4gIGNvbnN0IHRva2VucyA9IGV4cGFuZE1hY3JvVG9rZW5zKEZvcm1hdHRlci5wYXJzZUZvcm1hdChmb3JtYXQpLCBsb2NhbGUpLFxuICAgICAgICB1bml0cyA9IHRva2Vucy5tYXAodCA9PiB1bml0Rm9yVG9rZW4odCwgbG9jYWxlKSksXG4gICAgICAgIGRpc3F1YWxpZnlpbmdVbml0ID0gdW5pdHMuZmluZCh0ID0+IHQuaW52YWxpZFJlYXNvbik7XG5cbiAgaWYgKGRpc3F1YWxpZnlpbmdVbml0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlucHV0LFxuICAgICAgdG9rZW5zLFxuICAgICAgaW52YWxpZFJlYXNvbjogZGlzcXVhbGlmeWluZ1VuaXQuaW52YWxpZFJlYXNvblxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgW3JlZ2V4U3RyaW5nLCBoYW5kbGVyc10gPSBidWlsZFJlZ2V4KHVuaXRzKSxcbiAgICAgICAgICByZWdleCA9IFJlZ0V4cChyZWdleFN0cmluZywgXCJpXCIpLFxuICAgICAgICAgIFtyYXdNYXRjaGVzLCBtYXRjaGVzXSA9IG1hdGNoKGlucHV0LCByZWdleCwgaGFuZGxlcnMpLFxuICAgICAgICAgIFtyZXN1bHQsIHpvbmUsIHNwZWNpZmljT2Zmc2V0XSA9IG1hdGNoZXMgPyBkYXRlVGltZUZyb21NYXRjaGVzKG1hdGNoZXMpIDogW251bGwsIG51bGwsIHVuZGVmaW5lZF07XG5cbiAgICBpZiAoaGFzT3duUHJvcGVydHkobWF0Y2hlcywgXCJhXCIpICYmIGhhc093blByb3BlcnR5KG1hdGNoZXMsIFwiSFwiKSkge1xuICAgICAgdGhyb3cgbmV3IENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yKFwiQ2FuJ3QgaW5jbHVkZSBtZXJpZGllbSB3aGVuIHNwZWNpZnlpbmcgMjQtaG91ciBmb3JtYXRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlucHV0LFxuICAgICAgdG9rZW5zLFxuICAgICAgcmVnZXgsXG4gICAgICByYXdNYXRjaGVzLFxuICAgICAgbWF0Y2hlcyxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHpvbmUsXG4gICAgICBzcGVjaWZpY09mZnNldFxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIHBhcnNlRnJvbVRva2Vucyhsb2NhbGUsIGlucHV0LCBmb3JtYXQpIHtcbiAgY29uc3Qge1xuICAgIHJlc3VsdCxcbiAgICB6b25lLFxuICAgIHNwZWNpZmljT2Zmc2V0LFxuICAgIGludmFsaWRSZWFzb25cbiAgfSA9IGV4cGxhaW5Gcm9tVG9rZW5zKGxvY2FsZSwgaW5wdXQsIGZvcm1hdCk7XG4gIHJldHVybiBbcmVzdWx0LCB6b25lLCBzcGVjaWZpY09mZnNldCwgaW52YWxpZFJlYXNvbl07XG59XG5mdW5jdGlvbiBmb3JtYXRPcHRzVG9Ub2tlbnMoZm9ybWF0T3B0cywgbG9jYWxlKSB7XG4gIGlmICghZm9ybWF0T3B0cykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgZm9ybWF0dGVyID0gRm9ybWF0dGVyLmNyZWF0ZShsb2NhbGUsIGZvcm1hdE9wdHMpO1xuICBjb25zdCBwYXJ0cyA9IGZvcm1hdHRlci5mb3JtYXREYXRlVGltZVBhcnRzKGdldER1bW15RGF0ZVRpbWUoKSk7XG4gIHJldHVybiBwYXJ0cy5tYXAocCA9PiB0b2tlbkZvclBhcnQocCwgbG9jYWxlLCBmb3JtYXRPcHRzKSk7XG59XG5cbmNvbnN0IG5vbkxlYXBMYWRkZXIgPSBbMCwgMzEsIDU5LCA5MCwgMTIwLCAxNTEsIDE4MSwgMjEyLCAyNDMsIDI3MywgMzA0LCAzMzRdLFxuICAgICAgbGVhcExhZGRlciA9IFswLCAzMSwgNjAsIDkxLCAxMjEsIDE1MiwgMTgyLCAyMTMsIDI0NCwgMjc0LCAzMDUsIDMzNV07XG5cbmZ1bmN0aW9uIHVuaXRPdXRPZlJhbmdlKHVuaXQsIHZhbHVlKSB7XG4gIHJldHVybiBuZXcgSW52YWxpZChcInVuaXQgb3V0IG9mIHJhbmdlXCIsIGB5b3Ugc3BlY2lmaWVkICR7dmFsdWV9IChvZiB0eXBlICR7dHlwZW9mIHZhbHVlfSkgYXMgYSAke3VuaXR9LCB3aGljaCBpcyBpbnZhbGlkYCk7XG59XG5cbmZ1bmN0aW9uIGRheU9mV2Vlayh5ZWFyLCBtb250aCwgZGF5KSB7XG4gIGNvbnN0IGQgPSBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCAtIDEsIGRheSkpO1xuXG4gIGlmICh5ZWFyIDwgMTAwICYmIHllYXIgPj0gMCkge1xuICAgIGQuc2V0VVRDRnVsbFllYXIoZC5nZXRVVENGdWxsWWVhcigpIC0gMTkwMCk7XG4gIH1cblxuICBjb25zdCBqcyA9IGQuZ2V0VVRDRGF5KCk7XG4gIHJldHVybiBqcyA9PT0gMCA/IDcgOiBqcztcbn1cblxuZnVuY3Rpb24gY29tcHV0ZU9yZGluYWwoeWVhciwgbW9udGgsIGRheSkge1xuICByZXR1cm4gZGF5ICsgKGlzTGVhcFllYXIoeWVhcikgPyBsZWFwTGFkZGVyIDogbm9uTGVhcExhZGRlcilbbW9udGggLSAxXTtcbn1cblxuZnVuY3Rpb24gdW5jb21wdXRlT3JkaW5hbCh5ZWFyLCBvcmRpbmFsKSB7XG4gIGNvbnN0IHRhYmxlID0gaXNMZWFwWWVhcih5ZWFyKSA/IGxlYXBMYWRkZXIgOiBub25MZWFwTGFkZGVyLFxuICAgICAgICBtb250aDAgPSB0YWJsZS5maW5kSW5kZXgoaSA9PiBpIDwgb3JkaW5hbCksXG4gICAgICAgIGRheSA9IG9yZGluYWwgLSB0YWJsZVttb250aDBdO1xuICByZXR1cm4ge1xuICAgIG1vbnRoOiBtb250aDAgKyAxLFxuICAgIGRheVxuICB9O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gZ3JlZ29yaWFuVG9XZWVrKGdyZWdPYmopIHtcbiAgY29uc3Qge1xuICAgIHllYXIsXG4gICAgbW9udGgsXG4gICAgZGF5XG4gIH0gPSBncmVnT2JqLFxuICAgICAgICBvcmRpbmFsID0gY29tcHV0ZU9yZGluYWwoeWVhciwgbW9udGgsIGRheSksXG4gICAgICAgIHdlZWtkYXkgPSBkYXlPZldlZWsoeWVhciwgbW9udGgsIGRheSk7XG4gIGxldCB3ZWVrTnVtYmVyID0gTWF0aC5mbG9vcigob3JkaW5hbCAtIHdlZWtkYXkgKyAxMCkgLyA3KSxcbiAgICAgIHdlZWtZZWFyO1xuXG4gIGlmICh3ZWVrTnVtYmVyIDwgMSkge1xuICAgIHdlZWtZZWFyID0geWVhciAtIDE7XG4gICAgd2Vla051bWJlciA9IHdlZWtzSW5XZWVrWWVhcih3ZWVrWWVhcik7XG4gIH0gZWxzZSBpZiAod2Vla051bWJlciA+IHdlZWtzSW5XZWVrWWVhcih5ZWFyKSkge1xuICAgIHdlZWtZZWFyID0geWVhciArIDE7XG4gICAgd2Vla051bWJlciA9IDE7XG4gIH0gZWxzZSB7XG4gICAgd2Vla1llYXIgPSB5ZWFyO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3ZWVrWWVhcixcbiAgICB3ZWVrTnVtYmVyLFxuICAgIHdlZWtkYXksXG4gICAgLi4udGltZU9iamVjdChncmVnT2JqKVxuICB9O1xufVxuZnVuY3Rpb24gd2Vla1RvR3JlZ29yaWFuKHdlZWtEYXRhKSB7XG4gIGNvbnN0IHtcbiAgICB3ZWVrWWVhcixcbiAgICB3ZWVrTnVtYmVyLFxuICAgIHdlZWtkYXlcbiAgfSA9IHdlZWtEYXRhLFxuICAgICAgICB3ZWVrZGF5T2ZKYW40ID0gZGF5T2ZXZWVrKHdlZWtZZWFyLCAxLCA0KSxcbiAgICAgICAgeWVhckluRGF5cyA9IGRheXNJblllYXIod2Vla1llYXIpO1xuICBsZXQgb3JkaW5hbCA9IHdlZWtOdW1iZXIgKiA3ICsgd2Vla2RheSAtIHdlZWtkYXlPZkphbjQgLSAzLFxuICAgICAgeWVhcjtcblxuICBpZiAob3JkaW5hbCA8IDEpIHtcbiAgICB5ZWFyID0gd2Vla1llYXIgLSAxO1xuICAgIG9yZGluYWwgKz0gZGF5c0luWWVhcih5ZWFyKTtcbiAgfSBlbHNlIGlmIChvcmRpbmFsID4geWVhckluRGF5cykge1xuICAgIHllYXIgPSB3ZWVrWWVhciArIDE7XG4gICAgb3JkaW5hbCAtPSBkYXlzSW5ZZWFyKHdlZWtZZWFyKTtcbiAgfSBlbHNlIHtcbiAgICB5ZWFyID0gd2Vla1llYXI7XG4gIH1cblxuICBjb25zdCB7XG4gICAgbW9udGgsXG4gICAgZGF5XG4gIH0gPSB1bmNvbXB1dGVPcmRpbmFsKHllYXIsIG9yZGluYWwpO1xuICByZXR1cm4ge1xuICAgIHllYXIsXG4gICAgbW9udGgsXG4gICAgZGF5LFxuICAgIC4uLnRpbWVPYmplY3Qod2Vla0RhdGEpXG4gIH07XG59XG5mdW5jdGlvbiBncmVnb3JpYW5Ub09yZGluYWwoZ3JlZ0RhdGEpIHtcbiAgY29uc3Qge1xuICAgIHllYXIsXG4gICAgbW9udGgsXG4gICAgZGF5XG4gIH0gPSBncmVnRGF0YTtcbiAgY29uc3Qgb3JkaW5hbCA9IGNvbXB1dGVPcmRpbmFsKHllYXIsIG1vbnRoLCBkYXkpO1xuICByZXR1cm4ge1xuICAgIHllYXIsXG4gICAgb3JkaW5hbCxcbiAgICAuLi50aW1lT2JqZWN0KGdyZWdEYXRhKVxuICB9O1xufVxuZnVuY3Rpb24gb3JkaW5hbFRvR3JlZ29yaWFuKG9yZGluYWxEYXRhKSB7XG4gIGNvbnN0IHtcbiAgICB5ZWFyLFxuICAgIG9yZGluYWxcbiAgfSA9IG9yZGluYWxEYXRhO1xuICBjb25zdCB7XG4gICAgbW9udGgsXG4gICAgZGF5XG4gIH0gPSB1bmNvbXB1dGVPcmRpbmFsKHllYXIsIG9yZGluYWwpO1xuICByZXR1cm4ge1xuICAgIHllYXIsXG4gICAgbW9udGgsXG4gICAgZGF5LFxuICAgIC4uLnRpbWVPYmplY3Qob3JkaW5hbERhdGEpXG4gIH07XG59XG5mdW5jdGlvbiBoYXNJbnZhbGlkV2Vla0RhdGEob2JqKSB7XG4gIGNvbnN0IHZhbGlkWWVhciA9IGlzSW50ZWdlcihvYmoud2Vla1llYXIpLFxuICAgICAgICB2YWxpZFdlZWsgPSBpbnRlZ2VyQmV0d2VlbihvYmoud2Vla051bWJlciwgMSwgd2Vla3NJbldlZWtZZWFyKG9iai53ZWVrWWVhcikpLFxuICAgICAgICB2YWxpZFdlZWtkYXkgPSBpbnRlZ2VyQmV0d2VlbihvYmoud2Vla2RheSwgMSwgNyk7XG5cbiAgaWYgKCF2YWxpZFllYXIpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJ3ZWVrWWVhclwiLCBvYmoud2Vla1llYXIpO1xuICB9IGVsc2UgaWYgKCF2YWxpZFdlZWspIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJ3ZWVrXCIsIG9iai53ZWVrKTtcbiAgfSBlbHNlIGlmICghdmFsaWRXZWVrZGF5KSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwid2Vla2RheVwiLCBvYmoud2Vla2RheSk7XG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBoYXNJbnZhbGlkT3JkaW5hbERhdGEob2JqKSB7XG4gIGNvbnN0IHZhbGlkWWVhciA9IGlzSW50ZWdlcihvYmoueWVhciksXG4gICAgICAgIHZhbGlkT3JkaW5hbCA9IGludGVnZXJCZXR3ZWVuKG9iai5vcmRpbmFsLCAxLCBkYXlzSW5ZZWFyKG9iai55ZWFyKSk7XG5cbiAgaWYgKCF2YWxpZFllYXIpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJ5ZWFyXCIsIG9iai55ZWFyKTtcbiAgfSBlbHNlIGlmICghdmFsaWRPcmRpbmFsKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwib3JkaW5hbFwiLCBvYmoub3JkaW5hbCk7XG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBoYXNJbnZhbGlkR3JlZ29yaWFuRGF0YShvYmopIHtcbiAgY29uc3QgdmFsaWRZZWFyID0gaXNJbnRlZ2VyKG9iai55ZWFyKSxcbiAgICAgICAgdmFsaWRNb250aCA9IGludGVnZXJCZXR3ZWVuKG9iai5tb250aCwgMSwgMTIpLFxuICAgICAgICB2YWxpZERheSA9IGludGVnZXJCZXR3ZWVuKG9iai5kYXksIDEsIGRheXNJbk1vbnRoKG9iai55ZWFyLCBvYmoubW9udGgpKTtcblxuICBpZiAoIXZhbGlkWWVhcikge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcInllYXJcIiwgb2JqLnllYXIpO1xuICB9IGVsc2UgaWYgKCF2YWxpZE1vbnRoKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwibW9udGhcIiwgb2JqLm1vbnRoKTtcbiAgfSBlbHNlIGlmICghdmFsaWREYXkpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJkYXlcIiwgb2JqLmRheSk7XG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBoYXNJbnZhbGlkVGltZURhdGEob2JqKSB7XG4gIGNvbnN0IHtcbiAgICBob3VyLFxuICAgIG1pbnV0ZSxcbiAgICBzZWNvbmQsXG4gICAgbWlsbGlzZWNvbmRcbiAgfSA9IG9iajtcbiAgY29uc3QgdmFsaWRIb3VyID0gaW50ZWdlckJldHdlZW4oaG91ciwgMCwgMjMpIHx8IGhvdXIgPT09IDI0ICYmIG1pbnV0ZSA9PT0gMCAmJiBzZWNvbmQgPT09IDAgJiYgbWlsbGlzZWNvbmQgPT09IDAsXG4gICAgICAgIHZhbGlkTWludXRlID0gaW50ZWdlckJldHdlZW4obWludXRlLCAwLCA1OSksXG4gICAgICAgIHZhbGlkU2Vjb25kID0gaW50ZWdlckJldHdlZW4oc2Vjb25kLCAwLCA1OSksXG4gICAgICAgIHZhbGlkTWlsbGlzZWNvbmQgPSBpbnRlZ2VyQmV0d2VlbihtaWxsaXNlY29uZCwgMCwgOTk5KTtcblxuICBpZiAoIXZhbGlkSG91cikge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcImhvdXJcIiwgaG91cik7XG4gIH0gZWxzZSBpZiAoIXZhbGlkTWludXRlKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwibWludXRlXCIsIG1pbnV0ZSk7XG4gIH0gZWxzZSBpZiAoIXZhbGlkU2Vjb25kKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwic2Vjb25kXCIsIHNlY29uZCk7XG4gIH0gZWxzZSBpZiAoIXZhbGlkTWlsbGlzZWNvbmQpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJtaWxsaXNlY29uZFwiLCBtaWxsaXNlY29uZCk7XG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XG59XG5cbmNvbnN0IElOVkFMSUQgPSBcIkludmFsaWQgRGF0ZVRpbWVcIjtcbmNvbnN0IE1BWF9EQVRFID0gOC42NGUxNTtcblxuZnVuY3Rpb24gdW5zdXBwb3J0ZWRab25lKHpvbmUpIHtcbiAgcmV0dXJuIG5ldyBJbnZhbGlkKFwidW5zdXBwb3J0ZWQgem9uZVwiLCBgdGhlIHpvbmUgXCIke3pvbmUubmFtZX1cIiBpcyBub3Qgc3VwcG9ydGVkYCk7XG59IC8vIHdlIGNhY2hlIHdlZWsgZGF0YSBvbiB0aGUgRFQgb2JqZWN0IGFuZCB0aGlzIGludGVybWVkaWF0ZXMgdGhlIGNhY2hlXG5cblxuZnVuY3Rpb24gcG9zc2libHlDYWNoZWRXZWVrRGF0YShkdCkge1xuICBpZiAoZHQud2Vla0RhdGEgPT09IG51bGwpIHtcbiAgICBkdC53ZWVrRGF0YSA9IGdyZWdvcmlhblRvV2VlayhkdC5jKTtcbiAgfVxuXG4gIHJldHVybiBkdC53ZWVrRGF0YTtcbn0gLy8gY2xvbmUgcmVhbGx5IG1lYW5zLCBcIm1ha2UgYSBuZXcgb2JqZWN0IHdpdGggdGhlc2UgbW9kaWZpY2F0aW9uc1wiLiBhbGwgXCJzZXR0ZXJzXCIgcmVhbGx5IHVzZSB0aGlzXG4vLyB0byBjcmVhdGUgYSBuZXcgb2JqZWN0IHdoaWxlIG9ubHkgY2hhbmdpbmcgc29tZSBvZiB0aGUgcHJvcGVydGllc1xuXG5cbmZ1bmN0aW9uIGNsb25lKGluc3QsIGFsdHMpIHtcbiAgY29uc3QgY3VycmVudCA9IHtcbiAgICB0czogaW5zdC50cyxcbiAgICB6b25lOiBpbnN0LnpvbmUsXG4gICAgYzogaW5zdC5jLFxuICAgIG86IGluc3QubyxcbiAgICBsb2M6IGluc3QubG9jLFxuICAgIGludmFsaWQ6IGluc3QuaW52YWxpZFxuICB9O1xuICByZXR1cm4gbmV3IERhdGVUaW1lKHsgLi4uY3VycmVudCxcbiAgICAuLi5hbHRzLFxuICAgIG9sZDogY3VycmVudFxuICB9KTtcbn0gLy8gZmluZCB0aGUgcmlnaHQgb2Zmc2V0IGEgZ2l2ZW4gbG9jYWwgdGltZS4gVGhlIG8gaW5wdXQgaXMgb3VyIGd1ZXNzLCB3aGljaCBkZXRlcm1pbmVzIHdoaWNoXG4vLyBvZmZzZXQgd2UnbGwgcGljayBpbiBhbWJpZ3VvdXMgY2FzZXMgKGUuZy4gdGhlcmUgYXJlIHR3byAzIEFNcyBiL2MgRmFsbGJhY2sgRFNUKVxuXG5cbmZ1bmN0aW9uIGZpeE9mZnNldChsb2NhbFRTLCBvLCB0eikge1xuICAvLyBPdXIgVVRDIHRpbWUgaXMganVzdCBhIGd1ZXNzIGJlY2F1c2Ugb3VyIG9mZnNldCBpcyBqdXN0IGEgZ3Vlc3NcbiAgbGV0IHV0Y0d1ZXNzID0gbG9jYWxUUyAtIG8gKiA2MCAqIDEwMDA7IC8vIFRlc3Qgd2hldGhlciB0aGUgem9uZSBtYXRjaGVzIHRoZSBvZmZzZXQgZm9yIHRoaXMgdHNcblxuICBjb25zdCBvMiA9IHR6Lm9mZnNldCh1dGNHdWVzcyk7IC8vIElmIHNvLCBvZmZzZXQgZGlkbid0IGNoYW5nZSBhbmQgd2UncmUgZG9uZVxuXG4gIGlmIChvID09PSBvMikge1xuICAgIHJldHVybiBbdXRjR3Vlc3MsIG9dO1xuICB9IC8vIElmIG5vdCwgY2hhbmdlIHRoZSB0cyBieSB0aGUgZGlmZmVyZW5jZSBpbiB0aGUgb2Zmc2V0XG5cblxuICB1dGNHdWVzcyAtPSAobzIgLSBvKSAqIDYwICogMTAwMDsgLy8gSWYgdGhhdCBnaXZlcyB1cyB0aGUgbG9jYWwgdGltZSB3ZSB3YW50LCB3ZSdyZSBkb25lXG5cbiAgY29uc3QgbzMgPSB0ei5vZmZzZXQodXRjR3Vlc3MpO1xuXG4gIGlmIChvMiA9PT0gbzMpIHtcbiAgICByZXR1cm4gW3V0Y0d1ZXNzLCBvMl07XG4gIH0gLy8gSWYgaXQncyBkaWZmZXJlbnQsIHdlJ3JlIGluIGEgaG9sZSB0aW1lLiBUaGUgb2Zmc2V0IGhhcyBjaGFuZ2VkLCBidXQgdGhlIHdlIGRvbid0IGFkanVzdCB0aGUgdGltZVxuXG5cbiAgcmV0dXJuIFtsb2NhbFRTIC0gTWF0aC5taW4obzIsIG8zKSAqIDYwICogMTAwMCwgTWF0aC5tYXgobzIsIG8zKV07XG59IC8vIGNvbnZlcnQgYW4gZXBvY2ggdGltZXN0YW1wIGludG8gYSBjYWxlbmRhciBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gb2Zmc2V0XG5cblxuZnVuY3Rpb24gdHNUb09iaih0cywgb2Zmc2V0KSB7XG4gIHRzICs9IG9mZnNldCAqIDYwICogMTAwMDtcbiAgY29uc3QgZCA9IG5ldyBEYXRlKHRzKTtcbiAgcmV0dXJuIHtcbiAgICB5ZWFyOiBkLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgbW9udGg6IGQuZ2V0VVRDTW9udGgoKSArIDEsXG4gICAgZGF5OiBkLmdldFVUQ0RhdGUoKSxcbiAgICBob3VyOiBkLmdldFVUQ0hvdXJzKCksXG4gICAgbWludXRlOiBkLmdldFVUQ01pbnV0ZXMoKSxcbiAgICBzZWNvbmQ6IGQuZ2V0VVRDU2Vjb25kcygpLFxuICAgIG1pbGxpc2Vjb25kOiBkLmdldFVUQ01pbGxpc2Vjb25kcygpXG4gIH07XG59IC8vIGNvbnZlcnQgYSBjYWxlbmRhciBvYmplY3QgdG8gYSBlcG9jaCB0aW1lc3RhbXBcblxuXG5mdW5jdGlvbiBvYmpUb1RTKG9iaiwgb2Zmc2V0LCB6b25lKSB7XG4gIHJldHVybiBmaXhPZmZzZXQob2JqVG9Mb2NhbFRTKG9iaiksIG9mZnNldCwgem9uZSk7XG59IC8vIGNyZWF0ZSBhIG5ldyBEVCBpbnN0YW5jZSBieSBhZGRpbmcgYSBkdXJhdGlvbiwgYWRqdXN0aW5nIGZvciBEU1RzXG5cblxuZnVuY3Rpb24gYWRqdXN0VGltZShpbnN0LCBkdXIpIHtcbiAgY29uc3Qgb1ByZSA9IGluc3QubyxcbiAgICAgICAgeWVhciA9IGluc3QuYy55ZWFyICsgTWF0aC50cnVuYyhkdXIueWVhcnMpLFxuICAgICAgICBtb250aCA9IGluc3QuYy5tb250aCArIE1hdGgudHJ1bmMoZHVyLm1vbnRocykgKyBNYXRoLnRydW5jKGR1ci5xdWFydGVycykgKiAzLFxuICAgICAgICBjID0geyAuLi5pbnN0LmMsXG4gICAgeWVhcixcbiAgICBtb250aCxcbiAgICBkYXk6IE1hdGgubWluKGluc3QuYy5kYXksIGRheXNJbk1vbnRoKHllYXIsIG1vbnRoKSkgKyBNYXRoLnRydW5jKGR1ci5kYXlzKSArIE1hdGgudHJ1bmMoZHVyLndlZWtzKSAqIDdcbiAgfSxcbiAgICAgICAgbWlsbGlzVG9BZGQgPSBEdXJhdGlvbi5mcm9tT2JqZWN0KHtcbiAgICB5ZWFyczogZHVyLnllYXJzIC0gTWF0aC50cnVuYyhkdXIueWVhcnMpLFxuICAgIHF1YXJ0ZXJzOiBkdXIucXVhcnRlcnMgLSBNYXRoLnRydW5jKGR1ci5xdWFydGVycyksXG4gICAgbW9udGhzOiBkdXIubW9udGhzIC0gTWF0aC50cnVuYyhkdXIubW9udGhzKSxcbiAgICB3ZWVrczogZHVyLndlZWtzIC0gTWF0aC50cnVuYyhkdXIud2Vla3MpLFxuICAgIGRheXM6IGR1ci5kYXlzIC0gTWF0aC50cnVuYyhkdXIuZGF5cyksXG4gICAgaG91cnM6IGR1ci5ob3VycyxcbiAgICBtaW51dGVzOiBkdXIubWludXRlcyxcbiAgICBzZWNvbmRzOiBkdXIuc2Vjb25kcyxcbiAgICBtaWxsaXNlY29uZHM6IGR1ci5taWxsaXNlY29uZHNcbiAgfSkuYXMoXCJtaWxsaXNlY29uZHNcIiksXG4gICAgICAgIGxvY2FsVFMgPSBvYmpUb0xvY2FsVFMoYyk7XG4gIGxldCBbdHMsIG9dID0gZml4T2Zmc2V0KGxvY2FsVFMsIG9QcmUsIGluc3Quem9uZSk7XG5cbiAgaWYgKG1pbGxpc1RvQWRkICE9PSAwKSB7XG4gICAgdHMgKz0gbWlsbGlzVG9BZGQ7IC8vIHRoYXQgY291bGQgaGF2ZSBjaGFuZ2VkIHRoZSBvZmZzZXQgYnkgZ29pbmcgb3ZlciBhIERTVCwgYnV0IHdlIHdhbnQgdG8ga2VlcCB0aGUgdHMgdGhlIHNhbWVcblxuICAgIG8gPSBpbnN0LnpvbmUub2Zmc2V0KHRzKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHMsXG4gICAgb1xuICB9O1xufSAvLyBoZWxwZXIgdXNlZnVsIGluIHR1cm5pbmcgdGhlIHJlc3VsdHMgb2YgcGFyc2luZyBpbnRvIHJlYWwgZGF0ZXNcbi8vIGJ5IGhhbmRsaW5nIHRoZSB6b25lIG9wdGlvbnNcblxuXG5mdW5jdGlvbiBwYXJzZURhdGFUb0RhdGVUaW1lKHBhcnNlZCwgcGFyc2VkWm9uZSwgb3B0cywgZm9ybWF0LCB0ZXh0LCBzcGVjaWZpY09mZnNldCkge1xuICBjb25zdCB7XG4gICAgc2V0Wm9uZSxcbiAgICB6b25lXG4gIH0gPSBvcHRzO1xuXG4gIGlmIChwYXJzZWQgJiYgT2JqZWN0LmtleXMocGFyc2VkKS5sZW5ndGggIT09IDApIHtcbiAgICBjb25zdCBpbnRlcnByZXRhdGlvblpvbmUgPSBwYXJzZWRab25lIHx8IHpvbmUsXG4gICAgICAgICAgaW5zdCA9IERhdGVUaW1lLmZyb21PYmplY3QocGFyc2VkLCB7IC4uLm9wdHMsXG4gICAgICB6b25lOiBpbnRlcnByZXRhdGlvblpvbmUsXG4gICAgICBzcGVjaWZpY09mZnNldFxuICAgIH0pO1xuICAgIHJldHVybiBzZXRab25lID8gaW5zdCA6IGluc3Quc2V0Wm9uZSh6b25lKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChuZXcgSW52YWxpZChcInVucGFyc2FibGVcIiwgYHRoZSBpbnB1dCBcIiR7dGV4dH1cIiBjYW4ndCBiZSBwYXJzZWQgYXMgJHtmb3JtYXR9YCkpO1xuICB9XG59IC8vIGlmIHlvdSB3YW50IHRvIG91dHB1dCBhIHRlY2huaWNhbCBmb3JtYXQgKGUuZy4gUkZDIDI4MjIpLCB0aGlzIGhlbHBlclxuLy8gaGVscHMgaGFuZGxlIHRoZSBkZXRhaWxzXG5cblxuZnVuY3Rpb24gdG9UZWNoRm9ybWF0KGR0LCBmb3JtYXQsIGFsbG93WiA9IHRydWUpIHtcbiAgcmV0dXJuIGR0LmlzVmFsaWQgPyBGb3JtYXR0ZXIuY3JlYXRlKExvY2FsZS5jcmVhdGUoXCJlbi1VU1wiKSwge1xuICAgIGFsbG93WixcbiAgICBmb3JjZVNpbXBsZTogdHJ1ZVxuICB9KS5mb3JtYXREYXRlVGltZUZyb21TdHJpbmcoZHQsIGZvcm1hdCkgOiBudWxsO1xufVxuXG5mdW5jdGlvbiB0b0lTT0RhdGUobywgZXh0ZW5kZWQpIHtcbiAgY29uc3QgbG9uZ0Zvcm1hdCA9IG8uYy55ZWFyID4gOTk5OSB8fCBvLmMueWVhciA8IDA7XG4gIGxldCBjID0gXCJcIjtcbiAgaWYgKGxvbmdGb3JtYXQgJiYgby5jLnllYXIgPj0gMCkgYyArPSBcIitcIjtcbiAgYyArPSBwYWRTdGFydChvLmMueWVhciwgbG9uZ0Zvcm1hdCA/IDYgOiA0KTtcblxuICBpZiAoZXh0ZW5kZWQpIHtcbiAgICBjICs9IFwiLVwiO1xuICAgIGMgKz0gcGFkU3RhcnQoby5jLm1vbnRoKTtcbiAgICBjICs9IFwiLVwiO1xuICAgIGMgKz0gcGFkU3RhcnQoby5jLmRheSk7XG4gIH0gZWxzZSB7XG4gICAgYyArPSBwYWRTdGFydChvLmMubW9udGgpO1xuICAgIGMgKz0gcGFkU3RhcnQoby5jLmRheSk7XG4gIH1cblxuICByZXR1cm4gYztcbn1cblxuZnVuY3Rpb24gdG9JU09UaW1lKG8sIGV4dGVuZGVkLCBzdXBwcmVzc1NlY29uZHMsIHN1cHByZXNzTWlsbGlzZWNvbmRzLCBpbmNsdWRlT2Zmc2V0LCBleHRlbmRlZFpvbmUpIHtcbiAgbGV0IGMgPSBwYWRTdGFydChvLmMuaG91cik7XG5cbiAgaWYgKGV4dGVuZGVkKSB7XG4gICAgYyArPSBcIjpcIjtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5taW51dGUpO1xuXG4gICAgaWYgKG8uYy5zZWNvbmQgIT09IDAgfHwgIXN1cHByZXNzU2Vjb25kcykge1xuICAgICAgYyArPSBcIjpcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYyArPSBwYWRTdGFydChvLmMubWludXRlKTtcbiAgfVxuXG4gIGlmIChvLmMuc2Vjb25kICE9PSAwIHx8ICFzdXBwcmVzc1NlY29uZHMpIHtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5zZWNvbmQpO1xuXG4gICAgaWYgKG8uYy5taWxsaXNlY29uZCAhPT0gMCB8fCAhc3VwcHJlc3NNaWxsaXNlY29uZHMpIHtcbiAgICAgIGMgKz0gXCIuXCI7XG4gICAgICBjICs9IHBhZFN0YXJ0KG8uYy5taWxsaXNlY29uZCwgMyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGluY2x1ZGVPZmZzZXQpIHtcbiAgICBpZiAoby5pc09mZnNldEZpeGVkICYmIG8ub2Zmc2V0ID09PSAwICYmICFleHRlbmRlZFpvbmUpIHtcbiAgICAgIGMgKz0gXCJaXCI7XG4gICAgfSBlbHNlIGlmIChvLm8gPCAwKSB7XG4gICAgICBjICs9IFwiLVwiO1xuICAgICAgYyArPSBwYWRTdGFydChNYXRoLnRydW5jKC1vLm8gLyA2MCkpO1xuICAgICAgYyArPSBcIjpcIjtcbiAgICAgIGMgKz0gcGFkU3RhcnQoTWF0aC50cnVuYygtby5vICUgNjApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYyArPSBcIitcIjtcbiAgICAgIGMgKz0gcGFkU3RhcnQoTWF0aC50cnVuYyhvLm8gLyA2MCkpO1xuICAgICAgYyArPSBcIjpcIjtcbiAgICAgIGMgKz0gcGFkU3RhcnQoTWF0aC50cnVuYyhvLm8gJSA2MCkpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChleHRlbmRlZFpvbmUpIHtcbiAgICBjICs9IFwiW1wiICsgby56b25lLmlhbmFOYW1lICsgXCJdXCI7XG4gIH1cblxuICByZXR1cm4gYztcbn0gLy8gZGVmYXVsdHMgZm9yIHVuc3BlY2lmaWVkIHVuaXRzIGluIHRoZSBzdXBwb3J0ZWQgY2FsZW5kYXJzXG5cblxuY29uc3QgZGVmYXVsdFVuaXRWYWx1ZXMgPSB7XG4gIG1vbnRoOiAxLFxuICBkYXk6IDEsXG4gIGhvdXI6IDAsXG4gIG1pbnV0ZTogMCxcbiAgc2Vjb25kOiAwLFxuICBtaWxsaXNlY29uZDogMFxufSxcbiAgICAgIGRlZmF1bHRXZWVrVW5pdFZhbHVlcyA9IHtcbiAgd2Vla051bWJlcjogMSxcbiAgd2Vla2RheTogMSxcbiAgaG91cjogMCxcbiAgbWludXRlOiAwLFxuICBzZWNvbmQ6IDAsXG4gIG1pbGxpc2Vjb25kOiAwXG59LFxuICAgICAgZGVmYXVsdE9yZGluYWxVbml0VmFsdWVzID0ge1xuICBvcmRpbmFsOiAxLFxuICBob3VyOiAwLFxuICBtaW51dGU6IDAsXG4gIHNlY29uZDogMCxcbiAgbWlsbGlzZWNvbmQ6IDBcbn07IC8vIFVuaXRzIGluIHRoZSBzdXBwb3J0ZWQgY2FsZW5kYXJzLCBzb3J0ZWQgYnkgYmlnbmVzc1xuXG5jb25zdCBvcmRlcmVkVW5pdHMgPSBbXCJ5ZWFyXCIsIFwibW9udGhcIiwgXCJkYXlcIiwgXCJob3VyXCIsIFwibWludXRlXCIsIFwic2Vjb25kXCIsIFwibWlsbGlzZWNvbmRcIl0sXG4gICAgICBvcmRlcmVkV2Vla1VuaXRzID0gW1wid2Vla1llYXJcIiwgXCJ3ZWVrTnVtYmVyXCIsIFwid2Vla2RheVwiLCBcImhvdXJcIiwgXCJtaW51dGVcIiwgXCJzZWNvbmRcIiwgXCJtaWxsaXNlY29uZFwiXSxcbiAgICAgIG9yZGVyZWRPcmRpbmFsVW5pdHMgPSBbXCJ5ZWFyXCIsIFwib3JkaW5hbFwiLCBcImhvdXJcIiwgXCJtaW51dGVcIiwgXCJzZWNvbmRcIiwgXCJtaWxsaXNlY29uZFwiXTsgLy8gc3RhbmRhcmRpemUgY2FzZSBhbmQgcGx1cmFsaXR5IGluIHVuaXRzXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXQodW5pdCkge1xuICBjb25zdCBub3JtYWxpemVkID0ge1xuICAgIHllYXI6IFwieWVhclwiLFxuICAgIHllYXJzOiBcInllYXJcIixcbiAgICBtb250aDogXCJtb250aFwiLFxuICAgIG1vbnRoczogXCJtb250aFwiLFxuICAgIGRheTogXCJkYXlcIixcbiAgICBkYXlzOiBcImRheVwiLFxuICAgIGhvdXI6IFwiaG91clwiLFxuICAgIGhvdXJzOiBcImhvdXJcIixcbiAgICBtaW51dGU6IFwibWludXRlXCIsXG4gICAgbWludXRlczogXCJtaW51dGVcIixcbiAgICBxdWFydGVyOiBcInF1YXJ0ZXJcIixcbiAgICBxdWFydGVyczogXCJxdWFydGVyXCIsXG4gICAgc2Vjb25kOiBcInNlY29uZFwiLFxuICAgIHNlY29uZHM6IFwic2Vjb25kXCIsXG4gICAgbWlsbGlzZWNvbmQ6IFwibWlsbGlzZWNvbmRcIixcbiAgICBtaWxsaXNlY29uZHM6IFwibWlsbGlzZWNvbmRcIixcbiAgICB3ZWVrZGF5OiBcIndlZWtkYXlcIixcbiAgICB3ZWVrZGF5czogXCJ3ZWVrZGF5XCIsXG4gICAgd2Vla251bWJlcjogXCJ3ZWVrTnVtYmVyXCIsXG4gICAgd2Vla3NudW1iZXI6IFwid2Vla051bWJlclwiLFxuICAgIHdlZWtudW1iZXJzOiBcIndlZWtOdW1iZXJcIixcbiAgICB3ZWVreWVhcjogXCJ3ZWVrWWVhclwiLFxuICAgIHdlZWt5ZWFyczogXCJ3ZWVrWWVhclwiLFxuICAgIG9yZGluYWw6IFwib3JkaW5hbFwiXG4gIH1bdW5pdC50b0xvd2VyQ2FzZSgpXTtcbiAgaWYgKCFub3JtYWxpemVkKSB0aHJvdyBuZXcgSW52YWxpZFVuaXRFcnJvcih1bml0KTtcbiAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG59IC8vIHRoaXMgaXMgYSBkdW1iZWQgZG93biB2ZXJzaW9uIG9mIGZyb21PYmplY3QoKSB0aGF0IHJ1bnMgYWJvdXQgNjAlIGZhc3RlclxuLy8gYnV0IGRvZXNuJ3QgZG8gYW55IHZhbGlkYXRpb24sIG1ha2VzIGEgYnVuY2ggb2YgYXNzdW1wdGlvbnMgYWJvdXQgd2hhdCB1bml0c1xuLy8gYXJlIHByZXNlbnQsIGFuZCBzbyBvbi5cblxuXG5mdW5jdGlvbiBxdWlja0RUKG9iaiwgb3B0cykge1xuICBjb25zdCB6b25lID0gbm9ybWFsaXplWm9uZShvcHRzLnpvbmUsIFNldHRpbmdzLmRlZmF1bHRab25lKSxcbiAgICAgICAgbG9jID0gTG9jYWxlLmZyb21PYmplY3Qob3B0cyksXG4gICAgICAgIHRzTm93ID0gU2V0dGluZ3Mubm93KCk7XG4gIGxldCB0cywgbzsgLy8gYXNzdW1lIHdlIGhhdmUgdGhlIGhpZ2hlci1vcmRlciB1bml0c1xuXG4gIGlmICghaXNVbmRlZmluZWQob2JqLnllYXIpKSB7XG4gICAgZm9yIChjb25zdCB1IG9mIG9yZGVyZWRVbml0cykge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKG9ialt1XSkpIHtcbiAgICAgICAgb2JqW3VdID0gZGVmYXVsdFVuaXRWYWx1ZXNbdV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaW52YWxpZCA9IGhhc0ludmFsaWRHcmVnb3JpYW5EYXRhKG9iaikgfHwgaGFzSW52YWxpZFRpbWVEYXRhKG9iaik7XG5cbiAgICBpZiAoaW52YWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoaW52YWxpZCk7XG4gICAgfVxuXG4gICAgY29uc3Qgb2Zmc2V0UHJvdmlzID0gem9uZS5vZmZzZXQodHNOb3cpO1xuICAgIFt0cywgb10gPSBvYmpUb1RTKG9iaiwgb2Zmc2V0UHJvdmlzLCB6b25lKTtcbiAgfSBlbHNlIHtcbiAgICB0cyA9IHRzTm93O1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEYXRlVGltZSh7XG4gICAgdHMsXG4gICAgem9uZSxcbiAgICBsb2MsXG4gICAgb1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZGlmZlJlbGF0aXZlKHN0YXJ0LCBlbmQsIG9wdHMpIHtcbiAgY29uc3Qgcm91bmQgPSBpc1VuZGVmaW5lZChvcHRzLnJvdW5kKSA/IHRydWUgOiBvcHRzLnJvdW5kLFxuICAgICAgICBmb3JtYXQgPSAoYywgdW5pdCkgPT4ge1xuICAgIGMgPSByb3VuZFRvKGMsIHJvdW5kIHx8IG9wdHMuY2FsZW5kYXJ5ID8gMCA6IDIsIHRydWUpO1xuICAgIGNvbnN0IGZvcm1hdHRlciA9IGVuZC5sb2MuY2xvbmUob3B0cykucmVsRm9ybWF0dGVyKG9wdHMpO1xuICAgIHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0KGMsIHVuaXQpO1xuICB9LFxuICAgICAgICBkaWZmZXIgPSB1bml0ID0+IHtcbiAgICBpZiAob3B0cy5jYWxlbmRhcnkpIHtcbiAgICAgIGlmICghZW5kLmhhc1NhbWUoc3RhcnQsIHVuaXQpKSB7XG4gICAgICAgIHJldHVybiBlbmQuc3RhcnRPZih1bml0KS5kaWZmKHN0YXJ0LnN0YXJ0T2YodW5pdCksIHVuaXQpLmdldCh1bml0KTtcbiAgICAgIH0gZWxzZSByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVuZC5kaWZmKHN0YXJ0LCB1bml0KS5nZXQodW5pdCk7XG4gICAgfVxuICB9O1xuXG4gIGlmIChvcHRzLnVuaXQpIHtcbiAgICByZXR1cm4gZm9ybWF0KGRpZmZlcihvcHRzLnVuaXQpLCBvcHRzLnVuaXQpO1xuICB9XG5cbiAgZm9yIChjb25zdCB1bml0IG9mIG9wdHMudW5pdHMpIHtcbiAgICBjb25zdCBjb3VudCA9IGRpZmZlcih1bml0KTtcblxuICAgIGlmIChNYXRoLmFicyhjb3VudCkgPj0gMSkge1xuICAgICAgcmV0dXJuIGZvcm1hdChjb3VudCwgdW5pdCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvcm1hdChzdGFydCA+IGVuZCA/IC0wIDogMCwgb3B0cy51bml0c1tvcHRzLnVuaXRzLmxlbmd0aCAtIDFdKTtcbn1cblxuZnVuY3Rpb24gbGFzdE9wdHMoYXJnTGlzdCkge1xuICBsZXQgb3B0cyA9IHt9LFxuICAgICAgYXJncztcblxuICBpZiAoYXJnTGlzdC5sZW5ndGggPiAwICYmIHR5cGVvZiBhcmdMaXN0W2FyZ0xpc3QubGVuZ3RoIC0gMV0gPT09IFwib2JqZWN0XCIpIHtcbiAgICBvcHRzID0gYXJnTGlzdFthcmdMaXN0Lmxlbmd0aCAtIDFdO1xuICAgIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ0xpc3QpLnNsaWNlKDAsIGFyZ0xpc3QubGVuZ3RoIC0gMSk7XG4gIH0gZWxzZSB7XG4gICAgYXJncyA9IEFycmF5LmZyb20oYXJnTGlzdCk7XG4gIH1cblxuICByZXR1cm4gW29wdHMsIGFyZ3NdO1xufVxuLyoqXG4gKiBBIERhdGVUaW1lIGlzIGFuIGltbXV0YWJsZSBkYXRhIHN0cnVjdHVyZSByZXByZXNlbnRpbmcgYSBzcGVjaWZpYyBkYXRlIGFuZCB0aW1lIGFuZCBhY2NvbXBhbnlpbmcgbWV0aG9kcy4gSXQgY29udGFpbnMgY2xhc3MgYW5kIGluc3RhbmNlIG1ldGhvZHMgZm9yIGNyZWF0aW5nLCBwYXJzaW5nLCBpbnRlcnJvZ2F0aW5nLCB0cmFuc2Zvcm1pbmcsIGFuZCBmb3JtYXR0aW5nIHRoZW0uXG4gKlxuICogQSBEYXRlVGltZSBjb21wcmlzZXMgb2Y6XG4gKiAqIEEgdGltZXN0YW1wLiBFYWNoIERhdGVUaW1lIGluc3RhbmNlIHJlZmVycyB0byBhIHNwZWNpZmljIG1pbGxpc2Vjb25kIG9mIHRoZSBVbml4IGVwb2NoLlxuICogKiBBIHRpbWUgem9uZS4gRWFjaCBpbnN0YW5jZSBpcyBjb25zaWRlcmVkIGluIHRoZSBjb250ZXh0IG9mIGEgc3BlY2lmaWMgem9uZSAoYnkgZGVmYXVsdCB0aGUgbG9jYWwgc3lzdGVtJ3Mgem9uZSkuXG4gKiAqIENvbmZpZ3VyYXRpb24gcHJvcGVydGllcyB0aGF0IGVmZmVjdCBob3cgb3V0cHV0IHN0cmluZ3MgYXJlIGZvcm1hdHRlZCwgc3VjaCBhcyBgbG9jYWxlYCwgYG51bWJlcmluZ1N5c3RlbWAsIGFuZCBgb3V0cHV0Q2FsZW5kYXJgLlxuICpcbiAqIEhlcmUgaXMgYSBicmllZiBvdmVydmlldyBvZiB0aGUgbW9zdCBjb21tb25seSB1c2VkIGZ1bmN0aW9uYWxpdHkgaXQgcHJvdmlkZXM6XG4gKlxuICogKiAqKkNyZWF0aW9uKio6IFRvIGNyZWF0ZSBhIERhdGVUaW1lIGZyb20gaXRzIGNvbXBvbmVudHMsIHVzZSBvbmUgb2YgaXRzIGZhY3RvcnkgY2xhc3MgbWV0aG9kczoge0BsaW5rIERhdGVUaW1lI2xvY2FsfSwge0BsaW5rIERhdGVUaW1lI3V0Y30sIGFuZCAobW9zdCBmbGV4aWJseSkge0BsaW5rIERhdGVUaW1lI2Zyb21PYmplY3R9LiBUbyBjcmVhdGUgb25lIGZyb20gYSBzdGFuZGFyZCBzdHJpbmcgZm9ybWF0LCB1c2Uge0BsaW5rIERhdGVUaW1lI2Zyb21JU099LCB7QGxpbmsgRGF0ZVRpbWUjZnJvbUhUVFB9LCBhbmQge0BsaW5rIERhdGVUaW1lI2Zyb21SRkMyODIyfS4gVG8gY3JlYXRlIG9uZSBmcm9tIGEgY3VzdG9tIHN0cmluZyBmb3JtYXQsIHVzZSB7QGxpbmsgRGF0ZVRpbWUjZnJvbUZvcm1hdH0uIFRvIGNyZWF0ZSBvbmUgZnJvbSBhIG5hdGl2ZSBKUyBkYXRlLCB1c2Uge0BsaW5rIERhdGVUaW1lI2Zyb21KU0RhdGV9LlxuICogKiAqKkdyZWdvcmlhbiBjYWxlbmRhciBhbmQgdGltZSoqOiBUbyBleGFtaW5lIHRoZSBHcmVnb3JpYW4gcHJvcGVydGllcyBvZiBhIERhdGVUaW1lIGluZGl2aWR1YWxseSAoaS5lIGFzIG9wcG9zZWQgdG8gY29sbGVjdGl2ZWx5IHRocm91Z2gge0BsaW5rIERhdGVUaW1lI3RvT2JqZWN0fSksIHVzZSB0aGUge0BsaW5rIERhdGVUaW1lI3llYXJ9LCB7QGxpbmsgRGF0ZVRpbWUjbW9udGh9LFxuICoge0BsaW5rIERhdGVUaW1lI2RheX0sIHtAbGluayBEYXRlVGltZSNob3VyfSwge0BsaW5rIERhdGVUaW1lI21pbnV0ZX0sIHtAbGluayBEYXRlVGltZSNzZWNvbmR9LCB7QGxpbmsgRGF0ZVRpbWUjbWlsbGlzZWNvbmR9IGFjY2Vzc29ycy5cbiAqICogKipXZWVrIGNhbGVuZGFyKio6IEZvciBJU08gd2VlayBjYWxlbmRhciBhdHRyaWJ1dGVzLCBzZWUgdGhlIHtAbGluayBEYXRlVGltZSN3ZWVrWWVhcn0sIHtAbGluayBEYXRlVGltZSN3ZWVrTnVtYmVyfSwgYW5kIHtAbGluayBEYXRlVGltZSN3ZWVrZGF5fSBhY2Nlc3NvcnMuXG4gKiAqICoqQ29uZmlndXJhdGlvbioqIFNlZSB0aGUge0BsaW5rIERhdGVUaW1lI2xvY2FsZX0gYW5kIHtAbGluayBEYXRlVGltZSNudW1iZXJpbmdTeXN0ZW19IGFjY2Vzc29ycy5cbiAqICogKipUcmFuc2Zvcm1hdGlvbioqOiBUbyB0cmFuc2Zvcm0gdGhlIERhdGVUaW1lIGludG8gb3RoZXIgRGF0ZVRpbWVzLCB1c2Uge0BsaW5rIERhdGVUaW1lI3NldH0sIHtAbGluayBEYXRlVGltZSNyZWNvbmZpZ3VyZX0sIHtAbGluayBEYXRlVGltZSNzZXRab25lfSwge0BsaW5rIERhdGVUaW1lI3NldExvY2FsZX0sIHtAbGluayBEYXRlVGltZS5wbHVzfSwge0BsaW5rIERhdGVUaW1lI21pbnVzfSwge0BsaW5rIERhdGVUaW1lI2VuZE9mfSwge0BsaW5rIERhdGVUaW1lI3N0YXJ0T2Z9LCB7QGxpbmsgRGF0ZVRpbWUjdG9VVEN9LCBhbmQge0BsaW5rIERhdGVUaW1lI3RvTG9jYWx9LlxuICogKiAqKk91dHB1dCoqOiBUbyBjb252ZXJ0IHRoZSBEYXRlVGltZSB0byBvdGhlciByZXByZXNlbnRhdGlvbnMsIHVzZSB0aGUge0BsaW5rIERhdGVUaW1lI3RvUmVsYXRpdmV9LCB7QGxpbmsgRGF0ZVRpbWUjdG9SZWxhdGl2ZUNhbGVuZGFyfSwge0BsaW5rIERhdGVUaW1lI3RvSlNPTn0sIHtAbGluayBEYXRlVGltZSN0b0lTT30sIHtAbGluayBEYXRlVGltZSN0b0hUVFB9LCB7QGxpbmsgRGF0ZVRpbWUjdG9PYmplY3R9LCB7QGxpbmsgRGF0ZVRpbWUjdG9SRkMyODIyfSwge0BsaW5rIERhdGVUaW1lI3RvU3RyaW5nfSwge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSwge0BsaW5rIERhdGVUaW1lI3RvRm9ybWF0fSwge0BsaW5rIERhdGVUaW1lI3RvTWlsbGlzfSBhbmQge0BsaW5rIERhdGVUaW1lI3RvSlNEYXRlfS5cbiAqXG4gKiBUaGVyZSdzIHBsZW50eSBvdGhlcnMgZG9jdW1lbnRlZCBiZWxvdy4gSW4gYWRkaXRpb24sIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHN1YnRsZXIgdG9waWNzIGxpa2UgaW50ZXJuYXRpb25hbGl6YXRpb24sIHRpbWUgem9uZXMsIGFsdGVybmF0aXZlIGNhbGVuZGFycywgdmFsaWRpdHksIGFuZCBzbyBvbiwgc2VlIHRoZSBleHRlcm5hbCBkb2N1bWVudGF0aW9uLlxuICovXG5cblxuY2xhc3MgRGF0ZVRpbWUge1xuICAvKipcbiAgICogQGFjY2VzcyBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBjb25zdCB6b25lID0gY29uZmlnLnpvbmUgfHwgU2V0dGluZ3MuZGVmYXVsdFpvbmU7XG4gICAgbGV0IGludmFsaWQgPSBjb25maWcuaW52YWxpZCB8fCAoTnVtYmVyLmlzTmFOKGNvbmZpZy50cykgPyBuZXcgSW52YWxpZChcImludmFsaWQgaW5wdXRcIikgOiBudWxsKSB8fCAoIXpvbmUuaXNWYWxpZCA/IHVuc3VwcG9ydGVkWm9uZSh6b25lKSA6IG51bGwpO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy50cyA9IGlzVW5kZWZpbmVkKGNvbmZpZy50cykgPyBTZXR0aW5ncy5ub3coKSA6IGNvbmZpZy50cztcbiAgICBsZXQgYyA9IG51bGwsXG4gICAgICAgIG8gPSBudWxsO1xuXG4gICAgaWYgKCFpbnZhbGlkKSB7XG4gICAgICBjb25zdCB1bmNoYW5nZWQgPSBjb25maWcub2xkICYmIGNvbmZpZy5vbGQudHMgPT09IHRoaXMudHMgJiYgY29uZmlnLm9sZC56b25lLmVxdWFscyh6b25lKTtcblxuICAgICAgaWYgKHVuY2hhbmdlZCkge1xuICAgICAgICBbYywgb10gPSBbY29uZmlnLm9sZC5jLCBjb25maWcub2xkLm9dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgb3QgPSB6b25lLm9mZnNldCh0aGlzLnRzKTtcbiAgICAgICAgYyA9IHRzVG9PYmoodGhpcy50cywgb3QpO1xuICAgICAgICBpbnZhbGlkID0gTnVtYmVyLmlzTmFOKGMueWVhcikgPyBuZXcgSW52YWxpZChcImludmFsaWQgaW5wdXRcIikgOiBudWxsO1xuICAgICAgICBjID0gaW52YWxpZCA/IG51bGwgOiBjO1xuICAgICAgICBvID0gaW52YWxpZCA/IG51bGwgOiBvdDtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cblxuICAgIHRoaXMuX3pvbmUgPSB6b25lO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy5sb2MgPSBjb25maWcubG9jIHx8IExvY2FsZS5jcmVhdGUoKTtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMuaW52YWxpZCA9IGludmFsaWQ7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLndlZWtEYXRhID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMuYyA9IGM7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLm8gPSBvO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy5pc0x1eG9uRGF0ZVRpbWUgPSB0cnVlO1xuICB9IC8vIENPTlNUUlVDVFxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmb3IgdGhlIGN1cnJlbnQgaW5zdGFudCwgaW4gdGhlIHN5c3RlbSdzIHRpbWUgem9uZS5cbiAgICpcbiAgICogVXNlIFNldHRpbmdzIHRvIG92ZXJyaWRlIHRoZXNlIGRlZmF1bHQgdmFsdWVzIGlmIG5lZWRlZC5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9JU08oKSAvL34+IG5vdyBpbiB0aGUgSVNPIGZvcm1hdFxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBzdGF0aWMgbm93KCkge1xuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe30pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBsb2NhbCBEYXRlVGltZVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3llYXJdIC0gVGhlIGNhbGVuZGFyIHllYXIuIElmIG9taXR0ZWQgKGFzIGluLCBjYWxsIGBsb2NhbCgpYCB3aXRoIG5vIGFyZ3VtZW50cyksIHRoZSBjdXJyZW50IHRpbWUgd2lsbCBiZSB1c2VkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbW9udGg9MV0gLSBUaGUgbW9udGgsIDEtaW5kZXhlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2RheT0xXSAtIFRoZSBkYXkgb2YgdGhlIG1vbnRoLCAxLWluZGV4ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtob3VyPTBdIC0gVGhlIGhvdXIgb2YgdGhlIGRheSwgaW4gMjQtaG91ciB0aW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbWludXRlPTBdIC0gVGhlIG1pbnV0ZSBvZiB0aGUgaG91ciwgbWVhbmluZyBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDU5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc2Vjb25kPTBdIC0gVGhlIHNlY29uZCBvZiB0aGUgbWludXRlLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IFttaWxsaXNlY29uZD0wXSAtIFRoZSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgOTk5XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiBub3dcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoeyB6b25lOiBcIkFtZXJpY2EvTmV3X1lvcmtcIiB9KSAgICAgIC8vfj4gbm93LCBpbiBVUyBlYXN0IGNvYXN0IHRpbWVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDEtMDFUMDA6MDA6MDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMykgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMDFUMDA6MDA6MDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIHsgbG9jYWxlOiBcImZyXCIgfSkgICAgIC8vfj4gMjAxNy0wMy0xMlQwMDowMDowMCwgd2l0aCBhIEZyZW5jaCBsb2NhbGVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIDUpICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6MDA6MDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIDUsIHsgem9uZTogXCJ1dGNcIiB9KSAgIC8vfj4gMjAxNy0wMy0xMlQwNTowMDowMCwgaW4gVVRDXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSkgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjAwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSwgMTApICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSwgMTAsIDc2NSkgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwLjc2NVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBzdGF0aWMgbG9jYWwoKSB7XG4gICAgY29uc3QgW29wdHMsIGFyZ3NdID0gbGFzdE9wdHMoYXJndW1lbnRzKSxcbiAgICAgICAgICBbeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXSA9IGFyZ3M7XG4gICAgcmV0dXJuIHF1aWNrRFQoe1xuICAgICAgeWVhcixcbiAgICAgIG1vbnRoLFxuICAgICAgZGF5LFxuICAgICAgaG91cixcbiAgICAgIG1pbnV0ZSxcbiAgICAgIHNlY29uZCxcbiAgICAgIG1pbGxpc2Vjb25kXG4gICAgfSwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGluIFVUQ1xuICAgKiBAcGFyYW0ge251bWJlcn0gW3llYXJdIC0gVGhlIGNhbGVuZGFyIHllYXIuIElmIG9taXR0ZWQgKGFzIGluLCBjYWxsIGB1dGMoKWAgd2l0aCBubyBhcmd1bWVudHMpLCB0aGUgY3VycmVudCB0aW1lIHdpbGwgYmUgdXNlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW21vbnRoPTFdIC0gVGhlIG1vbnRoLCAxLWluZGV4ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtkYXk9MV0gLSBUaGUgZGF5IG9mIHRoZSBtb250aFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2hvdXI9MF0gLSBUaGUgaG91ciBvZiB0aGUgZGF5LCBpbiAyNC1ob3VyIHRpbWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IFttaW51dGU9MF0gLSBUaGUgbWludXRlIG9mIHRoZSBob3VyLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzZWNvbmQ9MF0gLSBUaGUgc2Vjb25kIG9mIHRoZSBtaW51dGUsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA1OVxuICAgKiBAcGFyYW0ge251bWJlcn0gW21pbGxpc2Vjb25kPTBdIC0gVGhlIG1pbGxpc2Vjb25kIG9mIHRoZSBzZWNvbmQsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA5OTlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBEYXRlVGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubG9jYWxlXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5vdXRwdXRDYWxlbmRhcl0gLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5udW1iZXJpbmdTeXN0ZW1dIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiBub3dcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAxLTAxVDAwOjAwOjAwWlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMDFUMDA6MDA6MDBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwMDowMDowMFpcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcsIDMsIDEyLCA1KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjAwOjAwWlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMywgMTIsIDUsIDQ1KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6NDU6MDBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSwgNDUsIHsgbG9jYWxlOiBcImZyXCIgfSkgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjAwWiB3aXRoIGEgRnJlbmNoIGxvY2FsZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMywgMTIsIDUsIDQ1LCAxMCkgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6NDU6MTBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSwgNDUsIDEwLCA3NjUsIHsgbG9jYWxlOiBcImZyXCIgfSkgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwLjc2NVogd2l0aCBhIEZyZW5jaCBsb2NhbGVcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuXG5cbiAgc3RhdGljIHV0YygpIHtcbiAgICBjb25zdCBbb3B0cywgYXJnc10gPSBsYXN0T3B0cyhhcmd1bWVudHMpLFxuICAgICAgICAgIFt5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmRdID0gYXJncztcbiAgICBvcHRzLnpvbmUgPSBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2U7XG4gICAgcmV0dXJuIHF1aWNrRFQoe1xuICAgICAgeWVhcixcbiAgICAgIG1vbnRoLFxuICAgICAgZGF5LFxuICAgICAgaG91cixcbiAgICAgIG1pbnV0ZSxcbiAgICAgIHNlY29uZCxcbiAgICAgIG1pbGxpc2Vjb25kXG4gICAgfSwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYSBKYXZhU2NyaXB0IERhdGUgb2JqZWN0LiBVc2VzIHRoZSBkZWZhdWx0IHpvbmUuXG4gICAqIEBwYXJhbSB7RGF0ZX0gZGF0ZSAtIGEgSmF2YVNjcmlwdCBEYXRlIG9iamVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRpb25zLnpvbmU9J2xvY2FsJ10gLSB0aGUgem9uZSB0byBwbGFjZSB0aGUgRGF0ZVRpbWUgaW50b1xuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBzdGF0aWMgZnJvbUpTRGF0ZShkYXRlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB0cyA9IGlzRGF0ZShkYXRlKSA/IGRhdGUudmFsdWVPZigpIDogTmFOO1xuXG4gICAgaWYgKE51bWJlci5pc05hTih0cykpIHtcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKFwiaW52YWxpZCBpbnB1dFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCB6b25lVG9Vc2UgPSBub3JtYWxpemVab25lKG9wdGlvbnMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuXG4gICAgaWYgKCF6b25lVG9Vc2UuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQodW5zdXBwb3J0ZWRab25lKHpvbmVUb1VzZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe1xuICAgICAgdHM6IHRzLFxuICAgICAgem9uZTogem9uZVRvVXNlLFxuICAgICAgbG9jOiBMb2NhbGUuZnJvbU9iamVjdChvcHRpb25zKVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSB0aGUgZXBvY2ggKG1lYW5pbmcgc2luY2UgMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS4gVXNlcyB0aGUgZGVmYXVsdCB6b25lLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWlsbGlzZWNvbmRzIC0gYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIDE5NzAgVVRDXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdGlvbnMuem9uZT0nbG9jYWwnXSAtIHRoZSB6b25lIHRvIHBsYWNlIHRoZSBEYXRlVGltZSBpbnRvXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGVdIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cblxuXG4gIHN0YXRpYyBmcm9tTWlsbGlzKG1pbGxpc2Vjb25kcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCFpc051bWJlcihtaWxsaXNlY29uZHMpKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoYGZyb21NaWxsaXMgcmVxdWlyZXMgYSBudW1lcmljYWwgaW5wdXQsIGJ1dCByZWNlaXZlZCBhICR7dHlwZW9mIG1pbGxpc2Vjb25kc30gd2l0aCB2YWx1ZSAke21pbGxpc2Vjb25kc31gKTtcbiAgICB9IGVsc2UgaWYgKG1pbGxpc2Vjb25kcyA8IC1NQVhfREFURSB8fCBtaWxsaXNlY29uZHMgPiBNQVhfREFURSkge1xuICAgICAgLy8gdGhpcyBpc24ndCBwZXJmZWN0IGJlY2F1c2UgYmVjYXVzZSB3ZSBjYW4gc3RpbGwgZW5kIHVwIG91dCBvZiByYW5nZSBiZWNhdXNlIG9mIGFkZGl0aW9uYWwgc2hpZnRpbmcsIGJ1dCBpdCdzIGEgc3RhcnRcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKFwiVGltZXN0YW1wIG91dCBvZiByYW5nZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZSh7XG4gICAgICAgIHRzOiBtaWxsaXNlY29uZHMsXG4gICAgICAgIHpvbmU6IG5vcm1hbGl6ZVpvbmUob3B0aW9ucy56b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSksXG4gICAgICAgIGxvYzogTG9jYWxlLmZyb21PYmplY3Qob3B0aW9ucylcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhIG51bWJlciBvZiBzZWNvbmRzIHNpbmNlIHRoZSBlcG9jaCAobWVhbmluZyBzaW5jZSAxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLiBVc2VzIHRoZSBkZWZhdWx0IHpvbmUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzZWNvbmRzIC0gYSBudW1iZXIgb2Ygc2Vjb25kcyBzaW5jZSAxOTcwIFVUQ1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRpb25zLnpvbmU9J2xvY2FsJ10gLSB0aGUgem9uZSB0byBwbGFjZSB0aGUgRGF0ZVRpbWUgaW50b1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubG9jYWxlXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm91dHB1dENhbGVuZGFyIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBzdGF0aWMgZnJvbVNlY29uZHMoc2Vjb25kcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCFpc051bWJlcihzZWNvbmRzKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwiZnJvbVNlY29uZHMgcmVxdWlyZXMgYSBudW1lcmljYWwgaW5wdXRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe1xuICAgICAgICB0czogc2Vjb25kcyAqIDEwMDAsXG4gICAgICAgIHpvbmU6IG5vcm1hbGl6ZVpvbmUob3B0aW9ucy56b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSksXG4gICAgICAgIGxvYzogTG9jYWxlLmZyb21PYmplY3Qob3B0aW9ucylcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhIEphdmFTY3JpcHQgb2JqZWN0IHdpdGgga2V5cyBsaWtlICd5ZWFyJyBhbmQgJ2hvdXInIHdpdGggcmVhc29uYWJsZSBkZWZhdWx0cy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iaiAtIHRoZSBvYmplY3QgdG8gY3JlYXRlIHRoZSBEYXRlVGltZSBmcm9tXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoueWVhciAtIGEgeWVhciwgc3VjaCBhcyAxOTg3XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubW9udGggLSBhIG1vbnRoLCAxLTEyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouZGF5IC0gYSBkYXkgb2YgdGhlIG1vbnRoLCAxLTMxLCBkZXBlbmRpbmcgb24gdGhlIG1vbnRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoub3JkaW5hbCAtIGRheSBvZiB0aGUgeWVhciwgMS0zNjUgb3IgMzY2XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoud2Vla1llYXIgLSBhbiBJU08gd2VlayB5ZWFyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoud2Vla051bWJlciAtIGFuIElTTyB3ZWVrIG51bWJlciwgYmV0d2VlbiAxIGFuZCA1MiBvciA1MywgZGVwZW5kaW5nIG9uIHRoZSB5ZWFyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoud2Vla2RheSAtIGFuIElTTyB3ZWVrZGF5LCAxLTcsIHdoZXJlIDEgaXMgTW9uZGF5IGFuZCA3IGlzIFN1bmRheVxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLmhvdXIgLSBob3VyIG9mIHRoZSBkYXksIDAtMjNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5taW51dGUgLSBtaW51dGUgb2YgdGhlIGhvdXIsIDAtNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5zZWNvbmQgLSBzZWNvbmQgb2YgdGhlIG1pbnV0ZSwgMC01OVxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm1pbGxpc2Vjb25kIC0gbWlsbGlzZWNvbmQgb2YgdGhlIHNlY29uZCwgMC05OTlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIGZvciBjcmVhdGluZyB0aGlzIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRzLnpvbmU9J2xvY2FsJ10gLSBpbnRlcnByZXQgdGhlIG51bWJlcnMgaW4gdGhlIGNvbnRleHQgb2YgYSBwYXJ0aWN1bGFyIHpvbmUuIENhbiB0YWtlIGFueSB2YWx1ZSB0YWtlbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gc2V0Wm9uZSgpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J3N5c3RlbSdzIGxvY2FsZSddIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyB5ZWFyOiAxOTgyLCBtb250aDogNSwgZGF5OiAyNX0pLnRvSVNPRGF0ZSgpIC8vPT4gJzE5ODItMDUtMjUnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyB5ZWFyOiAxOTgyIH0pLnRvSVNPRGF0ZSgpIC8vPT4gJzE5ODItMDEtMDEnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyBob3VyOiAxMCwgbWludXRlOiAyNiwgc2Vjb25kOiA2IH0pIC8vfj4gdG9kYXkgYXQgMTA6MjY6MDZcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IGhvdXI6IDEwLCBtaW51dGU6IDI2LCBzZWNvbmQ6IDYgfSwgeyB6b25lOiAndXRjJyB9KSxcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IGhvdXI6IDEwLCBtaW51dGU6IDI2LCBzZWNvbmQ6IDYgfSwgeyB6b25lOiAnbG9jYWwnIH0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyBob3VyOiAxMCwgbWludXRlOiAyNiwgc2Vjb25kOiA2IH0sIHsgem9uZTogJ0FtZXJpY2EvTmV3X1lvcmsnIH0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyB3ZWVrWWVhcjogMjAxNiwgd2Vla051bWJlcjogMiwgd2Vla2RheTogMyB9KS50b0lTT0RhdGUoKSAvLz0+ICcyMDE2LTAxLTEzJ1xuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBzdGF0aWMgZnJvbU9iamVjdChvYmosIG9wdHMgPSB7fSkge1xuICAgIG9iaiA9IG9iaiB8fCB7fTtcbiAgICBjb25zdCB6b25lVG9Vc2UgPSBub3JtYWxpemVab25lKG9wdHMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuXG4gICAgaWYgKCF6b25lVG9Vc2UuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQodW5zdXBwb3J0ZWRab25lKHpvbmVUb1VzZSkpO1xuICAgIH1cblxuICAgIGNvbnN0IHRzTm93ID0gU2V0dGluZ3Mubm93KCksXG4gICAgICAgICAgb2Zmc2V0UHJvdmlzID0gIWlzVW5kZWZpbmVkKG9wdHMuc3BlY2lmaWNPZmZzZXQpID8gb3B0cy5zcGVjaWZpY09mZnNldCA6IHpvbmVUb1VzZS5vZmZzZXQodHNOb3cpLFxuICAgICAgICAgIG5vcm1hbGl6ZWQgPSBub3JtYWxpemVPYmplY3Qob2JqLCBub3JtYWxpemVVbml0KSxcbiAgICAgICAgICBjb250YWluc09yZGluYWwgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC5vcmRpbmFsKSxcbiAgICAgICAgICBjb250YWluc0dyZWdvclllYXIgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC55ZWFyKSxcbiAgICAgICAgICBjb250YWluc0dyZWdvck1EID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQubW9udGgpIHx8ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLmRheSksXG4gICAgICAgICAgY29udGFpbnNHcmVnb3IgPSBjb250YWluc0dyZWdvclllYXIgfHwgY29udGFpbnNHcmVnb3JNRCxcbiAgICAgICAgICBkZWZpbml0ZVdlZWtEZWYgPSBub3JtYWxpemVkLndlZWtZZWFyIHx8IG5vcm1hbGl6ZWQud2Vla051bWJlcixcbiAgICAgICAgICBsb2MgPSBMb2NhbGUuZnJvbU9iamVjdChvcHRzKTsgLy8gY2FzZXM6XG4gICAgLy8ganVzdCBhIHdlZWtkYXkgLT4gdGhpcyB3ZWVrJ3MgaW5zdGFuY2Ugb2YgdGhhdCB3ZWVrZGF5LCBubyB3b3JyaWVzXG4gICAgLy8gKGdyZWdvcmlhbiBkYXRhIG9yIG9yZGluYWwpICsgKHdlZWtZZWFyIG9yIHdlZWtOdW1iZXIpIC0+IGVycm9yXG4gICAgLy8gKGdyZWdvcmlhbiBtb250aCBvciBkYXkpICsgb3JkaW5hbCAtPiBlcnJvclxuICAgIC8vIG90aGVyd2lzZSBqdXN0IHVzZSB3ZWVrcyBvciBvcmRpbmFscyBvciBncmVnb3JpYW4sIGRlcGVuZGluZyBvbiB3aGF0J3Mgc3BlY2lmaWVkXG5cbiAgICBpZiAoKGNvbnRhaW5zR3JlZ29yIHx8IGNvbnRhaW5zT3JkaW5hbCkgJiYgZGVmaW5pdGVXZWVrRGVmKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXCJDYW4ndCBtaXggd2Vla1llYXIvd2Vla051bWJlciB1bml0cyB3aXRoIHllYXIvbW9udGgvZGF5IG9yIG9yZGluYWxzXCIpO1xuICAgIH1cblxuICAgIGlmIChjb250YWluc0dyZWdvck1EICYmIGNvbnRhaW5zT3JkaW5hbCkge1xuICAgICAgdGhyb3cgbmV3IENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yKFwiQ2FuJ3QgbWl4IG9yZGluYWwgZGF0ZXMgd2l0aCBtb250aC9kYXlcIik7XG4gICAgfVxuXG4gICAgY29uc3QgdXNlV2Vla0RhdGEgPSBkZWZpbml0ZVdlZWtEZWYgfHwgbm9ybWFsaXplZC53ZWVrZGF5ICYmICFjb250YWluc0dyZWdvcjsgLy8gY29uZmlndXJlIG91cnNlbHZlcyB0byBkZWFsIHdpdGggZ3JlZ29yaWFuIGRhdGVzIG9yIHdlZWsgc3R1ZmZcblxuICAgIGxldCB1bml0cyxcbiAgICAgICAgZGVmYXVsdFZhbHVlcyxcbiAgICAgICAgb2JqTm93ID0gdHNUb09iaih0c05vdywgb2Zmc2V0UHJvdmlzKTtcblxuICAgIGlmICh1c2VXZWVrRGF0YSkge1xuICAgICAgdW5pdHMgPSBvcmRlcmVkV2Vla1VuaXRzO1xuICAgICAgZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRXZWVrVW5pdFZhbHVlcztcbiAgICAgIG9iak5vdyA9IGdyZWdvcmlhblRvV2VlayhvYmpOb3cpO1xuICAgIH0gZWxzZSBpZiAoY29udGFpbnNPcmRpbmFsKSB7XG4gICAgICB1bml0cyA9IG9yZGVyZWRPcmRpbmFsVW5pdHM7XG4gICAgICBkZWZhdWx0VmFsdWVzID0gZGVmYXVsdE9yZGluYWxVbml0VmFsdWVzO1xuICAgICAgb2JqTm93ID0gZ3JlZ29yaWFuVG9PcmRpbmFsKG9iak5vdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVuaXRzID0gb3JkZXJlZFVuaXRzO1xuICAgICAgZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRVbml0VmFsdWVzO1xuICAgIH0gLy8gc2V0IGRlZmF1bHQgdmFsdWVzIGZvciBtaXNzaW5nIHN0dWZmXG5cblxuICAgIGxldCBmb3VuZEZpcnN0ID0gZmFsc2U7XG5cbiAgICBmb3IgKGNvbnN0IHUgb2YgdW5pdHMpIHtcbiAgICAgIGNvbnN0IHYgPSBub3JtYWxpemVkW3VdO1xuXG4gICAgICBpZiAoIWlzVW5kZWZpbmVkKHYpKSB7XG4gICAgICAgIGZvdW5kRmlyc3QgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChmb3VuZEZpcnN0KSB7XG4gICAgICAgIG5vcm1hbGl6ZWRbdV0gPSBkZWZhdWx0VmFsdWVzW3VdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9ybWFsaXplZFt1XSA9IG9iak5vd1t1XTtcbiAgICAgIH1cbiAgICB9IC8vIG1ha2Ugc3VyZSB0aGUgdmFsdWVzIHdlIGhhdmUgYXJlIGluIHJhbmdlXG5cblxuICAgIGNvbnN0IGhpZ2hlck9yZGVySW52YWxpZCA9IHVzZVdlZWtEYXRhID8gaGFzSW52YWxpZFdlZWtEYXRhKG5vcm1hbGl6ZWQpIDogY29udGFpbnNPcmRpbmFsID8gaGFzSW52YWxpZE9yZGluYWxEYXRhKG5vcm1hbGl6ZWQpIDogaGFzSW52YWxpZEdyZWdvcmlhbkRhdGEobm9ybWFsaXplZCksXG4gICAgICAgICAgaW52YWxpZCA9IGhpZ2hlck9yZGVySW52YWxpZCB8fCBoYXNJbnZhbGlkVGltZURhdGEobm9ybWFsaXplZCk7XG5cbiAgICBpZiAoaW52YWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoaW52YWxpZCk7XG4gICAgfSAvLyBjb21wdXRlIHRoZSBhY3R1YWwgdGltZVxuXG5cbiAgICBjb25zdCBncmVnb3JpYW4gPSB1c2VXZWVrRGF0YSA/IHdlZWtUb0dyZWdvcmlhbihub3JtYWxpemVkKSA6IGNvbnRhaW5zT3JkaW5hbCA/IG9yZGluYWxUb0dyZWdvcmlhbihub3JtYWxpemVkKSA6IG5vcm1hbGl6ZWQsXG4gICAgICAgICAgW3RzRmluYWwsIG9mZnNldEZpbmFsXSA9IG9ialRvVFMoZ3JlZ29yaWFuLCBvZmZzZXRQcm92aXMsIHpvbmVUb1VzZSksXG4gICAgICAgICAgaW5zdCA9IG5ldyBEYXRlVGltZSh7XG4gICAgICB0czogdHNGaW5hbCxcbiAgICAgIHpvbmU6IHpvbmVUb1VzZSxcbiAgICAgIG86IG9mZnNldEZpbmFsLFxuICAgICAgbG9jXG4gICAgfSk7IC8vIGdyZWdvcmlhbiBkYXRhICsgd2Vla2RheSBzZXJ2ZXMgb25seSB0byB2YWxpZGF0ZVxuXG4gICAgaWYgKG5vcm1hbGl6ZWQud2Vla2RheSAmJiBjb250YWluc0dyZWdvciAmJiBvYmoud2Vla2RheSAhPT0gaW5zdC53ZWVrZGF5KSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChcIm1pc21hdGNoZWQgd2Vla2RheVwiLCBgeW91IGNhbid0IHNwZWNpZnkgYm90aCBhIHdlZWtkYXkgb2YgJHtub3JtYWxpemVkLndlZWtkYXl9IGFuZCBhIGRhdGUgb2YgJHtpbnN0LnRvSVNPKCl9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3Q7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gSVNPIDg2MDEgc3RyaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIElTTyBzdHJpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGFmZmVjdCB0aGUgY3JlYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIHVzZSB0aGlzIHpvbmUgaWYgbm8gb2Zmc2V0IGlzIHNwZWNpZmllZCBpbiB0aGUgaW5wdXQgc3RyaW5nIGl0c2VsZi4gV2lsbCBhbHNvIGNvbnZlcnQgdGhlIHRpbWUgdG8gdGhpcyB6b25lXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2V0Wm9uZT1mYWxzZV0gLSBvdmVycmlkZSB0aGUgem9uZSB3aXRoIGEgZml4ZWQtb2Zmc2V0IHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCBpZiBpdCBzcGVjaWZpZXMgb25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J3N5c3RlbSdzIGxvY2FsZSddIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm91dHB1dENhbGVuZGFyXSAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm51bWJlcmluZ1N5c3RlbV0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSVNPKCcyMDE2LTA1LTI1VDA5OjA4OjM0LjEyMycpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21JU08oJzIwMTYtMDUtMjVUMDk6MDg6MzQuMTIzKzA2OjAwJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUlTTygnMjAxNi0wNS0yNVQwOTowODozNC4xMjMrMDY6MDAnLCB7c2V0Wm9uZTogdHJ1ZX0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21JU08oJzIwMTYtMDUtMjVUMDk6MDg6MzQuMTIzJywge3pvbmU6ICd1dGMnfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUlTTygnMjAxNi1XMDUtNCcpXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cblxuXG4gIHN0YXRpYyBmcm9tSVNPKHRleHQsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IFt2YWxzLCBwYXJzZWRab25lXSA9IHBhcnNlSVNPRGF0ZSh0ZXh0KTtcbiAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzLCBcIklTTyA4NjAxXCIsIHRleHQpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGFuIFJGQyAyODIyIHN0cmluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRoZSBSRkMgMjgyMiBzdHJpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGFmZmVjdCB0aGUgY3JlYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIGNvbnZlcnQgdGhlIHRpbWUgdG8gdGhpcyB6b25lLiBTaW5jZSB0aGUgb2Zmc2V0IGlzIGFsd2F5cyBzcGVjaWZpZWQgaW4gdGhlIHN0cmluZyBpdHNlbGYsIHRoaXMgaGFzIG5vIGVmZmVjdCBvbiB0aGUgaW50ZXJwcmV0YXRpb24gb2Ygc3RyaW5nLCBtZXJlbHkgdGhlIHpvbmUgdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpcyBleHByZXNzZWQgaW4uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2V0Wm9uZT1mYWxzZV0gLSBvdmVycmlkZSB0aGUgem9uZSB3aXRoIGEgZml4ZWQtb2Zmc2V0IHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCBpZiBpdCBzcGVjaWZpZXMgb25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J3N5c3RlbSdzIGxvY2FsZSddIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21SRkMyODIyKCcyNSBOb3YgMjAxNiAxMzoyMzoxMiBHTVQnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tUkZDMjgyMignRnJpLCAyNSBOb3YgMjAxNiAxMzoyMzoxMiArMDYwMCcpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21SRkMyODIyKCcyNSBOb3YgMjAxNiAxMzoyMyBaJylcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuXG5cbiAgc3RhdGljIGZyb21SRkMyODIyKHRleHQsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IFt2YWxzLCBwYXJzZWRab25lXSA9IHBhcnNlUkZDMjgyMkRhdGUodGV4dCk7XG4gICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgXCJSRkMgMjgyMlwiLCB0ZXh0KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhbiBIVFRQIGhlYWRlciBkYXRlXG4gICAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjMy5odG1sI3NlYzMuMy4xXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIEhUVFAgaGVhZGVyIGRhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGFmZmVjdCB0aGUgY3JlYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIGNvbnZlcnQgdGhlIHRpbWUgdG8gdGhpcyB6b25lLiBTaW5jZSBIVFRQIGRhdGVzIGFyZSBhbHdheXMgaW4gVVRDLCB0aGlzIGhhcyBubyBlZmZlY3Qgb24gdGhlIGludGVycHJldGF0aW9uIG9mIHN0cmluZywgbWVyZWx5IHRoZSB6b25lIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaXMgZXhwcmVzc2VkIGluLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCB0aGUgZml4ZWQtb2Zmc2V0IHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcuIEZvciBIVFRQIGRhdGVzLCB0aGlzIGlzIGFsd2F5cyBVVEMsIHNvIHRoaXMgb3B0aW9uIGlzIGVxdWl2YWxlbnQgdG8gc2V0dGluZyB0aGUgYHpvbmVgIG9wdGlvbiB0byAndXRjJywgYnV0IHRoaXMgb3B0aW9uIGlzIGluY2x1ZGVkIGZvciBjb25zaXN0ZW5jeSB3aXRoIHNpbWlsYXIgbWV0aG9kcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nc3lzdGVtJ3MgbG9jYWxlJ10gLSBhIGxvY2FsZSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUhUVFAoJ1N1biwgMDYgTm92IDE5OTQgMDg6NDk6MzcgR01UJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUhUVFAoJ1N1bmRheSwgMDYtTm92LTk0IDA4OjQ5OjM3IEdNVCcpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21IVFRQKCdTdW4gTm92ICA2IDA4OjQ5OjM3IDE5OTQnKVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBzdGF0aWMgZnJvbUhUVFAodGV4dCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgW3ZhbHMsIHBhcnNlZFpvbmVdID0gcGFyc2VIVFRQRGF0ZSh0ZXh0KTtcbiAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzLCBcIkhUVFBcIiwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gaW5wdXQgc3RyaW5nIGFuZCBmb3JtYXQgc3RyaW5nLlxuICAgKiBEZWZhdWx0cyB0byBlbi1VUyBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkLCByZWdhcmRsZXNzIG9mIHRoZSBzeXN0ZW0ncyBsb2NhbGUuIEZvciBhIHRhYmxlIG9mIHRva2VucyBhbmQgdGhlaXIgaW50ZXJwcmV0YXRpb25zLCBzZWUgW2hlcmVdKGh0dHBzOi8vbW9tZW50LmdpdGh1Yi5pby9sdXhvbi8jL3BhcnNpbmc/aWQ9dGFibGUtb2YtdG9rZW5zKS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgc3RyaW5nIHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbXQgLSB0aGUgZm9ybWF0IHRoZSBzdHJpbmcgaXMgZXhwZWN0ZWQgdG8gYmUgaW4gKHNlZSB0aGUgbGluayBiZWxvdyBmb3IgdGhlIGZvcm1hdHMpXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBhZmZlY3QgdGhlIGNyZWF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRzLnpvbmU9J2xvY2FsJ10gLSB1c2UgdGhpcyB6b25lIGlmIG5vIG9mZnNldCBpcyBzcGVjaWZpZWQgaW4gdGhlIGlucHV0IHN0cmluZyBpdHNlbGYuIFdpbGwgYWxzbyBjb252ZXJ0IHRoZSBEYXRlVGltZSB0byB0aGlzIHpvbmVcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zZXRab25lPWZhbHNlXSAtIG92ZXJyaWRlIHRoZSB6b25lIHdpdGggYSB6b25lIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGl0c2VsZiwgaWYgaXQgc3BlY2lmaWVzIG9uZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gYSBsb2NhbGUgc3RyaW5nIHRvIHVzZSB3aGVuIHBhcnNpbmcuIFdpbGwgYWxzbyBzZXQgdGhlIERhdGVUaW1lIHRvIHRoaXMgbG9jYWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZSB3aGVuIHBhcnNpbmcuIFdpbGwgYWxzbyBzZXQgdGhlIHJlc3VsdGluZyBEYXRlVGltZSB0byB0aGlzIG51bWJlcmluZyBzeXN0ZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cblxuXG4gIHN0YXRpYyBmcm9tRm9ybWF0KHRleHQsIGZtdCwgb3B0cyA9IHt9KSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHRleHQpIHx8IGlzVW5kZWZpbmVkKGZtdCkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcImZyb21Gb3JtYXQgcmVxdWlyZXMgYW4gaW5wdXQgc3RyaW5nIGFuZCBhIGZvcm1hdFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCB7XG4gICAgICBsb2NhbGUgPSBudWxsLFxuICAgICAgbnVtYmVyaW5nU3lzdGVtID0gbnVsbFxuICAgIH0gPSBvcHRzLFxuICAgICAgICAgIGxvY2FsZVRvVXNlID0gTG9jYWxlLmZyb21PcHRzKHtcbiAgICAgIGxvY2FsZSxcbiAgICAgIG51bWJlcmluZ1N5c3RlbSxcbiAgICAgIGRlZmF1bHRUb0VOOiB0cnVlXG4gICAgfSksXG4gICAgICAgICAgW3ZhbHMsIHBhcnNlZFpvbmUsIHNwZWNpZmljT2Zmc2V0LCBpbnZhbGlkXSA9IHBhcnNlRnJvbVRva2Vucyhsb2NhbGVUb1VzZSwgdGV4dCwgZm10KTtcblxuICAgIGlmIChpbnZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChpbnZhbGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgYGZvcm1hdCAke2ZtdH1gLCB0ZXh0LCBzcGVjaWZpY09mZnNldCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgZnJvbUZvcm1hdCBpbnN0ZWFkXG4gICAqL1xuXG5cbiAgc3RhdGljIGZyb21TdHJpbmcodGV4dCwgZm10LCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUZvcm1hdCh0ZXh0LCBmbXQsIG9wdHMpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGEgU1FMIGRhdGUsIHRpbWUsIG9yIGRhdGV0aW1lXG4gICAqIERlZmF1bHRzIHRvIGVuLVVTIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWQsIHJlZ2FyZGxlc3Mgb2YgdGhlIHN5c3RlbSdzIGxvY2FsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRoZSBzdHJpbmcgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGFmZmVjdCB0aGUgY3JlYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIHVzZSB0aGlzIHpvbmUgaWYgbm8gb2Zmc2V0IGlzIHNwZWNpZmllZCBpbiB0aGUgaW5wdXQgc3RyaW5nIGl0c2VsZi4gV2lsbCBhbHNvIGNvbnZlcnQgdGhlIERhdGVUaW1lIHRvIHRoaXMgem9uZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCBhIHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCBpZiBpdCBzcGVjaWZpZXMgb25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J2VuLVVTJ10gLSBhIGxvY2FsZSBzdHJpbmcgdG8gdXNlIHdoZW4gcGFyc2luZy4gV2lsbCBhbHNvIHNldCB0aGUgRGF0ZVRpbWUgdG8gdGhpcyBsb2NhbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlIHdoZW4gcGFyc2luZy4gV2lsbCBhbHNvIHNldCB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIHRvIHRoaXMgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNScpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcyMDE3LTA1LTE1IDA5OjEyOjM0LjM0MicpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQuMzQyKzA2OjAwJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNSAwOToxMjozNC4zNDIgQW1lcmljYS9Mb3NfQW5nZWxlcycpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQuMzQyIEFtZXJpY2EvTG9zX0FuZ2VsZXMnLCB7IHNldFpvbmU6IHRydWUgfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNSAwOToxMjozNC4zNDInLCB7IHpvbmU6ICdBbWVyaWNhL0xvc19BbmdlbGVzJyB9KVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcwOToxMjozNC4zNDInKVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBzdGF0aWMgZnJvbVNRTCh0ZXh0LCBvcHRzID0ge30pIHtcbiAgICBjb25zdCBbdmFscywgcGFyc2VkWm9uZV0gPSBwYXJzZVNRTCh0ZXh0KTtcbiAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzLCBcIlNRTFwiLCB0ZXh0KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuIGludmFsaWQgRGF0ZVRpbWUuXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IHJlYXNvbiAtIHNpbXBsZSBzdHJpbmcgb2Ygd2h5IHRoaXMgRGF0ZVRpbWUgaXMgaW52YWxpZC4gU2hvdWxkIG5vdCBjb250YWluIHBhcmFtZXRlcnMgb3IgYW55dGhpbmcgZWxzZSBkYXRhLWRlcGVuZGVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2V4cGxhbmF0aW9uPW51bGxdIC0gbG9uZ2VyIGV4cGxhbmF0aW9uLCBtYXkgaW5jbHVkZSBwYXJhbWV0ZXJzIGFuZCBvdGhlciB1c2VmdWwgZGVidWdnaW5nIGluZm9ybWF0aW9uXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cblxuXG4gIHN0YXRpYyBpbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24gPSBudWxsKSB7XG4gICAgaWYgKCFyZWFzb24pIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm5lZWQgdG8gc3BlY2lmeSBhIHJlYXNvbiB0aGUgRGF0ZVRpbWUgaXMgaW52YWxpZFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbnZhbGlkID0gcmVhc29uIGluc3RhbmNlb2YgSW52YWxpZCA/IHJlYXNvbiA6IG5ldyBJbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24pO1xuXG4gICAgaWYgKFNldHRpbmdzLnRocm93T25JbnZhbGlkKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZERhdGVUaW1lRXJyb3IoaW52YWxpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe1xuICAgICAgICBpbnZhbGlkXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIG9iamVjdCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlVGltZS4gV29ya3MgYWNyb3NzIGNvbnRleHQgYm91bmRhcmllc1xuICAgKiBAcGFyYW0ge29iamVjdH0gb1xuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIHN0YXRpYyBpc0RhdGVUaW1lKG8pIHtcbiAgICByZXR1cm4gbyAmJiBvLmlzTHV4b25EYXRlVGltZSB8fCBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogUHJvZHVjZSB0aGUgZm9ybWF0IHN0cmluZyBmb3IgYSBzZXQgb2Ygb3B0aW9uc1xuICAgKiBAcGFyYW0gZm9ybWF0T3B0c1xuICAgKiBAcGFyYW0gbG9jYWxlT3B0c1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHN0YXRpYyBwYXJzZUZvcm1hdEZvck9wdHMoZm9ybWF0T3B0cywgbG9jYWxlT3B0cyA9IHt9KSB7XG4gICAgY29uc3QgdG9rZW5MaXN0ID0gZm9ybWF0T3B0c1RvVG9rZW5zKGZvcm1hdE9wdHMsIExvY2FsZS5mcm9tT2JqZWN0KGxvY2FsZU9wdHMpKTtcbiAgICByZXR1cm4gIXRva2VuTGlzdCA/IG51bGwgOiB0b2tlbkxpc3QubWFwKHQgPT4gdCA/IHQudmFsIDogbnVsbCkuam9pbihcIlwiKTtcbiAgfSAvLyBJTkZPXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdmFsdWUgb2YgdW5pdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBhIHVuaXQgc3VjaCBhcyAnbWludXRlJyBvciAnZGF5J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA3LCA0KS5nZXQoJ21vbnRoJyk7IC8vPT4gN1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA3LCA0KS5nZXQoJ2RheScpOyAvLz0+IDRcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGdldCh1bml0KSB7XG4gICAgcmV0dXJuIHRoaXNbdW5pdF07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgRGF0ZVRpbWUgaXMgdmFsaWQuIEludmFsaWQgRGF0ZVRpbWVzIG9jY3VyIHdoZW46XG4gICAqICogVGhlIERhdGVUaW1lIHdhcyBjcmVhdGVkIGZyb20gaW52YWxpZCBjYWxlbmRhciBpbmZvcm1hdGlvbiwgc3VjaCBhcyB0aGUgMTN0aCBtb250aCBvciBGZWJydWFyeSAzMFxuICAgKiAqIFRoZSBEYXRlVGltZSB3YXMgY3JlYXRlZCBieSBhbiBvcGVyYXRpb24gb24gYW5vdGhlciBpbnZhbGlkIGRhdGVcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuXG5cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCA9PT0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBlcnJvciBjb2RlIGlmIHRoaXMgRGF0ZVRpbWUgaXMgaW52YWxpZCwgb3IgbnVsbCBpZiB0aGUgRGF0ZVRpbWUgaXMgdmFsaWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG5cblxuICBnZXQgaW52YWxpZFJlYXNvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLnJlYXNvbiA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gZXhwbGFuYXRpb24gb2Ygd2h5IHRoaXMgRGF0ZVRpbWUgYmVjYW1lIGludmFsaWQsIG9yIG51bGwgaWYgdGhlIERhdGVUaW1lIGlzIHZhbGlkXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IGludmFsaWRFeHBsYW5hdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLmV4cGxhbmF0aW9uIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBsb2NhbGUgb2YgYSBEYXRlVGltZSwgc3VjaCAnZW4tR0InLiBUaGUgbG9jYWxlIGlzIHVzZWQgd2hlbiBmb3JtYXR0aW5nIHRoZSBEYXRlVGltZVxuICAgKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cblxuXG4gIGdldCBsb2NhbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMubG9jLmxvY2FsZSA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgbnVtYmVyaW5nIHN5c3RlbSBvZiBhIERhdGVUaW1lLCBzdWNoICdiZW5nJy4gVGhlIG51bWJlcmluZyBzeXN0ZW0gaXMgdXNlZCB3aGVuIGZvcm1hdHRpbmcgdGhlIERhdGVUaW1lXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IG51bWJlcmluZ1N5c3RlbSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2MubnVtYmVyaW5nU3lzdGVtIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBvdXRwdXQgY2FsZW5kYXIgb2YgYSBEYXRlVGltZSwgc3VjaCAnaXNsYW1pYycuIFRoZSBvdXRwdXQgY2FsZW5kYXIgaXMgdXNlZCB3aGVuIGZvcm1hdHRpbmcgdGhlIERhdGVUaW1lXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IG91dHB1dENhbGVuZGFyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmxvYy5vdXRwdXRDYWxlbmRhciA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgdGltZSB6b25lIGFzc29jaWF0ZWQgd2l0aCB0aGlzIERhdGVUaW1lLlxuICAgKiBAdHlwZSB7Wm9uZX1cbiAgICovXG5cblxuICBnZXQgem9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fem9uZTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lIG9mIHRoZSB0aW1lIHpvbmUuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IHpvbmVOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnpvbmUubmFtZSA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgeWVhclxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkueWVhciAvLz0+IDIwMTdcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgeWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLnllYXIgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgcXVhcnRlclxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkucXVhcnRlciAvLz0+IDJcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgcXVhcnRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gTWF0aC5jZWlsKHRoaXMuYy5tb250aCAvIDMpIDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIG1vbnRoICgxLTEyKS5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUpLm1vbnRoIC8vPT4gNVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGdldCBtb250aCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1vbnRoIDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGRheSBvZiB0aGUgbW9udGggKDEtMzBpc2gpLlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkuZGF5IC8vPT4gMjVcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgZGF5KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmMuZGF5IDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGhvdXIgb2YgdGhlIGRheSAoMC0yMykuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1LCA5KS5ob3VyIC8vPT4gOVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGdldCBob3VyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmMuaG91ciA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBtaW51dGUgb2YgdGhlIGhvdXIgKDAtNTkpLlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSwgOSwgMzApLm1pbnV0ZSAvLz0+IDMwXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IG1pbnV0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1pbnV0ZSA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBzZWNvbmQgb2YgdGhlIG1pbnV0ZSAoMC01OSkuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1LCA5LCAzMCwgNTIpLnNlY29uZCAvLz0+IDUyXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IHNlY29uZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLnNlY29uZCA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kICgwLTk5OSkuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1LCA5LCAzMCwgNTIsIDY1NCkubWlsbGlzZWNvbmQgLy89PiA2NTRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgbWlsbGlzZWNvbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy5taWxsaXNlY29uZCA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSB3ZWVrIHllYXJcbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDEyLCAzMSkud2Vla1llYXIgLy89PiAyMDE1XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IHdlZWtZZWFyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKHRoaXMpLndlZWtZZWFyIDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHdlZWsgbnVtYmVyIG9mIHRoZSB3ZWVrIHllYXIgKDEtNTJpc2gpLlxuICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUpLndlZWtOdW1iZXIgLy89PiAyMVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGdldCB3ZWVrTnVtYmVyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKHRoaXMpLndlZWtOdW1iZXIgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgZGF5IG9mIHRoZSB3ZWVrLlxuICAgKiAxIGlzIE1vbmRheSBhbmQgNyBpcyBTdW5kYXlcbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDExLCAzMSkud2Vla2RheSAvLz0+IDRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgd2Vla2RheSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gcG9zc2libHlDYWNoZWRXZWVrRGF0YSh0aGlzKS53ZWVrZGF5IDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIG9yZGluYWwgKG1lYW5pbmcgdGhlIGRheSBvZiB0aGUgeWVhcilcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUpLm9yZGluYWwgLy89PiAxNDVcbiAgICogQHR5cGUge251bWJlcnxEYXRlVGltZX1cbiAgICovXG5cblxuICBnZXQgb3JkaW5hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gZ3JlZ29yaWFuVG9PcmRpbmFsKHRoaXMuYykub3JkaW5hbCA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBodW1hbiByZWFkYWJsZSBzaG9ydCBtb250aCBuYW1lLCBzdWNoIGFzICdPY3QnLlxuICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMTAsIDMwKS5tb250aFNob3J0IC8vPT4gT2N0XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IG1vbnRoU2hvcnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IEluZm8ubW9udGhzKFwic2hvcnRcIiwge1xuICAgICAgbG9jT2JqOiB0aGlzLmxvY1xuICAgIH0pW3RoaXMubW9udGggLSAxXSA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgaHVtYW4gcmVhZGFibGUgbG9uZyBtb250aCBuYW1lLCBzdWNoIGFzICdPY3RvYmVyJy5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDEwLCAzMCkubW9udGhMb25nIC8vPT4gT2N0b2JlclxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cblxuXG4gIGdldCBtb250aExvbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IEluZm8ubW9udGhzKFwibG9uZ1wiLCB7XG4gICAgICBsb2NPYmo6IHRoaXMubG9jXG4gICAgfSlbdGhpcy5tb250aCAtIDFdIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBodW1hbiByZWFkYWJsZSBzaG9ydCB3ZWVrZGF5LCBzdWNoIGFzICdNb24nLlxuICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMTAsIDMwKS53ZWVrZGF5U2hvcnQgLy89PiBNb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG5cblxuICBnZXQgd2Vla2RheVNob3J0KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbmZvLndlZWtkYXlzKFwic2hvcnRcIiwge1xuICAgICAgbG9jT2JqOiB0aGlzLmxvY1xuICAgIH0pW3RoaXMud2Vla2RheSAtIDFdIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBodW1hbiByZWFkYWJsZSBsb25nIHdlZWtkYXksIHN1Y2ggYXMgJ01vbmRheScuXG4gICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAxMCwgMzApLndlZWtkYXlMb25nIC8vPT4gTW9uZGF5XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IHdlZWtkYXlMb25nKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbmZvLndlZWtkYXlzKFwibG9uZ1wiLCB7XG4gICAgICBsb2NPYmo6IHRoaXMubG9jXG4gICAgfSlbdGhpcy53ZWVrZGF5IC0gMV0gOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIFVUQyBvZmZzZXQgb2YgdGhpcyBEYXRlVGltZSBpbiBtaW51dGVzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLm9mZnNldCAvLz0+IC0yNDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkub2Zmc2V0IC8vPT4gMFxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGdldCBvZmZzZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/ICt0aGlzLm8gOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgc2hvcnQgaHVtYW4gbmFtZSBmb3IgdGhlIHpvbmUncyBjdXJyZW50IG9mZnNldCwgZm9yIGV4YW1wbGUgXCJFU1RcIiBvciBcIkVEVFwiLlxuICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG5cblxuICBnZXQgb2Zmc2V0TmFtZVNob3J0KCkge1xuICAgIGlmICh0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnpvbmUub2Zmc2V0TmFtZSh0aGlzLnRzLCB7XG4gICAgICAgIGZvcm1hdDogXCJzaG9ydFwiLFxuICAgICAgICBsb2NhbGU6IHRoaXMubG9jYWxlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGxvbmcgaHVtYW4gbmFtZSBmb3IgdGhlIHpvbmUncyBjdXJyZW50IG9mZnNldCwgZm9yIGV4YW1wbGUgXCJFYXN0ZXJuIFN0YW5kYXJkIFRpbWVcIiBvciBcIkVhc3Rlcm4gRGF5bGlnaHQgVGltZVwiLlxuICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG5cblxuICBnZXQgb2Zmc2V0TmFtZUxvbmcoKSB7XG4gICAgaWYgKHRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIHRoaXMuem9uZS5vZmZzZXROYW1lKHRoaXMudHMsIHtcbiAgICAgICAgZm9ybWF0OiBcImxvbmdcIixcbiAgICAgICAgbG9jYWxlOiB0aGlzLmxvY2FsZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogR2V0IHdoZXRoZXIgdGhpcyB6b25lJ3Mgb2Zmc2V0IGV2ZXIgY2hhbmdlcywgYXMgaW4gYSBEU1QuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cblxuXG4gIGdldCBpc09mZnNldEZpeGVkKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnpvbmUuaXNVbml2ZXJzYWwgOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciB0aGUgRGF0ZVRpbWUgaXMgaW4gYSBEU1QuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cblxuXG4gIGdldCBpc0luRFNUKCkge1xuICAgIGlmICh0aGlzLmlzT2Zmc2V0Rml4ZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0ID4gdGhpcy5zZXQoe1xuICAgICAgICBtb250aDogMSxcbiAgICAgICAgZGF5OiAxXG4gICAgICB9KS5vZmZzZXQgfHwgdGhpcy5vZmZzZXQgPiB0aGlzLnNldCh7XG4gICAgICAgIG1vbnRoOiA1XG4gICAgICB9KS5vZmZzZXQ7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBEYXRlVGltZSBpcyBpbiBhIGxlYXAgeWVhciwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTYpLmlzSW5MZWFwWWVhciAvLz0+IHRydWVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxMykuaXNJbkxlYXBZZWFyIC8vPT4gZmFsc2VcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuXG5cbiAgZ2V0IGlzSW5MZWFwWWVhcigpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGF5cyBpbiB0aGlzIERhdGVUaW1lJ3MgbW9udGhcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNiwgMikuZGF5c0luTW9udGggLy89PiAyOVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2LCAzKS5kYXlzSW5Nb250aCAvLz0+IDMxXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IGRheXNJbk1vbnRoKCkge1xuICAgIHJldHVybiBkYXlzSW5Nb250aCh0aGlzLnllYXIsIHRoaXMubW9udGgpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGF5cyBpbiB0aGlzIERhdGVUaW1lJ3MgeWVhclxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2KS5kYXlzSW5ZZWFyIC8vPT4gMzY2XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTMpLmRheXNJblllYXIgLy89PiAzNjVcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgZGF5c0luWWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gZGF5c0luWWVhcih0aGlzLnllYXIpIDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygd2Vla3MgaW4gdGhpcyBEYXRlVGltZSdzIHllYXJcbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMDQpLndlZWtzSW5XZWVrWWVhciAvLz0+IDUzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTMpLndlZWtzSW5XZWVrWWVhciAvLz0+IDUyXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IHdlZWtzSW5XZWVrWWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gd2Vla3NJbldlZWtZZWFyKHRoaXMud2Vla1llYXIpIDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSByZXNvbHZlZCBJbnRsIG9wdGlvbnMgZm9yIHRoaXMgRGF0ZVRpbWUuXG4gICAqIFRoaXMgaXMgdXNlZnVsIGluIHVuZGVyc3RhbmRpbmcgdGhlIGJlaGF2aW9yIG9mIGZvcm1hdHRpbmcgbWV0aG9kc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIHRoZSBzYW1lIG9wdGlvbnMgYXMgdG9Mb2NhbGVTdHJpbmdcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHJlc29sdmVkTG9jYWxlT3B0aW9ucyhvcHRzID0ge30pIHtcbiAgICBjb25zdCB7XG4gICAgICBsb2NhbGUsXG4gICAgICBudW1iZXJpbmdTeXN0ZW0sXG4gICAgICBjYWxlbmRhclxuICAgIH0gPSBGb3JtYXR0ZXIuY3JlYXRlKHRoaXMubG9jLmNsb25lKG9wdHMpLCBvcHRzKS5yZXNvbHZlZE9wdGlvbnModGhpcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvY2FsZSxcbiAgICAgIG51bWJlcmluZ1N5c3RlbSxcbiAgICAgIG91dHB1dENhbGVuZGFyOiBjYWxlbmRhclxuICAgIH07XG4gIH0gLy8gVFJBTlNGT1JNXG5cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIERhdGVUaW1lJ3Mgem9uZSB0byBVVEMuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICpcbiAgICogRXF1aXZhbGVudCB0byB7QGxpbmsgRGF0ZVRpbWUjc2V0Wm9uZX0oJ3V0YycpXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIC0gb3B0aW9uYWxseSwgYW4gb2Zmc2V0IGZyb20gVVRDIGluIG1pbnV0ZXNcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzPXt9XSAtIG9wdGlvbnMgdG8gcGFzcyB0byBgc2V0Wm9uZSgpYFxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICB0b1VUQyhvZmZzZXQgPSAwLCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5zZXRab25lKEZpeGVkT2Zmc2V0Wm9uZS5pbnN0YW5jZShvZmZzZXQpLCBvcHRzKTtcbiAgfVxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgRGF0ZVRpbWUncyB6b25lIHRvIHRoZSBob3N0J3MgbG9jYWwgem9uZS4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLlxuICAgKlxuICAgKiBFcXVpdmFsZW50IHRvIGBzZXRab25lKCdsb2NhbCcpYFxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICB0b0xvY2FsKCkge1xuICAgIHJldHVybiB0aGlzLnNldFpvbmUoU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuICB9XG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBEYXRlVGltZSdzIHpvbmUgdG8gc3BlY2lmaWVkIHpvbmUuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhlIHNldHRlciBrZWVwcyB0aGUgdW5kZXJseWluZyB0aW1lIHRoZSBzYW1lIChhcyBpbiwgdGhlIHNhbWUgdGltZXN0YW1wKSwgYnV0IHRoZSBuZXcgaW5zdGFuY2Ugd2lsbCByZXBvcnQgZGlmZmVyZW50IGxvY2FsIHRpbWVzIGFuZCBjb25zaWRlciBEU1RzIHdoZW4gbWFraW5nIGNvbXB1dGF0aW9ucywgYXMgd2l0aCB7QGxpbmsgRGF0ZVRpbWUjcGx1c30uIFlvdSBtYXkgd2lzaCB0byB1c2Uge0BsaW5rIERhdGVUaW1lI3RvTG9jYWx9IGFuZCB7QGxpbmsgRGF0ZVRpbWUjdG9VVEN9IHdoaWNoIHByb3ZpZGUgc2ltcGxlIGNvbnZlbmllbmNlIHdyYXBwZXJzIGZvciBjb21tb25seSB1c2VkIHpvbmVzLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbem9uZT0nbG9jYWwnXSAtIGEgem9uZSBpZGVudGlmaWVyLiBBcyBhIHN0cmluZywgdGhhdCBjYW4gYmUgYW55IElBTkEgem9uZSBzdXBwb3J0ZWQgYnkgdGhlIGhvc3QgZW52aXJvbm1lbnQsIG9yIGEgZml4ZWQtb2Zmc2V0IG5hbWUgb2YgdGhlIGZvcm0gJ1VUQyszJywgb3IgdGhlIHN0cmluZ3MgJ2xvY2FsJyBvciAndXRjJy4gWW91IG1heSBhbHNvIHN1cHBseSBhbiBpbnN0YW5jZSBvZiBhIHtAbGluayBEYXRlVGltZSNab25lfSBjbGFzcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMua2VlcExvY2FsVGltZT1mYWxzZV0gLSBJZiB0cnVlLCBhZGp1c3QgdGhlIHVuZGVybHlpbmcgdGltZSBzbyB0aGF0IHRoZSBsb2NhbCB0aW1lIHN0YXlzIHRoZSBzYW1lLCBidXQgaW4gdGhlIHRhcmdldCB6b25lLiBZb3Ugc2hvdWxkIHJhcmVseSBuZWVkIHRoaXMuXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cblxuXG4gIHNldFpvbmUoem9uZSwge1xuICAgIGtlZXBMb2NhbFRpbWUgPSBmYWxzZSxcbiAgICBrZWVwQ2FsZW5kYXJUaW1lID0gZmFsc2VcbiAgfSA9IHt9KSB7XG4gICAgem9uZSA9IG5vcm1hbGl6ZVpvbmUoem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuXG4gICAgaWYgKHpvbmUuZXF1YWxzKHRoaXMuem9uZSkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSBpZiAoIXpvbmUuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQodW5zdXBwb3J0ZWRab25lKHpvbmUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IG5ld1RTID0gdGhpcy50cztcblxuICAgICAgaWYgKGtlZXBMb2NhbFRpbWUgfHwga2VlcENhbGVuZGFyVGltZSkge1xuICAgICAgICBjb25zdCBvZmZzZXRHdWVzcyA9IHpvbmUub2Zmc2V0KHRoaXMudHMpO1xuICAgICAgICBjb25zdCBhc09iaiA9IHRoaXMudG9PYmplY3QoKTtcbiAgICAgICAgW25ld1RTXSA9IG9ialRvVFMoYXNPYmosIG9mZnNldEd1ZXNzLCB6b25lKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb25lKHRoaXMsIHtcbiAgICAgICAgdHM6IG5ld1RTLFxuICAgICAgICB6b25lXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvciBvdXRwdXRDYWxlbmRhci4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtIHRoZSBwcm9wZXJ0aWVzIHRvIHNldFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkucmVjb25maWd1cmUoeyBsb2NhbGU6ICdlbi1HQicgfSlcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuXG5cbiAgcmVjb25maWd1cmUoe1xuICAgIGxvY2FsZSxcbiAgICBudW1iZXJpbmdTeXN0ZW0sXG4gICAgb3V0cHV0Q2FsZW5kYXJcbiAgfSA9IHt9KSB7XG4gICAgY29uc3QgbG9jID0gdGhpcy5sb2MuY2xvbmUoe1xuICAgICAgbG9jYWxlLFxuICAgICAgbnVtYmVyaW5nU3lzdGVtLFxuICAgICAgb3V0cHV0Q2FsZW5kYXJcbiAgICB9KTtcbiAgICByZXR1cm4gY2xvbmUodGhpcywge1xuICAgICAgbG9jXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIGxvY2FsZS4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLlxuICAgKiBKdXN0IGEgY29udmVuaWVudCBhbGlhcyBmb3IgcmVjb25maWd1cmUoeyBsb2NhbGUgfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUpLnNldExvY2FsZSgnZW4tR0InKVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBzZXRMb2NhbGUobG9jYWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucmVjb25maWd1cmUoe1xuICAgICAgbG9jYWxlXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIHZhbHVlcyBvZiBzcGVjaWZpZWQgdW5pdHMuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICogWW91IGNhbiBvbmx5IHNldCB1bml0cyB3aXRoIHRoaXMgbWV0aG9kOyBmb3IgXCJzZXR0aW5nXCIgbWV0YWRhdGEsIHNlZSB7QGxpbmsgRGF0ZVRpbWUjcmVjb25maWd1cmV9IGFuZCB7QGxpbmsgRGF0ZVRpbWUjc2V0Wm9uZX0uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZXMgLSBhIG1hcHBpbmcgb2YgdW5pdHMgdG8gbnVtYmVyc1xuICAgKiBAZXhhbXBsZSBkdC5zZXQoeyB5ZWFyOiAyMDE3IH0pXG4gICAqIEBleGFtcGxlIGR0LnNldCh7IGhvdXI6IDgsIG1pbnV0ZTogMzAgfSlcbiAgICogQGV4YW1wbGUgZHQuc2V0KHsgd2Vla2RheTogNSB9KVxuICAgKiBAZXhhbXBsZSBkdC5zZXQoeyB5ZWFyOiAyMDA1LCBvcmRpbmFsOiAyMzQgfSlcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuXG5cbiAgc2V0KHZhbHVlcykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplT2JqZWN0KHZhbHVlcywgbm9ybWFsaXplVW5pdCksXG4gICAgICAgICAgc2V0dGluZ1dlZWtTdHVmZiA9ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLndlZWtZZWFyKSB8fCAhaXNVbmRlZmluZWQobm9ybWFsaXplZC53ZWVrTnVtYmVyKSB8fCAhaXNVbmRlZmluZWQobm9ybWFsaXplZC53ZWVrZGF5KSxcbiAgICAgICAgICBjb250YWluc09yZGluYWwgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC5vcmRpbmFsKSxcbiAgICAgICAgICBjb250YWluc0dyZWdvclllYXIgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC55ZWFyKSxcbiAgICAgICAgICBjb250YWluc0dyZWdvck1EID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQubW9udGgpIHx8ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLmRheSksXG4gICAgICAgICAgY29udGFpbnNHcmVnb3IgPSBjb250YWluc0dyZWdvclllYXIgfHwgY29udGFpbnNHcmVnb3JNRCxcbiAgICAgICAgICBkZWZpbml0ZVdlZWtEZWYgPSBub3JtYWxpemVkLndlZWtZZWFyIHx8IG5vcm1hbGl6ZWQud2Vla051bWJlcjtcblxuICAgIGlmICgoY29udGFpbnNHcmVnb3IgfHwgY29udGFpbnNPcmRpbmFsKSAmJiBkZWZpbml0ZVdlZWtEZWYpIHtcbiAgICAgIHRocm93IG5ldyBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcihcIkNhbid0IG1peCB3ZWVrWWVhci93ZWVrTnVtYmVyIHVuaXRzIHdpdGggeWVhci9tb250aC9kYXkgb3Igb3JkaW5hbHNcIik7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRhaW5zR3JlZ29yTUQgJiYgY29udGFpbnNPcmRpbmFsKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXCJDYW4ndCBtaXggb3JkaW5hbCBkYXRlcyB3aXRoIG1vbnRoL2RheVwiKTtcbiAgICB9XG5cbiAgICBsZXQgbWl4ZWQ7XG5cbiAgICBpZiAoc2V0dGluZ1dlZWtTdHVmZikge1xuICAgICAgbWl4ZWQgPSB3ZWVrVG9HcmVnb3JpYW4oeyAuLi5ncmVnb3JpYW5Ub1dlZWsodGhpcy5jKSxcbiAgICAgICAgLi4ubm9ybWFsaXplZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaXNVbmRlZmluZWQobm9ybWFsaXplZC5vcmRpbmFsKSkge1xuICAgICAgbWl4ZWQgPSBvcmRpbmFsVG9HcmVnb3JpYW4oeyAuLi5ncmVnb3JpYW5Ub09yZGluYWwodGhpcy5jKSxcbiAgICAgICAgLi4ubm9ybWFsaXplZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1peGVkID0geyAuLi50aGlzLnRvT2JqZWN0KCksXG4gICAgICAgIC4uLm5vcm1hbGl6ZWRcbiAgICAgIH07IC8vIGlmIHdlIGRpZG4ndCBzZXQgdGhlIGRheSBidXQgd2UgZW5kZWQgdXAgb24gYW4gb3ZlcmZsb3cgZGF0ZSxcbiAgICAgIC8vIHVzZSB0aGUgbGFzdCBkYXkgb2YgdGhlIHJpZ2h0IG1vbnRoXG5cbiAgICAgIGlmIChpc1VuZGVmaW5lZChub3JtYWxpemVkLmRheSkpIHtcbiAgICAgICAgbWl4ZWQuZGF5ID0gTWF0aC5taW4oZGF5c0luTW9udGgobWl4ZWQueWVhciwgbWl4ZWQubW9udGgpLCBtaXhlZC5kYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IFt0cywgb10gPSBvYmpUb1RTKG1peGVkLCB0aGlzLm8sIHRoaXMuem9uZSk7XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIHtcbiAgICAgIHRzLFxuICAgICAgb1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBwZXJpb2Qgb2YgdGltZSB0byB0aGlzIERhdGVUaW1lIGFuZCByZXR1cm4gdGhlIHJlc3VsdGluZyBEYXRlVGltZVxuICAgKlxuICAgKiBBZGRpbmcgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG9yIG1pbGxpc2Vjb25kcyBpbmNyZWFzZXMgdGhlIHRpbWVzdGFtcCBieSB0aGUgcmlnaHQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcy4gQWRkaW5nIGRheXMsIG1vbnRocywgb3IgeWVhcnMgc2hpZnRzIHRoZSBjYWxlbmRhciwgYWNjb3VudGluZyBmb3IgRFNUcyBhbmQgbGVhcCB5ZWFycyBhbG9uZyB0aGUgd2F5LiBUaHVzLCBgZHQucGx1cyh7IGhvdXJzOiAyNCB9KWAgbWF5IHJlc3VsdCBpbiBhIGRpZmZlcmVudCB0aW1lIHRoYW4gYGR0LnBsdXMoeyBkYXlzOiAxIH0pYCBpZiB0aGVyZSdzIGEgRFNUIHNoaWZ0IGluIGJldHdlZW4uXG4gICAqIEBwYXJhbSB7RHVyYXRpb258T2JqZWN0fG51bWJlcn0gZHVyYXRpb24gLSBUaGUgYW1vdW50IHRvIGFkZC4gRWl0aGVyIGEgTHV4b24gRHVyYXRpb24sIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgdGhlIG9iamVjdCBhcmd1bWVudCB0byBEdXJhdGlvbi5mcm9tT2JqZWN0KClcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cygxMjMpIC8vfj4gaW4gMTIzIG1pbGxpc2Vjb25kc1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgbWludXRlczogMTUgfSkgLy9+PiBpbiAxNSBtaW51dGVzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBkYXlzOiAxIH0pIC8vfj4gdGhpcyB0aW1lIHRvbW9ycm93XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBkYXlzOiAtMSB9KSAvL34+IHRoaXMgdGltZSB5ZXN0ZXJkYXlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IGhvdXJzOiAzLCBtaW51dGVzOiAxMyB9KSAvL34+IGluIDMgaHIsIDEzIG1pblxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMywgbWludXRlczogMTMgfSkpIC8vfj4gaW4gMyBociwgMTMgbWluXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cblxuXG4gIHBsdXMoZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbik7XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIGFkanVzdFRpbWUodGhpcywgZHVyKSk7XG4gIH1cbiAgLyoqXG4gICAqIFN1YnRyYWN0IGEgcGVyaW9kIG9mIHRpbWUgdG8gdGhpcyBEYXRlVGltZSBhbmQgcmV0dXJuIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWVcbiAgICogU2VlIHtAbGluayBEYXRlVGltZSNwbHVzfVxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBzdWJ0cmFjdC4gRWl0aGVyIGEgTHV4b24gRHVyYXRpb24sIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgdGhlIG9iamVjdCBhcmd1bWVudCB0byBEdXJhdGlvbi5mcm9tT2JqZWN0KClcbiAgIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cblxuXG4gIG1pbnVzKGR1cmF0aW9uKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pLm5lZ2F0ZSgpO1xuICAgIHJldHVybiBjbG9uZSh0aGlzLCBhZGp1c3RUaW1lKHRoaXMsIGR1cikpO1xuICB9XG4gIC8qKlxuICAgKiBcIlNldFwiIHRoaXMgRGF0ZVRpbWUgdG8gdGhlIGJlZ2lubmluZyBvZiBhIHVuaXQgb2YgdGltZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBUaGUgdW5pdCB0byBnbyB0byB0aGUgYmVnaW5uaW5nIG9mLiBDYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLCBvciAnbWlsbGlzZWNvbmQnLlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzKS5zdGFydE9mKCdtb250aCcpLnRvSVNPRGF0ZSgpOyAvLz0+ICcyMDE0LTAzLTAxJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzKS5zdGFydE9mKCd5ZWFyJykudG9JU09EYXRlKCk7IC8vPT4gJzIwMTQtMDEtMDEnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLnN0YXJ0T2YoJ3dlZWsnKS50b0lTT0RhdGUoKTsgLy89PiAnMjAxNC0wMy0wMycsIHdlZWtzIGFsd2F5cyBzdGFydCBvbiBNb25kYXlzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMsIDUsIDMwKS5zdGFydE9mKCdkYXknKS50b0lTT1RpbWUoKTsgLy89PiAnMDA6MDAuMDAwLTA1OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzLCA1LCAzMCkuc3RhcnRPZignaG91cicpLnRvSVNPVGltZSgpOyAvLz0+ICcwNTowMDowMC4wMDAtMDU6MDAnXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cblxuXG4gIHN0YXJ0T2YodW5pdCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBvID0ge30sXG4gICAgICAgICAgbm9ybWFsaXplZFVuaXQgPSBEdXJhdGlvbi5ub3JtYWxpemVVbml0KHVuaXQpO1xuXG4gICAgc3dpdGNoIChub3JtYWxpemVkVW5pdCkge1xuICAgICAgY2FzZSBcInllYXJzXCI6XG4gICAgICAgIG8ubW9udGggPSAxO1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuXG4gICAgICBjYXNlIFwicXVhcnRlcnNcIjpcbiAgICAgIGNhc2UgXCJtb250aHNcIjpcbiAgICAgICAgby5kYXkgPSAxO1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuXG4gICAgICBjYXNlIFwid2Vla3NcIjpcbiAgICAgIGNhc2UgXCJkYXlzXCI6XG4gICAgICAgIG8uaG91ciA9IDA7XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG5cbiAgICAgIGNhc2UgXCJob3Vyc1wiOlxuICAgICAgICBvLm1pbnV0ZSA9IDA7XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG5cbiAgICAgIGNhc2UgXCJtaW51dGVzXCI6XG4gICAgICAgIG8uc2Vjb25kID0gMDtcbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcblxuICAgICAgY2FzZSBcInNlY29uZHNcIjpcbiAgICAgICAgby5taWxsaXNlY29uZCA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gbm8gZGVmYXVsdCwgaW52YWxpZCB1bml0cyB0aHJvdyBpbiBub3JtYWxpemVVbml0KClcbiAgICB9XG5cbiAgICBpZiAobm9ybWFsaXplZFVuaXQgPT09IFwid2Vla3NcIikge1xuICAgICAgby53ZWVrZGF5ID0gMTtcbiAgICB9XG5cbiAgICBpZiAobm9ybWFsaXplZFVuaXQgPT09IFwicXVhcnRlcnNcIikge1xuICAgICAgY29uc3QgcSA9IE1hdGguY2VpbCh0aGlzLm1vbnRoIC8gMyk7XG4gICAgICBvLm1vbnRoID0gKHEgLSAxKSAqIDMgKyAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNldChvKTtcbiAgfVxuICAvKipcbiAgICogXCJTZXRcIiB0aGlzIERhdGVUaW1lIHRvIHRoZSBlbmQgKG1lYW5pbmcgdGhlIGxhc3QgbWlsbGlzZWNvbmQpIG9mIGEgdW5pdCBvZiB0aW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gVGhlIHVuaXQgdG8gZ28gdG8gdGhlIGVuZCBvZi4gQ2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJywgb3IgJ21pbGxpc2Vjb25kJy5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMykuZW5kT2YoJ21vbnRoJykudG9JU08oKTsgLy89PiAnMjAxNC0wMy0zMVQyMzo1OTo1OS45OTktMDU6MDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLmVuZE9mKCd5ZWFyJykudG9JU08oKTsgLy89PiAnMjAxNC0xMi0zMVQyMzo1OTo1OS45OTktMDU6MDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLmVuZE9mKCd3ZWVrJykudG9JU08oKTsgLy8gPT4gJzIwMTQtMDMtMDlUMjM6NTk6NTkuOTk5LTA1OjAwJywgd2Vla3Mgc3RhcnQgb24gTW9uZGF5c1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzLCA1LCAzMCkuZW5kT2YoJ2RheScpLnRvSVNPKCk7IC8vPT4gJzIwMTQtMDMtMDNUMjM6NTk6NTkuOTk5LTA1OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzLCA1LCAzMCkuZW5kT2YoJ2hvdXInKS50b0lTTygpOyAvLz0+ICcyMDE0LTAzLTAzVDA1OjU5OjU5Ljk5OS0wNTowMCdcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuXG5cbiAgZW5kT2YodW5pdCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnBsdXMoe1xuICAgICAgW3VuaXRdOiAxXG4gICAgfSkuc3RhcnRPZih1bml0KS5taW51cygxKSA6IHRoaXM7XG4gIH0gLy8gT1VUUFVUXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBmb3JtYXR0ZWQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgZm9ybWF0IHN0cmluZy5cbiAgICogKipZb3UgbWF5IG5vdCB3YW50IHRoaXMuKiogU2VlIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9yIGEgbW9yZSBmbGV4aWJsZSBmb3JtYXR0aW5nIHRvb2wuIEZvciBhIHRhYmxlIG9mIHRva2VucyBhbmQgdGhlaXIgaW50ZXJwcmV0YXRpb25zLCBzZWUgW2hlcmVdKGh0dHBzOi8vbW9tZW50LmdpdGh1Yi5pby9sdXhvbi8jL2Zvcm1hdHRpbmc/aWQ9dGFibGUtb2YtdG9rZW5zKS5cbiAgICogRGVmYXVsdHMgdG8gZW4tVVMgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZCwgcmVnYXJkbGVzcyBvZiB0aGUgc3lzdGVtJ3MgbG9jYWxlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm10IC0gdGhlIGZvcm1hdCBzdHJpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRzIHRvIG92ZXJyaWRlIHRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgb24gdGhpcyBEYXRlVGltZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0Zvcm1hdCgneXl5eSBMTEwgZGQnKSAvLz0+ICcyMDE3IEFwciAyMidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkuc2V0TG9jYWxlKCdmcicpLnRvRm9ybWF0KCd5eXl5IExMTCBkZCcpIC8vPT4gJzIwMTcgYXZyLiAyMidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Gb3JtYXQoJ3l5eXkgTExMIGRkJywgeyBsb2NhbGU6IFwiZnJcIiB9KSAvLz0+ICcyMDE3IGF2ci4gMjInXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvRm9ybWF0KFwiSEggJ2hvdXJzIGFuZCcgbW0gJ21pbnV0ZXMnXCIpIC8vPT4gJzIwIGhvdXJzIGFuZCA1NSBtaW51dGVzJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9Gb3JtYXQoZm10LCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gRm9ybWF0dGVyLmNyZWF0ZSh0aGlzLmxvYy5yZWRlZmF1bHRUb0VOKG9wdHMpKS5mb3JtYXREYXRlVGltZUZyb21TdHJpbmcodGhpcywgZm10KSA6IElOVkFMSUQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsb2NhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGluZyB0aGlzIGRhdGUuIEFjY2VwdHMgdGhlIHNhbWUgb3B0aW9ucyBhcyB0aGUgSW50bC5EYXRlVGltZUZvcm1hdCBjb25zdHJ1Y3RvciBhbmQgYW55IHByZXNldHMgZGVmaW5lZCBieSBMdXhvbiwgc3VjaCBhcyBgRGF0ZVRpbWUuREFURV9GVUxMYCBvciBgRGF0ZVRpbWUuVElNRV9TSU1QTEVgLlxuICAgKiBUaGUgZXhhY3QgYmVoYXZpb3Igb2YgdGhpcyBtZXRob2QgaXMgYnJvd3Nlci1zcGVjaWZpYywgYnV0IGluIGdlbmVyYWwgaXQgd2lsbCByZXR1cm4gYW4gYXBwcm9wcmlhdGUgcmVwcmVzZW50YXRpb25cbiAgICogb2YgdGhlIERhdGVUaW1lIGluIHRoZSBhc3NpZ25lZCBsb2NhbGUuXG4gICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGVUaW1lRm9ybWF0XG4gICAqIEBwYXJhbSBmb3JtYXRPcHRzIHtPYmplY3R9IC0gSW50bC5EYXRlVGltZUZvcm1hdCBjb25zdHJ1Y3RvciBvcHRpb25zIGFuZCBjb25maWd1cmF0aW9uIG9wdGlvbnNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRzIHRvIG92ZXJyaWRlIHRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgb24gdGhpcyBEYXRlVGltZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZygpOyAvLz0+IDQvMjAvMjAxN1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5zZXRMb2NhbGUoJ2VuLWdiJykudG9Mb2NhbGVTdHJpbmcoKTsgLy89PiAnMjAvMDQvMjAxNydcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Mb2NhbGVTdHJpbmcoeyBsb2NhbGU6ICdlbi1nYicgfSk7IC8vPT4gJzIwLzA0LzIwMTcnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLkRBVEVfRlVMTCk7IC8vPT4gJ0FwcmlsIDIwLCAyMDE3J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5USU1FX1NJTVBMRSk7IC8vPT4gJzExOjMyIEFNJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5EQVRFVElNRV9TSE9SVCk7IC8vPT4gJzQvMjAvMjAxNywgMTE6MzIgQU0nXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKHsgd2Vla2RheTogJ2xvbmcnLCBtb250aDogJ2xvbmcnLCBkYXk6ICcyLWRpZ2l0JyB9KTsgLy89PiAnVGh1cnNkYXksIEFwcmlsIDIwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZyh7IHdlZWtkYXk6ICdzaG9ydCcsIG1vbnRoOiAnc2hvcnQnLCBkYXk6ICcyLWRpZ2l0JywgaG91cjogJzItZGlnaXQnLCBtaW51dGU6ICcyLWRpZ2l0JyB9KTsgLy89PiAnVGh1LCBBcHIgMjAsIDExOjI3IEFNJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZyh7IGhvdXI6ICcyLWRpZ2l0JywgbWludXRlOiAnMi1kaWdpdCcsIGhvdXJDeWNsZTogJ2gyMycgfSk7IC8vPT4gJzExOjMyJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9Mb2NhbGVTdHJpbmcoZm9ybWF0T3B0cyA9IERBVEVfU0hPUlQsIG9wdHMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBGb3JtYXR0ZXIuY3JlYXRlKHRoaXMubG9jLmNsb25lKG9wdHMpLCBmb3JtYXRPcHRzKS5mb3JtYXREYXRlVGltZSh0aGlzKSA6IElOVkFMSUQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2YgZm9ybWF0IFwicGFydHNcIiwgbWVhbmluZyBpbmRpdmlkdWFsIHRva2VucyBhbG9uZyB3aXRoIG1ldGFkYXRhLiBUaGlzIGlzIGFsbG93cyBjYWxsZXJzIHRvIHBvc3QtcHJvY2VzcyBpbmRpdmlkdWFsIHNlY3Rpb25zIG9mIHRoZSBmb3JtYXR0ZWQgb3V0cHV0LlxuICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9EYXRlVGltZUZvcm1hdC9mb3JtYXRUb1BhcnRzXG4gICAqIEBwYXJhbSBvcHRzIHtPYmplY3R9IC0gSW50bC5EYXRlVGltZUZvcm1hdCBjb25zdHJ1Y3RvciBvcHRpb25zLCBzYW1lIGFzIGB0b0xvY2FsZVN0cmluZ2AuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlUGFydHMoKTsgLy89PiBbXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLz0+ICAgeyB0eXBlOiAnZGF5JywgdmFsdWU6ICcyNScgfSxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vPT4gICB7IHR5cGU6ICdsaXRlcmFsJywgdmFsdWU6ICcvJyB9LFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiAgIHsgdHlwZTogJ21vbnRoJywgdmFsdWU6ICcwNScgfSxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vPT4gICB7IHR5cGU6ICdsaXRlcmFsJywgdmFsdWU6ICcvJyB9LFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiAgIHsgdHlwZTogJ3llYXInLCB2YWx1ZTogJzE5ODInIH1cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vPT4gXVxuICAgKi9cblxuXG4gIHRvTG9jYWxlUGFydHMob3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IEZvcm1hdHRlci5jcmVhdGUodGhpcy5sb2MuY2xvbmUob3B0cyksIG9wdHMpLmZvcm1hdERhdGVUaW1lUGFydHModGhpcykgOiBbXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc3VwcHJlc3NNaWxsaXNlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnN1cHByZXNzU2Vjb25kcz1mYWxzZV0gLSBleGNsdWRlIHNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVPZmZzZXQ9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBvZmZzZXQsIHN1Y2ggYXMgJ1onIG9yICctMDQ6MDAnXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuZXh0ZW5kZWRab25lPXRydWVdIC0gYWRkIHRoZSB0aW1lIHpvbmUgZm9ybWF0IGV4dGVuc2lvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuZm9ybWF0PSdleHRlbmRlZCddIC0gY2hvb3NlIGJldHdlZW4gdGhlIGJhc2ljIGFuZCBleHRlbmRlZCBmb3JtYXRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDE5ODMsIDUsIDI1KS50b0lTTygpIC8vPT4gJzE5ODItMDUtMjVUMDA6MDA6MDAuMDAwWidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9JU08oKSAvLz0+ICcyMDE3LTA0LTIyVDIwOjQ3OjA1LjMzNS0wNDowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9JU08oeyBpbmNsdWRlT2Zmc2V0OiBmYWxzZSB9KSAvLz0+ICcyMDE3LTA0LTIyVDIwOjQ3OjA1LjMzNSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9JU08oeyBmb3JtYXQ6ICdiYXNpYycgfSkgLy89PiAnMjAxNzA0MjJUMjA0NzA1LjMzNS0wNDAwJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9JU08oe1xuICAgIGZvcm1hdCA9IFwiZXh0ZW5kZWRcIixcbiAgICBzdXBwcmVzc1NlY29uZHMgPSBmYWxzZSxcbiAgICBzdXBwcmVzc01pbGxpc2Vjb25kcyA9IGZhbHNlLFxuICAgIGluY2x1ZGVPZmZzZXQgPSB0cnVlLFxuICAgIGV4dGVuZGVkWm9uZSA9IGZhbHNlXG4gIH0gPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBleHQgPSBmb3JtYXQgPT09IFwiZXh0ZW5kZWRcIjtcbiAgICBsZXQgYyA9IHRvSVNPRGF0ZSh0aGlzLCBleHQpO1xuICAgIGMgKz0gXCJUXCI7XG4gICAgYyArPSB0b0lTT1RpbWUodGhpcywgZXh0LCBzdXBwcmVzc1NlY29uZHMsIHN1cHByZXNzTWlsbGlzZWNvbmRzLCBpbmNsdWRlT2Zmc2V0LCBleHRlbmRlZFpvbmUpO1xuICAgIHJldHVybiBjO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSdzIGRhdGUgY29tcG9uZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuZm9ybWF0PSdleHRlbmRlZCddIC0gY2hvb3NlIGJldHdlZW4gdGhlIGJhc2ljIGFuZCBleHRlbmRlZCBmb3JtYXRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDE5ODIsIDUsIDI1KS50b0lTT0RhdGUoKSAvLz0+ICcxOTgyLTA1LTI1J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMTk4MiwgNSwgMjUpLnRvSVNPRGF0ZSh7IGZvcm1hdDogJ2Jhc2ljJyB9KSAvLz0+ICcxOTgyMDUyNSdcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHRvSVNPRGF0ZSh7XG4gICAgZm9ybWF0ID0gXCJleHRlbmRlZFwiXG4gIH0gPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdG9JU09EYXRlKHRoaXMsIGZvcm1hdCA9PT0gXCJleHRlbmRlZFwiKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUncyB3ZWVrIGRhdGVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDE5ODIsIDUsIDI1KS50b0lTT1dlZWtEYXRlKCkgLy89PiAnMTk4Mi1XMjEtMidcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHRvSVNPV2Vla0RhdGUoKSB7XG4gICAgcmV0dXJuIHRvVGVjaEZvcm1hdCh0aGlzLCBcImtra2stJ1cnV1ctY1wiKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUncyB0aW1lIGNvbXBvbmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zdXBwcmVzc01pbGxpc2Vjb25kcz1mYWxzZV0gLSBleGNsdWRlIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBmb3JtYXQgaWYgdGhleSdyZSAwXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc3VwcHJlc3NTZWNvbmRzPWZhbHNlXSAtIGV4Y2x1ZGUgc2Vjb25kcyBmcm9tIHRoZSBmb3JtYXQgaWYgdGhleSdyZSAwXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldD10cnVlXSAtIGluY2x1ZGUgdGhlIG9mZnNldCwgc3VjaCBhcyAnWicgb3IgJy0wNDowMCdcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5leHRlbmRlZFpvbmU9dHJ1ZV0gLSBhZGQgdGhlIHRpbWUgem9uZSBmb3JtYXQgZXh0ZW5zaW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZVByZWZpeD1mYWxzZV0gLSBpbmNsdWRlIHRoZSBgVGAgcHJlZml4XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5mb3JtYXQ9J2V4dGVuZGVkJ10gLSBjaG9vc2UgYmV0d2VlbiB0aGUgYmFzaWMgYW5kIGV4dGVuZGVkIGZvcm1hdFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS5zZXQoeyBob3VyOiA3LCBtaW51dGU6IDM0IH0pLnRvSVNPVGltZSgpIC8vPT4gJzA3OjM0OjE5LjM2MVonXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygpLnNldCh7IGhvdXI6IDcsIG1pbnV0ZTogMzQsIHNlY29uZHM6IDAsIG1pbGxpc2Vjb25kczogMCB9KS50b0lTT1RpbWUoeyBzdXBwcmVzc1NlY29uZHM6IHRydWUgfSkgLy89PiAnMDc6MzRaJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS5zZXQoeyBob3VyOiA3LCBtaW51dGU6IDM0IH0pLnRvSVNPVGltZSh7IGZvcm1hdDogJ2Jhc2ljJyB9KSAvLz0+ICcwNzM0MTkuMzYxWidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkuc2V0KHsgaG91cjogNywgbWludXRlOiAzNCB9KS50b0lTT1RpbWUoeyBpbmNsdWRlUHJlZml4OiB0cnVlIH0pIC8vPT4gJ1QwNzozNDoxOS4zNjFaJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9JU09UaW1lKHtcbiAgICBzdXBwcmVzc01pbGxpc2Vjb25kcyA9IGZhbHNlLFxuICAgIHN1cHByZXNzU2Vjb25kcyA9IGZhbHNlLFxuICAgIGluY2x1ZGVPZmZzZXQgPSB0cnVlLFxuICAgIGluY2x1ZGVQcmVmaXggPSBmYWxzZSxcbiAgICBleHRlbmRlZFpvbmUgPSBmYWxzZSxcbiAgICBmb3JtYXQgPSBcImV4dGVuZGVkXCJcbiAgfSA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxldCBjID0gaW5jbHVkZVByZWZpeCA/IFwiVFwiIDogXCJcIjtcbiAgICByZXR1cm4gYyArIHRvSVNPVGltZSh0aGlzLCBmb3JtYXQgPT09IFwiZXh0ZW5kZWRcIiwgc3VwcHJlc3NTZWNvbmRzLCBzdXBwcmVzc01pbGxpc2Vjb25kcywgaW5jbHVkZU9mZnNldCwgZXh0ZW5kZWRab25lKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBSRkMgMjgyMi1jb21wYXRpYmxlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMykudG9SRkMyODIyKCkgLy89PiAnU3VuLCAxMyBKdWwgMjAxNCAwMDowMDowMCArMDAwMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgNywgMTMpLnRvUkZDMjgyMigpIC8vPT4gJ1N1biwgMTMgSnVsIDIwMTQgMDA6MDA6MDAgLTA0MDAnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG5cblxuICB0b1JGQzI4MjIoKSB7XG4gICAgcmV0dXJuIHRvVGVjaEZvcm1hdCh0aGlzLCBcIkVFRSwgZGQgTExMIHl5eXkgSEg6bW06c3MgWlpaXCIsIGZhbHNlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gSFRUUCBoZWFkZXJzLiBUaGUgb3V0cHV0IGlzIGFsd2F5cyBleHByZXNzZWQgaW4gR01ULlxuICAgKiBTcGVjaWZpY2FsbHksIHRoZSBzdHJpbmcgY29uZm9ybXMgdG8gUkZDIDExMjMuXG4gICAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjMy5odG1sI3NlYzMuMy4xXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMykudG9IVFRQKCkgLy89PiAnU3VuLCAxMyBKdWwgMjAxNCAwMDowMDowMCBHTVQnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMywgMTkpLnRvSFRUUCgpIC8vPT4gJ1N1biwgMTMgSnVsIDIwMTQgMTk6MDA6MDAgR01UJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9IVFRQKCkge1xuICAgIHJldHVybiB0b1RlY2hGb3JtYXQodGhpcy50b1VUQygpLCBcIkVFRSwgZGQgTExMIHl5eXkgSEg6bW06c3MgJ0dNVCdcIik7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIFNRTCBEYXRlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMykudG9TUUxEYXRlKCkgLy89PiAnMjAxNC0wNy0xMydcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHRvU1FMRGF0ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvSVNPRGF0ZSh0aGlzLCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gU1FMIFRpbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZVpvbmU9ZmFsc2VdIC0gaW5jbHVkZSB0aGUgem9uZSwgc3VjaCBhcyAnQW1lcmljYS9OZXdfWW9yaycuIE92ZXJyaWRlcyBpbmNsdWRlT2Zmc2V0LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVPZmZzZXQ9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBvZmZzZXQsIHN1Y2ggYXMgJ1onIG9yICctMDQ6MDAnXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldFNwYWNlPXRydWVdIC0gaW5jbHVkZSB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgdGltZSBhbmQgdGhlIG9mZnNldCwgc3VjaCBhcyAnMDU6MTU6MTYuMzQ1IC0wNDowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkudG9TUUwoKSAvLz0+ICcwNToxNToxNi4zNDUnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvU1FMKCkgLy89PiAnMDU6MTU6MTYuMzQ1IC0wNDowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9TUUwoeyBpbmNsdWRlT2Zmc2V0OiBmYWxzZSB9KSAvLz0+ICcwNToxNToxNi4zNDUnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvU1FMKHsgaW5jbHVkZVpvbmU6IGZhbHNlIH0pIC8vPT4gJzA1OjE1OjE2LjM0NSBBbWVyaWNhL05ld19Zb3JrJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9TUUxUaW1lKHtcbiAgICBpbmNsdWRlT2Zmc2V0ID0gdHJ1ZSxcbiAgICBpbmNsdWRlWm9uZSA9IGZhbHNlLFxuICAgIGluY2x1ZGVPZmZzZXRTcGFjZSA9IHRydWVcbiAgfSA9IHt9KSB7XG4gICAgbGV0IGZtdCA9IFwiSEg6bW06c3MuU1NTXCI7XG5cbiAgICBpZiAoaW5jbHVkZVpvbmUgfHwgaW5jbHVkZU9mZnNldCkge1xuICAgICAgaWYgKGluY2x1ZGVPZmZzZXRTcGFjZSkge1xuICAgICAgICBmbXQgKz0gXCIgXCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmNsdWRlWm9uZSkge1xuICAgICAgICBmbXQgKz0gXCJ6XCI7XG4gICAgICB9IGVsc2UgaWYgKGluY2x1ZGVPZmZzZXQpIHtcbiAgICAgICAgZm10ICs9IFwiWlpcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG9UZWNoRm9ybWF0KHRoaXMsIGZtdCwgdHJ1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIFNRTCBEYXRlVGltZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlWm9uZT1mYWxzZV0gLSBpbmNsdWRlIHRoZSB6b25lLCBzdWNoIGFzICdBbWVyaWNhL05ld19Zb3JrJy4gT3ZlcnJpZGVzIGluY2x1ZGVPZmZzZXQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldD10cnVlXSAtIGluY2x1ZGUgdGhlIG9mZnNldCwgc3VjaCBhcyAnWicgb3IgJy0wNDowMCdcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlT2Zmc2V0U3BhY2U9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSB0aW1lIGFuZCB0aGUgb2Zmc2V0LCBzdWNoIGFzICcwNToxNToxNi4zNDUgLTA0OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNCwgNywgMTMpLnRvU1FMKCkgLy89PiAnMjAxNC0wNy0xMyAwMDowMDowMC4wMDAgWidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgNywgMTMpLnRvU1FMKCkgLy89PiAnMjAxNC0wNy0xMyAwMDowMDowMC4wMDAgLTA0OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCA3LCAxMykudG9TUUwoeyBpbmNsdWRlT2Zmc2V0OiBmYWxzZSB9KSAvLz0+ICcyMDE0LTA3LTEzIDAwOjAwOjAwLjAwMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgNywgMTMpLnRvU1FMKHsgaW5jbHVkZVpvbmU6IHRydWUgfSkgLy89PiAnMjAxNC0wNy0xMyAwMDowMDowMC4wMDAgQW1lcmljYS9OZXdfWW9yaydcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHRvU1FMKG9wdHMgPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYCR7dGhpcy50b1NRTERhdGUoKX0gJHt0aGlzLnRvU1FMVGltZShvcHRzKX1gO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIGRlYnVnZ2luZ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudG9JU08oKSA6IElOVkFMSUQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVwb2NoIG1pbGxpc2Vjb25kcyBvZiB0aGlzIERhdGVUaW1lLiBBbGlhcyBvZiB7QGxpbmsgRGF0ZVRpbWUjdG9NaWxsaXN9XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG5cblxuICB2YWx1ZU9mKCkge1xuICAgIHJldHVybiB0aGlzLnRvTWlsbGlzKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVwb2NoIG1pbGxpc2Vjb25kcyBvZiB0aGlzIERhdGVUaW1lLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgdG9NaWxsaXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudHMgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVwb2NoIHNlY29uZHMgb2YgdGhpcyBEYXRlVGltZS5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cblxuXG4gIHRvU2Vjb25kcygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy50cyAvIDEwMDAgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVwb2NoIHNlY29uZHMgKGFzIGEgd2hvbGUgbnVtYmVyKSBvZiB0aGlzIERhdGVUaW1lLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgdG9Vbml4SW50ZWdlcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gTWF0aC5mbG9vcih0aGlzLnRzIC8gMTAwMCkgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIEpTT04uXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG5cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9JU08oKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIEJTT04gc2VyaWFsaXphYmxlIGVxdWl2YWxlbnQgdG8gdGhpcyBEYXRlVGltZS5cbiAgICogQHJldHVybiB7RGF0ZX1cbiAgICovXG5cblxuICB0b0JTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9KU0RhdGUoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0IHdpdGggdGhpcyBEYXRlVGltZSdzIHllYXIsIG1vbnRoLCBkYXksIGFuZCBzbyBvbi5cbiAgICogQHBhcmFtIG9wdHMgLSBvcHRpb25zIGZvciBnZW5lcmF0aW5nIHRoZSBvYmplY3RcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlQ29uZmlnPWZhbHNlXSAtIGluY2x1ZGUgY29uZmlndXJhdGlvbiBhdHRyaWJ1dGVzIGluIHRoZSBvdXRwdXRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9PYmplY3QoKSAvLz0+IHsgeWVhcjogMjAxNywgbW9udGg6IDQsIGRheTogMjIsIGhvdXI6IDIwLCBtaW51dGU6IDQ5LCBzZWNvbmQ6IDQyLCBtaWxsaXNlY29uZDogMjY4IH1cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHRvT2JqZWN0KG9wdHMgPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4ge307XG4gICAgY29uc3QgYmFzZSA9IHsgLi4udGhpcy5jXG4gICAgfTtcblxuICAgIGlmIChvcHRzLmluY2x1ZGVDb25maWcpIHtcbiAgICAgIGJhc2Uub3V0cHV0Q2FsZW5kYXIgPSB0aGlzLm91dHB1dENhbGVuZGFyO1xuICAgICAgYmFzZS5udW1iZXJpbmdTeXN0ZW0gPSB0aGlzLmxvYy5udW1iZXJpbmdTeXN0ZW07XG4gICAgICBiYXNlLmxvY2FsZSA9IHRoaXMubG9jLmxvY2FsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIEphdmFTY3JpcHQgRGF0ZSBlcXVpdmFsZW50IHRvIHRoaXMgRGF0ZVRpbWUuXG4gICAqIEByZXR1cm4ge0RhdGV9XG4gICAqL1xuXG5cbiAgdG9KU0RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMuaXNWYWxpZCA/IHRoaXMudHMgOiBOYU4pO1xuICB9IC8vIENPTVBBUkVcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIERhdGVUaW1lcyBhcyBhIER1cmF0aW9uLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBvdGhlckRhdGVUaW1lIC0gdGhlIERhdGVUaW1lIHRvIGNvbXBhcmUgdGhpcyBvbmUgdG9cbiAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IFt1bml0PVsnbWlsbGlzZWNvbmRzJ11dIC0gdGhlIHVuaXQgb3IgYXJyYXkgb2YgdW5pdHMgKHN1Y2ggYXMgJ2hvdXJzJyBvciAnZGF5cycpIHRvIGluY2x1ZGUgaW4gdGhlIGR1cmF0aW9uLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdGhhdCBhZmZlY3QgdGhlIGNyZWF0aW9uIG9mIHRoZSBEdXJhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQGV4YW1wbGVcbiAgICogdmFyIGkxID0gRGF0ZVRpbWUuZnJvbUlTTygnMTk4Mi0wNS0yNVQwOTo0NScpLFxuICAgKiAgICAgaTIgPSBEYXRlVGltZS5mcm9tSVNPKCcxOTgzLTEwLTE0VDEwOjMwJyk7XG4gICAqIGkyLmRpZmYoaTEpLnRvT2JqZWN0KCkgLy89PiB7IG1pbGxpc2Vjb25kczogNDM4MDc1MDAwMDAgfVxuICAgKiBpMi5kaWZmKGkxLCAnaG91cnMnKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMTIxNjguNzUgfVxuICAgKiBpMi5kaWZmKGkxLCBbJ21vbnRocycsICdkYXlzJ10pLnRvT2JqZWN0KCkgLy89PiB7IG1vbnRoczogMTYsIGRheXM6IDE5LjAzMTI1IH1cbiAgICogaTIuZGlmZihpMSwgWydtb250aHMnLCAnZGF5cycsICdob3VycyddKS50b09iamVjdCgpIC8vPT4geyBtb250aHM6IDE2LCBkYXlzOiAxOSwgaG91cnM6IDAuNzUgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG5cblxuICBkaWZmKG90aGVyRGF0ZVRpbWUsIHVuaXQgPSBcIm1pbGxpc2Vjb25kc1wiLCBvcHRzID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXJEYXRlVGltZS5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uaW52YWxpZChcImNyZWF0ZWQgYnkgZGlmZmluZyBhbiBpbnZhbGlkIERhdGVUaW1lXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGR1ck9wdHMgPSB7XG4gICAgICBsb2NhbGU6IHRoaXMubG9jYWxlLFxuICAgICAgbnVtYmVyaW5nU3lzdGVtOiB0aGlzLm51bWJlcmluZ1N5c3RlbSxcbiAgICAgIC4uLm9wdHNcbiAgICB9O1xuICAgIGNvbnN0IHVuaXRzID0gbWF5YmVBcnJheSh1bml0KS5tYXAoRHVyYXRpb24ubm9ybWFsaXplVW5pdCksXG4gICAgICAgICAgb3RoZXJJc0xhdGVyID0gb3RoZXJEYXRlVGltZS52YWx1ZU9mKCkgPiB0aGlzLnZhbHVlT2YoKSxcbiAgICAgICAgICBlYXJsaWVyID0gb3RoZXJJc0xhdGVyID8gdGhpcyA6IG90aGVyRGF0ZVRpbWUsXG4gICAgICAgICAgbGF0ZXIgPSBvdGhlcklzTGF0ZXIgPyBvdGhlckRhdGVUaW1lIDogdGhpcyxcbiAgICAgICAgICBkaWZmZWQgPSBkaWZmKGVhcmxpZXIsIGxhdGVyLCB1bml0cywgZHVyT3B0cyk7XG4gICAgcmV0dXJuIG90aGVySXNMYXRlciA/IGRpZmZlZC5uZWdhdGUoKSA6IGRpZmZlZDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhpcyBEYXRlVGltZSBhbmQgcmlnaHQgbm93LlxuICAgKiBTZWUge0BsaW5rIERhdGVUaW1lI2RpZmZ9XG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbdW5pdD1bJ21pbGxpc2Vjb25kcyddXSAtIHRoZSB1bml0IG9yIHVuaXRzIHVuaXRzIChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byBpbmNsdWRlIGluIHRoZSBkdXJhdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdGhhdCBhZmZlY3QgdGhlIGNyZWF0aW9uIG9mIHRoZSBEdXJhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuXG5cbiAgZGlmZk5vdyh1bml0ID0gXCJtaWxsaXNlY29uZHNcIiwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuZGlmZihEYXRlVGltZS5ub3coKSwgdW5pdCwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhbiBJbnRlcnZhbCBzcGFubmluZyBiZXR3ZWVuIHRoaXMgRGF0ZVRpbWUgYW5kIGFub3RoZXIgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gb3RoZXJEYXRlVGltZSAtIHRoZSBvdGhlciBlbmQgcG9pbnQgb2YgdGhlIEludGVydmFsXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cblxuXG4gIHVudGlsKG90aGVyRGF0ZVRpbWUpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyh0aGlzLCBvdGhlckRhdGVUaW1lKSA6IHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgRGF0ZVRpbWUgaXMgaW4gdGhlIHNhbWUgdW5pdCBvZiB0aW1lIGFzIGFub3RoZXIgRGF0ZVRpbWUuXG4gICAqIEhpZ2hlci1vcmRlciB1bml0cyBtdXN0IGFsc28gYmUgaWRlbnRpY2FsIGZvciB0aGlzIGZ1bmN0aW9uIHRvIHJldHVybiBgdHJ1ZWAuXG4gICAqIE5vdGUgdGhhdCB0aW1lIHpvbmVzIGFyZSAqKmlnbm9yZWQqKiBpbiB0aGlzIGNvbXBhcmlzb24sIHdoaWNoIGNvbXBhcmVzIHRoZSAqKmxvY2FsKiogY2FsZW5kYXIgdGltZS4gVXNlIHtAbGluayBEYXRlVGltZSNzZXRab25lfSB0byBjb252ZXJ0IG9uZSBvZiB0aGUgZGF0ZXMgaWYgbmVlZGVkLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBvdGhlckRhdGVUaW1lIC0gdGhlIG90aGVyIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gdGhlIHVuaXQgb2YgdGltZSB0byBjaGVjayBzYW1lbmVzcyBvblxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5oYXNTYW1lKG90aGVyRFQsICdkYXknKTsgLy9+PiB0cnVlIGlmIG90aGVyRFQgaXMgaW4gdGhlIHNhbWUgY3VycmVudCBjYWxlbmRhciBkYXlcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBoYXNTYW1lKG90aGVyRGF0ZVRpbWUsIHVuaXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGlucHV0TXMgPSBvdGhlckRhdGVUaW1lLnZhbHVlT2YoKTtcbiAgICBjb25zdCBhZGp1c3RlZFRvWm9uZSA9IHRoaXMuc2V0Wm9uZShvdGhlckRhdGVUaW1lLnpvbmUsIHtcbiAgICAgIGtlZXBMb2NhbFRpbWU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gYWRqdXN0ZWRUb1pvbmUuc3RhcnRPZih1bml0KSA8PSBpbnB1dE1zICYmIGlucHV0TXMgPD0gYWRqdXN0ZWRUb1pvbmUuZW5kT2YodW5pdCk7XG4gIH1cbiAgLyoqXG4gICAqIEVxdWFsaXR5IGNoZWNrXG4gICAqIFR3byBEYXRlVGltZXMgYXJlIGVxdWFsIGlmZiB0aGV5IHJlcHJlc2VudCB0aGUgc2FtZSBtaWxsaXNlY29uZCwgaGF2ZSB0aGUgc2FtZSB6b25lIGFuZCBsb2NhdGlvbiwgYW5kIGFyZSBib3RoIHZhbGlkLlxuICAgKiBUbyBjb21wYXJlIGp1c3QgdGhlIG1pbGxpc2Vjb25kIHZhbHVlcywgdXNlIGArZHQxID09PSArZHQyYC5cbiAgICogQHBhcmFtIHtEYXRlVGltZX0gb3RoZXIgLSB0aGUgb3RoZXIgRGF0ZVRpbWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBlcXVhbHMob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkICYmIG90aGVyLmlzVmFsaWQgJiYgdGhpcy52YWx1ZU9mKCkgPT09IG90aGVyLnZhbHVlT2YoKSAmJiB0aGlzLnpvbmUuZXF1YWxzKG90aGVyLnpvbmUpICYmIHRoaXMubG9jLmVxdWFscyhvdGhlci5sb2MpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdGhpcyB0aW1lIHJlbGF0aXZlIHRvIG5vdywgc3VjaCBhcyBcImluIHR3byBkYXlzXCIuIENhbiBvbmx5IGludGVybmF0aW9uYWxpemUgaWYgeW91clxuICAgKiBwbGF0Zm9ybSBzdXBwb3J0cyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdC4gUm91bmRzIGRvd24gYnkgZGVmYXVsdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBvdXRwdXRcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gW29wdGlvbnMuYmFzZT1EYXRlVGltZS5ub3coKV0gLSB0aGUgRGF0ZVRpbWUgdG8gdXNlIGFzIHRoZSBiYXNpcyB0byB3aGljaCB0aGlzIHRpbWUgaXMgY29tcGFyZWQuIERlZmF1bHRzIHRvIG5vdy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnN0eWxlPVwibG9uZ1wiXSAtIHRoZSBzdHlsZSBvZiB1bml0cywgbXVzdCBiZSBcImxvbmdcIiwgXCJzaG9ydFwiLCBvciBcIm5hcnJvd1wiXG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBvcHRpb25zLnVuaXQgLSB1c2UgYSBzcGVjaWZpYyB1bml0IG9yIGFycmF5IG9mIHVuaXRzOyBpZiBvbWl0dGVkLCBvciBhbiBhcnJheSwgdGhlIG1ldGhvZCB3aWxsIHBpY2sgdGhlIGJlc3QgdW5pdC4gVXNlIGFuIGFycmF5IG9yIG9uZSBvZiBcInllYXJzXCIsIFwicXVhcnRlcnNcIiwgXCJtb250aHNcIiwgXCJ3ZWVrc1wiLCBcImRheXNcIiwgXCJob3Vyc1wiLCBcIm1pbnV0ZXNcIiwgb3IgXCJzZWNvbmRzXCJcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yb3VuZD10cnVlXSAtIHdoZXRoZXIgdG8gcm91bmQgdGhlIG51bWJlcnMgaW4gdGhlIG91dHB1dC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnBhZGRpbmc9MF0gLSBwYWRkaW5nIGluIG1pbGxpc2Vjb25kcy4gVGhpcyBhbGxvd3MgeW91IHRvIHJvdW5kIHVwIHRoZSByZXN1bHQgaWYgaXQgZml0cyBpbnNpZGUgdGhlIHRocmVzaG9sZC4gRG9uJ3QgdXNlIGluIGNvbWJpbmF0aW9uIHdpdGgge3JvdW5kOiBmYWxzZX0gYmVjYXVzZSB0aGUgZGVjaW1hbCBvdXRwdXQgd2lsbCBpbmNsdWRlIHRoZSBwYWRkaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5sb2NhbGUgLSBvdmVycmlkZSB0aGUgbG9jYWxlIG9mIHRoaXMgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubnVtYmVyaW5nU3lzdGVtIC0gb3ZlcnJpZGUgdGhlIG51bWJlcmluZ1N5c3RlbSBvZiB0aGlzIERhdGVUaW1lLiBUaGUgSW50bCBzeXN0ZW0gbWF5IGNob29zZSBub3QgdG8gaG9ub3IgdGhpc1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgZGF5czogMSB9KS50b1JlbGF0aXZlKCkgLy89PiBcImluIDEgZGF5XCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkuc2V0TG9jYWxlKFwiZXNcIikudG9SZWxhdGl2ZSh7IGRheXM6IDEgfSkgLy89PiBcImRlbnRybyBkZSAxIGTDrWFcIlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgZGF5czogMSB9KS50b1JlbGF0aXZlKHsgbG9jYWxlOiBcImZyXCIgfSkgLy89PiBcImRhbnMgMjMgaGV1cmVzXCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkubWludXMoeyBkYXlzOiAyIH0pLnRvUmVsYXRpdmUoKSAvLz0+IFwiMiBkYXlzIGFnb1wiXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLm1pbnVzKHsgZGF5czogMiB9KS50b1JlbGF0aXZlKHsgdW5pdDogXCJob3Vyc1wiIH0pIC8vPT4gXCI0OCBob3VycyBhZ29cIlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5taW51cyh7IGhvdXJzOiAzNiB9KS50b1JlbGF0aXZlKHsgcm91bmQ6IGZhbHNlIH0pIC8vPT4gXCIxLjUgZGF5cyBhZ29cIlxuICAgKi9cblxuXG4gIHRvUmVsYXRpdmUob3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IGJhc2UgPSBvcHRpb25zLmJhc2UgfHwgRGF0ZVRpbWUuZnJvbU9iamVjdCh7fSwge1xuICAgICAgem9uZTogdGhpcy56b25lXG4gICAgfSksXG4gICAgICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyA/IHRoaXMgPCBiYXNlID8gLW9wdGlvbnMucGFkZGluZyA6IG9wdGlvbnMucGFkZGluZyA6IDA7XG4gICAgbGV0IHVuaXRzID0gW1wieWVhcnNcIiwgXCJtb250aHNcIiwgXCJkYXlzXCIsIFwiaG91cnNcIiwgXCJtaW51dGVzXCIsIFwic2Vjb25kc1wiXTtcbiAgICBsZXQgdW5pdCA9IG9wdGlvbnMudW5pdDtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMudW5pdCkpIHtcbiAgICAgIHVuaXRzID0gb3B0aW9ucy51bml0O1xuICAgICAgdW5pdCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gZGlmZlJlbGF0aXZlKGJhc2UsIHRoaXMucGx1cyhwYWRkaW5nKSwgeyAuLi5vcHRpb25zLFxuICAgICAgbnVtZXJpYzogXCJhbHdheXNcIixcbiAgICAgIHVuaXRzLFxuICAgICAgdW5pdFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgZGF0ZSByZWxhdGl2ZSB0byB0b2RheSwgc3VjaCBhcyBcInllc3RlcmRheVwiIG9yIFwibmV4dCBtb250aFwiLlxuICAgKiBPbmx5IGludGVybmF0aW9uYWxpemVzIG9uIHBsYXRmb3JtcyB0aGF0IHN1cHBvcnRzIEludGwuUmVsYXRpdmVUaW1lRm9ybWF0LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgdGhhdCBhZmZlY3QgdGhlIG91dHB1dFxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBbb3B0aW9ucy5iYXNlPURhdGVUaW1lLm5vdygpXSAtIHRoZSBEYXRlVGltZSB0byB1c2UgYXMgdGhlIGJhc2lzIHRvIHdoaWNoIHRoaXMgdGltZSBpcyBjb21wYXJlZC4gRGVmYXVsdHMgdG8gbm93LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5sb2NhbGUgLSBvdmVycmlkZSB0aGUgbG9jYWxlIG9mIHRoaXMgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudW5pdCAtIHVzZSBhIHNwZWNpZmljIHVuaXQ7IGlmIG9taXR0ZWQsIHRoZSBtZXRob2Qgd2lsbCBwaWNrIHRoZSB1bml0LiBVc2Ugb25lIG9mIFwieWVhcnNcIiwgXCJxdWFydGVyc1wiLCBcIm1vbnRoc1wiLCBcIndlZWtzXCIsIG9yIFwiZGF5c1wiXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm51bWJlcmluZ1N5c3RlbSAtIG92ZXJyaWRlIHRoZSBudW1iZXJpbmdTeXN0ZW0gb2YgdGhpcyBEYXRlVGltZS4gVGhlIEludGwgc3lzdGVtIG1heSBjaG9vc2Ugbm90IHRvIGhvbm9yIHRoaXNcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IGRheXM6IDEgfSkudG9SZWxhdGl2ZUNhbGVuZGFyKCkgLy89PiBcInRvbW9ycm93XCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkuc2V0TG9jYWxlKFwiZXNcIikucGx1cyh7IGRheXM6IDEgfSkudG9SZWxhdGl2ZSgpIC8vPT4gXCJcIm1hw7FhbmFcIlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgZGF5czogMSB9KS50b1JlbGF0aXZlQ2FsZW5kYXIoeyBsb2NhbGU6IFwiZnJcIiB9KSAvLz0+IFwiZGVtYWluXCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkubWludXMoeyBkYXlzOiAyIH0pLnRvUmVsYXRpdmVDYWxlbmRhcigpIC8vPT4gXCIyIGRheXMgYWdvXCJcbiAgICovXG5cblxuICB0b1JlbGF0aXZlQ2FsZW5kYXIob3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBkaWZmUmVsYXRpdmUob3B0aW9ucy5iYXNlIHx8IERhdGVUaW1lLmZyb21PYmplY3Qoe30sIHtcbiAgICAgIHpvbmU6IHRoaXMuem9uZVxuICAgIH0pLCB0aGlzLCB7IC4uLm9wdGlvbnMsXG4gICAgICBudW1lcmljOiBcImF1dG9cIixcbiAgICAgIHVuaXRzOiBbXCJ5ZWFyc1wiLCBcIm1vbnRoc1wiLCBcImRheXNcIl0sXG4gICAgICBjYWxlbmRhcnk6IHRydWVcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSBtaW4gb2Ygc2V2ZXJhbCBkYXRlIHRpbWVzXG4gICAqIEBwYXJhbSB7Li4uRGF0ZVRpbWV9IGRhdGVUaW1lcyAtIHRoZSBEYXRlVGltZXMgZnJvbSB3aGljaCB0byBjaG9vc2UgdGhlIG1pbmltdW1cbiAgICogQHJldHVybiB7RGF0ZVRpbWV9IHRoZSBtaW4gRGF0ZVRpbWUsIG9yIHVuZGVmaW5lZCBpZiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudFxuICAgKi9cblxuXG4gIHN0YXRpYyBtaW4oLi4uZGF0ZVRpbWVzKSB7XG4gICAgaWYgKCFkYXRlVGltZXMuZXZlcnkoRGF0ZVRpbWUuaXNEYXRlVGltZSkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm1pbiByZXF1aXJlcyBhbGwgYXJndW1lbnRzIGJlIERhdGVUaW1lc1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmVzdEJ5KGRhdGVUaW1lcywgaSA9PiBpLnZhbHVlT2YoKSwgTWF0aC5taW4pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIG1heCBvZiBzZXZlcmFsIGRhdGUgdGltZXNcbiAgICogQHBhcmFtIHsuLi5EYXRlVGltZX0gZGF0ZVRpbWVzIC0gdGhlIERhdGVUaW1lcyBmcm9tIHdoaWNoIHRvIGNob29zZSB0aGUgbWF4aW11bVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX0gdGhlIG1heCBEYXRlVGltZSwgb3IgdW5kZWZpbmVkIGlmIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50XG4gICAqL1xuXG5cbiAgc3RhdGljIG1heCguLi5kYXRlVGltZXMpIHtcbiAgICBpZiAoIWRhdGVUaW1lcy5ldmVyeShEYXRlVGltZS5pc0RhdGVUaW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwibWF4IHJlcXVpcmVzIGFsbCBhcmd1bWVudHMgYmUgRGF0ZVRpbWVzXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBiZXN0QnkoZGF0ZVRpbWVzLCBpID0+IGkudmFsdWVPZigpLCBNYXRoLm1heCk7XG4gIH0gLy8gTUlTQ1xuXG4gIC8qKlxuICAgKiBFeHBsYWluIGhvdyBhIHN0cmluZyB3b3VsZCBiZSBwYXJzZWQgYnkgZnJvbUZvcm1hdCgpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIHN0cmluZyB0byBwYXJzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm10IC0gdGhlIGZvcm1hdCB0aGUgc3RyaW5nIGlzIGV4cGVjdGVkIHRvIGJlIGluIChzZWUgZGVzY3JpcHRpb24pXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyB0YWtlbiBieSBmcm9tRm9ybWF0KClcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBmcm9tRm9ybWF0RXhwbGFpbih0ZXh0LCBmbXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHtcbiAgICAgIGxvY2FsZSA9IG51bGwsXG4gICAgICBudW1iZXJpbmdTeXN0ZW0gPSBudWxsXG4gICAgfSA9IG9wdGlvbnMsXG4gICAgICAgICAgbG9jYWxlVG9Vc2UgPSBMb2NhbGUuZnJvbU9wdHMoe1xuICAgICAgbG9jYWxlLFxuICAgICAgbnVtYmVyaW5nU3lzdGVtLFxuICAgICAgZGVmYXVsdFRvRU46IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gZXhwbGFpbkZyb21Ub2tlbnMobG9jYWxlVG9Vc2UsIHRleHQsIGZtdCk7XG4gIH1cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZSBmcm9tRm9ybWF0RXhwbGFpbiBpbnN0ZWFkXG4gICAqL1xuXG5cbiAgc3RhdGljIGZyb21TdHJpbmdFeHBsYWluKHRleHQsIGZtdCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21Gb3JtYXRFeHBsYWluKHRleHQsIGZtdCwgb3B0aW9ucyk7XG4gIH0gLy8gRk9STUFUIFBSRVNFVFNcblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAxMC8xNC8xOTgzXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBEQVRFX1NIT1JUKCkge1xuICAgIHJldHVybiBEQVRFX1NIT1JUO1xuICB9XG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3QgMTQsIDE5ODMnXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBEQVRFX01FRCgpIHtcbiAgICByZXR1cm4gREFURV9NRUQ7XG4gIH1cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ0ZyaSwgT2N0IDE0LCAxOTgzJ1xuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgREFURV9NRURfV0lUSF9XRUVLREFZKCkge1xuICAgIHJldHVybiBEQVRFX01FRF9XSVRIX1dFRUtEQVk7XG4gIH1cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ09jdG9iZXIgMTQsIDE5ODMnXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBEQVRFX0ZVTEwoKSB7XG4gICAgcmV0dXJuIERBVEVfRlVMTDtcbiAgfVxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnVHVlc2RheSwgT2N0b2JlciAxNCwgMTk4MydcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG5cblxuICBzdGF0aWMgZ2V0IERBVEVfSFVHRSgpIHtcbiAgICByZXR1cm4gREFURV9IVUdFO1xuICB9XG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMCBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgVElNRV9TSU1QTEUoKSB7XG4gICAgcmV0dXJuIFRJTUVfU0lNUExFO1xuICB9XG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgVElNRV9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIFRJTUVfV0lUSF9TRUNPTkRTO1xuICB9XG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBBTSBFRFQnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG5cblxuICBzdGF0aWMgZ2V0IFRJTUVfV0lUSF9TSE9SVF9PRkZTRVQoKSB7XG4gICAgcmV0dXJuIFRJTUVfV0lUSF9TSE9SVF9PRkZTRVQ7XG4gIH1cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzIEFNIEVhc3Rlcm4gRGF5bGlnaHQgVGltZScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgVElNRV9XSVRIX0xPTkdfT0ZGU0VUKCkge1xuICAgIHJldHVybiBUSU1FX1dJVEhfTE9OR19PRkZTRVQ7XG4gIH1cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwJywgYWx3YXlzIDI0LWhvdXIuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBUSU1FXzI0X1NJTVBMRSgpIHtcbiAgICByZXR1cm4gVElNRV8yNF9TSU1QTEU7XG4gIH1cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzJywgYWx3YXlzIDI0LWhvdXIuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBUSU1FXzI0X1dJVEhfU0VDT05EUygpIHtcbiAgICByZXR1cm4gVElNRV8yNF9XSVRIX1NFQ09ORFM7XG4gIH1cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzIEVEVCcsIGFsd2F5cyAyNC1ob3VyLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgVElNRV8yNF9XSVRIX1NIT1JUX09GRlNFVCgpIHtcbiAgICByZXR1cm4gVElNRV8yNF9XSVRIX1NIT1JUX09GRlNFVDtcbiAgfVxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzA6MjMgRWFzdGVybiBEYXlsaWdodCBUaW1lJywgYWx3YXlzIDI0LWhvdXIuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBUSU1FXzI0X1dJVEhfTE9OR19PRkZTRVQoKSB7XG4gICAgcmV0dXJuIFRJTUVfMjRfV0lUSF9MT05HX09GRlNFVDtcbiAgfVxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMTAvMTQvMTk4MywgOTozMCBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgREFURVRJTUVfU0hPUlQoKSB7XG4gICAgcmV0dXJuIERBVEVUSU1FX1NIT1JUO1xuICB9XG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcxMC8xNC8xOTgzLCA5OjMwOjMzIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBEQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIERBVEVUSU1FX1NIT1JUX1dJVEhfU0VDT05EUztcbiAgfVxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0IDE0LCAxOTgzLCA5OjMwIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBEQVRFVElNRV9NRUQoKSB7XG4gICAgcmV0dXJuIERBVEVUSU1FX01FRDtcbiAgfVxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0IDE0LCAxOTgzLCA5OjMwOjMzIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBEQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTKCkge1xuICAgIHJldHVybiBEQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTO1xuICB9XG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdGcmksIDE0IE9jdCAxOTgzLCA5OjMwIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBEQVRFVElNRV9NRURfV0lUSF9XRUVLREFZKCkge1xuICAgIHJldHVybiBEQVRFVElNRV9NRURfV0lUSF9XRUVLREFZO1xuICB9XG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3RvYmVyIDE0LCAxOTgzLCA5OjMwIEFNIEVEVCcuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgREFURVRJTUVfRlVMTCgpIHtcbiAgICByZXR1cm4gREFURVRJTUVfRlVMTDtcbiAgfVxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0b2JlciAxNCwgMTk4MywgOTozMDozMyBBTSBFRFQnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG5cblxuICBzdGF0aWMgZ2V0IERBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTKCkge1xuICAgIHJldHVybiBEQVRFVElNRV9GVUxMX1dJVEhfU0VDT05EUztcbiAgfVxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnRnJpZGF5LCBPY3RvYmVyIDE0LCAxOTgzLCA5OjMwIEFNIEVhc3Rlcm4gRGF5bGlnaHQgVGltZScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgREFURVRJTUVfSFVHRSgpIHtcbiAgICByZXR1cm4gREFURVRJTUVfSFVHRTtcbiAgfVxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnRnJpZGF5LCBPY3RvYmVyIDE0LCAxOTgzLCA5OjMwOjMzIEFNIEVhc3Rlcm4gRGF5bGlnaHQgVGltZScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgREFURVRJTUVfSFVHRV9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIERBVEVUSU1FX0hVR0VfV0lUSF9TRUNPTkRTO1xuICB9XG5cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmcmllbmRseURhdGVUaW1lKGRhdGVUaW1laXNoKSB7XG4gIGlmIChEYXRlVGltZS5pc0RhdGVUaW1lKGRhdGVUaW1laXNoKSkge1xuICAgIHJldHVybiBkYXRlVGltZWlzaDtcbiAgfSBlbHNlIGlmIChkYXRlVGltZWlzaCAmJiBkYXRlVGltZWlzaC52YWx1ZU9mICYmIGlzTnVtYmVyKGRhdGVUaW1laXNoLnZhbHVlT2YoKSkpIHtcbiAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUpTRGF0ZShkYXRlVGltZWlzaCk7XG4gIH0gZWxzZSBpZiAoZGF0ZVRpbWVpc2ggJiYgdHlwZW9mIGRhdGVUaW1laXNoID09PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21PYmplY3QoZGF0ZVRpbWVpc2gpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihgVW5rbm93biBkYXRldGltZSBhcmd1bWVudDogJHtkYXRlVGltZWlzaH0sIG9mIHR5cGUgJHt0eXBlb2YgZGF0ZVRpbWVpc2h9YCk7XG4gIH1cbn1cblxuY29uc3QgVkVSU0lPTiA9IFwiMy4wLjFcIjtcblxuZXhwb3J0cy5EYXRlVGltZSA9IERhdGVUaW1lO1xuZXhwb3J0cy5EdXJhdGlvbiA9IER1cmF0aW9uO1xuZXhwb3J0cy5GaXhlZE9mZnNldFpvbmUgPSBGaXhlZE9mZnNldFpvbmU7XG5leHBvcnRzLklBTkFab25lID0gSUFOQVpvbmU7XG5leHBvcnRzLkluZm8gPSBJbmZvO1xuZXhwb3J0cy5JbnRlcnZhbCA9IEludGVydmFsO1xuZXhwb3J0cy5JbnZhbGlkWm9uZSA9IEludmFsaWRab25lO1xuZXhwb3J0cy5TZXR0aW5ncyA9IFNldHRpbmdzO1xuZXhwb3J0cy5TeXN0ZW1ab25lID0gU3lzdGVtWm9uZTtcbmV4cG9ydHMuVkVSU0lPTiA9IFZFUlNJT047XG5leHBvcnRzLlpvbmUgPSBab25lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bHV4b24uanMubWFwXG4iLCJ2YXIgbixsLHUsaSx0LG8scixmLGU9e30sYz1bXSxzPS9hY2l0fGV4KD86c3xnfG58cHwkKXxycGh8Z3JpZHxvd3N8bW5jfG50d3xpbmVbY2hdfHpvb3xeb3JkfGl0ZXJhL2k7ZnVuY3Rpb24gYShuLGwpe2Zvcih2YXIgdSBpbiBsKW5bdV09bFt1XTtyZXR1cm4gbn1mdW5jdGlvbiBoKG4pe3ZhciBsPW4ucGFyZW50Tm9kZTtsJiZsLnJlbW92ZUNoaWxkKG4pfWZ1bmN0aW9uIHYobCx1LGkpe3ZhciB0LG8scixmPXt9O2ZvcihyIGluIHUpXCJrZXlcIj09cj90PXVbcl06XCJyZWZcIj09cj9vPXVbcl06ZltyXT11W3JdO2lmKGFyZ3VtZW50cy5sZW5ndGg+MiYmKGYuY2hpbGRyZW49YXJndW1lbnRzLmxlbmd0aD4zP24uY2FsbChhcmd1bWVudHMsMik6aSksXCJmdW5jdGlvblwiPT10eXBlb2YgbCYmbnVsbCE9bC5kZWZhdWx0UHJvcHMpZm9yKHIgaW4gbC5kZWZhdWx0UHJvcHMpdm9pZCAwPT09ZltyXSYmKGZbcl09bC5kZWZhdWx0UHJvcHNbcl0pO3JldHVybiB5KGwsZix0LG8sbnVsbCl9ZnVuY3Rpb24geShuLGksdCxvLHIpe3ZhciBmPXt0eXBlOm4scHJvcHM6aSxrZXk6dCxyZWY6byxfX2s6bnVsbCxfXzpudWxsLF9fYjowLF9fZTpudWxsLF9fZDp2b2lkIDAsX19jOm51bGwsX19oOm51bGwsY29uc3RydWN0b3I6dm9pZCAwLF9fdjpudWxsPT1yPysrdTpyfTtyZXR1cm4gbnVsbD09ciYmbnVsbCE9bC52bm9kZSYmbC52bm9kZShmKSxmfWZ1bmN0aW9uIHAoKXtyZXR1cm57Y3VycmVudDpudWxsfX1mdW5jdGlvbiBkKG4pe3JldHVybiBuLmNoaWxkcmVufWZ1bmN0aW9uIF8obixsKXt0aGlzLnByb3BzPW4sdGhpcy5jb250ZXh0PWx9ZnVuY3Rpb24gayhuLGwpe2lmKG51bGw9PWwpcmV0dXJuIG4uX18/ayhuLl9fLG4uX18uX19rLmluZGV4T2YobikrMSk6bnVsbDtmb3IodmFyIHU7bDxuLl9fay5sZW5ndGg7bCsrKWlmKG51bGwhPSh1PW4uX19rW2xdKSYmbnVsbCE9dS5fX2UpcmV0dXJuIHUuX19lO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4udHlwZT9rKG4pOm51bGx9ZnVuY3Rpb24gYihuKXt2YXIgbCx1O2lmKG51bGwhPShuPW4uX18pJiZudWxsIT1uLl9fYyl7Zm9yKG4uX19lPW4uX19jLmJhc2U9bnVsbCxsPTA7bDxuLl9fay5sZW5ndGg7bCsrKWlmKG51bGwhPSh1PW4uX19rW2xdKSYmbnVsbCE9dS5fX2Upe24uX19lPW4uX19jLmJhc2U9dS5fX2U7YnJlYWt9cmV0dXJuIGIobil9fWZ1bmN0aW9uIG0obil7KCFuLl9fZCYmKG4uX19kPSEwKSYmdC5wdXNoKG4pJiYhZy5fX3IrK3x8ciE9PWwuZGVib3VuY2VSZW5kZXJpbmcpJiYoKHI9bC5kZWJvdW5jZVJlbmRlcmluZyl8fG8pKGcpfWZ1bmN0aW9uIGcoKXtmb3IodmFyIG47Zy5fX3I9dC5sZW5ndGg7KW49dC5zb3J0KGZ1bmN0aW9uKG4sbCl7cmV0dXJuIG4uX192Ll9fYi1sLl9fdi5fX2J9KSx0PVtdLG4uc29tZShmdW5jdGlvbihuKXt2YXIgbCx1LGksdCxvLHI7bi5fX2QmJihvPSh0PShsPW4pLl9fdikuX19lLChyPWwuX19QKSYmKHU9W10sKGk9YSh7fSx0KSkuX192PXQuX192KzEsaihyLHQsaSxsLl9fbix2b2lkIDAhPT1yLm93bmVyU1ZHRWxlbWVudCxudWxsIT10Ll9faD9bb106bnVsbCx1LG51bGw9PW8/ayh0KTpvLHQuX19oKSx6KHUsdCksdC5fX2UhPW8mJmIodCkpKX0pfWZ1bmN0aW9uIHcobixsLHUsaSx0LG8scixmLHMsYSl7dmFyIGgsdixwLF8sYixtLGcsdz1pJiZpLl9fa3x8YyxBPXcubGVuZ3RoO2Zvcih1Ll9faz1bXSxoPTA7aDxsLmxlbmd0aDtoKyspaWYobnVsbCE9KF89dS5fX2tbaF09bnVsbD09KF89bFtoXSl8fFwiYm9vbGVhblwiPT10eXBlb2YgXz9udWxsOlwic3RyaW5nXCI9PXR5cGVvZiBffHxcIm51bWJlclwiPT10eXBlb2YgX3x8XCJiaWdpbnRcIj09dHlwZW9mIF8/eShudWxsLF8sbnVsbCxudWxsLF8pOkFycmF5LmlzQXJyYXkoXyk/eShkLHtjaGlsZHJlbjpffSxudWxsLG51bGwsbnVsbCk6Xy5fX2I+MD95KF8udHlwZSxfLnByb3BzLF8ua2V5LG51bGwsXy5fX3YpOl8pKXtpZihfLl9fPXUsXy5fX2I9dS5fX2IrMSxudWxsPT09KHA9d1toXSl8fHAmJl8ua2V5PT1wLmtleSYmXy50eXBlPT09cC50eXBlKXdbaF09dm9pZCAwO2Vsc2UgZm9yKHY9MDt2PEE7disrKXtpZigocD13W3ZdKSYmXy5rZXk9PXAua2V5JiZfLnR5cGU9PT1wLnR5cGUpe3dbdl09dm9pZCAwO2JyZWFrfXA9bnVsbH1qKG4sXyxwPXB8fGUsdCxvLHIsZixzLGEpLGI9Xy5fX2UsKHY9Xy5yZWYpJiZwLnJlZiE9diYmKGd8fChnPVtdKSxwLnJlZiYmZy5wdXNoKHAucmVmLG51bGwsXyksZy5wdXNoKHYsXy5fX2N8fGIsXykpLG51bGwhPWI/KG51bGw9PW0mJihtPWIpLFwiZnVuY3Rpb25cIj09dHlwZW9mIF8udHlwZSYmXy5fX2s9PT1wLl9faz9fLl9fZD1zPXgoXyxzLG4pOnM9UChuLF8scCx3LGIscyksXCJmdW5jdGlvblwiPT10eXBlb2YgdS50eXBlJiYodS5fX2Q9cykpOnMmJnAuX19lPT1zJiZzLnBhcmVudE5vZGUhPW4mJihzPWsocCkpfWZvcih1Ll9fZT1tLGg9QTtoLS07KW51bGwhPXdbaF0mJihcImZ1bmN0aW9uXCI9PXR5cGVvZiB1LnR5cGUmJm51bGwhPXdbaF0uX19lJiZ3W2hdLl9fZT09dS5fX2QmJih1Ll9fZD1rKGksaCsxKSksTih3W2hdLHdbaF0pKTtpZihnKWZvcihoPTA7aDxnLmxlbmd0aDtoKyspTShnW2hdLGdbKytoXSxnWysraF0pfWZ1bmN0aW9uIHgobixsLHUpe2Zvcih2YXIgaSx0PW4uX19rLG89MDt0JiZvPHQubGVuZ3RoO28rKykoaT10W29dKSYmKGkuX189bixsPVwiZnVuY3Rpb25cIj09dHlwZW9mIGkudHlwZT94KGksbCx1KTpQKHUsaSxpLHQsaS5fX2UsbCkpO3JldHVybiBsfWZ1bmN0aW9uIEEobixsKXtyZXR1cm4gbD1sfHxbXSxudWxsPT1ufHxcImJvb2xlYW5cIj09dHlwZW9mIG58fChBcnJheS5pc0FycmF5KG4pP24uc29tZShmdW5jdGlvbihuKXtBKG4sbCl9KTpsLnB1c2gobikpLGx9ZnVuY3Rpb24gUChuLGwsdSxpLHQsbyl7dmFyIHIsZixlO2lmKHZvaWQgMCE9PWwuX19kKXI9bC5fX2QsbC5fX2Q9dm9pZCAwO2Vsc2UgaWYobnVsbD09dXx8dCE9b3x8bnVsbD09dC5wYXJlbnROb2RlKW46aWYobnVsbD09b3x8by5wYXJlbnROb2RlIT09biluLmFwcGVuZENoaWxkKHQpLHI9bnVsbDtlbHNle2ZvcihmPW8sZT0wOyhmPWYubmV4dFNpYmxpbmcpJiZlPGkubGVuZ3RoO2UrPTIpaWYoZj09dClicmVhayBuO24uaW5zZXJ0QmVmb3JlKHQsbykscj1vfXJldHVybiB2b2lkIDAhPT1yP3I6dC5uZXh0U2libGluZ31mdW5jdGlvbiBDKG4sbCx1LGksdCl7dmFyIG87Zm9yKG8gaW4gdSlcImNoaWxkcmVuXCI9PT1vfHxcImtleVwiPT09b3x8byBpbiBsfHxIKG4sbyxudWxsLHVbb10saSk7Zm9yKG8gaW4gbCl0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBsW29dfHxcImNoaWxkcmVuXCI9PT1vfHxcImtleVwiPT09b3x8XCJ2YWx1ZVwiPT09b3x8XCJjaGVja2VkXCI9PT1vfHx1W29dPT09bFtvXXx8SChuLG8sbFtvXSx1W29dLGkpfWZ1bmN0aW9uICQobixsLHUpe1wiLVwiPT09bFswXT9uLnNldFByb3BlcnR5KGwsdSk6bltsXT1udWxsPT11P1wiXCI6XCJudW1iZXJcIiE9dHlwZW9mIHV8fHMudGVzdChsKT91OnUrXCJweFwifWZ1bmN0aW9uIEgobixsLHUsaSx0KXt2YXIgbztuOmlmKFwic3R5bGVcIj09PWwpaWYoXCJzdHJpbmdcIj09dHlwZW9mIHUpbi5zdHlsZS5jc3NUZXh0PXU7ZWxzZXtpZihcInN0cmluZ1wiPT10eXBlb2YgaSYmKG4uc3R5bGUuY3NzVGV4dD1pPVwiXCIpLGkpZm9yKGwgaW4gaSl1JiZsIGluIHV8fCQobi5zdHlsZSxsLFwiXCIpO2lmKHUpZm9yKGwgaW4gdSlpJiZ1W2xdPT09aVtsXXx8JChuLnN0eWxlLGwsdVtsXSl9ZWxzZSBpZihcIm9cIj09PWxbMF0mJlwiblwiPT09bFsxXSlvPWwhPT0obD1sLnJlcGxhY2UoL0NhcHR1cmUkLyxcIlwiKSksbD1sLnRvTG93ZXJDYXNlKClpbiBuP2wudG9Mb3dlckNhc2UoKS5zbGljZSgyKTpsLnNsaWNlKDIpLG4ubHx8KG4ubD17fSksbi5sW2wrb109dSx1P2l8fG4uYWRkRXZlbnRMaXN0ZW5lcihsLG8/VDpJLG8pOm4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihsLG8/VDpJLG8pO2Vsc2UgaWYoXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCl7aWYodClsPWwucmVwbGFjZSgveGxpbmsoSHw6aCkvLFwiaFwiKS5yZXBsYWNlKC9zTmFtZSQvLFwic1wiKTtlbHNlIGlmKFwiaHJlZlwiIT09bCYmXCJsaXN0XCIhPT1sJiZcImZvcm1cIiE9PWwmJlwidGFiSW5kZXhcIiE9PWwmJlwiZG93bmxvYWRcIiE9PWwmJmwgaW4gbil0cnl7bltsXT1udWxsPT11P1wiXCI6dTticmVhayBufWNhdGNoKG4pe31cImZ1bmN0aW9uXCI9PXR5cGVvZiB1fHwobnVsbCE9dSYmKCExIT09dXx8XCJhXCI9PT1sWzBdJiZcInJcIj09PWxbMV0pP24uc2V0QXR0cmlidXRlKGwsdSk6bi5yZW1vdmVBdHRyaWJ1dGUobCkpfX1mdW5jdGlvbiBJKG4pe3RoaXMubFtuLnR5cGUrITFdKGwuZXZlbnQ/bC5ldmVudChuKTpuKX1mdW5jdGlvbiBUKG4pe3RoaXMubFtuLnR5cGUrITBdKGwuZXZlbnQ/bC5ldmVudChuKTpuKX1mdW5jdGlvbiBqKG4sdSxpLHQsbyxyLGYsZSxjKXt2YXIgcyxoLHYseSxwLGssYixtLGcseCxBLFAsQywkPXUudHlwZTtpZih2b2lkIDAhPT11LmNvbnN0cnVjdG9yKXJldHVybiBudWxsO251bGwhPWkuX19oJiYoYz1pLl9faCxlPXUuX19lPWkuX19lLHUuX19oPW51bGwscj1bZV0pLChzPWwuX19iKSYmcyh1KTt0cnl7bjppZihcImZ1bmN0aW9uXCI9PXR5cGVvZiAkKXtpZihtPXUucHJvcHMsZz0ocz0kLmNvbnRleHRUeXBlKSYmdFtzLl9fY10seD1zP2c/Zy5wcm9wcy52YWx1ZTpzLl9fOnQsaS5fX2M/Yj0oaD11Ll9fYz1pLl9fYykuX189aC5fX0U6KFwicHJvdG90eXBlXCJpbiAkJiYkLnByb3RvdHlwZS5yZW5kZXI/dS5fX2M9aD1uZXcgJChtLHgpOih1Ll9fYz1oPW5ldyBfKG0seCksaC5jb25zdHJ1Y3Rvcj0kLGgucmVuZGVyPU8pLGcmJmcuc3ViKGgpLGgucHJvcHM9bSxoLnN0YXRlfHwoaC5zdGF0ZT17fSksaC5jb250ZXh0PXgsaC5fX249dCx2PWguX19kPSEwLGguX19oPVtdKSxudWxsPT1oLl9fcyYmKGguX19zPWguc3RhdGUpLG51bGwhPSQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiYoaC5fX3M9PWguc3RhdGUmJihoLl9fcz1hKHt9LGguX19zKSksYShoLl9fcywkLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhtLGguX19zKSkpLHk9aC5wcm9wcyxwPWguc3RhdGUsdiludWxsPT0kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmbnVsbCE9aC5jb21wb25lbnRXaWxsTW91bnQmJmguY29tcG9uZW50V2lsbE1vdW50KCksbnVsbCE9aC5jb21wb25lbnREaWRNb3VudCYmaC5fX2gucHVzaChoLmNvbXBvbmVudERpZE1vdW50KTtlbHNle2lmKG51bGw9PSQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZtIT09eSYmbnVsbCE9aC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZoLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobSx4KSwhaC5fX2UmJm51bGwhPWguc2hvdWxkQ29tcG9uZW50VXBkYXRlJiYhMT09PWguc2hvdWxkQ29tcG9uZW50VXBkYXRlKG0saC5fX3MseCl8fHUuX192PT09aS5fX3Ype2gucHJvcHM9bSxoLnN0YXRlPWguX19zLHUuX192IT09aS5fX3YmJihoLl9fZD0hMSksaC5fX3Y9dSx1Ll9fZT1pLl9fZSx1Ll9faz1pLl9fayx1Ll9fay5mb3JFYWNoKGZ1bmN0aW9uKG4pe24mJihuLl9fPXUpfSksaC5fX2gubGVuZ3RoJiZmLnB1c2goaCk7YnJlYWsgbn1udWxsIT1oLmNvbXBvbmVudFdpbGxVcGRhdGUmJmguY29tcG9uZW50V2lsbFVwZGF0ZShtLGguX19zLHgpLG51bGwhPWguY29tcG9uZW50RGlkVXBkYXRlJiZoLl9faC5wdXNoKGZ1bmN0aW9uKCl7aC5jb21wb25lbnREaWRVcGRhdGUoeSxwLGspfSl9aWYoaC5jb250ZXh0PXgsaC5wcm9wcz1tLGguX192PXUsaC5fX1A9bixBPWwuX19yLFA9MCxcInByb3RvdHlwZVwiaW4gJCYmJC5wcm90b3R5cGUucmVuZGVyKWguc3RhdGU9aC5fX3MsaC5fX2Q9ITEsQSYmQSh1KSxzPWgucmVuZGVyKGgucHJvcHMsaC5zdGF0ZSxoLmNvbnRleHQpO2Vsc2UgZG97aC5fX2Q9ITEsQSYmQSh1KSxzPWgucmVuZGVyKGgucHJvcHMsaC5zdGF0ZSxoLmNvbnRleHQpLGguc3RhdGU9aC5fX3N9d2hpbGUoaC5fX2QmJisrUDwyNSk7aC5zdGF0ZT1oLl9fcyxudWxsIT1oLmdldENoaWxkQ29udGV4dCYmKHQ9YShhKHt9LHQpLGguZ2V0Q2hpbGRDb250ZXh0KCkpKSx2fHxudWxsPT1oLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHwoaz1oLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHkscCkpLEM9bnVsbCE9cyYmcy50eXBlPT09ZCYmbnVsbD09cy5rZXk/cy5wcm9wcy5jaGlsZHJlbjpzLHcobixBcnJheS5pc0FycmF5KEMpP0M6W0NdLHUsaSx0LG8scixmLGUsYyksaC5iYXNlPXUuX19lLHUuX19oPW51bGwsaC5fX2gubGVuZ3RoJiZmLnB1c2goaCksYiYmKGguX19FPWguX189bnVsbCksaC5fX2U9ITF9ZWxzZSBudWxsPT1yJiZ1Ll9fdj09PWkuX192Pyh1Ll9faz1pLl9fayx1Ll9fZT1pLl9fZSk6dS5fX2U9TChpLl9fZSx1LGksdCxvLHIsZixjKTsocz1sLmRpZmZlZCkmJnModSl9Y2F0Y2gobil7dS5fX3Y9bnVsbCwoY3x8bnVsbCE9cikmJih1Ll9fZT1lLHUuX19oPSEhYyxyW3IuaW5kZXhPZihlKV09bnVsbCksbC5fX2Uobix1LGkpfX1mdW5jdGlvbiB6KG4sdSl7bC5fX2MmJmwuX19jKHUsbiksbi5zb21lKGZ1bmN0aW9uKHUpe3RyeXtuPXUuX19oLHUuX19oPVtdLG4uc29tZShmdW5jdGlvbihuKXtuLmNhbGwodSl9KX1jYXRjaChuKXtsLl9fZShuLHUuX192KX19KX1mdW5jdGlvbiBMKGwsdSxpLHQsbyxyLGYsYyl7dmFyIHMsYSx2LHk9aS5wcm9wcyxwPXUucHJvcHMsZD11LnR5cGUsXz0wO2lmKFwic3ZnXCI9PT1kJiYobz0hMCksbnVsbCE9cilmb3IoO188ci5sZW5ndGg7XysrKWlmKChzPXJbX10pJiZcInNldEF0dHJpYnV0ZVwiaW4gcz09ISFkJiYoZD9zLmxvY2FsTmFtZT09PWQ6Mz09PXMubm9kZVR5cGUpKXtsPXMscltfXT1udWxsO2JyZWFrfWlmKG51bGw9PWwpe2lmKG51bGw9PT1kKXJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShwKTtsPW8/ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixkKTpkb2N1bWVudC5jcmVhdGVFbGVtZW50KGQscC5pcyYmcCkscj1udWxsLGM9ITF9aWYobnVsbD09PWQpeT09PXB8fGMmJmwuZGF0YT09PXB8fChsLmRhdGE9cCk7ZWxzZXtpZihyPXImJm4uY2FsbChsLmNoaWxkTm9kZXMpLGE9KHk9aS5wcm9wc3x8ZSkuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsdj1wLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLCFjKXtpZihudWxsIT1yKWZvcih5PXt9LF89MDtfPGwuYXR0cmlidXRlcy5sZW5ndGg7XysrKXlbbC5hdHRyaWJ1dGVzW19dLm5hbWVdPWwuYXR0cmlidXRlc1tfXS52YWx1ZTsodnx8YSkmJih2JiYoYSYmdi5fX2h0bWw9PWEuX19odG1sfHx2Ll9faHRtbD09PWwuaW5uZXJIVE1MKXx8KGwuaW5uZXJIVE1MPXYmJnYuX19odG1sfHxcIlwiKSl9aWYoQyhsLHAseSxvLGMpLHYpdS5fX2s9W107ZWxzZSBpZihfPXUucHJvcHMuY2hpbGRyZW4sdyhsLEFycmF5LmlzQXJyYXkoXyk/XzpbX10sdSxpLHQsbyYmXCJmb3JlaWduT2JqZWN0XCIhPT1kLHIsZixyP3JbMF06aS5fX2smJmsoaSwwKSxjKSxudWxsIT1yKWZvcihfPXIubGVuZ3RoO18tLTspbnVsbCE9cltfXSYmaChyW19dKTtjfHwoXCJ2YWx1ZVwiaW4gcCYmdm9pZCAwIT09KF89cC52YWx1ZSkmJihfIT09bC52YWx1ZXx8XCJwcm9ncmVzc1wiPT09ZCYmIV98fFwib3B0aW9uXCI9PT1kJiZfIT09eS52YWx1ZSkmJkgobCxcInZhbHVlXCIsXyx5LnZhbHVlLCExKSxcImNoZWNrZWRcImluIHAmJnZvaWQgMCE9PShfPXAuY2hlY2tlZCkmJl8hPT1sLmNoZWNrZWQmJkgobCxcImNoZWNrZWRcIixfLHkuY2hlY2tlZCwhMSkpfXJldHVybiBsfWZ1bmN0aW9uIE0obix1LGkpe3RyeXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBuP24odSk6bi5jdXJyZW50PXV9Y2F0Y2gobil7bC5fX2UobixpKX19ZnVuY3Rpb24gTihuLHUsaSl7dmFyIHQsbztpZihsLnVubW91bnQmJmwudW5tb3VudChuKSwodD1uLnJlZikmJih0LmN1cnJlbnQmJnQuY3VycmVudCE9PW4uX19lfHxNKHQsbnVsbCx1KSksbnVsbCE9KHQ9bi5fX2MpKXtpZih0LmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXt0LmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2gobil7bC5fX2Uobix1KX10LmJhc2U9dC5fX1A9bnVsbH1pZih0PW4uX19rKWZvcihvPTA7bzx0Lmxlbmd0aDtvKyspdFtvXSYmTih0W29dLHUsXCJmdW5jdGlvblwiIT10eXBlb2Ygbi50eXBlKTtpfHxudWxsPT1uLl9fZXx8aChuLl9fZSksbi5fX2U9bi5fX2Q9dm9pZCAwfWZ1bmN0aW9uIE8obixsLHUpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yKG4sdSl9ZnVuY3Rpb24gUyh1LGksdCl7dmFyIG8scixmO2wuX18mJmwuX18odSxpKSxyPShvPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQpP251bGw6dCYmdC5fX2t8fGkuX19rLGY9W10saihpLHU9KCFvJiZ0fHxpKS5fX2s9dihkLG51bGwsW3VdKSxyfHxlLGUsdm9pZCAwIT09aS5vd25lclNWR0VsZW1lbnQsIW8mJnQ/W3RdOnI/bnVsbDppLmZpcnN0Q2hpbGQ/bi5jYWxsKGkuY2hpbGROb2Rlcyk6bnVsbCxmLCFvJiZ0P3Q6cj9yLl9fZTppLmZpcnN0Q2hpbGQsbykseihmLHUpfWZ1bmN0aW9uIHEobixsKXtTKG4sbCxxKX1mdW5jdGlvbiBCKGwsdSxpKXt2YXIgdCxvLHIsZj1hKHt9LGwucHJvcHMpO2ZvcihyIGluIHUpXCJrZXlcIj09cj90PXVbcl06XCJyZWZcIj09cj9vPXVbcl06ZltyXT11W3JdO3JldHVybiBhcmd1bWVudHMubGVuZ3RoPjImJihmLmNoaWxkcmVuPWFyZ3VtZW50cy5sZW5ndGg+Mz9uLmNhbGwoYXJndW1lbnRzLDIpOmkpLHkobC50eXBlLGYsdHx8bC5rZXksb3x8bC5yZWYsbnVsbCl9ZnVuY3Rpb24gRChuLGwpe3ZhciB1PXtfX2M6bD1cIl9fY0NcIitmKyssX186bixDb25zdW1lcjpmdW5jdGlvbihuLGwpe3JldHVybiBuLmNoaWxkcmVuKGwpfSxQcm92aWRlcjpmdW5jdGlvbihuKXt2YXIgdSxpO3JldHVybiB0aGlzLmdldENoaWxkQ29udGV4dHx8KHU9W10sKGk9e30pW2xdPXRoaXMsdGhpcy5nZXRDaGlsZENvbnRleHQ9ZnVuY3Rpb24oKXtyZXR1cm4gaX0sdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGU9ZnVuY3Rpb24obil7dGhpcy5wcm9wcy52YWx1ZSE9PW4udmFsdWUmJnUuc29tZShtKX0sdGhpcy5zdWI9ZnVuY3Rpb24obil7dS5wdXNoKG4pO3ZhciBsPW4uY29tcG9uZW50V2lsbFVubW91bnQ7bi5jb21wb25lbnRXaWxsVW5tb3VudD1mdW5jdGlvbigpe3Uuc3BsaWNlKHUuaW5kZXhPZihuKSwxKSxsJiZsLmNhbGwobil9fSksbi5jaGlsZHJlbn19O3JldHVybiB1LlByb3ZpZGVyLl9fPXUuQ29uc3VtZXIuY29udGV4dFR5cGU9dX1uPWMuc2xpY2UsbD17X19lOmZ1bmN0aW9uKG4sbCx1LGkpe2Zvcih2YXIgdCxvLHI7bD1sLl9fOylpZigodD1sLl9fYykmJiF0Ll9fKXRyeXtpZigobz10LmNvbnN0cnVjdG9yKSYmbnVsbCE9by5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3ImJih0LnNldFN0YXRlKG8uZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKG4pKSxyPXQuX19kKSxudWxsIT10LmNvbXBvbmVudERpZENhdGNoJiYodC5jb21wb25lbnREaWRDYXRjaChuLGl8fHt9KSxyPXQuX19kKSxyKXJldHVybiB0Ll9fRT10fWNhdGNoKGwpe249bH10aHJvdyBufX0sdT0wLGk9ZnVuY3Rpb24obil7cmV0dXJuIG51bGwhPW4mJnZvaWQgMD09PW4uY29uc3RydWN0b3J9LF8ucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKG4sbCl7dmFyIHU7dT1udWxsIT10aGlzLl9fcyYmdGhpcy5fX3MhPT10aGlzLnN0YXRlP3RoaXMuX19zOnRoaXMuX19zPWEoe30sdGhpcy5zdGF0ZSksXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmKG49bihhKHt9LHUpLHRoaXMucHJvcHMpKSxuJiZhKHUsbiksbnVsbCE9biYmdGhpcy5fX3YmJihsJiZ0aGlzLl9faC5wdXNoKGwpLG0odGhpcykpfSxfLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihuKXt0aGlzLl9fdiYmKHRoaXMuX19lPSEwLG4mJnRoaXMuX19oLnB1c2gobiksbSh0aGlzKSl9LF8ucHJvdG90eXBlLnJlbmRlcj1kLHQ9W10sbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm9taXNlP1Byb21pc2UucHJvdG90eXBlLnRoZW4uYmluZChQcm9taXNlLnJlc29sdmUoKSk6c2V0VGltZW91dCxnLl9fcj0wLGY9MDtleHBvcnR7UyBhcyByZW5kZXIscSBhcyBoeWRyYXRlLHYgYXMgY3JlYXRlRWxlbWVudCx2IGFzIGgsZCBhcyBGcmFnbWVudCxwIGFzIGNyZWF0ZVJlZixpIGFzIGlzVmFsaWRFbGVtZW50LF8gYXMgQ29tcG9uZW50LEIgYXMgY2xvbmVFbGVtZW50LEQgYXMgY3JlYXRlQ29udGV4dCxBIGFzIHRvQ2hpbGRBcnJheSxsIGFzIG9wdGlvbnN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlYWN0Lm1vZHVsZS5qcy5tYXBcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCB7IGgsIHJlbmRlciB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IEdhbWUgfSBmcm9tIFwiLi9HYW1lXCI7XG5pbXBvcnQgXCIuL21haW4uc2Nzc1wiO1xuXG5jb25zdCBST09UX0VMRU1FTlQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXBwJykgYXMgSFRNTEVsZW1lbnQ7XG5cbnJlbmRlcig8R2FtZSAvPiwgUk9PVF9FTEVNRU5UKTsiXSwic291cmNlUm9vdCI6IiJ9