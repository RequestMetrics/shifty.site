(()=>{"use strict";var e={68:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PLAYER_STORAGE_KEY="rm_player_data"},120:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=n(400),r=n(736);class i extends s.Component{render(){return s.h(r.Modal,{content:s.h("div",{class:"countdown-modal flex flex-column"},s.h("h2",null,this.props.number)),isOpen:this.props.isOpen})}}t.CountdownModal=i},484:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=n(400),r=n(958),i=n(736),o=n(851);class a extends s.Component{render(){let e,t;return this.props.cart>0?(e="You Got the Deals!",t="/assets/images/clap_500_apng.png"):(e="You Lost the Deals!",t="/assets/images/sob_500_apng.png"),s.h(i.Modal,{content:s.h("div",{class:"finish-modal flex flex-column align-center text-center"},s.h("h2",null,e),s.h("div",{class:"illustration"},s.h("img",{src:t,alt:"Sloth",height:"500",width:"500"})),s.h("p",null,"You got ",s.h("strong",null,this.props.cart)," deals with ",s.h("strong",null,this.props.clicks)," clicks (",o.getAccuracy(this.props.cart,this.props.clicks),").",s.h("br",null),"The page shifted ",s.h("strong",{style:"color:red"},this.props.cls.toFixed(4))," while loading.",s.h("br",null),"That's really frustrating."),s.h("div",{class:"cta flex flex-column align-center text-center"},s.h("p",null,"Discover how your website shifts and your real-user experience with ",s.h("strong",null,"Request Metrics"),"."),s.h("div",{class:"logo"},s.h("img",{src:"/assets/images/request_metrics_logo.svg",alt:"Request Metrics",width:"300",height:"102"}))),s.h("div",{class:"controls flex justify-center"},s.h("button",{class:"btn btn-blue",onClick:()=>r.GameController.reset()},"Start Over"))),isOpen:this.props.isOpen})}}t.FinishModal=a},114:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=n(400),r=n(958),i=n(929),o=n(771);n(849);const a=n(442),l=n(993),u=n(120),c=n(484);class h extends s.Component{constructor(){super(),r.GameController.init((()=>this.state),this.setState.bind(this))}render(){return s.h("div",{class:"game"},s.h("header",null,s.h("div",{class:"header-box"},s.h("h1",null,"Shifty.site"),s.h("div",{class:"controls"},s.h(o.Timer,{until:this.state.endTime}),s.h(a.ShiftCounter,null)))),s.h("div",{class:"level-wrap"},this.renderLevel()),s.h(u.CountdownModal,{isOpen:!!this.state.countdown,number:this.state.countdown}),s.h(c.FinishModal,{isOpen:this.state.showFinishModal,cart:this.state.cart,clicks:this.state.clicks,cls:r.GameController.cls}))}renderLevel(){return this.state.level===r.level.NO_LEVEL?s.h(l.Launcher,null):this.state.level===r.level.STORE?s.h(i.StoreLevel,null):void 0}}t.Game=h},958:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=n(565),r=n(68),i=n(493),o=n(362),a=n(340);var l;!function(e){e[e.NO_LEVEL=0]="NO_LEVEL",e[e.STORE=1]="STORE"}(l=t.level||(t.level={})),t.GameController=new class{constructor(){this.cls=0}init(e,t){this.getState=e,this.setState=t,this.setState({cart:0,clicks:0,level:l.NO_LEVEL,startTime:s.DateTime.invalid("initial"),endTime:s.DateTime.invalid("initial"),showFinishModal:!1})}reset(){location.reload()}async start(e){await this.countdown(5);let t=s.DateTime.now();this.setState({level:e,startTime:t,endTime:t.plus({seconds:30})}),i.GameTimer.onTick((()=>{let e=this.getState();s.DateTime.now()>e.endTime&&this.stop()})),i.GameTimer.start()}stop(){i.GameTimer.stop();let e=o.StoreLevelController.getState().cart,t=o.StoreLevelController.getState().clicks;this.setState({startTime:s.DateTime.invalid("initial"),endTime:s.DateTime.invalid("initial"),showFinishModal:!0,cart:e,clicks:t});let n=this.getState(),l=a.getLocalStorage(r.PLAYER_STORAGE_KEY)||[];l.push({name:n.name,email:n.email,cart:e,clicks:t,timestamp:n.timestamp}),a.setLocalStorage(r.PLAYER_STORAGE_KEY,l)}countdown(e){return new Promise(((t,n)=>{this.setState({countdown:e}),e<=0?t():setTimeout((()=>{this.countdown(e-1).then(t)}),1e3)}))}}},493:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=n(820);t.GameTimer=new class{constructor(){this.tickCount=0,this.tickHandlers=[],this.isRunning=!1,this.multiplier=0}start(){this.isRunning=!0,setTimeout((()=>this.tick()))}pause(){this.isRunning=!1,clearTimeout(this.nextTick)}stop(){this.isRunning=!1,clearTimeout(this.nextTick)}onTick(e){return this.tickHandlers.push(e),this.tickHandlers.length-1}getTickDelay(){return s.getRandomInteger(800,1600)-200*this.multiplier}tick(){this.isRunning&&(this.tickHandlers.forEach((e=>{this.isRunning&&e(this.tickCount)})),this.nextTick=setTimeout((()=>this.tick()),this.getTickDelay()))}}},993:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=n(400);n(358);const r=n(637),i=n(536);class o extends s.Component{constructor(){super(),this.state={isLeaderboardModalOpen:!1,isSignupModalOpen:!1}}render(){return s.h("div",{class:"launcher"},s.h("div",{class:"container flex flex-column"},s.h("h2",null,"Get the deals before they’re gone!"),s.h("div",{class:"launch-content flex"},s.h("div",{class:"illustration"},s.h("img",{src:"/assets/images/deal-of-the-day.png",height:"600",width:"600"})),s.h("div",{class:"instructions"},s.h("p",null,"The GreatGets website sucks. It loads async content in random sizes, causing frustrating ",s.h("strong",null,"layout shifts"),"."),s.h("p",null,"They have awesome deals though deals, but only for 30 seconds! How many can you add before time runs out?"),s.h("p",null,"Watch out for the annoying popups!"),s.h("div",{class:"controls flex justify-center"},s.h("button",{type:"button",class:"btn btn-blue",onClick:e=>this.setState({isSignupModalOpen:!0})},"Start!"),s.h("button",{type:"button",class:"btn btn-grey",onClick:()=>this.setState({isLeaderboardModalOpen:!0})},"Scores")))),s.h("div",{class:"rm-logo flex flex-column align-center"},s.h("h4",{style:"font-weight: normal"},"Developed By"),s.h("a",{href:"https://requestmetrics.com/"},s.h("img",{src:"/assets/images/request_metrics_logo.svg",alt:"Request Metrics",width:"300",height:"102"}))),s.h("div",{class:"sloth-this"},s.h("img",{src:"/assets/images/this_500_apng.png",width:"500",height:"500"}))),s.h(i.SignupModal,{isOpen:this.state.isSignupModalOpen,onClose:()=>this.setState({isSignupModalOpen:!1})}),s.h(r.LeaderboardModal,{isOpen:this.state.isLeaderboardModalOpen,onClose:()=>this.setState({isLeaderboardModalOpen:!1})}))}}t.Launcher=o},637:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=n(400),r=n(68),i=n(736),o=n(851),a=n(340);class l extends s.Component{render(){let e=a.getLocalStorage(r.PLAYER_STORAGE_KEY)||[];return e=e.sort(((e,t)=>(e.cart||0)<(t.cart||0)?-1:1)).reverse().filter(((e,t)=>t<10)),s.h(i.Modal,{content:s.h("div",{class:"leaderboard-modal flex flex-column"},s.h("h2",null,"Leaderboard"),s.h("table",{class:"scores "},s.h("tr",{class:"header"},s.h("th",null,"Name"),s.h("th",null,"Cart"),s.h("th",null,"Accuracy")),e.map((e=>s.h("tr",{class:"player"},s.h("td",null,e.name),s.h("td",null,e.cart||0),s.h("td",null,o.getAccuracy(e.cart,e.clicks)))))),s.h("div",{class:"controls flex justify-center",style:"margin-top:20px;"},s.h("button",{type:"button",class:"btn btn-grey",onClick:()=>this.props.onClose()},"Close"))),isOpen:this.props.isOpen,onClose:this.props.onClose})}}t.LeaderboardModal=l},536:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=n(565),r=n(400),i=n(958),o=n(736);class a extends r.Component{render(){return r.h(o.Modal,{content:r.h("div",{class:"signup-modal flex flex-column"},r.h("h2",null,"First, We Need Your Email"),r.h("p",{class:"text-center"},"We’ll send you information about ",r.h("strong",null,"Cumulative Layout Shift")," (CLS) and how to fix it. Unsubscribe at any time."),r.h("form",{class:"flex flex-column",onSubmit:e=>this.saveForm(e)},r.h("label",null,r.h("span",null,"Your Name"),r.h("input",{type:"text",name:"name",value:this.state.formName,required:!0,placeholder:"Jane Doe"})),r.h("label",null,r.h("span",null,"Your Email"),r.h("input",{type:"email",name:"email",value:this.state.formName,required:!0,placeholder:"jane@example.com"})),r.h("div",{class:"controls flex justify-center"},r.h("button",{type:"submit",class:"btn btn-blue"},"Start"),r.h("button",{type:"button",class:"btn btn-grey",onClick:()=>this.props.onClose()},"Cancel")))),isOpen:this.props.isOpen,onClose:this.props.onClose})}saveForm(e){e.preventDefault();let t=e.target;i.GameController.setState({name:t.elements.name.value,email:t.elements.email.value,timestamp:s.DateTime.now()}),this.props.onClose(),i.GameController.start(i.level.STORE)}}t.SignupModal=a},736:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=n(400);n(26);class r extends s.Component{render(){return s.h("div",{class:"modal-wrap",style:{display:this.props.isOpen?"flex":"none"}},s.h("div",{class:"modal-box",style:{"margin-top":`${this.props.yAdjust||0}vh`,"margin-left":`${this.props.xAdjust||0}vw`}},this.props.content))}}t.Modal=r},442:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=n(400),r=n(958),i=n(493),o=n(820),a=n(27);n(931);class l extends s.Component{constructor(){super(),this.state={cls:0}}componentDidMount(){a.isSafari()?i.GameTimer.onTick((e=>{let t=this.state.cls;t+=(o.getRandomInteger(5e3,1e4)+e)/1e4,this.setState({cls:t}),r.GameController.cls=t})):(this.observer=new PerformanceObserver((e=>{let t=(e.getEntries()||[]).reduce(((e,t,n)=>e+t.value),this.state.cls);this.setState({cls:t}),r.GameController.cls=t})),this.observer.observe({type:"layout-shift",buffered:!1}))}componentWillUnmount(){this.observer.disconnect()}render(){return s.h("div",{class:"shift-counter"},s.h("div",{class:"label"},"CLS"),s.h("div",{class:"value"},this.state.cls.toFixed(4)))}}t.ShiftCounter=l},855:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=n(400),r=n(736),i=n(362);class o extends s.Component{render(){return s.h(r.Modal,{content:s.h("div",{class:"experience-modal flex flex-column"},s.h("h2",null,"Help Improve Our Website"),s.h("button",{class:"close",onTouchStart:()=>i.StoreLevelController.clearExperience()},"✕"),s.h("p",null,"Tell us about your experience on our website! We promise to ignore it entirely and continue with what we are doing."),s.h("div",{class:"ratings flex flex-column justify-center"},s.h("div",{class:"title"},"How likely are you to recommend GreatGets to a friend?"),s.h("div",{class:"labels flex"},s.h("div",null,"Not Likely"),s.h("div",null,"Very Likely")),s.h("div",{class:"controls flex"},s.h("label",{onTouchStart:()=>i.StoreLevelController.clickRatings()},s.h("input",{type:"radio"}),s.h("span",null,"1")),s.h("label",{onTouchStart:()=>i.StoreLevelController.clickRatings()},s.h("input",{type:"radio"}),s.h("span",null,"2")),s.h("label",{onTouchStart:()=>i.StoreLevelController.clickRatings()},s.h("input",{type:"radio"}),s.h("span",null,"3")),s.h("label",{onTouchStart:()=>i.StoreLevelController.clickRatings()},s.h("input",{type:"radio"}),s.h("span",null,"4")),s.h("label",{onTouchStart:()=>i.StoreLevelController.clickRatings()},s.h("input",{type:"radio"}),s.h("span",null,"5"))))),isOpen:this.props.isOpen,xAdjust:this.props.xAdjust,yAdjust:this.props.yAdjust})}}t.ExperienceModal=o;class a extends s.Component{render(){return s.h(r.Modal,{content:s.h("div",{class:"experience-thanks-modal flex flex-column"},s.h("h2",null,"Thanks for your Rating!"),s.h("h3",null,"Expect a lot of survey emails from us!"),s.h("button",{class:"close",onTouchStart:()=>i.StoreLevelController.clearRatingsThanks()},"✕"),s.h("p",{style:{flex:"1 1 auto"}},"We recorded your rating! We will continue to ask you over email every 2-3 days from now until eternity, regardless if you ever shop with us again.")),isOpen:this.props.isOpen,xAdjust:this.props.xAdjust,yAdjust:this.props.yAdjust})}}t.ExperienceThanksModal=a},43:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=n(400),r=n(736),i=n(362);class o extends s.Component{render(){return s.h(r.Modal,{content:s.h("div",{class:"newsletter-modal"},s.h("h2",null,"Join Our Newsletter and Save!"),s.h("h3",null,"A Really Annoying Popup"),s.h("p",null,"Join our newsletter and we'll send you 10 emails every day about crappy products that we can't sell."),s.h("button",{type:"button",onTouchStart:()=>i.StoreLevelController.doubleFail()},"Yes! Add Me To Your Newsletter"),s.h("a",{href:"javascript:void(0)",onTouchStart:()=>i.StoreLevelController.clearFail()},"No, Go Back")),isOpen:this.props.isOpen,xAdjust:this.props.xAdjust,yAdjust:this.props.yAdjust})}}t.FailModal=o},929:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=n(400),r=n(362),i=n(515),o=n(43),a=n(855);n(718);class l extends s.Component{constructor(){super(),r.StoreLevelController.init((()=>this.state),this.setState.bind(this))}render(){return s.h("div",{class:"store-level"},s.h("header",{class:"store-header"},s.h("div",{class:"logo"},s.h("img",{src:"/assets/images/logo.png",width:"136",height:"80"})),s.h("div",{class:"cart"},s.h("span",{class:"cart-count"},this.state.cart),s.h("img",{src:"/assets/images/cart.svg"}),s.h("span",{class:"cart-label"},"Cart"))),s.h("div",{class:"widget-grid",onTouchStart:e=>r.StoreLevelController.click(-1,e)},this.state.widgets.map((e=>s.h(i.Widget,Object.assign({},e))))),s.h(o.FailModal,{isOpen:this.state.showFailModal,xAdjust:this.state.modalAdjustX,yAdjust:this.state.modalAdjustY}),s.h(a.ExperienceModal,{isOpen:this.state.showExperienceModal,xAdjust:this.state.modalAdjustX,yAdjust:this.state.modalAdjustY}),s.h(a.ExperienceThanksModal,{isOpen:this.state.showExperienceThanksModal,xAdjust:this.state.modalAdjustX,yAdjust:this.state.modalAdjustY}))}}t.StoreLevel=l},362:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=n(493),r=n(820);var i;!function(e){e[e.EMPTY=0]="EMPTY",e[e.LOADING=1]="LOADING",e[e.CONTENT=2]="CONTENT",e[e.OBJECTIVE=3]="OBJECTIVE",e[e.COMPLETE=4]="COMPLETE"}(i=t.WidgetStatus||(t.WidgetStatus={})),t.StoreLevelController=new class{init(e,t){this.getState=e,this.setState=t,s.GameTimer.onTick((()=>this.onTick()));let n={cart:0,clicks:0,hasShownExperienceModal:!1,isObjectiveVisible:!1,showExperienceModal:!1,showExperienceThanksModal:!1,showFailModal:!1,widgets:[]};for(var r=0;r<10;r++){let e={index:r,status:i.EMPTY};n.widgets.push(e)}this.setState({...n})}onTick(){let e=this.getState(),t=e.widgets.filter((e=>e.status===i.EMPTY));if(t.length){let e=0;return void t.forEach((t=>{e>3||(this.setLoading(t),this.updateWidgetState(t),e++)}))}let n=e.widgets.filter((e=>e.status!==i.LOADING));if(!n.length)return;let s=n[r.getRandomInteger(0,n.length)];s.status===i.OBJECTIVE&&this.setState({isObjectiveVisible:!1}),this.setLoading(s),this.updateWidgetState(s)}setLoading(e){e.status=i.LOADING,setTimeout((()=>{!this.getState().isObjectiveVisible&&e.index>=3?(this.setState({isObjectiveVisible:!0}),e.status=i.OBJECTIVE):e.status=i.CONTENT,this.updateWidgetState(e)}),s.GameTimer.getTickDelay())}click(e,t){t.stopPropagation();let n=this.getState(),o=n.widgets[e];n.clicks=n.clicks+1,o&&o.status===i.OBJECTIVE?(o.status=i.COMPLETE,this.updateWidgetState(o),n.cart=n.cart+1,n.hasShownExperienceModal||(n.hasShownExperienceModal=!0,n.showExperienceModal=!0,n.modalAdjustX=r.getRandomInteger(-40,40),n.modalAdjustY=r.getRandomInteger(-40,40)),n.isObjectiveVisible=!1,s.GameTimer.multiplier=n.clicks):(n.showFailModal=!0,n.modalAdjustX=r.getRandomInteger(-40,40),n.modalAdjustY=r.getRandomInteger(-40,40)),this.setState(n)}clearFail(){this.setState({showFailModal:!1})}doubleFail(){this.setState({showFailModal:!0,modalAdjustX:r.getRandomInteger(-40,40),modalAdjustY:r.getRandomInteger(-40,40)})}clearExperience(){this.setState({showExperienceModal:!1})}clickRatings(){this.setState({showExperienceModal:!1,showExperienceThanksModal:!0,modalAdjustX:r.getRandomInteger(-40,40),modalAdjustY:r.getRandomInteger(-40,40)})}clearRatingsThanks(){this.setState({showExperienceThanksModal:!1})}updateWidgetState(e){let t=this.getState();this.setState({widgets:t.widgets.map((t=>t.index===e.index?{...e}:t))})}}},515:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=n(400),r=n(820),i=n(362),o=[{width:58,content:s.h("img",{src:"/assets/images/top-deals.png",height:"400",width:"1200"})},{width:58,content:s.h("img",{src:"/assets/images/black-friday.png",height:"400",width:"1200"})},{width:58,content:s.h("img",{src:"/assets/images/macbook-air.png",height:"400",width:"1200"})},{width:39,content:s.h("img",{src:"/assets/images/smarttvs.png",height:"400",width:"800"})},{width:39,content:s.h("img",{src:"/assets/images/car-audio.png",height:"400",width:"800"})},{width:39,content:s.h("img",{src:"/assets/images/galaxy-watch.png",height:"400",width:"800"})},{width:39,content:s.h("img",{src:"/assets/images/kitchen.png",height:"400",width:"800"})},{width:39,content:s.h("img",{src:"/assets/images/samsung-galaxy.png",height:"400",width:"800"})},{width:39,content:s.h("img",{src:"/assets/images/video-games.png",height:"400",width:"800"})},{width:20,content:s.h("img",{src:"/assets/images/god-of-war.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/intex-pool.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/lenovo-yoga.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/pokemon.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/samsung-24.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/god-of-war.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/intex-pool.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/lenovo-yoga.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/pokemon.png",height:"600",width:"600"})},{width:20,content:s.h("img",{src:"/assets/images/samsung-24.png",height:"600",width:"600"})}];class a extends s.Component{render(){if(this.props.status===i.WidgetStatus.EMPTY)return this.renderWidget({width:0,content:null});if(this.props.status===i.WidgetStatus.LOADING)return this.renderWidget({width:20,height:"auto",grow:!0,content:s.h("div",{class:"loading"},s.h("i",{class:"spinner"}))});if(this.props.status===i.WidgetStatus.CONTENT)return this.renderWidget(this.getRandomContent());if(this.props.status===i.WidgetStatus.OBJECTIVE)return this.renderWidget({width:20,content:s.h("img",{src:"/assets/images/deal-of-the-day.png",height:"600",width:"600"})});if(this.props.status===i.WidgetStatus.COMPLETE)return this.renderWidget({width:20,content:s.h("img",{src:"/assets/images/deal-of-the-day-done.png",height:"600",width:"600"})});throw new Error(`Widget ${this.props.index} in unknown status ${this.props.status}.`)}renderWidget(e){return s.h("div",{class:"widget",style:{flex:`${e.grow?"1":"0"} 0 ${e.width}%`,height:e.height||"fit-content",display:this.props.status===i.WidgetStatus.EMPTY?"none":"flex"},onTouchStart:e=>i.StoreLevelController.click(this.props.index,e)},e.content)}getRandomContent(){return o[r.getRandomInteger(0,o.length)]}}t.Widget=a},771:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=n(565),r=n(400);n(737);class i extends r.Component{constructor(){super(),this.state={seconds:0,milliseconds:0}}componentDidMount(){this.timer=setInterval((()=>{if(!this.props.until.isValid)return;let e=this.props.until.diff(s.DateTime.now()).shiftTo("seconds","milliseconds");this.setState({seconds:Math.max(e.seconds,0),milliseconds:Math.max(e.milliseconds,0)})}),100)}componentWillUnmount(){clearInterval(this.timer)}render(){return r.h("div",{class:"timer"},r.h("div",{class:"label"},"Time"),r.h("div",{class:"value "+(this.state.seconds<=5&&this.state.milliseconds+this.state.seconds!==0?"danger":"")},this.state.seconds.toString().padStart(2,"0"),r.h("span",{class:"marker"},"."),this.state.milliseconds.toString().padEnd(3,"0")))}}t.Timer=i},851:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getAccuracy=function(e,t){return e&&t?`${(e/t).toFixed(2)}%`:"0.00%"}},820:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getRandomInteger=function(e,t){return Math.floor(Math.random()*(t-e))+e}},27:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isSafari=function(){return"function"==typeof window.GestureEvent}},340:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getLocalStorage=function(e){return JSON.parse(localStorage.getItem(e))},t.setLocalStorage=function(e,t){localStorage.setItem(e,JSON.stringify(t))}},565:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends Error{}class s extends n{constructor(e){super(`Invalid DateTime: ${e.toMessage()}`)}}class r extends n{constructor(e){super(`Invalid Interval: ${e.toMessage()}`)}}class i extends n{constructor(e){super(`Invalid Duration: ${e.toMessage()}`)}}class o extends n{}class a extends n{constructor(e){super(`Invalid unit ${e}`)}}class l extends n{}class u extends n{constructor(){super("Zone is an abstract class")}}const c="numeric",h="short",d="long",m={year:c,month:c,day:c},f={year:c,month:h,day:c},p={year:c,month:h,day:c,weekday:h},y={year:c,month:d,day:c},g={year:c,month:d,day:c,weekday:d},_={hour:c,minute:c},v={hour:c,minute:c,second:c},w={hour:c,minute:c,second:c,timeZoneName:h},S={hour:c,minute:c,second:c,timeZoneName:d},b={hour:c,minute:c,hourCycle:"h23"},T={hour:c,minute:c,second:c,hourCycle:"h23"},k={hour:c,minute:c,second:c,hourCycle:"h23",timeZoneName:h},O={hour:c,minute:c,second:c,hourCycle:"h23",timeZoneName:d},M={year:c,month:c,day:c,hour:c,minute:c},x={year:c,month:c,day:c,hour:c,minute:c,second:c},E={year:c,month:h,day:c,hour:c,minute:c},N={year:c,month:h,day:c,hour:c,minute:c,second:c},C={year:c,month:h,day:c,weekday:h,hour:c,minute:c},D={year:c,month:d,day:c,hour:c,minute:c,timeZoneName:h},L={year:c,month:d,day:c,hour:c,minute:c,second:c,timeZoneName:h},I={year:c,month:d,day:c,weekday:d,hour:c,minute:c,timeZoneName:d},V={year:c,month:d,day:c,weekday:d,hour:c,minute:c,second:c,timeZoneName:d};function j(e){return void 0===e}function F(e){return"number"==typeof e}function A(e){return"number"==typeof e&&e%1==0}function $(){try{return"undefined"!=typeof Intl&&!!Intl.RelativeTimeFormat}catch(e){return!1}}function Z(e,t,n){if(0!==e.length)return e.reduce(((e,s)=>{const r=[t(s),s];return e&&n(e[0],r[0])===e[0]?e:r}),null)[1]}function P(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function R(e,t,n){return A(e)&&e>=t&&e<=n}function W(e,t=2){let n;return n=e<0?"-"+(""+-e).padStart(t,"0"):(""+e).padStart(t,"0"),n}function z(e){return j(e)||null===e||""===e?void 0:parseInt(e,10)}function q(e){return j(e)||null===e||""===e?void 0:parseFloat(e)}function U(e){if(!j(e)&&null!==e&&""!==e){const t=1e3*parseFloat("0."+e);return Math.floor(t)}}function G(e,t,n=!1){const s=10**t;return(n?Math.trunc:Math.round)(e*s)/s}function Y(e){return e%4==0&&(e%100!=0||e%400==0)}function H(e){return Y(e)?366:365}function J(e,t){const n=(s=t-1)-12*Math.floor(s/12)+1;var s;return 2===n?Y(e+(t-n)/12)?29:28:[31,null,31,30,31,30,31,31,30,31,30,31][n-1]}function B(e){let t=Date.UTC(e.year,e.month-1,e.day,e.hour,e.minute,e.second,e.millisecond);return e.year<100&&e.year>=0&&(t=new Date(t),t.setUTCFullYear(t.getUTCFullYear()-1900)),+t}function X(e){const t=(e+Math.floor(e/4)-Math.floor(e/100)+Math.floor(e/400))%7,n=e-1,s=(n+Math.floor(n/4)-Math.floor(n/100)+Math.floor(n/400))%7;return 4===t||3===s?53:52}function Q(e){return e>99?e:e>60?1900+e:2e3+e}function K(e,t,n,s=null){const r=new Date(e),i={hourCycle:"h23",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"};s&&(i.timeZone=s);const o={timeZoneName:t,...i},a=new Intl.DateTimeFormat(n,o).formatToParts(r).find((e=>"timezonename"===e.type.toLowerCase()));return a?a.value:null}function ee(e,t){let n=parseInt(e,10);Number.isNaN(n)&&(n=0);const s=parseInt(t,10)||0;return 60*n+(n<0||Object.is(n,-0)?-s:s)}function te(e){const t=Number(e);if("boolean"==typeof e||""===e||Number.isNaN(t))throw new l(`Invalid unit value ${e}`);return t}function ne(e,t){const n={};for(const s in e)if(P(e,s)){const r=e[s];if(null==r)continue;n[t(s)]=te(r)}return n}function se(e,t){const n=Math.trunc(Math.abs(e/60)),s=Math.trunc(Math.abs(e%60)),r=e>=0?"+":"-";switch(t){case"short":return`${r}${W(n,2)}:${W(s,2)}`;case"narrow":return`${r}${n}${s>0?`:${s}`:""}`;case"techie":return`${r}${W(n,2)}${W(s,2)}`;default:throw new RangeError(`Value format ${t} is out of range for property format`)}}function re(e){return function(e,t){return["hour","minute","second","millisecond"].reduce(((t,n)=>(t[n]=e[n],t)),{})}(e)}const ie=/[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/,oe=["January","February","March","April","May","June","July","August","September","October","November","December"],ae=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],le=["J","F","M","A","M","J","J","A","S","O","N","D"];function ue(e){switch(e){case"narrow":return[...le];case"short":return[...ae];case"long":return[...oe];case"numeric":return["1","2","3","4","5","6","7","8","9","10","11","12"];case"2-digit":return["01","02","03","04","05","06","07","08","09","10","11","12"];default:return null}}const ce=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],he=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],de=["M","T","W","T","F","S","S"];function me(e){switch(e){case"narrow":return[...de];case"short":return[...he];case"long":return[...ce];case"numeric":return["1","2","3","4","5","6","7"];default:return null}}const fe=["AM","PM"],pe=["Before Christ","Anno Domini"],ye=["BC","AD"],ge=["B","A"];function _e(e){switch(e){case"narrow":return[...ge];case"short":return[...ye];case"long":return[...pe];default:return null}}function ve(e,t){let n="";for(const s of e)s.literal?n+=s.val:n+=t(s.val);return n}const we={D:m,DD:f,DDD:y,DDDD:g,t:_,tt:v,ttt:w,tttt:S,T:b,TT:T,TTT:k,TTTT:O,f:M,ff:E,fff:D,ffff:I,F:x,FF:N,FFF:L,FFFF:V};class Se{static create(e,t={}){return new Se(e,t)}static parseFormat(e){let t=null,n="",s=!1;const r=[];for(let i=0;i<e.length;i++){const o=e.charAt(i);"'"===o?(n.length>0&&r.push({literal:s,val:n}),t=null,n="",s=!s):s||o===t?n+=o:(n.length>0&&r.push({literal:!1,val:n}),n=o,t=o)}return n.length>0&&r.push({literal:s,val:n}),r}static macroTokenToFormatOpts(e){return we[e]}constructor(e,t){this.opts=t,this.loc=e,this.systemLoc=null}formatWithSystemDefault(e,t){return null===this.systemLoc&&(this.systemLoc=this.loc.redefaultToSystem()),this.systemLoc.dtFormatter(e,{...this.opts,...t}).format()}formatDateTime(e,t={}){return this.loc.dtFormatter(e,{...this.opts,...t}).format()}formatDateTimeParts(e,t={}){return this.loc.dtFormatter(e,{...this.opts,...t}).formatToParts()}resolvedOptions(e,t={}){return this.loc.dtFormatter(e,{...this.opts,...t}).resolvedOptions()}num(e,t=0){if(this.opts.forceSimple)return W(e,t);const n={...this.opts};return t>0&&(n.padTo=t),this.loc.numberFormatter(n).format(e)}formatDateTimeFromString(e,t){const n="en"===this.loc.listingMode(),s=this.loc.outputCalendar&&"gregory"!==this.loc.outputCalendar,r=(t,n)=>this.loc.extract(e,t,n),i=t=>e.isOffsetFixed&&0===e.offset&&t.allowZ?"Z":e.isValid?e.zone.formatOffset(e.ts,t.format):"",o=(t,s)=>n?function(e,t){return ue(t)[e.month-1]}(e,t):r(s?{month:t}:{month:t,day:"numeric"},"month"),a=(t,s)=>n?function(e,t){return me(t)[e.weekday-1]}(e,t):r(s?{weekday:t}:{weekday:t,month:"long",day:"numeric"},"weekday"),l=t=>{const n=Se.macroTokenToFormatOpts(t);return n?this.formatWithSystemDefault(e,n):t},u=t=>n?function(e,t){return _e(t)[e.year<0?0:1]}(e,t):r({era:t},"era");return ve(Se.parseFormat(t),(t=>{switch(t){case"S":return this.num(e.millisecond);case"u":case"SSS":return this.num(e.millisecond,3);case"s":return this.num(e.second);case"ss":return this.num(e.second,2);case"uu":return this.num(Math.floor(e.millisecond/10),2);case"uuu":return this.num(Math.floor(e.millisecond/100));case"m":return this.num(e.minute);case"mm":return this.num(e.minute,2);case"h":return this.num(e.hour%12==0?12:e.hour%12);case"hh":return this.num(e.hour%12==0?12:e.hour%12,2);case"H":return this.num(e.hour);case"HH":return this.num(e.hour,2);case"Z":return i({format:"narrow",allowZ:this.opts.allowZ});case"ZZ":return i({format:"short",allowZ:this.opts.allowZ});case"ZZZ":return i({format:"techie",allowZ:this.opts.allowZ});case"ZZZZ":return e.zone.offsetName(e.ts,{format:"short",locale:this.loc.locale});case"ZZZZZ":return e.zone.offsetName(e.ts,{format:"long",locale:this.loc.locale});case"z":return e.zoneName;case"a":return n?function(e){return fe[e.hour<12?0:1]}(e):r({hour:"numeric",hourCycle:"h12"},"dayperiod");case"d":return s?r({day:"numeric"},"day"):this.num(e.day);case"dd":return s?r({day:"2-digit"},"day"):this.num(e.day,2);case"c":case"E":return this.num(e.weekday);case"ccc":return a("short",!0);case"cccc":return a("long",!0);case"ccccc":return a("narrow",!0);case"EEE":return a("short",!1);case"EEEE":return a("long",!1);case"EEEEE":return a("narrow",!1);case"L":return s?r({month:"numeric",day:"numeric"},"month"):this.num(e.month);case"LL":return s?r({month:"2-digit",day:"numeric"},"month"):this.num(e.month,2);case"LLL":return o("short",!0);case"LLLL":return o("long",!0);case"LLLLL":return o("narrow",!0);case"M":return s?r({month:"numeric"},"month"):this.num(e.month);case"MM":return s?r({month:"2-digit"},"month"):this.num(e.month,2);case"MMM":return o("short",!1);case"MMMM":return o("long",!1);case"MMMMM":return o("narrow",!1);case"y":return s?r({year:"numeric"},"year"):this.num(e.year);case"yy":return s?r({year:"2-digit"},"year"):this.num(e.year.toString().slice(-2),2);case"yyyy":return s?r({year:"numeric"},"year"):this.num(e.year,4);case"yyyyyy":return s?r({year:"numeric"},"year"):this.num(e.year,6);case"G":return u("short");case"GG":return u("long");case"GGGGG":return u("narrow");case"kk":return this.num(e.weekYear.toString().slice(-2),2);case"kkkk":return this.num(e.weekYear,4);case"W":return this.num(e.weekNumber);case"WW":return this.num(e.weekNumber,2);case"o":return this.num(e.ordinal);case"ooo":return this.num(e.ordinal,3);case"q":return this.num(e.quarter);case"qq":return this.num(e.quarter,2);case"X":return this.num(Math.floor(e.ts/1e3));case"x":return this.num(e.ts);default:return l(t)}}))}formatDurationFromString(e,t){const n=e=>{switch(e[0]){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":return"hour";case"d":return"day";case"w":return"week";case"M":return"month";case"y":return"year";default:return null}},s=Se.parseFormat(t),r=s.reduce(((e,{literal:t,val:n})=>t?e:e.concat(n)),[]);return ve(s,(e=>t=>{const s=n(t);return s?this.num(e.get(s),t.length):t})(e.shiftTo(...r.map(n).filter((e=>e)))))}}class be{constructor(e,t){this.reason=e,this.explanation=t}toMessage(){return this.explanation?`${this.reason}: ${this.explanation}`:this.reason}}class Te{get type(){throw new u}get name(){throw new u}get ianaName(){return this.name}get isUniversal(){throw new u}offsetName(e,t){throw new u}formatOffset(e,t){throw new u}offset(e){throw new u}equals(e){throw new u}get isValid(){throw new u}}let ke=null;class Oe extends Te{static get instance(){return null===ke&&(ke=new Oe),ke}get type(){return"system"}get name(){return(new Intl.DateTimeFormat).resolvedOptions().timeZone}get isUniversal(){return!1}offsetName(e,{format:t,locale:n}){return K(e,t,n)}formatOffset(e,t){return se(this.offset(e),t)}offset(e){return-new Date(e).getTimezoneOffset()}equals(e){return"system"===e.type}get isValid(){return!0}}let Me={};const xe={year:0,month:1,day:2,era:3,hour:4,minute:5,second:6};let Ee={};class Ne extends Te{static create(e){return Ee[e]||(Ee[e]=new Ne(e)),Ee[e]}static resetCache(){Ee={},Me={}}static isValidSpecifier(e){return this.isValidZone(e)}static isValidZone(e){if(!e)return!1;try{return new Intl.DateTimeFormat("en-US",{timeZone:e}).format(),!0}catch(e){return!1}}constructor(e){super(),this.zoneName=e,this.valid=Ne.isValidZone(e)}get type(){return"iana"}get name(){return this.zoneName}get isUniversal(){return!1}offsetName(e,{format:t,locale:n}){return K(e,t,n,this.name)}formatOffset(e,t){return se(this.offset(e),t)}offset(e){const t=new Date(e);if(isNaN(t))return NaN;const n=(s=this.name,Me[s]||(Me[s]=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:s,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",era:"short"})),Me[s]);var s;let[r,i,o,a,l,u,c]=n.formatToParts?function(e,t){const n=e.formatToParts(t),s=[];for(let e=0;e<n.length;e++){const{type:t,value:r}=n[e],i=xe[t];"era"===t?s[i]=r:j(i)||(s[i]=parseInt(r,10))}return s}(n,t):function(e,t){const n=e.format(t).replace(/\u200E/g,""),s=/(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(n),[,r,i,o,a,l,u,c]=s;return[o,r,i,a,l,u,c]}(n,t);"BC"===a&&(r=1-Math.abs(r));let h=+t;const d=h%1e3;return h-=d>=0?d:1e3+d,(B({year:r,month:i,day:o,hour:24===l?0:l,minute:u,second:c,millisecond:0})-h)/6e4}equals(e){return"iana"===e.type&&e.name===this.name}get isValid(){return this.valid}}let Ce=null;class De extends Te{static get utcInstance(){return null===Ce&&(Ce=new De(0)),Ce}static instance(e){return 0===e?De.utcInstance:new De(e)}static parseSpecifier(e){if(e){const t=e.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);if(t)return new De(ee(t[1],t[2]))}return null}constructor(e){super(),this.fixed=e}get type(){return"fixed"}get name(){return 0===this.fixed?"UTC":`UTC${se(this.fixed,"narrow")}`}get ianaName(){return 0===this.fixed?"Etc/UTC":`Etc/GMT${se(-this.fixed,"narrow")}`}offsetName(){return this.name}formatOffset(e,t){return se(this.fixed,t)}get isUniversal(){return!0}offset(){return this.fixed}equals(e){return"fixed"===e.type&&e.fixed===this.fixed}get isValid(){return!0}}class Le extends Te{constructor(e){super(),this.zoneName=e}get type(){return"invalid"}get name(){return this.zoneName}get isUniversal(){return!1}offsetName(){return null}formatOffset(){return""}offset(){return NaN}equals(){return!1}get isValid(){return!1}}function Ie(e,t){if(j(e)||null===e)return t;if(e instanceof Te)return e;if("string"==typeof e){const n=e.toLowerCase();return"default"===n?t:"local"===n||"system"===n?Oe.instance:"utc"===n||"gmt"===n?De.utcInstance:De.parseSpecifier(n)||Ne.create(e)}return F(e)?De.instance(e):"object"==typeof e&&e.offset&&"number"==typeof e.offset?e:new Le(e)}let Ve,je=()=>Date.now(),Fe="system",Ae=null,$e=null,Ze=null;class Pe{static get now(){return je}static set now(e){je=e}static set defaultZone(e){Fe=e}static get defaultZone(){return Ie(Fe,Oe.instance)}static get defaultLocale(){return Ae}static set defaultLocale(e){Ae=e}static get defaultNumberingSystem(){return $e}static set defaultNumberingSystem(e){$e=e}static get defaultOutputCalendar(){return Ze}static set defaultOutputCalendar(e){Ze=e}static get throwOnInvalid(){return Ve}static set throwOnInvalid(e){Ve=e}static resetCaches(){Xe.resetCache(),Ne.resetCache()}}let Re={},We={};function ze(e,t={}){const n=JSON.stringify([e,t]);let s=We[n];return s||(s=new Intl.DateTimeFormat(e,t),We[n]=s),s}let qe={},Ue={},Ge=null;function Ye(e,t,n,s,r){const i=e.listingMode(n);return"error"===i?null:"en"===i?s(t):r(t)}class He{constructor(e,t,n){this.padTo=n.padTo||0,this.floor=n.floor||!1;const{padTo:s,floor:r,...i}=n;if(!t||Object.keys(i).length>0){const t={useGrouping:!1,...n};n.padTo>0&&(t.minimumIntegerDigits=n.padTo),this.inf=function(e,t={}){const n=JSON.stringify([e,t]);let s=qe[n];return s||(s=new Intl.NumberFormat(e,t),qe[n]=s),s}(e,t)}}format(e){if(this.inf){const t=this.floor?Math.floor(e):e;return this.inf.format(t)}return W(this.floor?Math.floor(e):G(e,3),this.padTo)}}class Je{constructor(e,t,n){let s;if(this.opts=n,e.zone.isUniversal){const t=e.offset/60*-1,r=t>=0?`Etc/GMT+${t}`:`Etc/GMT${t}`;0!==e.offset&&Ne.create(r).valid?(s=r,this.dt=e):(s="UTC",n.timeZoneName?this.dt=e:this.dt=0===e.offset?e:Hn.fromMillis(e.ts+60*e.offset*1e3))}else"system"===e.zone.type?this.dt=e:(this.dt=e,s=e.zone.name);const r={...this.opts};s&&(r.timeZone=s),this.dtf=ze(t,r)}format(){return this.dtf.format(this.dt.toJSDate())}formatToParts(){return this.dtf.formatToParts(this.dt.toJSDate())}resolvedOptions(){return this.dtf.resolvedOptions()}}class Be{constructor(e,t,n){this.opts={style:"long",...n},!t&&$()&&(this.rtf=function(e,t={}){const{base:n,...s}=t,r=JSON.stringify([e,s]);let i=Ue[r];return i||(i=new Intl.RelativeTimeFormat(e,t),Ue[r]=i),i}(e,n))}format(e,t){return this.rtf?this.rtf.format(e,t):function(e,t,n="always",s=!1){const r={years:["year","yr."],quarters:["quarter","qtr."],months:["month","mo."],weeks:["week","wk."],days:["day","day","days"],hours:["hour","hr."],minutes:["minute","min."],seconds:["second","sec."]},i=-1===["hours","minutes","seconds"].indexOf(e);if("auto"===n&&i){const n="days"===e;switch(t){case 1:return n?"tomorrow":`next ${r[e][0]}`;case-1:return n?"yesterday":`last ${r[e][0]}`;case 0:return n?"today":`this ${r[e][0]}`}}const o=Object.is(t,-0)||t<0,a=Math.abs(t),l=1===a,u=r[e],c=s?l?u[1]:u[2]||u[1]:l?r[e][0]:e;return o?`${a} ${c} ago`:`in ${a} ${c}`}(t,e,this.opts.numeric,"long"!==this.opts.style)}formatToParts(e,t){return this.rtf?this.rtf.formatToParts(e,t):[]}}class Xe{static fromOpts(e){return Xe.create(e.locale,e.numberingSystem,e.outputCalendar,e.defaultToEN)}static create(e,t,n,s=!1){const r=e||Pe.defaultLocale,i=r||(s?"en-US":Ge||(Ge=(new Intl.DateTimeFormat).resolvedOptions().locale,Ge)),o=t||Pe.defaultNumberingSystem,a=n||Pe.defaultOutputCalendar;return new Xe(i,o,a,r)}static resetCache(){Ge=null,We={},qe={},Ue={}}static fromObject({locale:e,numberingSystem:t,outputCalendar:n}={}){return Xe.create(e,t,n)}constructor(e,t,n,s){const[r,i,o]=function(e){const t=e.indexOf("-u-");if(-1===t)return[e];{let n;const s=e.substring(0,t);try{n=ze(e).resolvedOptions()}catch(e){n=ze(s).resolvedOptions()}const{numberingSystem:r,calendar:i}=n;return[s,r,i]}}(e);this.locale=r,this.numberingSystem=t||i||null,this.outputCalendar=n||o||null,this.intl=function(e,t,n){return n||t?(e+="-u",n&&(e+=`-ca-${n}`),t&&(e+=`-nu-${t}`),e):e}(this.locale,this.numberingSystem,this.outputCalendar),this.weekdaysCache={format:{},standalone:{}},this.monthsCache={format:{},standalone:{}},this.meridiemCache=null,this.eraCache={},this.specifiedLocale=s,this.fastNumbersCached=null}get fastNumbers(){var e;return null==this.fastNumbersCached&&(this.fastNumbersCached=(!(e=this).numberingSystem||"latn"===e.numberingSystem)&&("latn"===e.numberingSystem||!e.locale||e.locale.startsWith("en")||"latn"===new Intl.DateTimeFormat(e.intl).resolvedOptions().numberingSystem)),this.fastNumbersCached}listingMode(){const e=this.isEnglish(),t=!(null!==this.numberingSystem&&"latn"!==this.numberingSystem||null!==this.outputCalendar&&"gregory"!==this.outputCalendar);return e&&t?"en":"intl"}clone(e){return e&&0!==Object.getOwnPropertyNames(e).length?Xe.create(e.locale||this.specifiedLocale,e.numberingSystem||this.numberingSystem,e.outputCalendar||this.outputCalendar,e.defaultToEN||!1):this}redefaultToEN(e={}){return this.clone({...e,defaultToEN:!0})}redefaultToSystem(e={}){return this.clone({...e,defaultToEN:!1})}months(e,t=!1,n=!0){return Ye(this,e,n,ue,(()=>{const n=t?{month:e,day:"numeric"}:{month:e},s=t?"format":"standalone";return this.monthsCache[s][e]||(this.monthsCache[s][e]=function(e){const t=[];for(let n=1;n<=12;n++){const s=Hn.utc(2016,n,1);t.push(e(s))}return t}((e=>this.extract(e,n,"month")))),this.monthsCache[s][e]}))}weekdays(e,t=!1,n=!0){return Ye(this,e,n,me,(()=>{const n=t?{weekday:e,year:"numeric",month:"long",day:"numeric"}:{weekday:e},s=t?"format":"standalone";return this.weekdaysCache[s][e]||(this.weekdaysCache[s][e]=function(e){const t=[];for(let n=1;n<=7;n++){const s=Hn.utc(2016,11,13+n);t.push(e(s))}return t}((e=>this.extract(e,n,"weekday")))),this.weekdaysCache[s][e]}))}meridiems(e=!0){return Ye(this,void 0,e,(()=>fe),(()=>{if(!this.meridiemCache){const e={hour:"numeric",hourCycle:"h12"};this.meridiemCache=[Hn.utc(2016,11,13,9),Hn.utc(2016,11,13,19)].map((t=>this.extract(t,e,"dayperiod")))}return this.meridiemCache}))}eras(e,t=!0){return Ye(this,e,t,_e,(()=>{const t={era:e};return this.eraCache[e]||(this.eraCache[e]=[Hn.utc(-40,1,1),Hn.utc(2017,1,1)].map((e=>this.extract(e,t,"era")))),this.eraCache[e]}))}extract(e,t,n){const s=this.dtFormatter(e,t).formatToParts().find((e=>e.type.toLowerCase()===n));return s?s.value:null}numberFormatter(e={}){return new He(this.intl,e.forceSimple||this.fastNumbers,e)}dtFormatter(e,t={}){return new Je(e,this.intl,t)}relFormatter(e={}){return new Be(this.intl,this.isEnglish(),e)}listFormatter(e={}){return function(e,t={}){const n=JSON.stringify([e,t]);let s=Re[n];return s||(s=new Intl.ListFormat(e,t),Re[n]=s),s}(this.intl,e)}isEnglish(){return"en"===this.locale||"en-us"===this.locale.toLowerCase()||new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")}equals(e){return this.locale===e.locale&&this.numberingSystem===e.numberingSystem&&this.outputCalendar===e.outputCalendar}}function Qe(...e){const t=e.reduce(((e,t)=>e+t.source),"");return RegExp(`^${t}$`)}function Ke(...e){return t=>e.reduce((([e,n,s],r)=>{const[i,o,a]=r(t,s);return[{...e,...i},o||n,a]}),[{},null,1]).slice(0,2)}function et(e,...t){if(null==e)return[null,null];for(const[n,s]of t){const t=n.exec(e);if(t)return s(t)}return[null,null]}function tt(...e){return(t,n)=>{const s={};let r;for(r=0;r<e.length;r++)s[e[r]]=z(t[n+r]);return[s,null,n+r]}}const nt=/(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,st=/(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,rt=RegExp(`${st.source}(?:${nt.source}?(?:\\[(${ie.source})\\])?)?`),it=RegExp(`(?:T${rt.source})?`),ot=tt("weekYear","weekNumber","weekDay"),at=tt("year","ordinal"),lt=RegExp(`${st.source} ?(?:${nt.source}|(${ie.source}))?`),ut=RegExp(`(?: ${lt.source})?`);function ct(e,t,n){const s=e[t];return j(s)?n:z(s)}function ht(e,t){return[{hours:ct(e,t,0),minutes:ct(e,t+1,0),seconds:ct(e,t+2,0),milliseconds:U(e[t+3])},null,t+4]}function dt(e,t){const n=!e[t]&&!e[t+1],s=ee(e[t+1],e[t+2]);return[{},n?null:De.instance(s),t+3]}function mt(e,t){return[{},e[t]?Ne.create(e[t]):null,t+1]}const ft=RegExp(`^T?${st.source}$`),pt=/^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;function yt(e){const[t,n,s,r,i,o,a,l,u]=e,c="-"===t[0],h=l&&"-"===l[0],d=(e,t=!1)=>void 0!==e&&(t||e&&c)?-e:e;return[{years:d(q(n)),months:d(q(s)),weeks:d(q(r)),days:d(q(i)),hours:d(q(o)),minutes:d(q(a)),seconds:d(q(l),"-0"===l),milliseconds:d(U(u),h)}]}const gt={GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function _t(e,t,n,s,r,i,o){const a={year:2===t.length?Q(z(t)):z(t),month:ae.indexOf(n)+1,day:z(s),hour:z(r),minute:z(i)};return o&&(a.second=z(o)),e&&(a.weekday=e.length>3?ce.indexOf(e)+1:he.indexOf(e)+1),a}const vt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;function wt(e){const[,t,n,s,r,i,o,a,l,u,c,h]=e,d=_t(t,r,s,n,i,o,a);let m;return m=l?gt[l]:u?0:ee(c,h),[d,new De(m)]}const St=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,bt=/^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,Tt=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;function kt(e){const[,t,n,s,r,i,o,a]=e;return[_t(t,r,s,n,i,o,a),De.utcInstance]}function Ot(e){const[,t,n,s,r,i,o,a]=e;return[_t(t,a,n,s,r,i,o),De.utcInstance]}const Mt=Qe(/([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,it),xt=Qe(/(\d{4})-?W(\d\d)(?:-?(\d))?/,it),Et=Qe(/(\d{4})-?(\d{3})/,it),Nt=Qe(rt),Ct=Ke((function(e,t){return[{year:ct(e,t),month:ct(e,t+1,1),day:ct(e,t+2,1)},null,t+3]}),ht,dt,mt),Dt=Ke(ot,ht,dt,mt),Lt=Ke(at,ht,dt,mt),It=Ke(ht,dt,mt),Vt=Ke(ht),jt=Qe(/(\d{4})-(\d\d)-(\d\d)/,ut),Ft=Qe(lt),At=Ke(ht,dt,mt),$t={weeks:{days:7,hours:168,minutes:10080,seconds:604800,milliseconds:6048e5},days:{hours:24,minutes:1440,seconds:86400,milliseconds:864e5},hours:{minutes:60,seconds:3600,milliseconds:36e5},minutes:{seconds:60,milliseconds:6e4},seconds:{milliseconds:1e3}},Zt={years:{quarters:4,months:12,weeks:52,days:365,hours:8760,minutes:525600,seconds:31536e3,milliseconds:31536e6},quarters:{months:3,weeks:13,days:91,hours:2184,minutes:131040,seconds:7862400,milliseconds:78624e5},months:{weeks:4,days:30,hours:720,minutes:43200,seconds:2592e3,milliseconds:2592e6},...$t},Pt={years:{quarters:4,months:12,weeks:52.1775,days:365.2425,hours:8765.82,minutes:525949.2,seconds:525949.2*60,milliseconds:525949.2*60*1e3},quarters:{months:3,weeks:13.044375,days:91.310625,hours:2191.455,minutes:131487.3,seconds:525949.2*60/4,milliseconds:7889237999.999999},months:{weeks:4.3481250000000005,days:30.436875,hours:730.485,minutes:43829.1,seconds:2629746,milliseconds:2629746e3},...$t},Rt=["years","quarters","months","weeks","days","hours","minutes","seconds","milliseconds"],Wt=Rt.slice(0).reverse();function zt(e,t,n=!1){const s={values:n?t.values:{...e.values,...t.values||{}},loc:e.loc.clone(t.loc),conversionAccuracy:t.conversionAccuracy||e.conversionAccuracy};return new Ut(s)}function qt(e,t,n,s,r){const i=e[r][n],o=t[n]/i,a=Math.sign(o)!==Math.sign(s[r])&&0!==s[r]&&Math.abs(o)<=1?function(e){return e<0?Math.floor(e):Math.ceil(e)}(o):Math.trunc(o);s[r]+=a,t[n]-=a*i}class Ut{constructor(e){const t="longterm"===e.conversionAccuracy||!1;this.values=e.values,this.loc=e.loc||Xe.create(),this.conversionAccuracy=t?"longterm":"casual",this.invalid=e.invalid||null,this.matrix=t?Pt:Zt,this.isLuxonDuration=!0}static fromMillis(e,t){return Ut.fromObject({milliseconds:e},t)}static fromObject(e,t={}){if(null==e||"object"!=typeof e)throw new l("Duration.fromObject: argument expected to be an object, got "+(null===e?"null":typeof e));return new Ut({values:ne(e,Ut.normalizeUnit),loc:Xe.fromObject(t),conversionAccuracy:t.conversionAccuracy})}static fromDurationLike(e){if(F(e))return Ut.fromMillis(e);if(Ut.isDuration(e))return e;if("object"==typeof e)return Ut.fromObject(e);throw new l(`Unknown duration argument ${e} of type ${typeof e}`)}static fromISO(e,t){const[n]=function(e){return et(e,[pt,yt])}(e);return n?Ut.fromObject(n,t):Ut.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static fromISOTime(e,t){const[n]=function(e){return et(e,[ft,Vt])}(e);return n?Ut.fromObject(n,t):Ut.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static invalid(e,t=null){if(!e)throw new l("need to specify a reason the Duration is invalid");const n=e instanceof be?e:new be(e,t);if(Pe.throwOnInvalid)throw new i(n);return new Ut({invalid:n})}static normalizeUnit(e){const t={year:"years",years:"years",quarter:"quarters",quarters:"quarters",month:"months",months:"months",week:"weeks",weeks:"weeks",day:"days",days:"days",hour:"hours",hours:"hours",minute:"minutes",minutes:"minutes",second:"seconds",seconds:"seconds",millisecond:"milliseconds",milliseconds:"milliseconds"}[e?e.toLowerCase():e];if(!t)throw new a(e);return t}static isDuration(e){return e&&e.isLuxonDuration||!1}get locale(){return this.isValid?this.loc.locale:null}get numberingSystem(){return this.isValid?this.loc.numberingSystem:null}toFormat(e,t={}){const n={...t,floor:!1!==t.round&&!1!==t.floor};return this.isValid?Se.create(this.loc,n).formatDurationFromString(this,e):"Invalid Duration"}toHuman(e={}){const t=Rt.map((t=>{const n=this.values[t];return j(n)?null:this.loc.numberFormatter({style:"unit",unitDisplay:"long",...e,unit:t.slice(0,-1)}).format(n)})).filter((e=>e));return this.loc.listFormatter({type:"conjunction",style:e.listStyle||"narrow",...e}).format(t)}toObject(){return this.isValid?{...this.values}:{}}toISO(){if(!this.isValid)return null;let e="P";return 0!==this.years&&(e+=this.years+"Y"),0===this.months&&0===this.quarters||(e+=this.months+3*this.quarters+"M"),0!==this.weeks&&(e+=this.weeks+"W"),0!==this.days&&(e+=this.days+"D"),0===this.hours&&0===this.minutes&&0===this.seconds&&0===this.milliseconds||(e+="T"),0!==this.hours&&(e+=this.hours+"H"),0!==this.minutes&&(e+=this.minutes+"M"),0===this.seconds&&0===this.milliseconds||(e+=G(this.seconds+this.milliseconds/1e3,3)+"S"),"P"===e&&(e+="T0S"),e}toISOTime(e={}){if(!this.isValid)return null;const t=this.toMillis();if(t<0||t>=864e5)return null;e={suppressMilliseconds:!1,suppressSeconds:!1,includePrefix:!1,format:"extended",...e};const n=this.shiftTo("hours","minutes","seconds","milliseconds");let s="basic"===e.format?"hhmm":"hh:mm";e.suppressSeconds&&0===n.seconds&&0===n.milliseconds||(s+="basic"===e.format?"ss":":ss",e.suppressMilliseconds&&0===n.milliseconds||(s+=".SSS"));let r=n.toFormat(s);return e.includePrefix&&(r="T"+r),r}toJSON(){return this.toISO()}toString(){return this.toISO()}toMillis(){return this.as("milliseconds")}valueOf(){return this.toMillis()}plus(e){if(!this.isValid)return this;const t=Ut.fromDurationLike(e),n={};for(const e of Rt)(P(t.values,e)||P(this.values,e))&&(n[e]=t.get(e)+this.get(e));return zt(this,{values:n},!0)}minus(e){if(!this.isValid)return this;const t=Ut.fromDurationLike(e);return this.plus(t.negate())}mapUnits(e){if(!this.isValid)return this;const t={};for(const n of Object.keys(this.values))t[n]=te(e(this.values[n],n));return zt(this,{values:t},!0)}get(e){return this[Ut.normalizeUnit(e)]}set(e){return this.isValid?zt(this,{values:{...this.values,...ne(e,Ut.normalizeUnit)}}):this}reconfigure({locale:e,numberingSystem:t,conversionAccuracy:n}={}){const s={loc:this.loc.clone({locale:e,numberingSystem:t})};return n&&(s.conversionAccuracy=n),zt(this,s)}as(e){return this.isValid?this.shiftTo(e).get(e):NaN}normalize(){if(!this.isValid)return this;const e=this.toObject();return function(e,t){Wt.reduce(((n,s)=>j(t[s])?n:(n&&qt(e,t,n,t,s),s)),null)}(this.matrix,e),zt(this,{values:e},!0)}shiftTo(...e){if(!this.isValid)return this;if(0===e.length)return this;e=e.map((e=>Ut.normalizeUnit(e)));const t={},n={},s=this.toObject();let r;for(const i of Rt)if(e.indexOf(i)>=0){r=i;let e=0;for(const t in n)e+=this.matrix[t][i]*n[t],n[t]=0;F(s[i])&&(e+=s[i]);const o=Math.trunc(e);t[i]=o,n[i]=(1e3*e-1e3*o)/1e3;for(const e in s)Rt.indexOf(e)>Rt.indexOf(i)&&qt(this.matrix,s,e,t,i)}else F(s[i])&&(n[i]=s[i]);for(const e in n)0!==n[e]&&(t[r]+=e===r?n[e]:n[e]/this.matrix[r][e]);return zt(this,{values:t},!0).normalize()}negate(){if(!this.isValid)return this;const e={};for(const t of Object.keys(this.values))e[t]=0===this.values[t]?0:-this.values[t];return zt(this,{values:e},!0)}get years(){return this.isValid?this.values.years||0:NaN}get quarters(){return this.isValid?this.values.quarters||0:NaN}get months(){return this.isValid?this.values.months||0:NaN}get weeks(){return this.isValid?this.values.weeks||0:NaN}get days(){return this.isValid?this.values.days||0:NaN}get hours(){return this.isValid?this.values.hours||0:NaN}get minutes(){return this.isValid?this.values.minutes||0:NaN}get seconds(){return this.isValid?this.values.seconds||0:NaN}get milliseconds(){return this.isValid?this.values.milliseconds||0:NaN}get isValid(){return null===this.invalid}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}equals(e){if(!this.isValid||!e.isValid)return!1;if(!this.loc.equals(e.loc))return!1;for(const s of Rt)if(t=this.values[s],n=e.values[s],!(void 0===t||0===t?void 0===n||0===n:t===n))return!1;var t,n;return!0}}const Gt="Invalid Interval";class Yt{constructor(e){this.s=e.start,this.e=e.end,this.invalid=e.invalid||null,this.isLuxonInterval=!0}static invalid(e,t=null){if(!e)throw new l("need to specify a reason the Interval is invalid");const n=e instanceof be?e:new be(e,t);if(Pe.throwOnInvalid)throw new r(n);return new Yt({invalid:n})}static fromDateTimes(e,t){const n=Jn(e),s=Jn(t),r=function(e,t){return e&&e.isValid?t&&t.isValid?t<e?Yt.invalid("end before start",`The end of an interval must be after its start, but you had start=${e.toISO()} and end=${t.toISO()}`):null:Yt.invalid("missing or invalid end"):Yt.invalid("missing or invalid start")}(n,s);return null==r?new Yt({start:n,end:s}):r}static after(e,t){const n=Ut.fromDurationLike(t),s=Jn(e);return Yt.fromDateTimes(s,s.plus(n))}static before(e,t){const n=Ut.fromDurationLike(t),s=Jn(e);return Yt.fromDateTimes(s.minus(n),s)}static fromISO(e,t){const[n,s]=(e||"").split("/",2);if(n&&s){let e,r,i,o;try{e=Hn.fromISO(n,t),r=e.isValid}catch(s){r=!1}try{i=Hn.fromISO(s,t),o=i.isValid}catch(s){o=!1}if(r&&o)return Yt.fromDateTimes(e,i);if(r){const n=Ut.fromISO(s,t);if(n.isValid)return Yt.after(e,n)}else if(o){const e=Ut.fromISO(n,t);if(e.isValid)return Yt.before(i,e)}}return Yt.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static isInterval(e){return e&&e.isLuxonInterval||!1}get start(){return this.isValid?this.s:null}get end(){return this.isValid?this.e:null}get isValid(){return null===this.invalidReason}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}length(e="milliseconds"){return this.isValid?this.toDuration(e).get(e):NaN}count(e="milliseconds"){if(!this.isValid)return NaN;const t=this.start.startOf(e),n=this.end.startOf(e);return Math.floor(n.diff(t,e).get(e))+1}hasSame(e){return!!this.isValid&&(this.isEmpty()||this.e.minus(1).hasSame(this.s,e))}isEmpty(){return this.s.valueOf()===this.e.valueOf()}isAfter(e){return!!this.isValid&&this.s>e}isBefore(e){return!!this.isValid&&this.e<=e}contains(e){return!!this.isValid&&this.s<=e&&this.e>e}set({start:e,end:t}={}){return this.isValid?Yt.fromDateTimes(e||this.s,t||this.e):this}splitAt(...e){if(!this.isValid)return[];const t=e.map(Jn).filter((e=>this.contains(e))).sort(),n=[];let{s}=this,r=0;for(;s<this.e;){const e=t[r]||this.e,i=+e>+this.e?this.e:e;n.push(Yt.fromDateTimes(s,i)),s=i,r+=1}return n}splitBy(e){const t=Ut.fromDurationLike(e);if(!this.isValid||!t.isValid||0===t.as("milliseconds"))return[];let n,{s}=this,r=1;const i=[];for(;s<this.e;){const e=this.start.plus(t.mapUnits((e=>e*r)));n=+e>+this.e?this.e:e,i.push(Yt.fromDateTimes(s,n)),s=n,r+=1}return i}divideEqually(e){return this.isValid?this.splitBy(this.length()/e).slice(0,e):[]}overlaps(e){return this.e>e.s&&this.s<e.e}abutsStart(e){return!!this.isValid&&+this.e==+e.s}abutsEnd(e){return!!this.isValid&&+e.e==+this.s}engulfs(e){return!!this.isValid&&this.s<=e.s&&this.e>=e.e}equals(e){return!(!this.isValid||!e.isValid)&&this.s.equals(e.s)&&this.e.equals(e.e)}intersection(e){if(!this.isValid)return this;const t=this.s>e.s?this.s:e.s,n=this.e<e.e?this.e:e.e;return t>=n?null:Yt.fromDateTimes(t,n)}union(e){if(!this.isValid)return this;const t=this.s<e.s?this.s:e.s,n=this.e>e.e?this.e:e.e;return Yt.fromDateTimes(t,n)}static merge(e){const[t,n]=e.sort(((e,t)=>e.s-t.s)).reduce((([e,t],n)=>t?t.overlaps(n)||t.abutsStart(n)?[e,t.union(n)]:[e.concat([t]),n]:[e,n]),[[],null]);return n&&t.push(n),t}static xor(e){let t=null,n=0;const s=[],r=e.map((e=>[{time:e.s,type:"s"},{time:e.e,type:"e"}])),i=Array.prototype.concat(...r).sort(((e,t)=>e.time-t.time));for(const e of i)n+="s"===e.type?1:-1,1===n?t=e.time:(t&&+t!=+e.time&&s.push(Yt.fromDateTimes(t,e.time)),t=null);return Yt.merge(s)}difference(...e){return Yt.xor([this].concat(e)).map((e=>this.intersection(e))).filter((e=>e&&!e.isEmpty()))}toString(){return this.isValid?`[${this.s.toISO()} – ${this.e.toISO()})`:Gt}toISO(e){return this.isValid?`${this.s.toISO(e)}/${this.e.toISO(e)}`:Gt}toISODate(){return this.isValid?`${this.s.toISODate()}/${this.e.toISODate()}`:Gt}toISOTime(e){return this.isValid?`${this.s.toISOTime(e)}/${this.e.toISOTime(e)}`:Gt}toFormat(e,{separator:t=" – "}={}){return this.isValid?`${this.s.toFormat(e)}${t}${this.e.toFormat(e)}`:Gt}toDuration(e,t){return this.isValid?this.e.diff(this.s,e,t):Ut.invalid(this.invalidReason)}mapEndpoints(e){return Yt.fromDateTimes(e(this.s),e(this.e))}}class Ht{static hasDST(e=Pe.defaultZone){const t=Hn.now().setZone(e).set({month:12});return!e.isUniversal&&t.offset!==t.set({month:6}).offset}static isValidIANAZone(e){return Ne.isValidZone(e)}static normalizeZone(e){return Ie(e,Pe.defaultZone)}static months(e="long",{locale:t=null,numberingSystem:n=null,locObj:s=null,outputCalendar:r="gregory"}={}){return(s||Xe.create(t,n,r)).months(e)}static monthsFormat(e="long",{locale:t=null,numberingSystem:n=null,locObj:s=null,outputCalendar:r="gregory"}={}){return(s||Xe.create(t,n,r)).months(e,!0)}static weekdays(e="long",{locale:t=null,numberingSystem:n=null,locObj:s=null}={}){return(s||Xe.create(t,n,null)).weekdays(e)}static weekdaysFormat(e="long",{locale:t=null,numberingSystem:n=null,locObj:s=null}={}){return(s||Xe.create(t,n,null)).weekdays(e,!0)}static meridiems({locale:e=null}={}){return Xe.create(e).meridiems()}static eras(e="short",{locale:t=null}={}){return Xe.create(t,null,"gregory").eras(e)}static features(){return{relative:$()}}}function Jt(e,t){const n=e=>e.toUTC(0,{keepLocalTime:!0}).startOf("day").valueOf(),s=n(t)-n(e);return Math.floor(Ut.fromMillis(s).as("days"))}const Bt={arab:"[٠-٩]",arabext:"[۰-۹]",bali:"[᭐-᭙]",beng:"[০-৯]",deva:"[०-९]",fullwide:"[０-９]",gujr:"[૦-૯]",hanidec:"[〇|一|二|三|四|五|六|七|八|九]",khmr:"[០-៩]",knda:"[೦-೯]",laoo:"[໐-໙]",limb:"[᥆-᥏]",mlym:"[൦-൯]",mong:"[᠐-᠙]",mymr:"[၀-၉]",orya:"[୦-୯]",tamldec:"[௦-௯]",telu:"[౦-౯]",thai:"[๐-๙]",tibt:"[༠-༩]",latn:"\\d"},Xt={arab:[1632,1641],arabext:[1776,1785],bali:[6992,7001],beng:[2534,2543],deva:[2406,2415],fullwide:[65296,65303],gujr:[2790,2799],khmr:[6112,6121],knda:[3302,3311],laoo:[3792,3801],limb:[6470,6479],mlym:[3430,3439],mong:[6160,6169],mymr:[4160,4169],orya:[2918,2927],tamldec:[3046,3055],telu:[3174,3183],thai:[3664,3673],tibt:[3872,3881]},Qt=Bt.hanidec.replace(/[\[|\]]/g,"").split("");function Kt({numberingSystem:e},t=""){return new RegExp(`${Bt[e||"latn"]}${t}`)}function en(e,t=(e=>e)){return{regex:e,deser:([e])=>t(function(e){let t=parseInt(e,10);if(isNaN(t)){t="";for(let n=0;n<e.length;n++){const s=e.charCodeAt(n);if(-1!==e[n].search(Bt.hanidec))t+=Qt.indexOf(e[n]);else for(const e in Xt){const[n,r]=Xt[e];s>=n&&s<=r&&(t+=s-n)}}return parseInt(t,10)}return t}(e))}}const tn=`[ ${String.fromCharCode(160)}]`,nn=new RegExp(tn,"g");function sn(e){return e.replace(/\./g,"\\.?").replace(nn,tn)}function rn(e){return e.replace(/\./g,"").replace(nn," ").toLowerCase()}function on(e,t){return null===e?null:{regex:RegExp(e.map(sn).join("|")),deser:([n])=>e.findIndex((e=>rn(n)===rn(e)))+t}}function an(e,t){return{regex:e,deser:([,e,t])=>ee(e,t),groups:t}}function ln(e){return{regex:e,deser:([e])=>e}}const un={year:{"2-digit":"yy",numeric:"yyyyy"},month:{numeric:"M","2-digit":"MM",short:"MMM",long:"MMMM"},day:{numeric:"d","2-digit":"dd"},weekday:{short:"EEE",long:"EEEE"},dayperiod:"a",dayPeriod:"a",hour:{numeric:"h","2-digit":"hh"},minute:{numeric:"m","2-digit":"mm"},second:{numeric:"s","2-digit":"ss"},timeZoneName:{long:"ZZZZZ",short:"ZZZ"}};let cn=null;function hn(e,t,n){const s=function(e,t){return Array.prototype.concat(...e.map((e=>function(e,t){if(e.literal)return e;const n=dn(Se.macroTokenToFormatOpts(e.val),t);return null==n||n.includes(void 0)?e:n}(e,t))))}(Se.parseFormat(n),e),r=s.map((t=>function(e,t){const n=Kt(t),s=Kt(t,"{2}"),r=Kt(t,"{3}"),i=Kt(t,"{4}"),o=Kt(t,"{6}"),a=Kt(t,"{1,2}"),l=Kt(t,"{1,3}"),u=Kt(t,"{1,6}"),c=Kt(t,"{1,9}"),h=Kt(t,"{2,4}"),d=Kt(t,"{4,6}"),m=e=>{return{regex:RegExp((t=e.val,t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&"))),deser:([e])=>e,literal:!0};var t},f=(f=>{if(e.literal)return m(f);switch(f.val){case"G":return on(t.eras("short",!1),0);case"GG":return on(t.eras("long",!1),0);case"y":return en(u);case"yy":case"kk":return en(h,Q);case"yyyy":case"kkkk":return en(i);case"yyyyy":return en(d);case"yyyyyy":return en(o);case"M":case"L":case"d":case"H":case"h":case"m":case"q":case"s":case"W":return en(a);case"MM":case"LL":case"dd":case"HH":case"hh":case"mm":case"qq":case"ss":case"WW":return en(s);case"MMM":return on(t.months("short",!0,!1),1);case"MMMM":return on(t.months("long",!0,!1),1);case"LLL":return on(t.months("short",!1,!1),1);case"LLLL":return on(t.months("long",!1,!1),1);case"o":case"S":return en(l);case"ooo":case"SSS":return en(r);case"u":return ln(c);case"uu":return ln(a);case"uuu":case"E":case"c":return en(n);case"a":return on(t.meridiems(),0);case"EEE":return on(t.weekdays("short",!1,!1),1);case"EEEE":return on(t.weekdays("long",!1,!1),1);case"ccc":return on(t.weekdays("short",!0,!1),1);case"cccc":return on(t.weekdays("long",!0,!1),1);case"Z":case"ZZ":return an(new RegExp(`([+-]${a.source})(?::(${s.source}))?`),2);case"ZZZ":return an(new RegExp(`([+-]${a.source})(${s.source})?`),2);case"z":return ln(/[a-z_+-/]{1,256}?/i);default:return m(f)}})(e)||{invalidReason:"missing Intl.DateTimeFormat.formatToParts support"};return f.token=e,f}(t,e))),i=r.find((e=>e.invalidReason));if(i)return{input:t,tokens:s,invalidReason:i.invalidReason};{const[e,n]=function(e){return[`^${e.map((e=>e.regex)).reduce(((e,t)=>`${e}(${t.source})`),"")}$`,e]}(r),i=RegExp(e,"i"),[a,l]=function(e,t,n){const s=e.match(t);if(s){const e={};let t=1;for(const r in n)if(P(n,r)){const i=n[r],o=i.groups?i.groups+1:1;!i.literal&&i.token&&(e[i.token.val[0]]=i.deser(s.slice(t,t+o))),t+=o}return[s,e]}return[s,{}]}(t,i,n),[u,c,h]=l?function(e){let t,n=null;return j(e.z)||(n=Ne.create(e.z)),j(e.Z)||(n||(n=new De(e.Z)),t=e.Z),j(e.q)||(e.M=3*(e.q-1)+1),j(e.h)||(e.h<12&&1===e.a?e.h+=12:12===e.h&&0===e.a&&(e.h=0)),0===e.G&&e.y&&(e.y=-e.y),j(e.u)||(e.S=U(e.u)),[Object.keys(e).reduce(((t,n)=>{const s=(e=>{switch(e){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":case"H":return"hour";case"d":return"day";case"o":return"ordinal";case"L":case"M":return"month";case"y":return"year";case"E":case"c":return"weekday";case"W":return"weekNumber";case"k":return"weekYear";case"q":return"quarter";default:return null}})(n);return s&&(t[s]=e[n]),t}),{}),n,t]}(l):[null,null,void 0];if(P(l,"a")&&P(l,"H"))throw new o("Can't include meridiem when specifying 24-hour format");return{input:t,tokens:s,regex:i,rawMatches:a,matches:l,result:u,zone:c,specificOffset:h}}}function dn(e,t){return e?Se.create(t,e).formatDateTimeParts((cn||(cn=Hn.fromMillis(1555555555555)),cn)).map((t=>function(e,t,n){const{type:s,value:r}=e;if("literal"===s)return{literal:!0,val:r};const i=n[s];let o=un[s];return"object"==typeof o&&(o=o[i]),o?{literal:!1,val:o}:void 0}(t,0,e))):null}const mn=[0,31,59,90,120,151,181,212,243,273,304,334],fn=[0,31,60,91,121,152,182,213,244,274,305,335];function pn(e,t){return new be("unit out of range",`you specified ${t} (of type ${typeof t}) as a ${e}, which is invalid`)}function yn(e,t,n){const s=new Date(Date.UTC(e,t-1,n));e<100&&e>=0&&s.setUTCFullYear(s.getUTCFullYear()-1900);const r=s.getUTCDay();return 0===r?7:r}function gn(e,t,n){return n+(Y(e)?fn:mn)[t-1]}function _n(e,t){const n=Y(e)?fn:mn,s=n.findIndex((e=>e<t));return{month:s+1,day:t-n[s]}}function vn(e){const{year:t,month:n,day:s}=e,r=gn(t,n,s),i=yn(t,n,s);let o,a=Math.floor((r-i+10)/7);return a<1?(o=t-1,a=X(o)):a>X(t)?(o=t+1,a=1):o=t,{weekYear:o,weekNumber:a,weekday:i,...re(e)}}function wn(e){const{weekYear:t,weekNumber:n,weekday:s}=e,r=yn(t,1,4),i=H(t);let o,a=7*n+s-r-3;a<1?(o=t-1,a+=H(o)):a>i?(o=t+1,a-=H(t)):o=t;const{month:l,day:u}=_n(o,a);return{year:o,month:l,day:u,...re(e)}}function Sn(e){const{year:t,month:n,day:s}=e;return{year:t,ordinal:gn(t,n,s),...re(e)}}function bn(e){const{year:t,ordinal:n}=e,{month:s,day:r}=_n(t,n);return{year:t,month:s,day:r,...re(e)}}function Tn(e){const t=A(e.year),n=R(e.month,1,12),s=R(e.day,1,J(e.year,e.month));return t?n?!s&&pn("day",e.day):pn("month",e.month):pn("year",e.year)}function kn(e){const{hour:t,minute:n,second:s,millisecond:r}=e,i=R(t,0,23)||24===t&&0===n&&0===s&&0===r,o=R(n,0,59),a=R(s,0,59),l=R(r,0,999);return i?o?a?!l&&pn("millisecond",r):pn("second",s):pn("minute",n):pn("hour",t)}const On="Invalid DateTime",Mn=864e13;function xn(e){return new be("unsupported zone",`the zone "${e.name}" is not supported`)}function En(e){return null===e.weekData&&(e.weekData=vn(e.c)),e.weekData}function Nn(e,t){const n={ts:e.ts,zone:e.zone,c:e.c,o:e.o,loc:e.loc,invalid:e.invalid};return new Hn({...n,...t,old:n})}function Cn(e,t,n){let s=e-60*t*1e3;const r=n.offset(s);if(t===r)return[s,t];s-=60*(r-t)*1e3;const i=n.offset(s);return r===i?[s,r]:[e-60*Math.min(r,i)*1e3,Math.max(r,i)]}function Dn(e,t){const n=new Date(e+=60*t*1e3);return{year:n.getUTCFullYear(),month:n.getUTCMonth()+1,day:n.getUTCDate(),hour:n.getUTCHours(),minute:n.getUTCMinutes(),second:n.getUTCSeconds(),millisecond:n.getUTCMilliseconds()}}function Ln(e,t,n){return Cn(B(e),t,n)}function In(e,t){const n=e.o,s=e.c.year+Math.trunc(t.years),r=e.c.month+Math.trunc(t.months)+3*Math.trunc(t.quarters),i={...e.c,year:s,month:r,day:Math.min(e.c.day,J(s,r))+Math.trunc(t.days)+7*Math.trunc(t.weeks)},o=Ut.fromObject({years:t.years-Math.trunc(t.years),quarters:t.quarters-Math.trunc(t.quarters),months:t.months-Math.trunc(t.months),weeks:t.weeks-Math.trunc(t.weeks),days:t.days-Math.trunc(t.days),hours:t.hours,minutes:t.minutes,seconds:t.seconds,milliseconds:t.milliseconds}).as("milliseconds"),a=B(i);let[l,u]=Cn(a,n,e.zone);return 0!==o&&(l+=o,u=e.zone.offset(l)),{ts:l,o:u}}function Vn(e,t,n,s,r,i){const{setZone:o,zone:a}=n;if(e&&0!==Object.keys(e).length){const s=t||a,r=Hn.fromObject(e,{...n,zone:s,specificOffset:i});return o?r:r.setZone(a)}return Hn.invalid(new be("unparsable",`the input "${r}" can't be parsed as ${s}`))}function jn(e,t,n=!0){return e.isValid?Se.create(Xe.create("en-US"),{allowZ:n,forceSimple:!0}).formatDateTimeFromString(e,t):null}function Fn(e,t){const n=e.c.year>9999||e.c.year<0;let s="";return n&&e.c.year>=0&&(s+="+"),s+=W(e.c.year,n?6:4),t?(s+="-",s+=W(e.c.month),s+="-",s+=W(e.c.day)):(s+=W(e.c.month),s+=W(e.c.day)),s}function An(e,t,n,s,r,i){let o=W(e.c.hour);return t?(o+=":",o+=W(e.c.minute),0===e.c.second&&n||(o+=":")):o+=W(e.c.minute),0===e.c.second&&n||(o+=W(e.c.second),0===e.c.millisecond&&s||(o+=".",o+=W(e.c.millisecond,3))),r&&(e.isOffsetFixed&&0===e.offset&&!i?o+="Z":e.o<0?(o+="-",o+=W(Math.trunc(-e.o/60)),o+=":",o+=W(Math.trunc(-e.o%60))):(o+="+",o+=W(Math.trunc(e.o/60)),o+=":",o+=W(Math.trunc(e.o%60)))),i&&(o+="["+e.zone.ianaName+"]"),o}const $n={month:1,day:1,hour:0,minute:0,second:0,millisecond:0},Zn={weekNumber:1,weekday:1,hour:0,minute:0,second:0,millisecond:0},Pn={ordinal:1,hour:0,minute:0,second:0,millisecond:0},Rn=["year","month","day","hour","minute","second","millisecond"],Wn=["weekYear","weekNumber","weekday","hour","minute","second","millisecond"],zn=["year","ordinal","hour","minute","second","millisecond"];function qn(e){const t={year:"year",years:"year",month:"month",months:"month",day:"day",days:"day",hour:"hour",hours:"hour",minute:"minute",minutes:"minute",quarter:"quarter",quarters:"quarter",second:"second",seconds:"second",millisecond:"millisecond",milliseconds:"millisecond",weekday:"weekday",weekdays:"weekday",weeknumber:"weekNumber",weeksnumber:"weekNumber",weeknumbers:"weekNumber",weekyear:"weekYear",weekyears:"weekYear",ordinal:"ordinal"}[e.toLowerCase()];if(!t)throw new a(e);return t}function Un(e,t){const n=Ie(t.zone,Pe.defaultZone),s=Xe.fromObject(t),r=Pe.now();let i,o;if(j(e.year))i=r;else{for(const t of Rn)j(e[t])&&(e[t]=$n[t]);const t=Tn(e)||kn(e);if(t)return Hn.invalid(t);const s=n.offset(r);[i,o]=Ln(e,s,n)}return new Hn({ts:i,zone:n,loc:s,o})}function Gn(e,t,n){const s=!!j(n.round)||n.round,r=(e,r)=>(e=G(e,s||n.calendary?0:2,!0),t.loc.clone(n).relFormatter(n).format(e,r)),i=s=>n.calendary?t.hasSame(e,s)?0:t.startOf(s).diff(e.startOf(s),s).get(s):t.diff(e,s).get(s);if(n.unit)return r(i(n.unit),n.unit);for(const e of n.units){const t=i(e);if(Math.abs(t)>=1)return r(t,e)}return r(e>t?-0:0,n.units[n.units.length-1])}function Yn(e){let t,n={};return e.length>0&&"object"==typeof e[e.length-1]?(n=e[e.length-1],t=Array.from(e).slice(0,e.length-1)):t=Array.from(e),[n,t]}class Hn{constructor(e){const t=e.zone||Pe.defaultZone;let n=e.invalid||(Number.isNaN(e.ts)?new be("invalid input"):null)||(t.isValid?null:xn(t));this.ts=j(e.ts)?Pe.now():e.ts;let s=null,r=null;if(!n)if(e.old&&e.old.ts===this.ts&&e.old.zone.equals(t))[s,r]=[e.old.c,e.old.o];else{const e=t.offset(this.ts);s=Dn(this.ts,e),n=Number.isNaN(s.year)?new be("invalid input"):null,s=n?null:s,r=n?null:e}this._zone=t,this.loc=e.loc||Xe.create(),this.invalid=n,this.weekData=null,this.c=s,this.o=r,this.isLuxonDateTime=!0}static now(){return new Hn({})}static local(){const[e,t]=Yn(arguments),[n,s,r,i,o,a,l]=t;return Un({year:n,month:s,day:r,hour:i,minute:o,second:a,millisecond:l},e)}static utc(){const[e,t]=Yn(arguments),[n,s,r,i,o,a,l]=t;return e.zone=De.utcInstance,Un({year:n,month:s,day:r,hour:i,minute:o,second:a,millisecond:l},e)}static fromJSDate(e,t={}){const n=(s=e,"[object Date]"===Object.prototype.toString.call(s)?e.valueOf():NaN);var s;if(Number.isNaN(n))return Hn.invalid("invalid input");const r=Ie(t.zone,Pe.defaultZone);return r.isValid?new Hn({ts:n,zone:r,loc:Xe.fromObject(t)}):Hn.invalid(xn(r))}static fromMillis(e,t={}){if(F(e))return e<-Mn||e>Mn?Hn.invalid("Timestamp out of range"):new Hn({ts:e,zone:Ie(t.zone,Pe.defaultZone),loc:Xe.fromObject(t)});throw new l(`fromMillis requires a numerical input, but received a ${typeof e} with value ${e}`)}static fromSeconds(e,t={}){if(F(e))return new Hn({ts:1e3*e,zone:Ie(t.zone,Pe.defaultZone),loc:Xe.fromObject(t)});throw new l("fromSeconds requires a numerical input")}static fromObject(e,t={}){e=e||{};const n=Ie(t.zone,Pe.defaultZone);if(!n.isValid)return Hn.invalid(xn(n));const s=Pe.now(),r=j(t.specificOffset)?n.offset(s):t.specificOffset,i=ne(e,qn),a=!j(i.ordinal),l=!j(i.year),u=!j(i.month)||!j(i.day),c=l||u,h=i.weekYear||i.weekNumber,d=Xe.fromObject(t);if((c||a)&&h)throw new o("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(u&&a)throw new o("Can't mix ordinal dates with month/day");const m=h||i.weekday&&!c;let f,p,y=Dn(s,r);m?(f=Wn,p=Zn,y=vn(y)):a?(f=zn,p=Pn,y=Sn(y)):(f=Rn,p=$n);let g=!1;for(const e of f)j(i[e])?i[e]=g?p[e]:y[e]:g=!0;const _=m?function(e){const t=A(e.weekYear),n=R(e.weekNumber,1,X(e.weekYear)),s=R(e.weekday,1,7);return t?n?!s&&pn("weekday",e.weekday):pn("week",e.week):pn("weekYear",e.weekYear)}(i):a?function(e){const t=A(e.year),n=R(e.ordinal,1,H(e.year));return t?!n&&pn("ordinal",e.ordinal):pn("year",e.year)}(i):Tn(i),v=_||kn(i);if(v)return Hn.invalid(v);const w=m?wn(i):a?bn(i):i,[S,b]=Ln(w,r,n),T=new Hn({ts:S,zone:n,o:b,loc:d});return i.weekday&&c&&e.weekday!==T.weekday?Hn.invalid("mismatched weekday",`you can't specify both a weekday of ${i.weekday} and a date of ${T.toISO()}`):T}static fromISO(e,t={}){const[n,s]=function(e){return et(e,[Mt,Ct],[xt,Dt],[Et,Lt],[Nt,It])}(e);return Vn(n,s,t,"ISO 8601",e)}static fromRFC2822(e,t={}){const[n,s]=function(e){return et(function(e){return e.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim()}(e),[vt,wt])}(e);return Vn(n,s,t,"RFC 2822",e)}static fromHTTP(e,t={}){const[n,s]=function(e){return et(e,[St,kt],[bt,kt],[Tt,Ot])}(e);return Vn(n,s,t,"HTTP",t)}static fromFormat(e,t,n={}){if(j(e)||j(t))throw new l("fromFormat requires an input string and a format");const{locale:s=null,numberingSystem:r=null}=n,i=Xe.fromOpts({locale:s,numberingSystem:r,defaultToEN:!0}),[o,a,u,c]=function(e,t,n){const{result:s,zone:r,specificOffset:i,invalidReason:o}=hn(e,t,n);return[s,r,i,o]}(i,e,t);return c?Hn.invalid(c):Vn(o,a,n,`format ${t}`,e,u)}static fromString(e,t,n={}){return Hn.fromFormat(e,t,n)}static fromSQL(e,t={}){const[n,s]=function(e){return et(e,[jt,Ct],[Ft,At])}(e);return Vn(n,s,t,"SQL",e)}static invalid(e,t=null){if(!e)throw new l("need to specify a reason the DateTime is invalid");const n=e instanceof be?e:new be(e,t);if(Pe.throwOnInvalid)throw new s(n);return new Hn({invalid:n})}static isDateTime(e){return e&&e.isLuxonDateTime||!1}static parseFormatForOpts(e,t={}){const n=dn(e,Xe.fromObject(t));return n?n.map((e=>e?e.val:null)).join(""):null}get(e){return this[e]}get isValid(){return null===this.invalid}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}get locale(){return this.isValid?this.loc.locale:null}get numberingSystem(){return this.isValid?this.loc.numberingSystem:null}get outputCalendar(){return this.isValid?this.loc.outputCalendar:null}get zone(){return this._zone}get zoneName(){return this.isValid?this.zone.name:null}get year(){return this.isValid?this.c.year:NaN}get quarter(){return this.isValid?Math.ceil(this.c.month/3):NaN}get month(){return this.isValid?this.c.month:NaN}get day(){return this.isValid?this.c.day:NaN}get hour(){return this.isValid?this.c.hour:NaN}get minute(){return this.isValid?this.c.minute:NaN}get second(){return this.isValid?this.c.second:NaN}get millisecond(){return this.isValid?this.c.millisecond:NaN}get weekYear(){return this.isValid?En(this).weekYear:NaN}get weekNumber(){return this.isValid?En(this).weekNumber:NaN}get weekday(){return this.isValid?En(this).weekday:NaN}get ordinal(){return this.isValid?Sn(this.c).ordinal:NaN}get monthShort(){return this.isValid?Ht.months("short",{locObj:this.loc})[this.month-1]:null}get monthLong(){return this.isValid?Ht.months("long",{locObj:this.loc})[this.month-1]:null}get weekdayShort(){return this.isValid?Ht.weekdays("short",{locObj:this.loc})[this.weekday-1]:null}get weekdayLong(){return this.isValid?Ht.weekdays("long",{locObj:this.loc})[this.weekday-1]:null}get offset(){return this.isValid?+this.o:NaN}get offsetNameShort(){return this.isValid?this.zone.offsetName(this.ts,{format:"short",locale:this.locale}):null}get offsetNameLong(){return this.isValid?this.zone.offsetName(this.ts,{format:"long",locale:this.locale}):null}get isOffsetFixed(){return this.isValid?this.zone.isUniversal:null}get isInDST(){return!this.isOffsetFixed&&(this.offset>this.set({month:1,day:1}).offset||this.offset>this.set({month:5}).offset)}get isInLeapYear(){return Y(this.year)}get daysInMonth(){return J(this.year,this.month)}get daysInYear(){return this.isValid?H(this.year):NaN}get weeksInWeekYear(){return this.isValid?X(this.weekYear):NaN}resolvedLocaleOptions(e={}){const{locale:t,numberingSystem:n,calendar:s}=Se.create(this.loc.clone(e),e).resolvedOptions(this);return{locale:t,numberingSystem:n,outputCalendar:s}}toUTC(e=0,t={}){return this.setZone(De.instance(e),t)}toLocal(){return this.setZone(Pe.defaultZone)}setZone(e,{keepLocalTime:t=!1,keepCalendarTime:n=!1}={}){if((e=Ie(e,Pe.defaultZone)).equals(this.zone))return this;if(e.isValid){let s=this.ts;if(t||n){const t=e.offset(this.ts),n=this.toObject();[s]=Ln(n,t,e)}return Nn(this,{ts:s,zone:e})}return Hn.invalid(xn(e))}reconfigure({locale:e,numberingSystem:t,outputCalendar:n}={}){return Nn(this,{loc:this.loc.clone({locale:e,numberingSystem:t,outputCalendar:n})})}setLocale(e){return this.reconfigure({locale:e})}set(e){if(!this.isValid)return this;const t=ne(e,qn),n=!j(t.weekYear)||!j(t.weekNumber)||!j(t.weekday),s=!j(t.ordinal),r=!j(t.year),i=!j(t.month)||!j(t.day),a=r||i,l=t.weekYear||t.weekNumber;if((a||s)&&l)throw new o("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(i&&s)throw new o("Can't mix ordinal dates with month/day");let u;n?u=wn({...vn(this.c),...t}):j(t.ordinal)?(u={...this.toObject(),...t},j(t.day)&&(u.day=Math.min(J(u.year,u.month),u.day))):u=bn({...Sn(this.c),...t});const[c,h]=Ln(u,this.o,this.zone);return Nn(this,{ts:c,o:h})}plus(e){return this.isValid?Nn(this,In(this,Ut.fromDurationLike(e))):this}minus(e){return this.isValid?Nn(this,In(this,Ut.fromDurationLike(e).negate())):this}startOf(e){if(!this.isValid)return this;const t={},n=Ut.normalizeUnit(e);switch(n){case"years":t.month=1;case"quarters":case"months":t.day=1;case"weeks":case"days":t.hour=0;case"hours":t.minute=0;case"minutes":t.second=0;case"seconds":t.millisecond=0}if("weeks"===n&&(t.weekday=1),"quarters"===n){const e=Math.ceil(this.month/3);t.month=3*(e-1)+1}return this.set(t)}endOf(e){return this.isValid?this.plus({[e]:1}).startOf(e).minus(1):this}toFormat(e,t={}){return this.isValid?Se.create(this.loc.redefaultToEN(t)).formatDateTimeFromString(this,e):On}toLocaleString(e=m,t={}){return this.isValid?Se.create(this.loc.clone(t),e).formatDateTime(this):On}toLocaleParts(e={}){return this.isValid?Se.create(this.loc.clone(e),e).formatDateTimeParts(this):[]}toISO({format:e="extended",suppressSeconds:t=!1,suppressMilliseconds:n=!1,includeOffset:s=!0,extendedZone:r=!1}={}){if(!this.isValid)return null;const i="extended"===e;let o=Fn(this,i);return o+="T",o+=An(this,i,t,n,s,r),o}toISODate({format:e="extended"}={}){return this.isValid?Fn(this,"extended"===e):null}toISOWeekDate(){return jn(this,"kkkk-'W'WW-c")}toISOTime({suppressMilliseconds:e=!1,suppressSeconds:t=!1,includeOffset:n=!0,includePrefix:s=!1,extendedZone:r=!1,format:i="extended"}={}){return this.isValid?(s?"T":"")+An(this,"extended"===i,t,e,n,r):null}toRFC2822(){return jn(this,"EEE, dd LLL yyyy HH:mm:ss ZZZ",!1)}toHTTP(){return jn(this.toUTC(),"EEE, dd LLL yyyy HH:mm:ss 'GMT'")}toSQLDate(){return this.isValid?Fn(this,!0):null}toSQLTime({includeOffset:e=!0,includeZone:t=!1,includeOffsetSpace:n=!0}={}){let s="HH:mm:ss.SSS";return(t||e)&&(n&&(s+=" "),t?s+="z":e&&(s+="ZZ")),jn(this,s,!0)}toSQL(e={}){return this.isValid?`${this.toSQLDate()} ${this.toSQLTime(e)}`:null}toString(){return this.isValid?this.toISO():On}valueOf(){return this.toMillis()}toMillis(){return this.isValid?this.ts:NaN}toSeconds(){return this.isValid?this.ts/1e3:NaN}toUnixInteger(){return this.isValid?Math.floor(this.ts/1e3):NaN}toJSON(){return this.toISO()}toBSON(){return this.toJSDate()}toObject(e={}){if(!this.isValid)return{};const t={...this.c};return e.includeConfig&&(t.outputCalendar=this.outputCalendar,t.numberingSystem=this.loc.numberingSystem,t.locale=this.loc.locale),t}toJSDate(){return new Date(this.isValid?this.ts:NaN)}diff(e,t="milliseconds",n={}){if(!this.isValid||!e.isValid)return Ut.invalid("created by diffing an invalid DateTime");const s={locale:this.locale,numberingSystem:this.numberingSystem,...n},r=(a=t,Array.isArray(a)?a:[a]).map(Ut.normalizeUnit),i=e.valueOf()>this.valueOf(),o=function(e,t,n,s){let[r,i,o,a]=function(e,t,n){const s=[["years",(e,t)=>t.year-e.year],["quarters",(e,t)=>t.quarter-e.quarter],["months",(e,t)=>t.month-e.month+12*(t.year-e.year)],["weeks",(e,t)=>{const n=Jt(e,t);return(n-n%7)/7}],["days",Jt]],r={};let i,o;for(const[a,l]of s)if(n.indexOf(a)>=0){i=a;let n=l(e,t);o=e.plus({[a]:n}),o>t?(e=e.plus({[a]:n-1}),n-=1):e=o,r[a]=n}return[e,r,o,i]}(e,t,n);const l=t-r,u=n.filter((e=>["hours","minutes","seconds","milliseconds"].indexOf(e)>=0));0===u.length&&(o<t&&(o=r.plus({[a]:1})),o!==r&&(i[a]=(i[a]||0)+l/(o-r)));const c=Ut.fromObject(i,s);return u.length>0?Ut.fromMillis(l,s).shiftTo(...u).plus(c):c}(i?this:e,i?e:this,r,s);var a;return i?o.negate():o}diffNow(e="milliseconds",t={}){return this.diff(Hn.now(),e,t)}until(e){return this.isValid?Yt.fromDateTimes(this,e):this}hasSame(e,t){if(!this.isValid)return!1;const n=e.valueOf(),s=this.setZone(e.zone,{keepLocalTime:!0});return s.startOf(t)<=n&&n<=s.endOf(t)}equals(e){return this.isValid&&e.isValid&&this.valueOf()===e.valueOf()&&this.zone.equals(e.zone)&&this.loc.equals(e.loc)}toRelative(e={}){if(!this.isValid)return null;const t=e.base||Hn.fromObject({},{zone:this.zone}),n=e.padding?this<t?-e.padding:e.padding:0;let s=["years","months","days","hours","minutes","seconds"],r=e.unit;return Array.isArray(e.unit)&&(s=e.unit,r=void 0),Gn(t,this.plus(n),{...e,numeric:"always",units:s,unit:r})}toRelativeCalendar(e={}){return this.isValid?Gn(e.base||Hn.fromObject({},{zone:this.zone}),this,{...e,numeric:"auto",units:["years","months","days"],calendary:!0}):null}static min(...e){if(!e.every(Hn.isDateTime))throw new l("min requires all arguments be DateTimes");return Z(e,(e=>e.valueOf()),Math.min)}static max(...e){if(!e.every(Hn.isDateTime))throw new l("max requires all arguments be DateTimes");return Z(e,(e=>e.valueOf()),Math.max)}static fromFormatExplain(e,t,n={}){const{locale:s=null,numberingSystem:r=null}=n;return hn(Xe.fromOpts({locale:s,numberingSystem:r,defaultToEN:!0}),e,t)}static fromStringExplain(e,t,n={}){return Hn.fromFormatExplain(e,t,n)}static get DATE_SHORT(){return m}static get DATE_MED(){return f}static get DATE_MED_WITH_WEEKDAY(){return p}static get DATE_FULL(){return y}static get DATE_HUGE(){return g}static get TIME_SIMPLE(){return _}static get TIME_WITH_SECONDS(){return v}static get TIME_WITH_SHORT_OFFSET(){return w}static get TIME_WITH_LONG_OFFSET(){return S}static get TIME_24_SIMPLE(){return b}static get TIME_24_WITH_SECONDS(){return T}static get TIME_24_WITH_SHORT_OFFSET(){return k}static get TIME_24_WITH_LONG_OFFSET(){return O}static get DATETIME_SHORT(){return M}static get DATETIME_SHORT_WITH_SECONDS(){return x}static get DATETIME_MED(){return E}static get DATETIME_MED_WITH_SECONDS(){return N}static get DATETIME_MED_WITH_WEEKDAY(){return C}static get DATETIME_FULL(){return D}static get DATETIME_FULL_WITH_SECONDS(){return L}static get DATETIME_HUGE(){return I}static get DATETIME_HUGE_WITH_SECONDS(){return V}}function Jn(e){if(Hn.isDateTime(e))return e;if(e&&e.valueOf&&F(e.valueOf()))return Hn.fromJSDate(e);if(e&&"object"==typeof e)return Hn.fromObject(e);throw new l(`Unknown datetime argument: ${e}, of type ${typeof e}`)}t.DateTime=Hn,t.Duration=Ut,t.FixedOffsetZone=De,t.IANAZone=Ne,t.Info=Ht,t.Interval=Yt,t.InvalidZone=Le,t.Settings=Pe,t.SystemZone=Oe,t.VERSION="3.0.1",t.Zone=Te},849:(e,t,n)=>{n.r(t)},358:(e,t,n)=>{n.r(t)},26:(e,t,n)=>{n.r(t)},931:(e,t,n)=>{n.r(t)},718:(e,t,n)=>{n.r(t)},737:(e,t,n)=>{n.r(t)},197:(e,t,n)=>{n.r(t)},400:(e,t,n)=>{n.r(t),n.d(t,{render:()=>Z,hydrate:()=>P,createElement:()=>y,h:()=>y,Fragment:()=>v,createRef:()=>_,isValidElement:()=>o,Component:()=>w,cloneElement:()=>R,createContext:()=>W,toChildArray:()=>x,options:()=>r});var s,r,i,o,a,l,u,c,h={},d=[],m=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function f(e,t){for(var n in t)e[n]=t[n];return e}function p(e){var t=e.parentNode;t&&t.removeChild(e)}function y(e,t,n){var r,i,o,a={};for(o in t)"key"==o?r=t[o]:"ref"==o?i=t[o]:a[o]=t[o];if(arguments.length>2&&(a.children=arguments.length>3?s.call(arguments,2):n),"function"==typeof e&&null!=e.defaultProps)for(o in e.defaultProps)void 0===a[o]&&(a[o]=e.defaultProps[o]);return g(e,a,r,i,null)}function g(e,t,n,s,o){var a={type:e,props:t,key:n,ref:s,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==o?++i:o};return null==o&&null!=r.vnode&&r.vnode(a),a}function _(){return{current:null}}function v(e){return e.children}function w(e,t){this.props=e,this.context=t}function S(e,t){if(null==t)return e.__?S(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?S(e):null}function b(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return b(e)}}function T(e){(!e.__d&&(e.__d=!0)&&a.push(e)&&!k.__r++||u!==r.debounceRendering)&&((u=r.debounceRendering)||l)(k)}function k(){for(var e;k.__r=a.length;)e=a.sort((function(e,t){return e.__v.__b-t.__v.__b})),a=[],e.some((function(e){var t,n,s,r,i,o;e.__d&&(i=(r=(t=e).__v).__e,(o=t.__P)&&(n=[],(s=f({},r)).__v=r.__v+1,I(o,r,s,t.__n,void 0!==o.ownerSVGElement,null!=r.__h?[i]:null,n,null==i?S(r):i,r.__h),V(n,r),r.__e!=i&&b(r)))}))}function O(e,t,n,s,r,i,o,a,l,u){var c,m,f,p,y,_,w,b=s&&s.__k||d,T=b.length;for(n.__k=[],c=0;c<t.length;c++)if(null!=(p=n.__k[c]=null==(p=t[c])||"boolean"==typeof p?null:"string"==typeof p||"number"==typeof p||"bigint"==typeof p?g(null,p,null,null,p):Array.isArray(p)?g(v,{children:p},null,null,null):p.__b>0?g(p.type,p.props,p.key,null,p.__v):p)){if(p.__=n,p.__b=n.__b+1,null===(f=b[c])||f&&p.key==f.key&&p.type===f.type)b[c]=void 0;else for(m=0;m<T;m++){if((f=b[m])&&p.key==f.key&&p.type===f.type){b[m]=void 0;break}f=null}I(e,p,f=f||h,r,i,o,a,l,u),y=p.__e,(m=p.ref)&&f.ref!=m&&(w||(w=[]),f.ref&&w.push(f.ref,null,p),w.push(m,p.__c||y,p)),null!=y?(null==_&&(_=y),"function"==typeof p.type&&p.__k===f.__k?p.__d=l=M(p,l,e):l=E(e,p,f,b,y,l),"function"==typeof n.type&&(n.__d=l)):l&&f.__e==l&&l.parentNode!=e&&(l=S(f))}for(n.__e=_,c=T;c--;)null!=b[c]&&("function"==typeof n.type&&null!=b[c].__e&&b[c].__e==n.__d&&(n.__d=S(s,c+1)),A(b[c],b[c]));if(w)for(c=0;c<w.length;c++)F(w[c],w[++c],w[++c])}function M(e,t,n){for(var s,r=e.__k,i=0;r&&i<r.length;i++)(s=r[i])&&(s.__=e,t="function"==typeof s.type?M(s,t,n):E(n,s,s,r,s.__e,t));return t}function x(e,t){return t=t||[],null==e||"boolean"==typeof e||(Array.isArray(e)?e.some((function(e){x(e,t)})):t.push(e)),t}function E(e,t,n,s,r,i){var o,a,l;if(void 0!==t.__d)o=t.__d,t.__d=void 0;else if(null==n||r!=i||null==r.parentNode)e:if(null==i||i.parentNode!==e)e.appendChild(r),o=null;else{for(a=i,l=0;(a=a.nextSibling)&&l<s.length;l+=2)if(a==r)break e;e.insertBefore(r,i),o=i}return void 0!==o?o:r.nextSibling}function N(e,t,n){"-"===t[0]?e.setProperty(t,n):e[t]=null==n?"":"number"!=typeof n||m.test(t)?n:n+"px"}function C(e,t,n,s,r){var i;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof s&&(e.style.cssText=s=""),s)for(t in s)n&&t in n||N(e.style,t,"");if(n)for(t in n)s&&n[t]===s[t]||N(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])i=t!==(t=t.replace(/Capture$/,"")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+i]=n,n?s||e.addEventListener(t,i?L:D,i):e.removeEventListener(t,i?L:D,i);else if("dangerouslySetInnerHTML"!==t){if(r)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null!=n&&(!1!==n||"a"===t[0]&&"r"===t[1])?e.setAttribute(t,n):e.removeAttribute(t))}}function D(e){this.l[e.type+!1](r.event?r.event(e):e)}function L(e){this.l[e.type+!0](r.event?r.event(e):e)}function I(e,t,n,s,i,o,a,l,u){var c,h,d,m,p,y,g,_,S,b,T,k,M,x=t.type;if(void 0!==t.constructor)return null;null!=n.__h&&(u=n.__h,l=t.__e=n.__e,t.__h=null,o=[l]),(c=r.__b)&&c(t);try{e:if("function"==typeof x){if(_=t.props,S=(c=x.contextType)&&s[c.__c],b=c?S?S.props.value:c.__:s,n.__c?g=(h=t.__c=n.__c).__=h.__E:("prototype"in x&&x.prototype.render?t.__c=h=new x(_,b):(t.__c=h=new w(_,b),h.constructor=x,h.render=$),S&&S.sub(h),h.props=_,h.state||(h.state={}),h.context=b,h.__n=s,d=h.__d=!0,h.__h=[]),null==h.__s&&(h.__s=h.state),null!=x.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=f({},h.__s)),f(h.__s,x.getDerivedStateFromProps(_,h.__s))),m=h.props,p=h.state,d)null==x.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else{if(null==x.getDerivedStateFromProps&&_!==m&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(_,b),!h.__e&&null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(_,h.__s,b)||t.__v===n.__v){h.props=_,h.state=h.__s,t.__v!==n.__v&&(h.__d=!1),h.__v=t,t.__e=n.__e,t.__k=n.__k,t.__k.forEach((function(e){e&&(e.__=t)})),h.__h.length&&a.push(h);break e}null!=h.componentWillUpdate&&h.componentWillUpdate(_,h.__s,b),null!=h.componentDidUpdate&&h.__h.push((function(){h.componentDidUpdate(m,p,y)}))}if(h.context=b,h.props=_,h.__v=t,h.__P=e,T=r.__r,k=0,"prototype"in x&&x.prototype.render)h.state=h.__s,h.__d=!1,T&&T(t),c=h.render(h.props,h.state,h.context);else do{h.__d=!1,T&&T(t),c=h.render(h.props,h.state,h.context),h.state=h.__s}while(h.__d&&++k<25);h.state=h.__s,null!=h.getChildContext&&(s=f(f({},s),h.getChildContext())),d||null==h.getSnapshotBeforeUpdate||(y=h.getSnapshotBeforeUpdate(m,p)),M=null!=c&&c.type===v&&null==c.key?c.props.children:c,O(e,Array.isArray(M)?M:[M],t,n,s,i,o,a,l,u),h.base=t.__e,t.__h=null,h.__h.length&&a.push(h),g&&(h.__E=h.__=null),h.__e=!1}else null==o&&t.__v===n.__v?(t.__k=n.__k,t.__e=n.__e):t.__e=j(n.__e,t,n,s,i,o,a,u);(c=r.diffed)&&c(t)}catch(e){t.__v=null,(u||null!=o)&&(t.__e=l,t.__h=!!u,o[o.indexOf(l)]=null),r.__e(e,t,n)}}function V(e,t){r.__c&&r.__c(t,e),e.some((function(t){try{e=t.__h,t.__h=[],e.some((function(e){e.call(t)}))}catch(e){r.__e(e,t.__v)}}))}function j(e,t,n,r,i,o,a,l){var u,c,d,m=n.props,f=t.props,y=t.type,g=0;if("svg"===y&&(i=!0),null!=o)for(;g<o.length;g++)if((u=o[g])&&"setAttribute"in u==!!y&&(y?u.localName===y:3===u.nodeType)){e=u,o[g]=null;break}if(null==e){if(null===y)return document.createTextNode(f);e=i?document.createElementNS("http://www.w3.org/2000/svg",y):document.createElement(y,f.is&&f),o=null,l=!1}if(null===y)m===f||l&&e.data===f||(e.data=f);else{if(o=o&&s.call(e.childNodes),c=(m=n.props||h).dangerouslySetInnerHTML,d=f.dangerouslySetInnerHTML,!l){if(null!=o)for(m={},g=0;g<e.attributes.length;g++)m[e.attributes[g].name]=e.attributes[g].value;(d||c)&&(d&&(c&&d.__html==c.__html||d.__html===e.innerHTML)||(e.innerHTML=d&&d.__html||""))}if(function(e,t,n,s,r){var i;for(i in n)"children"===i||"key"===i||i in t||C(e,i,null,n[i],s);for(i in t)r&&"function"!=typeof t[i]||"children"===i||"key"===i||"value"===i||"checked"===i||n[i]===t[i]||C(e,i,t[i],n[i],s)}(e,f,m,i,l),d)t.__k=[];else if(g=t.props.children,O(e,Array.isArray(g)?g:[g],t,n,r,i&&"foreignObject"!==y,o,a,o?o[0]:n.__k&&S(n,0),l),null!=o)for(g=o.length;g--;)null!=o[g]&&p(o[g]);l||("value"in f&&void 0!==(g=f.value)&&(g!==e.value||"progress"===y&&!g||"option"===y&&g!==m.value)&&C(e,"value",g,m.value,!1),"checked"in f&&void 0!==(g=f.checked)&&g!==e.checked&&C(e,"checked",g,m.checked,!1))}return e}function F(e,t,n){try{"function"==typeof e?e(t):e.current=t}catch(e){r.__e(e,n)}}function A(e,t,n){var s,i;if(r.unmount&&r.unmount(e),(s=e.ref)&&(s.current&&s.current!==e.__e||F(s,null,t)),null!=(s=e.__c)){if(s.componentWillUnmount)try{s.componentWillUnmount()}catch(e){r.__e(e,t)}s.base=s.__P=null}if(s=e.__k)for(i=0;i<s.length;i++)s[i]&&A(s[i],t,"function"!=typeof e.type);n||null==e.__e||p(e.__e),e.__e=e.__d=void 0}function $(e,t,n){return this.constructor(e,n)}function Z(e,t,n){var i,o,a;r.__&&r.__(e,t),o=(i="function"==typeof n)?null:n&&n.__k||t.__k,a=[],I(t,e=(!i&&n||t).__k=y(v,null,[e]),o||h,h,void 0!==t.ownerSVGElement,!i&&n?[n]:o?null:t.firstChild?s.call(t.childNodes):null,a,!i&&n?n:o?o.__e:t.firstChild,i),V(a,e)}function P(e,t){Z(e,t,P)}function R(e,t,n){var r,i,o,a=f({},e.props);for(o in t)"key"==o?r=t[o]:"ref"==o?i=t[o]:a[o]=t[o];return arguments.length>2&&(a.children=arguments.length>3?s.call(arguments,2):n),g(e.type,a,r||e.key,i||e.ref,null)}function W(e,t){var n={__c:t="__cC"+c++,__:e,Consumer:function(e,t){return e.children(t)},Provider:function(e){var n,s;return this.getChildContext||(n=[],(s={})[t]=this,this.getChildContext=function(){return s},this.shouldComponentUpdate=function(e){this.props.value!==e.value&&n.some(T)},this.sub=function(e){n.push(e);var t=e.componentWillUnmount;e.componentWillUnmount=function(){n.splice(n.indexOf(e),1),t&&t.call(e)}}),e.children}};return n.Provider.__=n.Consumer.contextType=n}s=d.slice,r={__e:function(e,t,n,s){for(var r,i,o;t=t.__;)if((r=t.__c)&&!r.__)try{if((i=r.constructor)&&null!=i.getDerivedStateFromError&&(r.setState(i.getDerivedStateFromError(e)),o=r.__d),null!=r.componentDidCatch&&(r.componentDidCatch(e,s||{}),o=r.__d),o)return r.__E=r}catch(t){e=t}throw e}},i=0,o=function(e){return null!=e&&void 0===e.constructor},w.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=f({},this.state),"function"==typeof e&&(e=e(f({},n),this.props)),e&&f(n,e),null!=e&&this.__v&&(t&&this.__h.push(t),T(this))},w.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),T(this))},w.prototype.render=v,a=[],l="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,k.__r=0,c=0}},t={};function n(s){if(t[s])return t[s].exports;var r=t[s]={exports:{}};return e[s](r,r.exports,n),r.exports}n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const e=n(400),t=n(114);n(197);const s=document.querySelector("#app");e.render(e.h(t.Game,null),s)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zaGlmdHkud2ViLy4vc291cmNlL0NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly9zaGlmdHkud2ViLy4vc291cmNlL0NvdW50ZG93bk1vZGFsLnRzeCIsIndlYnBhY2s6Ly9zaGlmdHkud2ViLy4vc291cmNlL0ZpbmlzaE1vZGFsLnRzeCIsIndlYnBhY2s6Ly9zaGlmdHkud2ViLy4vc291cmNlL0dhbWUudHN4Iiwid2VicGFjazovL3NoaWZ0eS53ZWIvLi9zb3VyY2UvR2FtZUNvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vc2hpZnR5LndlYi8uL3NvdXJjZS9HYW1lVGltZXIudHMiLCJ3ZWJwYWNrOi8vc2hpZnR5LndlYi8uL3NvdXJjZS9MYXVuY2hlci9MYXVuY2hlci50c3giLCJ3ZWJwYWNrOi8vc2hpZnR5LndlYi8uL3NvdXJjZS9MYXVuY2hlci9MZWFkZXJib2FyZE1vZGFsLnRzeCIsIndlYnBhY2s6Ly9zaGlmdHkud2ViLy4vc291cmNlL0xhdW5jaGVyL1NpZ251cE1vZGFsLnRzeCIsIndlYnBhY2s6Ly9zaGlmdHkud2ViLy4vc291cmNlL01vZGFsL01vZGFsLnRzeCIsIndlYnBhY2s6Ly9zaGlmdHkud2ViLy4vc291cmNlL1NoaWZ0Q291bnRlci9TaGlmdENvdW50ZXIudHN4Iiwid2VicGFjazovL3NoaWZ0eS53ZWIvLi9zb3VyY2UvU3RvcmVMZXZlbC9FeHBlcmllbmNlTW9kYWwudHN4Iiwid2VicGFjazovL3NoaWZ0eS53ZWIvLi9zb3VyY2UvU3RvcmVMZXZlbC9GYWlsTW9kYWwudHN4Iiwid2VicGFjazovL3NoaWZ0eS53ZWIvLi9zb3VyY2UvU3RvcmVMZXZlbC9TdG9yZUxldmVsLnRzeCIsIndlYnBhY2s6Ly9zaGlmdHkud2ViLy4vc291cmNlL1N0b3JlTGV2ZWwvU3RvcmVMZXZlbENvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vc2hpZnR5LndlYi8uL3NvdXJjZS9TdG9yZUxldmVsL1dpZGdldC50c3giLCJ3ZWJwYWNrOi8vc2hpZnR5LndlYi8uL3NvdXJjZS9UaW1lci9UaW1lci50c3giLCJ3ZWJwYWNrOi8vc2hpZnR5LndlYi8uL3NvdXJjZS91dGlsL2dldEFjY3VyYWN5LnRzIiwid2VicGFjazovL3NoaWZ0eS53ZWIvLi9zb3VyY2UvdXRpbC9nZXRSYW5kb21JbnRlZ2VyLnRzIiwid2VicGFjazovL3NoaWZ0eS53ZWIvLi9zb3VyY2UvdXRpbC9pc1NhZmFyaS50cyIsIndlYnBhY2s6Ly9zaGlmdHkud2ViLy4vc291cmNlL3V0aWwveGV0TG9jYWxTdG9yYWdlLnRzIiwid2VicGFjazovL3NoaWZ0eS53ZWIvLi9ub2RlX21vZHVsZXMvbHV4b24vYnVpbGQvbm9kZS9sdXhvbi5qcyIsIndlYnBhY2s6Ly9zaGlmdHkud2ViLy4vbm9kZV9tb2R1bGVzL3ByZWFjdC9kaXN0L3ByZWFjdC5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vc2hpZnR5LndlYi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zaGlmdHkud2ViL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9zaGlmdHkud2ViL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vc2hpZnR5LndlYi93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3NoaWZ0eS53ZWIvLi9zb3VyY2UvbWFpbi50c3giXSwibmFtZXMiOlsiUExBWUVSX1NUT1JBR0VfS0VZIiwiQ291bnRkb3duTW9kYWwiLCJDb21wb25lbnQiLCJyZW5kZXIiLCJNb2RhbCIsImNvbnRlbnQiLCJjbGFzcyIsInRoaXMiLCJwcm9wcyIsIm51bWJlciIsImlzT3BlbiIsIkZpbmlzaE1vZGFsIiwiaGVhZGxpbmUiLCJpbWciLCJjYXJ0Iiwic3JjIiwiYWx0IiwiaGVpZ2h0Iiwid2lkdGgiLCJjbGlja3MiLCJnZXRBY2N1cmFjeSIsInN0eWxlIiwiY2xzIiwidG9GaXhlZCIsIm9uQ2xpY2siLCJHYW1lQ29udHJvbGxlciIsInJlc2V0IiwiR2FtZSIsImNvbnN0cnVjdG9yIiwic3VwZXIiLCJpbml0Iiwic3RhdGUiLCJzZXRTdGF0ZSIsImJpbmQiLCJUaW1lciIsInVudGlsIiwiZW5kVGltZSIsIlNoaWZ0Q291bnRlciIsInJlbmRlckxldmVsIiwiY291bnRkb3duIiwic2hvd0ZpbmlzaE1vZGFsIiwibGV2ZWwiLCJOT19MRVZFTCIsIkxhdW5jaGVyIiwiU1RPUkUiLCJTdG9yZUxldmVsIiwiZ2V0U3RhdGUiLCJzdGFydFRpbWUiLCJEYXRlVGltZSIsImludmFsaWQiLCJsb2NhdGlvbiIsInJlbG9hZCIsImFzeW5jIiwibm93IiwicGx1cyIsInNlY29uZHMiLCJHYW1lVGltZXIiLCJvblRpY2siLCJzdG9wIiwic3RhcnQiLCJTdG9yZUxldmVsQ29udHJvbGxlciIsInNhdmVkUGxheWVyRGF0YSIsImdldExvY2FsU3RvcmFnZSIsInB1c2giLCJuYW1lIiwiZW1haWwiLCJ0aW1lc3RhbXAiLCJzZXRMb2NhbFN0b3JhZ2UiLCJpIiwiUHJvbWlzZSIsInJlcyIsInJlaiIsInNldFRpbWVvdXQiLCJ0aGVuIiwidGlja0NvdW50IiwidGlja0hhbmRsZXJzIiwiaXNSdW5uaW5nIiwibXVsdGlwbGllciIsInRpY2siLCJwYXVzZSIsImNsZWFyVGltZW91dCIsIm5leHRUaWNrIiwiaGFuZGxlciIsImxlbmd0aCIsImdldFRpY2tEZWxheSIsImdldFJhbmRvbUludGVnZXIiLCJmb3JFYWNoIiwiaXNMZWFkZXJib2FyZE1vZGFsT3BlbiIsImlzU2lnbnVwTW9kYWxPcGVuIiwidHlwZSIsImUiLCJocmVmIiwiU2lnbnVwTW9kYWwiLCJvbkNsb3NlIiwiTGVhZGVyYm9hcmRNb2RhbCIsInBsYXllcnMiLCJzb3J0IiwiYSIsImIiLCJyZXZlcnNlIiwiZmlsdGVyIiwicCIsImlkeCIsIm1hcCIsInBsYXllciIsIm9uU3VibWl0Iiwic2F2ZUZvcm0iLCJ2YWx1ZSIsImZvcm1OYW1lIiwicmVxdWlyZWQiLCJwbGFjZWhvbGRlciIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJmb3JtIiwidGFyZ2V0IiwiZWxlbWVudHMiLCJ5QWRqdXN0IiwieEFkanVzdCIsImNvbXBvbmVudERpZE1vdW50IiwiaXNTYWZhcmkiLCJvYnNlcnZlciIsIlBlcmZvcm1hbmNlT2JzZXJ2ZXIiLCJlbnRyeUxpc3QiLCJnZXRFbnRyaWVzIiwicmVkdWNlIiwiZW50cnkiLCJpbmRleCIsIm9ic2VydmUiLCJidWZmZXJlZCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiZGlzY29ubmVjdCIsIkV4cGVyaWVuY2VNb2RhbCIsIm9uVG91Y2hTdGFydCIsImNsZWFyRXhwZXJpZW5jZSIsImNsaWNrUmF0aW5ncyIsIkV4cGVyaWVuY2VUaGFua3NNb2RhbCIsImNsZWFyUmF0aW5nc1RoYW5rcyIsImZsZXgiLCJGYWlsTW9kYWwiLCJkb3VibGVGYWlsIiwiY2xlYXJGYWlsIiwiY2xpY2siLCJ3aWRnZXRzIiwid2lkZ2V0U3RhdGUiLCJXaWRnZXQiLCJzaG93RmFpbE1vZGFsIiwibW9kYWxBZGp1c3RYIiwibW9kYWxBZGp1c3RZIiwic2hvd0V4cGVyaWVuY2VNb2RhbCIsInNob3dFeHBlcmllbmNlVGhhbmtzTW9kYWwiLCJXaWRnZXRTdGF0dXMiLCJpbml0aWFsU3RhdGUiLCJoYXNTaG93bkV4cGVyaWVuY2VNb2RhbCIsImlzT2JqZWN0aXZlVmlzaWJsZSIsIndpZGdldCIsInN0YXR1cyIsIkVNUFRZIiwidW5sb2FkZWRXaWRnZXRzIiwidyIsImxvYWRlZCIsInNldExvYWRpbmciLCJ1cGRhdGVXaWRnZXRTdGF0ZSIsImNoYW5nZWFibGVXaWRnZXRzIiwiTE9BRElORyIsIk9CSkVDVElWRSIsIkNPTlRFTlQiLCJzdG9wUHJvcGFnYXRpb24iLCJDT01QTEVURSIsInJlbmRlcldpZGdldCIsImdyb3ciLCJnZXRSYW5kb21Db250ZW50IiwiRXJyb3IiLCJvcHRzIiwibWlsbGlzZWNvbmRzIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImlzVmFsaWQiLCJkaWZmIiwic2hpZnRUbyIsIk1hdGgiLCJtYXgiLCJjbGVhckludGVydmFsIiwidG9TdHJpbmciLCJwYWRTdGFydCIsInBhZEVuZCIsIm1pbiIsImZsb29yIiwicmFuZG9tIiwid2luZG93IiwiR2VzdHVyZUV2ZW50IiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJMdXhvbkVycm9yIiwiSW52YWxpZERhdGVUaW1lRXJyb3IiLCJyZWFzb24iLCJ0b01lc3NhZ2UiLCJJbnZhbGlkSW50ZXJ2YWxFcnJvciIsIkludmFsaWREdXJhdGlvbkVycm9yIiwiQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IiLCJJbnZhbGlkVW5pdEVycm9yIiwidW5pdCIsIkludmFsaWRBcmd1bWVudEVycm9yIiwiWm9uZUlzQWJzdHJhY3RFcnJvciIsIm4iLCJzIiwibCIsIkRBVEVfU0hPUlQiLCJ5ZWFyIiwibW9udGgiLCJkYXkiLCJEQVRFX01FRCIsIkRBVEVfTUVEX1dJVEhfV0VFS0RBWSIsIndlZWtkYXkiLCJEQVRFX0ZVTEwiLCJEQVRFX0hVR0UiLCJUSU1FX1NJTVBMRSIsImhvdXIiLCJtaW51dGUiLCJUSU1FX1dJVEhfU0VDT05EUyIsInNlY29uZCIsIlRJTUVfV0lUSF9TSE9SVF9PRkZTRVQiLCJ0aW1lWm9uZU5hbWUiLCJUSU1FX1dJVEhfTE9OR19PRkZTRVQiLCJUSU1FXzI0X1NJTVBMRSIsImhvdXJDeWNsZSIsIlRJTUVfMjRfV0lUSF9TRUNPTkRTIiwiVElNRV8yNF9XSVRIX1NIT1JUX09GRlNFVCIsIlRJTUVfMjRfV0lUSF9MT05HX09GRlNFVCIsIkRBVEVUSU1FX1NIT1JUIiwiREFURVRJTUVfU0hPUlRfV0lUSF9TRUNPTkRTIiwiREFURVRJTUVfTUVEIiwiREFURVRJTUVfTUVEX1dJVEhfU0VDT05EUyIsIkRBVEVUSU1FX01FRF9XSVRIX1dFRUtEQVkiLCJEQVRFVElNRV9GVUxMIiwiREFURVRJTUVfRlVMTF9XSVRIX1NFQ09ORFMiLCJEQVRFVElNRV9IVUdFIiwiREFURVRJTUVfSFVHRV9XSVRIX1NFQ09ORFMiLCJpc1VuZGVmaW5lZCIsIm8iLCJpc051bWJlciIsImlzSW50ZWdlciIsImhhc1JlbGF0aXZlIiwiSW50bCIsIlJlbGF0aXZlVGltZUZvcm1hdCIsImJlc3RCeSIsImFyciIsImJ5IiwiY29tcGFyZSIsImJlc3QiLCJuZXh0IiwicGFpciIsImhhc093blByb3BlcnR5Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImNhbGwiLCJpbnRlZ2VyQmV0d2VlbiIsInRoaW5nIiwiYm90dG9tIiwidG9wIiwiaW5wdXQiLCJwYWRkZWQiLCJwYXJzZUludGVnZXIiLCJzdHJpbmciLCJwYXJzZUludCIsInBhcnNlRmxvYXRpbmciLCJwYXJzZUZsb2F0IiwicGFyc2VNaWxsaXMiLCJmcmFjdGlvbiIsImYiLCJyb3VuZFRvIiwiZGlnaXRzIiwidG93YXJkWmVybyIsImZhY3RvciIsInRydW5jIiwicm91bmQiLCJpc0xlYXBZZWFyIiwiZGF5c0luWWVhciIsImRheXNJbk1vbnRoIiwibW9kTW9udGgiLCJ4Iiwib2JqVG9Mb2NhbFRTIiwiZCIsIkRhdGUiLCJVVEMiLCJtaWxsaXNlY29uZCIsInNldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJ3ZWVrc0luV2Vla1llYXIiLCJ3ZWVrWWVhciIsInAxIiwibGFzdCIsInAyIiwidW50cnVuY2F0ZVllYXIiLCJwYXJzZVpvbmVJbmZvIiwidHMiLCJvZmZzZXRGb3JtYXQiLCJsb2NhbGUiLCJ0aW1lWm9uZSIsImRhdGUiLCJpbnRsT3B0cyIsIm1vZGlmaWVkIiwicGFyc2VkIiwiRGF0ZVRpbWVGb3JtYXQiLCJmb3JtYXRUb1BhcnRzIiwiZmluZCIsIm0iLCJ0b0xvd2VyQ2FzZSIsInNpZ25lZE9mZnNldCIsIm9mZkhvdXJTdHIiLCJvZmZNaW51dGVTdHIiLCJvZmZIb3VyIiwiTnVtYmVyIiwiaXNOYU4iLCJvZmZNaW4iLCJpcyIsImFzTnVtYmVyIiwibnVtZXJpY1ZhbHVlIiwibm9ybWFsaXplT2JqZWN0Iiwibm9ybWFsaXplciIsIm5vcm1hbGl6ZWQiLCJ1IiwidiIsImZvcm1hdE9mZnNldCIsIm9mZnNldCIsImZvcm1hdCIsImhvdXJzIiwiYWJzIiwibWludXRlcyIsInNpZ24iLCJSYW5nZUVycm9yIiwidGltZU9iamVjdCIsImtleXMiLCJrIiwicGljayIsImlhbmFSZWdleCIsIm1vbnRoc0xvbmciLCJtb250aHNTaG9ydCIsIm1vbnRoc05hcnJvdyIsIm1vbnRocyIsIndlZWtkYXlzTG9uZyIsIndlZWtkYXlzU2hvcnQiLCJ3ZWVrZGF5c05hcnJvdyIsIndlZWtkYXlzIiwibWVyaWRpZW1zIiwiZXJhc0xvbmciLCJlcmFzU2hvcnQiLCJlcmFzTmFycm93IiwiZXJhcyIsInN0cmluZ2lmeVRva2VucyIsInNwbGl0cyIsInRva2VuVG9TdHJpbmciLCJ0b2tlbiIsImxpdGVyYWwiLCJ2YWwiLCJtYWNyb1Rva2VuVG9Gb3JtYXRPcHRzIiwiRCIsIkREIiwiREREIiwiRERERCIsInQiLCJ0dCIsInR0dCIsInR0dHQiLCJUIiwiVFQiLCJUVFQiLCJUVFRUIiwiZmYiLCJmZmYiLCJmZmZmIiwiRiIsIkZGIiwiRkZGIiwiRkZGRiIsIkZvcm1hdHRlciIsInN0YXRpYyIsImZtdCIsImN1cnJlbnQiLCJjdXJyZW50RnVsbCIsImJyYWNrZXRlZCIsImMiLCJjaGFyQXQiLCJmb3JtYXRPcHRzIiwibG9jIiwic3lzdGVtTG9jIiwiZm9ybWF0V2l0aFN5c3RlbURlZmF1bHQiLCJkdCIsInJlZGVmYXVsdFRvU3lzdGVtIiwiZHRGb3JtYXR0ZXIiLCJmb3JtYXREYXRlVGltZSIsImZvcm1hdERhdGVUaW1lUGFydHMiLCJyZXNvbHZlZE9wdGlvbnMiLCJudW0iLCJmb3JjZVNpbXBsZSIsInBhZFRvIiwibnVtYmVyRm9ybWF0dGVyIiwiZm9ybWF0RGF0ZVRpbWVGcm9tU3RyaW5nIiwia25vd25FbmdsaXNoIiwibGlzdGluZ01vZGUiLCJ1c2VEYXRlVGltZUZvcm1hdHRlciIsIm91dHB1dENhbGVuZGFyIiwiZXh0cmFjdCIsImlzT2Zmc2V0Rml4ZWQiLCJhbGxvd1oiLCJ6b25lIiwic3RhbmRhbG9uZSIsIm1vbnRoRm9yRGF0ZVRpbWUiLCJ3ZWVrZGF5Rm9yRGF0ZVRpbWUiLCJtYXliZU1hY3JvIiwiZXJhIiwiZXJhRm9yRGF0ZVRpbWUiLCJwYXJzZUZvcm1hdCIsIm9mZnNldE5hbWUiLCJ6b25lTmFtZSIsIm1lcmlkaWVtRm9yRGF0ZVRpbWUiLCJzbGljZSIsIndlZWtOdW1iZXIiLCJvcmRpbmFsIiwicXVhcnRlciIsImZvcm1hdER1cmF0aW9uRnJvbVN0cmluZyIsImR1ciIsInRva2VuVG9GaWVsZCIsInRva2VucyIsInJlYWxUb2tlbnMiLCJmb3VuZCIsImNvbmNhdCIsImxpbGR1ciIsIm1hcHBlZCIsImdldCIsIkludmFsaWQiLCJleHBsYW5hdGlvbiIsIlpvbmUiLCJpYW5hTmFtZSIsImlzVW5pdmVyc2FsIiwiZXF1YWxzIiwib3RoZXJab25lIiwic2luZ2xldG9uJDEiLCJTeXN0ZW1ab25lIiwiaW5zdGFuY2UiLCJnZXRUaW1lem9uZU9mZnNldCIsImR0ZkNhY2hlIiwidHlwZVRvUG9zIiwiaWFuYVpvbmVDYWNoZSIsIklBTkFab25lIiwiaXNWYWxpZFpvbmUiLCJ2YWxpZCIsIk5hTiIsImR0ZiIsImhvdXIxMiIsImFkT3JCYyIsImZvcm1hdHRlZCIsImZpbGxlZCIsInBvcyIsInBhcnRzT2Zmc2V0IiwicmVwbGFjZSIsImV4ZWMiLCJmTW9udGgiLCJmRGF5IiwiZlllYXIiLCJmYWRPckJjIiwiZkhvdXIiLCJmTWludXRlIiwiZlNlY29uZCIsImhhY2t5T2Zmc2V0IiwiYXNUUyIsIm92ZXIiLCJzaW5nbGV0b24iLCJGaXhlZE9mZnNldFpvbmUiLCJ1dGNJbnN0YW5jZSIsInIiLCJtYXRjaCIsImZpeGVkIiwiSW52YWxpZFpvbmUiLCJub3JtYWxpemVab25lIiwiZGVmYXVsdFpvbmUiLCJsb3dlcmVkIiwicGFyc2VTcGVjaWZpZXIiLCJjcmVhdGUiLCJ0aHJvd09uSW52YWxpZCIsImRlZmF1bHRMb2NhbGUiLCJkZWZhdWx0TnVtYmVyaW5nU3lzdGVtIiwiZGVmYXVsdE91dHB1dENhbGVuZGFyIiwiU2V0dGluZ3MiLCJudW1iZXJpbmdTeXN0ZW0iLCJMb2NhbGUiLCJyZXNldENhY2hlIiwiaW50bExGQ2FjaGUiLCJpbnRsRFRDYWNoZSIsImdldENhY2hlZERURiIsImxvY1N0cmluZyIsImtleSIsImludGxOdW1DYWNoZSIsImludGxSZWxDYWNoZSIsInN5c0xvY2FsZUNhY2hlIiwibGlzdFN0dWZmIiwiZGVmYXVsdE9LIiwiZW5nbGlzaEZuIiwiaW50bEZuIiwibW9kZSIsIlBvbHlOdW1iZXJGb3JtYXR0ZXIiLCJpbnRsIiwib3RoZXJPcHRzIiwidXNlR3JvdXBpbmciLCJtaW5pbXVtSW50ZWdlckRpZ2l0cyIsImluZiIsIk51bWJlckZvcm1hdCIsImdldENhY2hlZElORiIsIlBvbHlEYXRlRm9ybWF0dGVyIiwieiIsImdtdE9mZnNldCIsIm9mZnNldFoiLCJmcm9tTWlsbGlzIiwidG9KU0RhdGUiLCJQb2x5UmVsRm9ybWF0dGVyIiwiaXNFbmdsaXNoIiwicnRmIiwiYmFzZSIsImNhY2hlS2V5T3B0cyIsImdldENhY2hlZFJURiIsImNvdW50IiwibnVtZXJpYyIsIm5hcnJvdyIsInVuaXRzIiwieWVhcnMiLCJxdWFydGVycyIsIndlZWtzIiwiZGF5cyIsImxhc3RhYmxlIiwiaW5kZXhPZiIsImlzRGF5IiwiaXNJblBhc3QiLCJmbXRWYWx1ZSIsInNpbmd1bGFyIiwibGlsVW5pdHMiLCJmbXRVbml0IiwiZm9ybWF0UmVsYXRpdmVUaW1lIiwiZGVmYXVsdFRvRU4iLCJzcGVjaWZpZWRMb2NhbGUiLCJsb2NhbGVSIiwibnVtYmVyaW5nU3lzdGVtUiIsIm91dHB1dENhbGVuZGFyUiIsIm51bWJlcmluZyIsInBhcnNlZExvY2FsZSIsInBhcnNlZE51bWJlcmluZ1N5c3RlbSIsInBhcnNlZE91dHB1dENhbGVuZGFyIiwibG9jYWxlU3RyIiwidUluZGV4Iiwib3B0aW9ucyIsInNtYWxsZXIiLCJzdWJzdHJpbmciLCJjYWxlbmRhciIsInBhcnNlTG9jYWxlU3RyaW5nIiwiaW50bENvbmZpZ1N0cmluZyIsIndlZWtkYXlzQ2FjaGUiLCJtb250aHNDYWNoZSIsIm1lcmlkaWVtQ2FjaGUiLCJlcmFDYWNoZSIsImZhc3ROdW1iZXJzQ2FjaGVkIiwiZmFzdE51bWJlcnMiLCJzdGFydHNXaXRoIiwiaXNBY3R1YWxseUVuIiwiaGFzTm9XZWlyZG5lc3MiLCJjbG9uZSIsImFsdHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwicmVkZWZhdWx0VG9FTiIsImZvcm1hdFN0ciIsIm1zIiwidXRjIiwibWFwTW9udGhzIiwibWFwV2Vla2RheXMiLCJ1bmRlZmluZWQiLCJmaWVsZCIsIm1hdGNoaW5nIiwicmVsRm9ybWF0dGVyIiwibGlzdEZvcm1hdHRlciIsIkxpc3RGb3JtYXQiLCJnZXRDYWNoZWRMRiIsIm90aGVyIiwiY29tYmluZVJlZ2V4ZXMiLCJyZWdleGVzIiwiZnVsbCIsInNvdXJjZSIsIlJlZ0V4cCIsImNvbWJpbmVFeHRyYWN0b3JzIiwiZXh0cmFjdG9ycyIsIm1lcmdlZFZhbHMiLCJtZXJnZWRab25lIiwiY3Vyc29yIiwiZXgiLCJwYXR0ZXJucyIsInJlZ2V4IiwiZXh0cmFjdG9yIiwic2ltcGxlUGFyc2UiLCJyZXQiLCJvZmZzZXRSZWdleCIsImlzb1RpbWVCYXNlUmVnZXgiLCJpc29UaW1lUmVnZXgiLCJpc29UaW1lRXh0ZW5zaW9uUmVnZXgiLCJleHRyYWN0SVNPV2Vla0RhdGEiLCJleHRyYWN0SVNPT3JkaW5hbERhdGEiLCJzcWxUaW1lUmVnZXgiLCJzcWxUaW1lRXh0ZW5zaW9uUmVnZXgiLCJpbnQiLCJmYWxsYmFjayIsImV4dHJhY3RJU09UaW1lIiwiZXh0cmFjdElTT09mZnNldCIsImxvY2FsIiwiZnVsbE9mZnNldCIsImV4dHJhY3RJQU5BWm9uZSIsImlzb1RpbWVPbmx5IiwiaXNvRHVyYXRpb24iLCJleHRyYWN0SVNPRHVyYXRpb24iLCJ5ZWFyU3RyIiwibW9udGhTdHIiLCJ3ZWVrU3RyIiwiZGF5U3RyIiwiaG91clN0ciIsIm1pbnV0ZVN0ciIsInNlY29uZFN0ciIsIm1pbGxpc2Vjb25kc1N0ciIsImhhc05lZ2F0aXZlUHJlZml4IiwibmVnYXRpdmVTZWNvbmRzIiwibWF5YmVOZWdhdGUiLCJmb3JjZSIsIm9ic09mZnNldHMiLCJHTVQiLCJFRFQiLCJFU1QiLCJDRFQiLCJDU1QiLCJNRFQiLCJNU1QiLCJQRFQiLCJQU1QiLCJmcm9tU3RyaW5ncyIsIndlZWtkYXlTdHIiLCJyZXN1bHQiLCJyZmMyODIyIiwiZXh0cmFjdFJGQzI4MjIiLCJvYnNPZmZzZXQiLCJtaWxPZmZzZXQiLCJyZmMxMTIzIiwicmZjODUwIiwiYXNjaWkiLCJleHRyYWN0UkZDMTEyM09yODUwIiwiZXh0cmFjdEFTQ0lJIiwiaXNvWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCIsImlzb1dlZWtXaXRoVGltZUV4dGVuc2lvblJlZ2V4IiwiaXNvT3JkaW5hbFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXgiLCJpc29UaW1lQ29tYmluZWRSZWdleCIsImV4dHJhY3RJU09ZbWRUaW1lQW5kT2Zmc2V0IiwiZXh0cmFjdElTT1dlZWtUaW1lQW5kT2Zmc2V0IiwiZXh0cmFjdElTT09yZGluYWxEYXRlQW5kVGltZSIsImV4dHJhY3RJU09UaW1lQW5kT2Zmc2V0IiwiZXh0cmFjdElTT1RpbWVPbmx5Iiwic3FsWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCIsInNxbFRpbWVDb21iaW5lZFJlZ2V4IiwiZXh0cmFjdElTT1RpbWVPZmZzZXRBbmRJQU5BWm9uZSIsImxvd09yZGVyTWF0cml4IiwiY2FzdWFsTWF0cml4IiwiYWNjdXJhdGVNYXRyaXgiLCJkYXlzSW5ZZWFyQWNjdXJhdGUiLCJkYXlzSW5Nb250aEFjY3VyYXRlIiwib3JkZXJlZFVuaXRzJDEiLCJyZXZlcnNlVW5pdHMiLCJjbG9uZSQxIiwiY2xlYXIiLCJjb25mIiwidmFsdWVzIiwiY29udmVyc2lvbkFjY3VyYWN5IiwiRHVyYXRpb24iLCJjb252ZXJ0IiwibWF0cml4IiwiZnJvbU1hcCIsImZyb21Vbml0IiwidG9NYXAiLCJ0b1VuaXQiLCJjb252IiwicmF3IiwiYWRkZWQiLCJjZWlsIiwiYW50aVRydW5jIiwiY29uZmlnIiwiYWNjdXJhdGUiLCJpc0x1eG9uRHVyYXRpb24iLCJmcm9tT2JqZWN0Iiwibm9ybWFsaXplVW5pdCIsImR1cmF0aW9uTGlrZSIsImlzRHVyYXRpb24iLCJ0ZXh0IiwicGFyc2VJU09EdXJhdGlvbiIsInBhcnNlSVNPVGltZU9ubHkiLCJ3ZWVrIiwidG9Gb3JtYXQiLCJmbXRPcHRzIiwidG9IdW1hbiIsInVuaXREaXNwbGF5IiwibGlzdFN0eWxlIiwidG9PYmplY3QiLCJ0b0lTTyIsInRvSVNPVGltZSIsIm1pbGxpcyIsInRvTWlsbGlzIiwic3VwcHJlc3NNaWxsaXNlY29uZHMiLCJzdXBwcmVzc1NlY29uZHMiLCJpbmNsdWRlUHJlZml4Iiwic3RyIiwidG9KU09OIiwiYXMiLCJ2YWx1ZU9mIiwiZHVyYXRpb24iLCJmcm9tRHVyYXRpb25MaWtlIiwibWludXMiLCJuZWdhdGUiLCJtYXBVbml0cyIsImZuIiwic2V0IiwicmVjb25maWd1cmUiLCJub3JtYWxpemUiLCJ2YWxzIiwicHJldmlvdXMiLCJub3JtYWxpemVWYWx1ZXMiLCJidWlsdCIsImFjY3VtdWxhdGVkIiwibGFzdFVuaXQiLCJvd24iLCJhayIsImRvd24iLCJuZWdhdGVkIiwiaW52YWxpZFJlYXNvbiIsImludmFsaWRFeHBsYW5hdGlvbiIsInYxIiwidjIiLCJJTlZBTElEJDEiLCJJbnRlcnZhbCIsImVuZCIsImlzTHV4b25JbnRlcnZhbCIsImJ1aWx0U3RhcnQiLCJmcmllbmRseURhdGVUaW1lIiwiYnVpbHRFbmQiLCJ2YWxpZGF0ZUVycm9yIiwidmFsaWRhdGVTdGFydEVuZCIsImZyb21EYXRlVGltZXMiLCJzcGxpdCIsInN0YXJ0SXNWYWxpZCIsImVuZElzVmFsaWQiLCJmcm9tSVNPIiwiYWZ0ZXIiLCJiZWZvcmUiLCJ0b0R1cmF0aW9uIiwic3RhcnRPZiIsImhhc1NhbWUiLCJpc0VtcHR5IiwiaXNBZnRlciIsImRhdGVUaW1lIiwiaXNCZWZvcmUiLCJjb250YWlucyIsInNwbGl0QXQiLCJkYXRlVGltZXMiLCJzb3J0ZWQiLCJyZXN1bHRzIiwic3BsaXRCeSIsImRpdmlkZUVxdWFsbHkiLCJudW1iZXJPZlBhcnRzIiwib3ZlcmxhcHMiLCJhYnV0c1N0YXJ0IiwiYWJ1dHNFbmQiLCJlbmd1bGZzIiwiaW50ZXJzZWN0aW9uIiwidW5pb24iLCJpbnRlcnZhbHMiLCJmaW5hbCIsInNvZmFyIiwiaXRlbSIsImN1cnJlbnRDb3VudCIsImVuZHMiLCJ0aW1lIiwiQXJyYXkiLCJtZXJnZSIsImRpZmZlcmVuY2UiLCJ4b3IiLCJ0b0lTT0RhdGUiLCJkYXRlRm9ybWF0Iiwic2VwYXJhdG9yIiwibWFwRW5kcG9pbnRzIiwibWFwRm4iLCJJbmZvIiwicHJvdG8iLCJzZXRab25lIiwibG9jT2JqIiwicmVsYXRpdmUiLCJkYXlEaWZmIiwiZWFybGllciIsImxhdGVyIiwidXRjRGF5U3RhcnQiLCJ0b1VUQyIsImtlZXBMb2NhbFRpbWUiLCJudW1iZXJpbmdTeXN0ZW1zIiwiYXJhYiIsImFyYWJleHQiLCJiYWxpIiwiYmVuZyIsImRldmEiLCJmdWxsd2lkZSIsImd1anIiLCJoYW5pZGVjIiwia2htciIsImtuZGEiLCJsYW9vIiwibGltYiIsIm1seW0iLCJtb25nIiwibXltciIsIm9yeWEiLCJ0YW1sZGVjIiwidGVsdSIsInRoYWkiLCJ0aWJ0IiwibGF0biIsIm51bWJlcmluZ1N5c3RlbXNVVEYxNiIsImhhbmlkZWNDaGFycyIsImRpZ2l0UmVnZXgiLCJhcHBlbmQiLCJpbnRVbml0IiwicG9zdCIsImRlc2VyIiwiY29kZSIsImNoYXJDb2RlQXQiLCJzZWFyY2giLCJwYXJzZURpZ2l0cyIsInNwYWNlT3JOQlNQIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwic3BhY2VPck5CU1BSZWdFeHAiLCJmaXhMaXN0UmVnZXgiLCJzdHJpcEluc2Vuc2l0aXZpdGllcyIsIm9uZU9mIiwic3RyaW5ncyIsInN0YXJ0SW5kZXgiLCJqb2luIiwiZmluZEluZGV4IiwiZ3JvdXBzIiwiaCIsInNpbXBsZSIsInBhcnRUeXBlU3R5bGVUb1Rva2VuVmFsIiwic2hvcnQiLCJsb25nIiwiZGF5cGVyaW9kIiwiZGF5UGVyaW9kIiwiZHVtbXlEYXRlVGltZUNhY2hlIiwiZXhwbGFpbkZyb21Ub2tlbnMiLCJmb3JtYXRPcHRzVG9Ub2tlbnMiLCJpbmNsdWRlcyIsIm1heWJlRXhwYW5kTWFjcm9Ub2tlbiIsImV4cGFuZE1hY3JvVG9rZW5zIiwib25lIiwidHdvIiwidGhyZWUiLCJmb3VyIiwic2l4Iiwib25lT3JUd28iLCJvbmVUb1RocmVlIiwib25lVG9TaXgiLCJvbmVUb05pbmUiLCJ0d29Ub0ZvdXIiLCJmb3VyVG9TaXgiLCJ1bml0YXRlIiwidW5pdEZvclRva2VuIiwiZGlzcXVhbGlmeWluZ1VuaXQiLCJyZWdleFN0cmluZyIsImhhbmRsZXJzIiwiYnVpbGRSZWdleCIsInJhd01hdGNoZXMiLCJtYXRjaGVzIiwiYWxsIiwibWF0Y2hJbmRleCIsInNwZWNpZmljT2Zmc2V0IiwiWiIsInEiLCJNIiwiRyIsInkiLCJTIiwidG9GaWVsZCIsImRhdGVUaW1lRnJvbU1hdGNoZXMiLCJwYXJ0IiwidG9rZW5Gb3JQYXJ0Iiwibm9uTGVhcExhZGRlciIsImxlYXBMYWRkZXIiLCJ1bml0T3V0T2ZSYW5nZSIsImRheU9mV2VlayIsImpzIiwiZ2V0VVRDRGF5IiwiY29tcHV0ZU9yZGluYWwiLCJ1bmNvbXB1dGVPcmRpbmFsIiwidGFibGUiLCJtb250aDAiLCJncmVnb3JpYW5Ub1dlZWsiLCJncmVnT2JqIiwid2Vla1RvR3JlZ29yaWFuIiwid2Vla0RhdGEiLCJ3ZWVrZGF5T2ZKYW40IiwieWVhckluRGF5cyIsImdyZWdvcmlhblRvT3JkaW5hbCIsImdyZWdEYXRhIiwib3JkaW5hbFRvR3JlZ29yaWFuIiwib3JkaW5hbERhdGEiLCJoYXNJbnZhbGlkR3JlZ29yaWFuRGF0YSIsInZhbGlkWWVhciIsInZhbGlkTW9udGgiLCJ2YWxpZERheSIsImhhc0ludmFsaWRUaW1lRGF0YSIsInZhbGlkSG91ciIsInZhbGlkTWludXRlIiwidmFsaWRTZWNvbmQiLCJ2YWxpZE1pbGxpc2Vjb25kIiwiSU5WQUxJRCIsIk1BWF9EQVRFIiwidW5zdXBwb3J0ZWRab25lIiwicG9zc2libHlDYWNoZWRXZWVrRGF0YSIsImluc3QiLCJvbGQiLCJmaXhPZmZzZXQiLCJsb2NhbFRTIiwidHoiLCJ1dGNHdWVzcyIsIm8yIiwibzMiLCJ0c1RvT2JqIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsIm9ialRvVFMiLCJhZGp1c3RUaW1lIiwib1ByZSIsIm1pbGxpc1RvQWRkIiwicGFyc2VEYXRhVG9EYXRlVGltZSIsInBhcnNlZFpvbmUiLCJpbnRlcnByZXRhdGlvblpvbmUiLCJ0b1RlY2hGb3JtYXQiLCJleHRlbmRlZCIsImxvbmdGb3JtYXQiLCJpbmNsdWRlT2Zmc2V0IiwiZXh0ZW5kZWRab25lIiwiZGVmYXVsdFVuaXRWYWx1ZXMiLCJkZWZhdWx0V2Vla1VuaXRWYWx1ZXMiLCJkZWZhdWx0T3JkaW5hbFVuaXRWYWx1ZXMiLCJvcmRlcmVkVW5pdHMiLCJvcmRlcmVkV2Vla1VuaXRzIiwib3JkZXJlZE9yZGluYWxVbml0cyIsIndlZWtudW1iZXIiLCJ3ZWVrc251bWJlciIsIndlZWtudW1iZXJzIiwid2Vla3llYXIiLCJ3ZWVreWVhcnMiLCJxdWlja0RUIiwidHNOb3ciLCJvZmZzZXRQcm92aXMiLCJkaWZmUmVsYXRpdmUiLCJjYWxlbmRhcnkiLCJkaWZmZXIiLCJsYXN0T3B0cyIsImFyZ0xpc3QiLCJhcmdzIiwiZnJvbSIsIm90IiwiX3pvbmUiLCJpc0x1eG9uRGF0ZVRpbWUiLCJhcmd1bWVudHMiLCJ6b25lVG9Vc2UiLCJjb250YWluc09yZGluYWwiLCJjb250YWluc0dyZWdvclllYXIiLCJjb250YWluc0dyZWdvck1EIiwiY29udGFpbnNHcmVnb3IiLCJkZWZpbml0ZVdlZWtEZWYiLCJ1c2VXZWVrRGF0YSIsImRlZmF1bHRWYWx1ZXMiLCJvYmpOb3ciLCJmb3VuZEZpcnN0IiwiaGlnaGVyT3JkZXJJbnZhbGlkIiwidmFsaWRXZWVrIiwidmFsaWRXZWVrZGF5IiwiaGFzSW52YWxpZFdlZWtEYXRhIiwidmFsaWRPcmRpbmFsIiwiaGFzSW52YWxpZE9yZGluYWxEYXRhIiwiZ3JlZ29yaWFuIiwidHNGaW5hbCIsIm9mZnNldEZpbmFsIiwicGFyc2VJU09EYXRlIiwidHJpbSIsInByZXByb2Nlc3NSRkMyODIyIiwicGFyc2VSRkMyODIyRGF0ZSIsInBhcnNlSFRUUERhdGUiLCJsb2NhbGVUb1VzZSIsImZyb21PcHRzIiwicGFyc2VGcm9tVG9rZW5zIiwiZnJvbUZvcm1hdCIsInBhcnNlU1FMIiwibG9jYWxlT3B0cyIsInRva2VuTGlzdCIsIm1vbnRoU2hvcnQiLCJtb250aExvbmciLCJ3ZWVrZGF5U2hvcnQiLCJ3ZWVrZGF5TG9uZyIsIm9mZnNldE5hbWVTaG9ydCIsIm9mZnNldE5hbWVMb25nIiwiaXNJbkRTVCIsImlzSW5MZWFwWWVhciIsInJlc29sdmVkTG9jYWxlT3B0aW9ucyIsInRvTG9jYWwiLCJrZWVwQ2FsZW5kYXJUaW1lIiwibmV3VFMiLCJvZmZzZXRHdWVzcyIsImFzT2JqIiwic2V0TG9jYWxlIiwic2V0dGluZ1dlZWtTdHVmZiIsIm1peGVkIiwibm9ybWFsaXplZFVuaXQiLCJlbmRPZiIsInRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVQYXJ0cyIsImV4dCIsInRvSVNPV2Vla0RhdGUiLCJ0b1JGQzI4MjIiLCJ0b0hUVFAiLCJ0b1NRTERhdGUiLCJ0b1NRTFRpbWUiLCJpbmNsdWRlWm9uZSIsImluY2x1ZGVPZmZzZXRTcGFjZSIsInRvU1FMIiwidG9TZWNvbmRzIiwidG9Vbml4SW50ZWdlciIsInRvQlNPTiIsImluY2x1ZGVDb25maWciLCJvdGhlckRhdGVUaW1lIiwiZHVyT3B0cyIsImlzQXJyYXkiLCJvdGhlcklzTGF0ZXIiLCJkaWZmZWQiLCJoaWdoV2F0ZXIiLCJsb3dlc3RPcmRlciIsImRpZmZlcnMiLCJkZWx0YSIsImhpZ2hPcmRlckRpZmZzIiwicmVtYWluaW5nTWlsbGlzIiwibG93ZXJPcmRlclVuaXRzIiwiZGlmZk5vdyIsImlucHV0TXMiLCJhZGp1c3RlZFRvWm9uZSIsInRvUmVsYXRpdmUiLCJwYWRkaW5nIiwidG9SZWxhdGl2ZUNhbGVuZGFyIiwiZXZlcnkiLCJpc0RhdGVUaW1lIiwiZnJvbUZvcm1hdEV4cGxhaW4iLCJkYXRlVGltZWlzaCIsImZyb21KU0RhdGUiLCJWRVJTSU9OIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiY2hpbGRyZW4iLCJkZWZhdWx0UHJvcHMiLCJyZWYiLCJfX2siLCJfXyIsIl9fYiIsIl9fZSIsIl9fZCIsIl9fYyIsIl9faCIsIl9fdiIsInZub2RlIiwiXyIsImNvbnRleHQiLCJnIiwiX19yIiwiZGVib3VuY2VSZW5kZXJpbmciLCJzb21lIiwiX19QIiwiaiIsIl9fbiIsIm93bmVyU1ZHRWxlbWVudCIsIkEiLCJQIiwiTiIsImFwcGVuZENoaWxkIiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCIkIiwic2V0UHJvcGVydHkiLCJ0ZXN0IiwiSCIsImNzc1RleHQiLCJhZGRFdmVudExpc3RlbmVyIiwiSSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJDIiwiY29udGV4dFR5cGUiLCJfX0UiLCJPIiwic3ViIiwiX19zIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJnZXRDaGlsZENvbnRleHQiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIkwiLCJsb2NhbE5hbWUiLCJub2RlVHlwZSIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVFbGVtZW50IiwiZGF0YSIsImNoaWxkTm9kZXMiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImF0dHJpYnV0ZXMiLCJfX2h0bWwiLCJpbm5lckhUTUwiLCJjaGVja2VkIiwidW5tb3VudCIsImZpcnN0Q2hpbGQiLCJCIiwiQ29uc3VtZXIiLCJQcm92aWRlciIsInNwbGljZSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImNvbXBvbmVudERpZENhdGNoIiwiZm9yY2VVcGRhdGUiLCJyZXNvbHZlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZmluaXRpb24iLCJlbnVtZXJhYmxlIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJST09UX0VMRU1FTlQiLCJxdWVyeVNlbGVjdG9yIl0sIm1hcHBpbmdzIjoic0ZBQWEsRUFBQUEsbUJBQXFCLGtCLCtEQ0FsQyxlQUNBLFNBTUEsTUFBYUMsVUFBdUIsRUFBQUMsVUFFbENDLFNBQ0UsT0FDRSxJQUFDLEVBQUFDLE1BQUssQ0FBQ0MsUUFDTCxXQUFLQyxNQUFNLG9DQUNULGNBQUtDLEtBQUtDLE1BQU1DLFNBRWxCQyxPQUFRSCxLQUFLQyxNQUFNRSxVQVIzQixvQiwrRENQQSxlQUNBLFNBQ0EsU0FDQSxTQVFBLE1BQWFDLFVBQW9CLEVBQUFULFVBRS9CQyxTQUNFLElBQUlTLEVBQVVDLEVBU2QsT0FSSU4sS0FBS0MsTUFBTU0sS0FBTyxHQUNwQkYsRUFBVyxxQkFDWEMsRUFBTSxxQ0FHTkQsRUFBVyxzQkFDWEMsRUFBTSxtQ0FHTixJQUFDLEVBQUFULE1BQUssQ0FBQ0MsUUFDTCxXQUFLQyxNQUFNLDBEQUNULGNBQUtNLEdBQ0wsV0FBS04sTUFBTSxnQkFDVCxXQUFLUyxJQUFLRixFQUFLRyxJQUFJLFFBQVFDLE9BQU8sTUFBTUMsTUFBTSxT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QUF5QkUsR0FDM0IsT0FBT0YsRUFBeUJFLEdBQVV4N0IsUUFHM0MsSUFBSXk3QixFQUFTSCxFQUF5QkUsR0FBWSxDQUdqRHg3QixRQUFTLElBT1YsT0FIQTA3QixFQUFvQkYsR0FBVUMsRUFBUUEsRUFBT3o3QixRQUFTdTdCLEdBRy9DRSxFQUFPejdCLFFDbkJmdTdCLEVBQW9CNTFCLEVBQUksQ0FBQzNGLEVBQVMyN0IsS0FDakMsSUFBSSxJQUFJL29CLEtBQU8rb0IsRUFDWEosRUFBb0J4NEIsRUFBRTQ0QixFQUFZL29CLEtBQVMyb0IsRUFBb0J4NEIsRUFBRS9DLEVBQVM0UyxJQUM1RTlTLE9BQU9DLGVBQWVDLEVBQVM0UyxFQUFLLENBQUVncEIsWUFBWSxFQUFNOXNCLElBQUs2c0IsRUFBVy9vQixNQ0ozRTJvQixFQUFvQng0QixFQUFJLENBQUNjLEVBQUtDLElBQVVoRSxPQUFPaUUsVUFBVUgsZUFBZUksS0FBS0gsRUFBS0MsR0NDbEZ5M0IsRUFBb0JocUIsRUFBS3ZSLElBQ0gsb0JBQVg2N0IsUUFBMEJBLE9BQU9DLGFBQzFDaDhCLE9BQU9DLGVBQWVDLEVBQVM2N0IsT0FBT0MsWUFBYSxDQUFFemhDLE1BQU8sV0FFN0R5RixPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRTNGLE9BQU8sSyxNQ0x2RCxlQUNBLFNBQ0EsT0FFQSxNQUFNMGhDLEVBQWU5QixTQUFTK0IsY0FBYyxRQUU1QyxFQUFBbm9DLE9BQU8sSUFBQyxFQUFBd0IsS0FBSSxNQUFLMG1DLEkiLCJmaWxlIjoibWFpbi4yNDg3ZTNmMmQ2M2JkOTU4Y2QwYi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBQTEFZRVJfU1RPUkFHRV9LRVkgPSAncm1fcGxheWVyX2RhdGEnOyIsImltcG9ydCB7IGgsIENvbXBvbmVudCB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IE1vZGFsLCBNb2RhbFByb3BzIH0gZnJvbSBcIi4vTW9kYWwvTW9kYWxcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDb3VudGRvd25Nb2RhbFByb3BzIGV4dGVuZHMgTW9kYWxQcm9wcyB7XG4gIG51bWJlcjogbnVtYmVyXG59XG5cbmV4cG9ydCBjbGFzcyBDb3VudGRvd25Nb2RhbCBleHRlbmRzIENvbXBvbmVudDxDb3VudGRvd25Nb2RhbFByb3BzLCBhbnk+IHtcblxuICByZW5kZXIoKTogaC5KU1guRWxlbWVudCB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxNb2RhbCBjb250ZW50PXtcbiAgICAgICAgPGRpdiBjbGFzcz1cImNvdW50ZG93bi1tb2RhbCBmbGV4IGZsZXgtY29sdW1uXCI+XG4gICAgICAgICAgPGgyPnt0aGlzLnByb3BzLm51bWJlcn08L2gyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIH0gaXNPcGVuPXt0aGlzLnByb3BzLmlzT3Blbn0gLz5cbiAgICApO1xuICB9XG59IiwiaW1wb3J0IHsgaCwgQ29tcG9uZW50IH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IHsgR2FtZUNvbnRyb2xsZXIsIGxldmVsIH0gZnJvbSBcIi4vR2FtZUNvbnRyb2xsZXJcIjtcbmltcG9ydCB7IE1vZGFsLCBNb2RhbFByb3BzIH0gZnJvbSBcIi4vTW9kYWwvTW9kYWxcIjtcbmltcG9ydCB7IGdldEFjY3VyYWN5IH0gZnJvbSBcIi4vdXRpbC9nZXRBY2N1cmFjeVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpbmlzaE1vZGFsUHJvcHMgZXh0ZW5kcyBNb2RhbFByb3BzIHtcbiAgY2FydDogbnVtYmVyLFxuICBjbGlja3M6IG51bWJlclxuICBjbHM6IG51bWJlclxufVxuXG5leHBvcnQgY2xhc3MgRmluaXNoTW9kYWwgZXh0ZW5kcyBDb21wb25lbnQ8RmluaXNoTW9kYWxQcm9wcywgYW55PiB7XG5cbiAgcmVuZGVyKCk6IGguSlNYLkVsZW1lbnQge1xuICAgIGxldCBoZWFkbGluZSwgaW1nO1xuICAgIGlmICh0aGlzLnByb3BzLmNhcnQgPiAwKSB7XG4gICAgICBoZWFkbGluZSA9IFwiWW91IEdvdCB0aGUgRGVhbHMhXCI7XG4gICAgICBpbWcgPSBcIi9hc3NldHMvaW1hZ2VzL2NsYXBfNTAwX2FwbmcucG5nXCI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaGVhZGxpbmUgPSBcIllvdSBMb3N0IHRoZSBEZWFscyFcIjtcbiAgICAgIGltZyA9IFwiL2Fzc2V0cy9pbWFnZXMvc29iXzUwMF9hcG5nLnBuZ1wiO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPE1vZGFsIGNvbnRlbnQ9e1xuICAgICAgICA8ZGl2IGNsYXNzPVwiZmluaXNoLW1vZGFsIGZsZXggZmxleC1jb2x1bW4gYWxpZ24tY2VudGVyIHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGgyPntoZWFkbGluZX08L2gyPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbGx1c3RyYXRpb25cIj5cbiAgICAgICAgICAgIDxpbWcgc3JjPXtpbWd9IGFsdD1cIlNsb3RoXCIgaGVpZ2h0PVwiNTAwXCIgd2lkdGg9XCI1MDBcIiAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxwPlxuICAgICAgICAgICAgWW91IGdvdCA8c3Ryb25nPnt0aGlzLnByb3BzLmNhcnR9PC9zdHJvbmc+IGRlYWxzIHdpdGggPHN0cm9uZz57dGhpcy5wcm9wcy5jbGlja3N9PC9zdHJvbmc+IGNsaWNrcyAoe2dldEFjY3VyYWN5KHRoaXMucHJvcHMuY2FydCwgdGhpcy5wcm9wcy5jbGlja3MpfSkuPGJyLz5cbiAgICAgICAgICAgIFRoZSBwYWdlIHNoaWZ0ZWQgPHN0cm9uZyBzdHlsZT1cImNvbG9yOnJlZFwiPnt0aGlzLnByb3BzLmNscy50b0ZpeGVkKDQpfTwvc3Ryb25nPiB3aGlsZSBsb2FkaW5nLjxici8+XG4gICAgICAgICAgICBUaGF0J3MgcmVhbGx5IGZydXN0cmF0aW5nLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3RhIGZsZXggZmxleC1jb2x1bW4gYWxpZ24tY2VudGVyIHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgRGlzY292ZXIgaG93IHlvdXIgd2Vic2l0ZSBzaGlmdHMgYW5kIHlvdXIgcmVhbC11c2VyIGV4cGVyaWVuY2Ugd2l0aCA8c3Ryb25nPlJlcXVlc3QgTWV0cmljczwvc3Ryb25nPi5cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2dvXCI+XG4gICAgICAgICAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvcmVxdWVzdF9tZXRyaWNzX2xvZ28uc3ZnXCIgYWx0PVwiUmVxdWVzdCBNZXRyaWNzXCIgd2lkdGg9XCIzMDBcIiBoZWlnaHQ9XCIxMDJcIiAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbHMgZmxleCBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tYmx1ZVwiIG9uQ2xpY2s9eygpID0+IEdhbWVDb250cm9sbGVyLnJlc2V0KCl9PlN0YXJ0IE92ZXI8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICB9IGlzT3Blbj17dGhpcy5wcm9wcy5pc09wZW59IC8+XG4gICAgKTtcbiAgfVxufSIsImltcG9ydCB7IGgsIENvbXBvbmVudCB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IEdhbWVDb250cm9sbGVyLCBHYW1lU3RhdGUsIGxldmVsIH0gZnJvbSBcIi4vR2FtZUNvbnRyb2xsZXJcIjtcbmltcG9ydCB7IFN0b3JlTGV2ZWwgfSBmcm9tIFwiLi9TdG9yZUxldmVsL1N0b3JlTGV2ZWxcIjtcbmltcG9ydCB7IFRpbWVyIH0gZnJvbSBcIi4vVGltZXIvVGltZXJcIjtcbmltcG9ydCBcIi4vR2FtZS5zY3NzXCI7XG5pbXBvcnQgeyBHYW1lVGltZXIgfSBmcm9tIFwiLi9HYW1lVGltZXJcIjtcbmltcG9ydCB7IFNoaWZ0Q291bnRlciB9IGZyb20gXCIuL1NoaWZ0Q291bnRlci9TaGlmdENvdW50ZXJcIjtcbmltcG9ydCB7IExhdW5jaGVyIH0gZnJvbSBcIi4vTGF1bmNoZXIvTGF1bmNoZXJcIjtcbmltcG9ydCB7IENvdW50ZG93bk1vZGFsIH0gZnJvbSBcIi4vQ291bnRkb3duTW9kYWxcIjtcbmltcG9ydCB7IEZpbmlzaE1vZGFsIH0gZnJvbSBcIi4vRmluaXNoTW9kYWxcIjtcblxuXG5leHBvcnQgY2xhc3MgR2FtZSBleHRlbmRzIENvbXBvbmVudDxhbnksIEdhbWVTdGF0ZT4ge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBHYW1lQ29udHJvbGxlci5pbml0KCgpID0+IHRoaXMuc3RhdGUsIHRoaXMuc2V0U3RhdGUuYmluZCh0aGlzKSk7XG4gIH1cblxuICByZW5kZXIoKTogaC5KU1guRWxlbWVudCB7XG4gICAgcmV0dXJuKFxuICAgICAgPGRpdiBjbGFzcz1cImdhbWVcIj5cbiAgICAgICAgPGhlYWRlcj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiaGVhZGVyLWJveFwiPlxuICAgICAgICAgICAgPGgxPlNoaWZ0eS5zaXRlPC9oMT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb250cm9sc1wiPlxuICAgICAgICAgICAgICA8VGltZXIgdW50aWw9eyB0aGlzLnN0YXRlLmVuZFRpbWUgfSAvPlxuICAgICAgICAgICAgICA8U2hpZnRDb3VudGVyIC8+XG4gICAgICAgICAgICAgIHsvKiA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IEdhbWVUaW1lci5wYXVzZSgpIH0+UGF1c2U8L2J1dHRvbj4gKi99XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9oZWFkZXI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJsZXZlbC13cmFwXCI+XG4gICAgICAgICAgeyB0aGlzLnJlbmRlckxldmVsKCkgfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPENvdW50ZG93bk1vZGFsIGlzT3Blbj17ISF0aGlzLnN0YXRlLmNvdW50ZG93bn0gbnVtYmVyPXt0aGlzLnN0YXRlLmNvdW50ZG93bn0gLz5cbiAgICAgICAgPEZpbmlzaE1vZGFsIGlzT3Blbj17dGhpcy5zdGF0ZS5zaG93RmluaXNoTW9kYWx9IGNhcnQ9e3RoaXMuc3RhdGUuY2FydH0gY2xpY2tzPXt0aGlzLnN0YXRlLmNsaWNrc30gY2xzPXtHYW1lQ29udHJvbGxlci5jbHN9IC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyTGV2ZWwoKSA6IGguSlNYLkVsZW1lbnQge1xuICAgIGlmICh0aGlzLnN0YXRlLmxldmVsID09PSBsZXZlbC5OT19MRVZFTCkge1xuICAgICAgcmV0dXJuICg8TGF1bmNoZXIgLz4pXG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMuc3RhdGUubGV2ZWwgPT09IGxldmVsLlNUT1JFKSB7XG4gICAgICByZXR1cm4gKDxTdG9yZUxldmVsIC8+KTtcbiAgICB9XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tIFwibHV4b25cIjtcbmltcG9ydCB7IFBMQVlFUl9TVE9SQUdFX0tFWSB9IGZyb20gXCIuL0NvbnN0YW50c1wiO1xuaW1wb3J0IHsgR2FtZVRpbWVyIH0gZnJvbSBcIi4vR2FtZVRpbWVyXCI7XG5pbXBvcnQgeyBTdG9yZUxldmVsQ29udHJvbGxlciB9IGZyb20gXCIuL1N0b3JlTGV2ZWwvU3RvcmVMZXZlbENvbnRyb2xsZXJcIjtcbmltcG9ydCB7IGdldExvY2FsU3RvcmFnZSwgc2V0TG9jYWxTdG9yYWdlIH0gZnJvbSBcIi4vdXRpbC94ZXRMb2NhbFN0b3JhZ2VcIjtcblxuY29uc3QgR0FNRV9MSU1JVF9TRUNPTkRTID0gMzA7XG5jb25zdCBHQU1FX0NPVU5URE9XTiA9IDU7XG5cbmV4cG9ydCBlbnVtIGxldmVsIHtcbiAgTk9fTEVWRUwsXG4gIFNUT1JFXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2FtZVN0YXRlIHtcbiAgY291bnRkb3duOiBudW1iZXIsXG4gIGxldmVsOiBsZXZlbCxcbiAgc3RhcnRUaW1lOiBEYXRlVGltZSxcbiAgZW5kVGltZTogRGF0ZVRpbWUsXG4gIHNob3dGaW5pc2hNb2RhbDogYm9vbGVhblxuICBjYXJ0OiBudW1iZXIsXG4gIGNsaWNrczogbnVtYmVyLFxuICBuYW1lOiBzdHJpbmcsXG4gIGVtYWlsOiBzdHJpbmcsXG4gIHRpbWVzdGFtcDogRGF0ZVRpbWVcbn1cblxuY2xhc3MgX0dhbWVDb250cm9sbGVyIHtcblxuICBnZXRTdGF0ZTogKCkgPT4gR2FtZVN0YXRlO1xuICBzZXRTdGF0ZTogKHN0YXRlOiBhbnkpID0+IHZvaWQ7XG4gIGNsczogbnVtYmVyID0gMDtcblxuICBpbml0KGdldFN0YXRlOiAoKSA9PiBHYW1lU3RhdGUsIHNldFN0YXRlOiAoc3RhdGU6IGFueSkgPT4gdm9pZCkge1xuXG4gICAgdGhpcy5nZXRTdGF0ZSA9IGdldFN0YXRlO1xuICAgIHRoaXMuc2V0U3RhdGUgPSBzZXRTdGF0ZTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY2FydDogMCxcbiAgICAgIGNsaWNrczogMCxcbiAgICAgIGxldmVsOiBsZXZlbC5OT19MRVZFTCxcbiAgICAgIHN0YXJ0VGltZTogRGF0ZVRpbWUuaW52YWxpZChcImluaXRpYWxcIiksXG4gICAgICBlbmRUaW1lOiBEYXRlVGltZS5pbnZhbGlkKFwiaW5pdGlhbFwiKSxcbiAgICAgIHNob3dGaW5pc2hNb2RhbDogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICB9XG5cbiAgYXN5bmMgc3RhcnQobGV2ZWw6IGxldmVsKSB7XG5cbiAgICBhd2FpdCB0aGlzLmNvdW50ZG93bihHQU1FX0NPVU5URE9XTik7XG5cbiAgICBsZXQgbm93ID0gRGF0ZVRpbWUubm93KCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBsZXZlbDogbGV2ZWwsXG4gICAgICBzdGFydFRpbWU6IG5vdyxcbiAgICAgIGVuZFRpbWU6IG5vdy5wbHVzKHsgc2Vjb25kczogR0FNRV9MSU1JVF9TRUNPTkRTIH0pXG4gICAgfSk7XG4gICAgR2FtZVRpbWVyLm9uVGljaygoKSA9PiB7XG4gICAgICBsZXQgc3RhdGUgPSB0aGlzLmdldFN0YXRlKCk7XG4gICAgICBpZiAoRGF0ZVRpbWUubm93KCkgPiBzdGF0ZS5lbmRUaW1lKSB7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgfVxuICAgIH0pXG4gICAgR2FtZVRpbWVyLnN0YXJ0KCk7XG4gIH1cblxuICBzdG9wKCkge1xuICAgIEdhbWVUaW1lci5zdG9wKCk7XG5cbiAgICBsZXQgY2FydCA9IFN0b3JlTGV2ZWxDb250cm9sbGVyLmdldFN0YXRlKCkuY2FydDtcbiAgICBsZXQgY2xpY2tzID0gU3RvcmVMZXZlbENvbnRyb2xsZXIuZ2V0U3RhdGUoKS5jbGlja3M7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHN0YXJ0VGltZTogRGF0ZVRpbWUuaW52YWxpZChcImluaXRpYWxcIiksXG4gICAgICBlbmRUaW1lOiBEYXRlVGltZS5pbnZhbGlkKFwiaW5pdGlhbFwiKSxcbiAgICAgIHNob3dGaW5pc2hNb2RhbDogdHJ1ZSxcbiAgICAgIGNhcnQsXG4gICAgICBjbGlja3NcbiAgICB9KTtcblxuICAgIGxldCBzdGF0ZSA9IHRoaXMuZ2V0U3RhdGUoKTtcblxuICAgIGxldCBzYXZlZFBsYXllckRhdGEgPSBnZXRMb2NhbFN0b3JhZ2UoUExBWUVSX1NUT1JBR0VfS0VZKSB8fCBbXTtcbiAgICBzYXZlZFBsYXllckRhdGEucHVzaCh7XG4gICAgICBuYW1lOiBzdGF0ZS5uYW1lLFxuICAgICAgZW1haWw6IHN0YXRlLmVtYWlsLFxuICAgICAgY2FydDogY2FydCxcbiAgICAgIGNsaWNrczogY2xpY2tzLFxuICAgICAgdGltZXN0YW1wOiBzdGF0ZS50aW1lc3RhbXBcbiAgICB9KTtcbiAgICBzZXRMb2NhbFN0b3JhZ2UoUExBWUVSX1NUT1JBR0VfS0VZLCBzYXZlZFBsYXllckRhdGEpO1xuICB9XG5cbiAgcHJpdmF0ZSBjb3VudGRvd24oaSA6IG51bWJlcikgOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtjb3VudGRvd246IGl9KTtcbiAgICAgIGlmIChpIDw9IDApIHtcbiAgICAgICAgcmVzKCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5jb3VudGRvd24oaSAtIDEpLnRoZW4ocmVzKTtcbiAgICAgICAgfSwgMV8wMDApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cblxuXG5cbmV4cG9ydCBjb25zdCBHYW1lQ29udHJvbGxlciA9IG5ldyBfR2FtZUNvbnRyb2xsZXIoKTsiLCJpbXBvcnQgeyBnZXRSYW5kb21JbnRlZ2VyIH0gZnJvbSBcIi4vdXRpbC9nZXRSYW5kb21JbnRlZ2VyXCI7XG5cbmNsYXNzIF9HYW1lVGltZXIge1xuXG4gIHByaXZhdGUgdGlja0NvdW50OiBudW1iZXIgPSAwO1xuICBwcml2YXRlIHRpY2tIYW5kbGVyczogQXJyYXk8KHRpY2s6IG51bWJlcikgPT4gdm9pZD4gPSBbXTtcbiAgcHJpdmF0ZSBuZXh0VGljazogTm9kZUpTLlRpbWVyO1xuICBwcml2YXRlIGlzUnVubmluZzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHB1YmxpYyBtdWx0aXBsaWVyOiBudW1iZXIgPSAwO1xuXG4gIHN0YXJ0KCkge1xuICAgIHRoaXMuaXNSdW5uaW5nID0gdHJ1ZTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudGljaygpKTtcbiAgfVxuXG4gIHBhdXNlKCkge1xuICAgIHRoaXMuaXNSdW5uaW5nID0gZmFsc2U7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMubmV4dFRpY2spO1xuICB9XG5cbiAgc3RvcCgpIHtcbiAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLm5leHRUaWNrKTtcbiAgfVxuXG4gIG9uVGljayhoYW5kbGVyOiAodGljazogbnVtYmVyKSA9PiB2b2lkKTogbnVtYmVyIHtcbiAgICB0aGlzLnRpY2tIYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIHJldHVybiB0aGlzLnRpY2tIYW5kbGVycy5sZW5ndGggLSAxO1xuICB9XG5cbiAgZ2V0VGlja0RlbGF5KCkgOiBudW1iZXIge1xuICAgIHJldHVybiBnZXRSYW5kb21JbnRlZ2VyKDgwMCwgMTYwMCkgLSAodGhpcy5tdWx0aXBsaWVyICogMjAwKTtcbiAgfVxuXG4gIHByaXZhdGUgdGljaygpIHtcbiAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKSB7IHJldHVybjsgfVxuICAgIHRoaXMudGlja0hhbmRsZXJzLmZvckVhY2goKGhhbmRsZXIpID0+IHtcbiAgICAgIGlmICghdGhpcy5pc1J1bm5pbmcpIHsgcmV0dXJuOyB9XG4gICAgICBoYW5kbGVyKHRoaXMudGlja0NvdW50KTtcbiAgICB9KTtcbiAgICB0aGlzLm5leHRUaWNrID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnRpY2soKSwgdGhpcy5nZXRUaWNrRGVsYXkoKSk7XG4gIH1cblxufVxuXG5leHBvcnQgY29uc3QgR2FtZVRpbWVyID0gbmV3IF9HYW1lVGltZXIoKTsiLCJpbXBvcnQgeyBoLCBDb21wb25lbnQgfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyBHYW1lQ29udHJvbGxlciwgbGV2ZWwgfSBmcm9tIFwiLi4vR2FtZUNvbnRyb2xsZXJcIjtcbmltcG9ydCBcIi4vTGF1bmNoZXIuc2Nzc1wiO1xuaW1wb3J0IHsgTGVhZGVyYm9hcmRNb2RhbCB9IGZyb20gXCIuL0xlYWRlcmJvYXJkTW9kYWxcIjtcbmltcG9ydCB7IFNpZ251cE1vZGFsIH0gZnJvbSBcIi4vU2lnbnVwTW9kYWxcIjtcblxuZXhwb3J0IGNsYXNzIExhdW5jaGVyIGV4dGVuZHMgQ29tcG9uZW50PGFueSwgYW55PiB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuc3RhdGUgPXtcbiAgICAgIGlzTGVhZGVyYm9hcmRNb2RhbE9wZW46IGZhbHNlLFxuICAgICAgaXNTaWdudXBNb2RhbE9wZW46IGZhbHNlXG4gICAgfTtcbiAgfVxuXG5cbiAgcmVuZGVyKCkgOiBoLkpTWC5FbGVtZW50IHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzcz1cImxhdW5jaGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXIgZmxleCBmbGV4LWNvbHVtblwiPlxuICAgICAgICAgIDxoMj5HZXQgdGhlIGRlYWxzIGJlZm9yZSB0aGV54oCZcmUgZ29uZSE8L2gyPlxuXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImxhdW5jaC1jb250ZW50IGZsZXhcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbGx1c3RyYXRpb25cIj5cbiAgICAgICAgICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9kZWFsLW9mLXRoZS1kYXkucG5nXCIgaGVpZ2h0PVwiNjAwXCIgd2lkdGg9XCI2MDBcIiAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5zdHJ1Y3Rpb25zXCI+XG4gICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgIFRoZSBHcmVhdEdldHMgd2Vic2l0ZSBzdWNrcy4gSXQgbG9hZHMgYXN5bmMgY29udGVudCBpbiByYW5kb21cbiAgICAgICAgICAgICAgICBzaXplcywgY2F1c2luZyBmcnVzdHJhdGluZyA8c3Ryb25nPmxheW91dCBzaGlmdHM8L3N0cm9uZz4uXG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgVGhleSBoYXZlIGF3ZXNvbWUgZGVhbHMgdGhvdWdoIGRlYWxzLCBidXQgb25seSBmb3IgMzAgc2Vjb25kcyFcbiAgICAgICAgICAgICAgICBIb3cgbWFueSBjYW4geW91IGFkZCBiZWZvcmUgdGltZSBydW5zIG91dD9cbiAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICBXYXRjaCBvdXQgZm9yIHRoZSBhbm5veWluZyBwb3B1cHMhXG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xzIGZsZXgganVzdGlmeS1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tYmx1ZVwiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXtlID0+IHRoaXMuc2V0U3RhdGUoe2lzU2lnbnVwTW9kYWxPcGVuOnRydWV9KSB9XG4gICAgICAgICAgICAgICAgICAvLyBvbkNsaWNrPXtlID0+IEdhbWVDb250cm9sbGVyLnN0YXJ0KGxldmVsLlNUT1JFKSB9XG4gICAgICAgICAgICAgICAgICA+U3RhcnQhPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWdyZXlcIiBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldFN0YXRlKHtpc0xlYWRlcmJvYXJkTW9kYWxPcGVuOnRydWV9KX0+U2NvcmVzPC9idXR0b24+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicm0tbG9nbyBmbGV4IGZsZXgtY29sdW1uIGFsaWduLWNlbnRlclwiPlxuICAgICAgICAgICAgPGg0IHN0eWxlPVwiZm9udC13ZWlnaHQ6IG5vcm1hbFwiPkRldmVsb3BlZCBCeTwvaDQ+XG4gICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9yZXF1ZXN0bWV0cmljcy5jb20vXCI+XG4gICAgICAgICAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvcmVxdWVzdF9tZXRyaWNzX2xvZ28uc3ZnXCIgYWx0PVwiUmVxdWVzdCBNZXRyaWNzXCIgd2lkdGg9XCIzMDBcIiBoZWlnaHQ9XCIxMDJcIiAvPlxuICAgICAgICAgICAgPC9hPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNsb3RoLXRoaXNcIj5cbiAgICAgICAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvdGhpc181MDBfYXBuZy5wbmdcIiB3aWR0aD1cIjUwMFwiIGhlaWdodD1cIjUwMFwiIC8+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPFNpZ251cE1vZGFsIGlzT3Blbj17dGhpcy5zdGF0ZS5pc1NpZ251cE1vZGFsT3Blbn0gb25DbG9zZT17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7aXNTaWdudXBNb2RhbE9wZW46ZmFsc2V9KX0gLz5cbiAgICAgICAgPExlYWRlcmJvYXJkTW9kYWwgaXNPcGVuPXt0aGlzLnN0YXRlLmlzTGVhZGVyYm9hcmRNb2RhbE9wZW59IG9uQ2xvc2U9eygpID0+IHRoaXMuc2V0U3RhdGUoe2lzTGVhZGVyYm9hcmRNb2RhbE9wZW46ZmFsc2V9KX0gLz5cblxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59IiwiaW1wb3J0IHsgaCwgQ29tcG9uZW50IH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IHsgUExBWUVSX1NUT1JBR0VfS0VZIH0gZnJvbSBcIi4uL0NvbnN0YW50c1wiO1xuaW1wb3J0IHsgTW9kYWwsIE1vZGFsUHJvcHMgfSBmcm9tIFwiLi4vTW9kYWwvTW9kYWxcIjtcbmltcG9ydCB7IGdldEFjY3VyYWN5IH0gZnJvbSBcIi4uL3V0aWwvZ2V0QWNjdXJhY3lcIjtcbmltcG9ydCB7IGdldExvY2FsU3RvcmFnZSwgc2V0TG9jYWxTdG9yYWdlIH0gZnJvbSBcIi4uL3V0aWwveGV0TG9jYWxTdG9yYWdlXCI7XG5cbmV4cG9ydCBjbGFzcyBMZWFkZXJib2FyZE1vZGFsIGV4dGVuZHMgQ29tcG9uZW50PE1vZGFsUHJvcHMsIGFueT4ge1xuXG4gIHJlbmRlcigpOiBoLkpTWC5FbGVtZW50IHtcbiAgICBsZXQgcGxheWVycyA9IGdldExvY2FsU3RvcmFnZShQTEFZRVJfU1RPUkFHRV9LRVkpIHx8IFtdO1xuICAgIHBsYXllcnMgPSBwbGF5ZXJzXG4gICAgICAuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBsZXQgYTEgPSAoYS5jYXJ0IHx8IDApO1xuICAgICAgICBsZXQgYjEgPSAoYi5jYXJ0IHx8IDApO1xuICAgICAgICBpZiAoYTEgPCBiMSkgeyByZXR1cm4gLTE7IH1cbiAgICAgICAgZWxzZSB7IHJldHVybiAxOyB9XG4gICAgICB9KVxuICAgICAgLnJldmVyc2UoKVxuICAgICAgLmZpbHRlcigocCwgaWR4KSA9PiBpZHggPCAxMCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPE1vZGFsIGNvbnRlbnQ9e1xuICAgICAgICA8ZGl2IGNsYXNzPVwibGVhZGVyYm9hcmQtbW9kYWwgZmxleCBmbGV4LWNvbHVtblwiPlxuICAgICAgICAgIDxoMj5MZWFkZXJib2FyZDwvaDI+XG4gICAgICAgICAgPHRhYmxlIGNsYXNzPVwic2NvcmVzIFwiPlxuICAgICAgICAgICAgPHRyIGNsYXNzPVwiaGVhZGVyXCI+XG4gICAgICAgICAgICAgIDx0aD5OYW1lPC90aD5cbiAgICAgICAgICAgICAgPHRoPkNhcnQ8L3RoPlxuICAgICAgICAgICAgICA8dGg+QWNjdXJhY3k8L3RoPlxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIHtwbGF5ZXJzLm1hcCgocGxheWVyKSA9PiAoXG4gICAgICAgICAgICAgIDx0ciBjbGFzcz1cInBsYXllclwiPlxuICAgICAgICAgICAgICAgIDx0ZD57cGxheWVyLm5hbWV9PC90ZD5cbiAgICAgICAgICAgICAgICA8dGQ+e3BsYXllci5jYXJ0IHx8IDB9PC90ZD5cbiAgICAgICAgICAgICAgICA8dGQ+e2dldEFjY3VyYWN5KHBsYXllci5jYXJ0LCBwbGF5ZXIuY2xpY2tzKX08L3RkPlxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbHMgZmxleCBqdXN0aWZ5LWNlbnRlclwiIHN0eWxlPVwibWFyZ2luLXRvcDoyMHB4O1wiPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWdyZXlcIiBvbkNsaWNrPXsoKSA9PiB0aGlzLnByb3BzLm9uQ2xvc2UoKX0+Q2xvc2U8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICB9IGlzT3Blbj17dGhpcy5wcm9wcy5pc09wZW59IG9uQ2xvc2U9e3RoaXMucHJvcHMub25DbG9zZX0vPlxuICAgICk7XG4gIH1cblxufSIsImltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSBcImx1eG9uXCI7XG5pbXBvcnQgeyBoLCBDb21wb25lbnQgfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyBHYW1lQ29udHJvbGxlciwgbGV2ZWwgfSBmcm9tIFwiLi4vR2FtZUNvbnRyb2xsZXJcIjtcbmltcG9ydCB7IE1vZGFsLCBNb2RhbFByb3BzIH0gZnJvbSBcIi4uL01vZGFsL01vZGFsXCI7XG5pbXBvcnQgeyBnZXRMb2NhbFN0b3JhZ2UsIHNldExvY2FsU3RvcmFnZSB9IGZyb20gXCIuLi91dGlsL3hldExvY2FsU3RvcmFnZVwiO1xuXG5leHBvcnQgY2xhc3MgU2lnbnVwTW9kYWwgZXh0ZW5kcyBDb21wb25lbnQ8TW9kYWxQcm9wcywgYW55PiB7XG5cbiAgcmVuZGVyKCk6IGguSlNYLkVsZW1lbnQge1xuICAgIHJldHVybiAoXG4gICAgICA8TW9kYWwgY29udGVudD17XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzaWdudXAtbW9kYWwgZmxleCBmbGV4LWNvbHVtblwiPlxuICAgICAgICAgIDxoMj5GaXJzdCwgV2UgTmVlZCBZb3VyIEVtYWlsPC9oMj5cbiAgICAgICAgICA8cCBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICBXZeKAmWxsIHNlbmQgeW91IGluZm9ybWF0aW9uIGFib3V0IDxzdHJvbmc+Q3VtdWxhdGl2ZSBMYXlvdXQgU2hpZnQ8L3N0cm9uZz4gKENMUykgYW5kIGhvdyB0byBmaXggaXQuXG4gICAgICAgICAgICBVbnN1YnNjcmliZSBhdCBhbnkgdGltZS5cbiAgICAgICAgICA8L3A+XG5cbiAgICAgICAgICA8Zm9ybSBjbGFzcz1cImZsZXggZmxleC1jb2x1bW5cIiBvblN1Ym1pdD17KGUpID0+IHRoaXMuc2F2ZUZvcm0oZSl9ID5cblxuICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICA8c3Bhbj5Zb3VyIE5hbWU8L3NwYW4+XG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJuYW1lXCIgdmFsdWU9e3RoaXMuc3RhdGUuZm9ybU5hbWV9IHJlcXVpcmVkIHBsYWNlaG9sZGVyPVwiSmFuZSBEb2VcIiAvPlxuICAgICAgICAgICAgPC9sYWJlbD5cblxuICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICA8c3Bhbj5Zb3VyIEVtYWlsPC9zcGFuPlxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImVtYWlsXCIgbmFtZT1cImVtYWlsXCIgdmFsdWU9e3RoaXMuc3RhdGUuZm9ybU5hbWV9IHJlcXVpcmVkIHBsYWNlaG9sZGVyPVwiamFuZUBleGFtcGxlLmNvbVwiIC8+XG4gICAgICAgICAgICA8L2xhYmVsPlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbHMgZmxleCBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cImJ0biBidG4tYmx1ZVwiPlN0YXJ0PC9idXR0b24+XG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1ncmV5XCIgb25DbGljaz17KCkgPT4gdGhpcy5wcm9wcy5vbkNsb3NlKCl9PkNhbmNlbDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8L2Zvcm0+XG5cbiAgICAgICAgPC9kaXY+XG4gICAgICB9IGlzT3Blbj17dGhpcy5wcm9wcy5pc09wZW59IG9uQ2xvc2U9e3RoaXMucHJvcHMub25DbG9zZX0vPlxuICAgICk7XG4gIH1cblxuICBzYXZlRm9ybShldmVudDogRXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCBmb3JtID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxGb3JtRWxlbWVudDtcblxuICAgIEdhbWVDb250cm9sbGVyLnNldFN0YXRlKHtcbiAgICAgIG5hbWU6IGZvcm0uZWxlbWVudHNbJ25hbWUnXS52YWx1ZSxcbiAgICAgIGVtYWlsOiBmb3JtLmVsZW1lbnRzWydlbWFpbCddLnZhbHVlLFxuICAgICAgdGltZXN0YW1wOiAgRGF0ZVRpbWUubm93KClcbiAgICB9KTtcblxuICAgIHRoaXMucHJvcHMub25DbG9zZSgpO1xuICAgIEdhbWVDb250cm9sbGVyLnN0YXJ0KGxldmVsLlNUT1JFKTtcbiAgfVxuXG59IiwiaW1wb3J0IHsgaCwgQ29tcG9uZW50IH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IFwiLi9Nb2RhbC5zY3NzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kYWxQcm9wcyB7XG4gIGlzT3BlbjogYm9vbGVhbixcbiAgY29udGVudD86IGguSlNYLkVsZW1lbnQsXG4gIHhBZGp1c3Q/OiBudW1iZXIsXG4gIHlBZGp1c3Q/OiBudW1iZXIsXG4gIG9uQ2xvc2U/OiBGdW5jdGlvblxufVxuXG5leHBvcnQgY2xhc3MgTW9kYWwgZXh0ZW5kcyBDb21wb25lbnQ8TW9kYWxQcm9wcywgYW55PiB7XG5cbiAgcmVuZGVyKCk6IGguSlNYLkVsZW1lbnQge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtd3JhcFwiIHN0eWxlPXt7XCJkaXNwbGF5XCI6IHRoaXMucHJvcHMuaXNPcGVuID8gXCJmbGV4XCIgOiBcIm5vbmVcIn19PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtYm94XCIgc3R5bGU9e3tcbiAgICAgICAgICBcIm1hcmdpbi10b3BcIjogYCR7dGhpcy5wcm9wcy55QWRqdXN0IHx8IDB9dmhgLFxuICAgICAgICAgIFwibWFyZ2luLWxlZnRcIjogYCR7dGhpcy5wcm9wcy54QWRqdXN0IHx8IDB9dndgXG4gICAgICAgICAgfX0+XG4gICAgICAgICAge3RoaXMucHJvcHMuY29udGVudH1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59IiwiaW1wb3J0IHsgaCwgQ29tcG9uZW50IH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IHsgR2FtZUNvbnRyb2xsZXIgfSBmcm9tIFwiLi4vR2FtZUNvbnRyb2xsZXJcIjtcbmltcG9ydCB7IEdhbWVUaW1lciB9IGZyb20gXCIuLi9HYW1lVGltZXJcIjtcbmltcG9ydCB7IGdldFJhbmRvbUludGVnZXIgfSBmcm9tIFwiLi4vdXRpbC9nZXRSYW5kb21JbnRlZ2VyXCI7XG5pbXBvcnQgeyBpc1NhZmFyaSB9IGZyb20gXCIuLi91dGlsL2lzU2FmYXJpXCI7XG5pbXBvcnQgXCIuL1NoaWZ0Q291bnRlci5zY3NzXCI7XG5cbmludGVyZmFjZSBTaGlmdENvdW50ZXJTdGF0ZSB7XG4gIGNsczogbnVtYmVyXG59XG5cbmV4cG9ydCBjbGFzcyBTaGlmdENvdW50ZXIgZXh0ZW5kcyBDb21wb25lbnQ8YW55LCBTaGlmdENvdW50ZXJTdGF0ZT4ge1xuXG4gIHByaXZhdGUgb2JzZXJ2ZXIgOiBQZXJmb3JtYW5jZU9ic2VydmVyO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNsczogMFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcbiAgICBpZiAoaXNTYWZhcmkoKSkge1xuICAgICAgR2FtZVRpbWVyLm9uVGljaygodGljaykgPT4ge1xuICAgICAgICBsZXQgY2xzID0gdGhpcy5zdGF0ZS5jbHM7XG4gICAgICAgIGNscyA9IGNscyArICgoZ2V0UmFuZG9tSW50ZWdlcig1MDAwLCAxMDAwMCkgKyAodGljaykpIC8gMTAwMDApO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgY2xzIH0pO1xuICAgICAgICBHYW1lQ29udHJvbGxlci5jbHMgPSBjbHM7XG4gICAgICB9KVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgUGVyZm9ybWFuY2VPYnNlcnZlcihlbnRyeUxpc3QgPT4ge1xuICAgICAgICBsZXQgZW50cmllcyA9IGVudHJ5TGlzdC5nZXRFbnRyaWVzKCkgfHwgW107XG4gICAgICAgIGxldCBjbHMgPSBlbnRyaWVzLnJlZHVjZSgoY2xzLCBlbnRyeTogYW55LCBpbmRleCkgPT4ge1xuICAgICAgICAgIHJldHVybiBjbHMgKyBlbnRyeS52YWx1ZTtcbiAgICAgICAgfSwgdGhpcy5zdGF0ZS5jbHMpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgY2xzIH0pO1xuICAgICAgICBHYW1lQ29udHJvbGxlci5jbHMgPSBjbHM7XG4gICAgICB9KTtcbiAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh7IHR5cGU6IFwibGF5b3V0LXNoaWZ0XCIsIGJ1ZmZlcmVkOiBmYWxzZSB9KTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpOiB2b2lkIHtcbiAgICB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgfVxuXG4gIHJlbmRlcigpIDogaC5KU1guRWxlbWVudCB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3M9XCJzaGlmdC1jb3VudGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJsYWJlbFwiPkNMUzwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwidmFsdWVcIj5cbiAgICAgICAgICB7IHRoaXMuc3RhdGUuY2xzLnRvRml4ZWQoNCkgfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufSIsImltcG9ydCB7IGgsIENvbXBvbmVudCB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IE1vZGFsLCBNb2RhbFByb3BzIH0gZnJvbSBcIi4uL01vZGFsL01vZGFsXCI7XG5pbXBvcnQgeyBTdG9yZUxldmVsQ29udHJvbGxlciB9IGZyb20gXCIuL1N0b3JlTGV2ZWxDb250cm9sbGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBFeHBlcmllbmNlTW9kYWwgZXh0ZW5kcyBDb21wb25lbnQ8TW9kYWxQcm9wcywgYW55PiB7XG5cbiAgcmVuZGVyKCk6IGguSlNYLkVsZW1lbnQge1xuICAgIHJldHVybiAoXG4gICAgICA8TW9kYWwgY29udGVudD17XG4gICAgICAgIDxkaXYgY2xhc3M9XCJleHBlcmllbmNlLW1vZGFsIGZsZXggZmxleC1jb2x1bW5cIj5cbiAgICAgICAgICA8aDI+SGVscCBJbXByb3ZlIE91ciBXZWJzaXRlPC9oMj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiY2xvc2VcIlxuICAgICAgICAgICAgb25Ub3VjaFN0YXJ0PXsgKCkgPT4gU3RvcmVMZXZlbENvbnRyb2xsZXIuY2xlYXJFeHBlcmllbmNlKCkgfVxuICAgICAgICAgICAgPuKclTwvYnV0dG9uPlxuICAgICAgICAgIDxwPlxuICAgICAgICAgICAgVGVsbCB1cyBhYm91dCB5b3VyIGV4cGVyaWVuY2Ugb24gb3VyIHdlYnNpdGUhIFdlIHByb21pc2UgdG8gaWdub3JlXG4gICAgICAgICAgICBpdCBlbnRpcmVseSBhbmQgY29udGludWUgd2l0aCB3aGF0IHdlIGFyZSBkb2luZy5cbiAgICAgICAgICA8L3A+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInJhdGluZ3MgZmxleCBmbGV4LWNvbHVtbiBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRpdGxlXCI+XG4gICAgICAgICAgICAgIEhvdyBsaWtlbHkgYXJlIHlvdSB0byByZWNvbW1lbmQgR3JlYXRHZXRzIHRvIGEgZnJpZW5kP1xuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGFiZWxzIGZsZXhcIj5cbiAgICAgICAgICAgICAgPGRpdj5Ob3QgTGlrZWx5PC9kaXY+XG4gICAgICAgICAgICAgIDxkaXY+VmVyeSBMaWtlbHk8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xzIGZsZXhcIj5cbiAgICAgICAgICAgICAgPGxhYmVsIG9uVG91Y2hTdGFydD17ICgpID0+IFN0b3JlTGV2ZWxDb250cm9sbGVyLmNsaWNrUmF0aW5ncygpIH0+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiPjwvaW5wdXQ+XG4gICAgICAgICAgICAgICAgPHNwYW4+MTwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgPGxhYmVsIG9uVG91Y2hTdGFydD17ICgpID0+IFN0b3JlTGV2ZWxDb250cm9sbGVyLmNsaWNrUmF0aW5ncygpIH0+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiPjwvaW5wdXQ+XG4gICAgICAgICAgICAgICAgPHNwYW4+Mjwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgPGxhYmVsIG9uVG91Y2hTdGFydD17ICgpID0+IFN0b3JlTGV2ZWxDb250cm9sbGVyLmNsaWNrUmF0aW5ncygpIH0+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiPjwvaW5wdXQ+XG4gICAgICAgICAgICAgICAgPHNwYW4+Mzwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgPGxhYmVsIG9uVG91Y2hTdGFydD17ICgpID0+IFN0b3JlTGV2ZWxDb250cm9sbGVyLmNsaWNrUmF0aW5ncygpIH0+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiPjwvaW5wdXQ+XG4gICAgICAgICAgICAgICAgPHNwYW4+NDwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgPGxhYmVsIG9uVG91Y2hTdGFydD17ICgpID0+IFN0b3JlTGV2ZWxDb250cm9sbGVyLmNsaWNrUmF0aW5ncygpIH0+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiPjwvaW5wdXQ+XG4gICAgICAgICAgICAgICAgPHNwYW4+NTwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIH0gaXNPcGVuPXt0aGlzLnByb3BzLmlzT3Blbn0geEFkanVzdD17dGhpcy5wcm9wcy54QWRqdXN0fSB5QWRqdXN0PXt0aGlzLnByb3BzLnlBZGp1c3R9Lz5cbiAgICApO1xuICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIEV4cGVyaWVuY2VUaGFua3NNb2RhbCBleHRlbmRzIENvbXBvbmVudDxNb2RhbFByb3BzLCBhbnk+IHtcblxuICByZW5kZXIoKTogaC5KU1guRWxlbWVudCB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxNb2RhbCBjb250ZW50PXtcbiAgICAgICAgPGRpdiBjbGFzcz1cImV4cGVyaWVuY2UtdGhhbmtzLW1vZGFsIGZsZXggZmxleC1jb2x1bW5cIj5cbiAgICAgICAgICA8aDI+VGhhbmtzIGZvciB5b3VyIFJhdGluZyE8L2gyPlxuICAgICAgICAgIDxoMz5FeHBlY3QgYSBsb3Qgb2Ygc3VydmV5IGVtYWlscyBmcm9tIHVzITwvaDM+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImNsb3NlXCJcbiAgICAgICAgICAgIG9uVG91Y2hTdGFydD17ICgpID0+IFN0b3JlTGV2ZWxDb250cm9sbGVyLmNsZWFyUmF0aW5nc1RoYW5rcygpIH1cbiAgICAgICAgICAgID7inJU8L2J1dHRvbj5cbiAgICAgICAgICA8cCBzdHlsZT17e2ZsZXg6IFwiMSAxIGF1dG9cIn19PlxuICAgICAgICAgICAgV2UgcmVjb3JkZWQgeW91ciByYXRpbmchIFdlIHdpbGwgY29udGludWUgdG8gYXNrIHlvdSBvdmVyIGVtYWlsIGV2ZXJ5IDItMyBkYXlzXG4gICAgICAgICAgICBmcm9tIG5vdyB1bnRpbCBldGVybml0eSwgcmVnYXJkbGVzcyBpZiB5b3UgZXZlciBzaG9wIHdpdGggdXMgYWdhaW4uXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIH0gaXNPcGVuPXt0aGlzLnByb3BzLmlzT3Blbn0geEFkanVzdD17dGhpcy5wcm9wcy54QWRqdXN0fSB5QWRqdXN0PXt0aGlzLnByb3BzLnlBZGp1c3R9Lz5cbiAgICApO1xuICB9XG5cbn0iLCJpbXBvcnQgeyBoLCBDb21wb25lbnQgfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyBNb2RhbCwgTW9kYWxQcm9wcyB9IGZyb20gXCIuLi9Nb2RhbC9Nb2RhbFwiO1xuaW1wb3J0IHsgU3RvcmVMZXZlbENvbnRyb2xsZXIgfSBmcm9tIFwiLi9TdG9yZUxldmVsQ29udHJvbGxlclwiO1xuXG5leHBvcnQgY2xhc3MgRmFpbE1vZGFsIGV4dGVuZHMgQ29tcG9uZW50PE1vZGFsUHJvcHMsIGFueT4ge1xuXG4gIHJlbmRlcigpOiBoLkpTWC5FbGVtZW50IHtcbiAgICByZXR1cm4gKFxuICAgICAgPE1vZGFsIGNvbnRlbnQ9e1xuICAgICAgICA8ZGl2IGNsYXNzPVwibmV3c2xldHRlci1tb2RhbFwiPlxuICAgICAgICAgICAgPGgyPkpvaW4gT3VyIE5ld3NsZXR0ZXIgYW5kIFNhdmUhPC9oMj5cbiAgICAgICAgICAgIDxoMz5BIFJlYWxseSBBbm5veWluZyBQb3B1cDwvaDM+XG4gICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgSm9pbiBvdXIgbmV3c2xldHRlciBhbmQgd2UnbGwgc2VuZCB5b3UgMTAgZW1haWxzIGV2ZXJ5IGRheSBhYm91dFxuICAgICAgICAgICAgICBjcmFwcHkgcHJvZHVjdHMgdGhhdCB3ZSBjYW4ndCBzZWxsLlxuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb25Ub3VjaFN0YXJ0PXsgKCkgPT4gU3RvcmVMZXZlbENvbnRyb2xsZXIuZG91YmxlRmFpbCgpIH0+WWVzISBBZGQgTWUgVG8gWW91ciBOZXdzbGV0dGVyPC9idXR0b24+XG4gICAgICAgICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCIgb25Ub3VjaFN0YXJ0PXsgKCkgPT4gU3RvcmVMZXZlbENvbnRyb2xsZXIuY2xlYXJGYWlsKCkgfT5ObywgR28gQmFjazwvYT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgIH0gaXNPcGVuPXt0aGlzLnByb3BzLmlzT3Blbn0geEFkanVzdD17dGhpcy5wcm9wcy54QWRqdXN0fSB5QWRqdXN0PXt0aGlzLnByb3BzLnlBZGp1c3R9Lz5cbiAgICApO1xuICB9XG5cbn0iLCJpbXBvcnQgeyBoLCBDb21wb25lbnQgfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyBTdG9yZUxldmVsQ29udHJvbGxlciwgU3RvcmVMZXZlbFN0YXRlIH0gZnJvbSBcIi4vU3RvcmVMZXZlbENvbnRyb2xsZXJcIjtcbmltcG9ydCB7IFdpZGdldCB9IGZyb20gXCIuL1dpZGdldFwiO1xuaW1wb3J0IHsgRmFpbE1vZGFsIH0gZnJvbSBcIi4vRmFpbE1vZGFsXCI7XG5pbXBvcnQgeyBFeHBlcmllbmNlTW9kYWwsIEV4cGVyaWVuY2VUaGFua3NNb2RhbCB9IGZyb20gXCIuL0V4cGVyaWVuY2VNb2RhbFwiO1xuaW1wb3J0IFwiLi9TdG9yZUxldmVsLnNjc3NcIjtcblxuZXhwb3J0IGNsYXNzIFN0b3JlTGV2ZWwgZXh0ZW5kcyBDb21wb25lbnQ8YW55LCBTdG9yZUxldmVsU3RhdGU+IHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIFN0b3JlTGV2ZWxDb250cm9sbGVyLmluaXQoKCkgPT4gdGhpcy5zdGF0ZSwgdGhpcy5zZXRTdGF0ZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4oXG4gICAgICA8ZGl2IGNsYXNzPVwic3RvcmUtbGV2ZWxcIj5cbiAgICAgICAgPGhlYWRlciBjbGFzcz1cInN0b3JlLWhlYWRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2dvXCI+XG4gICAgICAgICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL2xvZ28ucG5nXCIgd2lkdGg9XCIxMzZcIiBoZWlnaHQ9XCI4MFwiIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNhcnRcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2FydC1jb3VudFwiPnsgdGhpcy5zdGF0ZS5jYXJ0IH08L3NwYW4+XG4gICAgICAgICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL2NhcnQuc3ZnXCI+PC9pbWc+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNhcnQtbGFiZWxcIj5DYXJ0PC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2hlYWRlcj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIndpZGdldC1ncmlkXCIgb25Ub3VjaFN0YXJ0PXsoZSkgPT4gU3RvcmVMZXZlbENvbnRyb2xsZXIuY2xpY2soLTEsIGUpIH0+XG4gICAgICAgICAge3RoaXMuc3RhdGUud2lkZ2V0cy5tYXAod2lkZ2V0U3RhdGUgPT4gPFdpZGdldCB7Li4ud2lkZ2V0U3RhdGV9IC8+KX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxGYWlsTW9kYWwgaXNPcGVuPXt0aGlzLnN0YXRlLnNob3dGYWlsTW9kYWx9IHhBZGp1c3Q9e3RoaXMuc3RhdGUubW9kYWxBZGp1c3RYfSB5QWRqdXN0PXt0aGlzLnN0YXRlLm1vZGFsQWRqdXN0WX0gLz5cbiAgICAgICAgPEV4cGVyaWVuY2VNb2RhbCBpc09wZW49e3RoaXMuc3RhdGUuc2hvd0V4cGVyaWVuY2VNb2RhbH0geEFkanVzdD17dGhpcy5zdGF0ZS5tb2RhbEFkanVzdFh9IHlBZGp1c3Q9e3RoaXMuc3RhdGUubW9kYWxBZGp1c3RZfSAvPlxuICAgICAgICA8RXhwZXJpZW5jZVRoYW5rc01vZGFsIGlzT3Blbj17dGhpcy5zdGF0ZS5zaG93RXhwZXJpZW5jZVRoYW5rc01vZGFsfSB4QWRqdXN0PXt0aGlzLnN0YXRlLm1vZGFsQWRqdXN0WH0geUFkanVzdD17dGhpcy5zdGF0ZS5tb2RhbEFkanVzdFl9IC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbn1cbiIsImltcG9ydCB7IEdhbWVDb250cm9sbGVyIH0gZnJvbSBcIi4uL0dhbWVDb250cm9sbGVyXCI7XG5pbXBvcnQgeyBHYW1lVGltZXIgfSBmcm9tIFwiLi4vR2FtZVRpbWVyXCI7XG5pbXBvcnQgeyBnZXRSYW5kb21JbnRlZ2VyIH0gZnJvbSBcIi4uL3V0aWwvZ2V0UmFuZG9tSW50ZWdlclwiO1xuXG5jb25zdCBXSURHRVRfQ09VTlQgPSAxMDtcbmNvbnN0IE1PREFMX1hfQURKVVNUID0gNDA7XG5jb25zdCBNT0RBTF9ZX0FESlVTVCA9IDQwO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0b3JlTGV2ZWxTdGF0ZSB7XG4gIGNhcnQ6IG51bWJlclxuICBjbGlja3MgOiBudW1iZXJcbiAgaGFzU2hvd25FeHBlcmllbmNlTW9kYWw6IGJvb2xlYW5cbiAgaXNPYmplY3RpdmVWaXNpYmxlIDogYm9vbGVhblxuICBzaG93RXhwZXJpZW5jZU1vZGFsOiBib29sZWFuXG4gIHNob3dFeHBlcmllbmNlVGhhbmtzTW9kYWw6IGJvb2xlYW5cbiAgc2hvd0ZhaWxNb2RhbCA6IGJvb2xlYW5cbiAgbW9kYWxBZGp1c3RYIDogbnVtYmVyXG4gIG1vZGFsQWRqdXN0WSA6IG51bWJlclxuICB3aWRnZXRzIDogV2lkZ2V0U3RhdGVbXVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdpZGdldFN0YXRlIHtcbiAgaW5kZXggOiBudW1iZXJcbiAgc3RhdHVzIDogV2lkZ2V0U3RhdHVzXG59XG5cbmV4cG9ydCBlbnVtIFdpZGdldFN0YXR1cyB7XG4gIEVNUFRZLFxuICBMT0FESU5HLFxuICBDT05URU5ULFxuICBPQkpFQ1RJVkUsXG4gIENPTVBMRVRFXG59XG5cbmNsYXNzIF9TdG9yZUxldmVsQ29udHJvbGxlciB7XG5cbiAgZ2V0U3RhdGU6ICgpID0+IFN0b3JlTGV2ZWxTdGF0ZTtcbiAgc2V0U3RhdGU6IChzdGF0ZTogYW55KSA9PiB2b2lkO1xuXG4gIGluaXQoZ2V0U3RhdGU6ICgpID0+IFN0b3JlTGV2ZWxTdGF0ZSwgc2V0U3RhdGU6IChzdGF0ZTogYW55KSA9PiB2b2lkKSB7XG5cbiAgICB0aGlzLmdldFN0YXRlID0gZ2V0U3RhdGU7XG4gICAgdGhpcy5zZXRTdGF0ZSA9IHNldFN0YXRlO1xuXG4gICAgR2FtZVRpbWVyLm9uVGljaygoKSA9PiB0aGlzLm9uVGljaygpKTtcblxuICAgIGxldCBpbml0aWFsU3RhdGUgPSB7XG4gICAgICBjYXJ0OiAwLFxuICAgICAgY2xpY2tzOiAwLFxuICAgICAgaGFzU2hvd25FeHBlcmllbmNlTW9kYWw6IGZhbHNlLFxuICAgICAgaXNPYmplY3RpdmVWaXNpYmxlOiBmYWxzZSxcbiAgICAgIHNob3dFeHBlcmllbmNlTW9kYWw6IGZhbHNlLFxuICAgICAgc2hvd0V4cGVyaWVuY2VUaGFua3NNb2RhbDogZmFsc2UsXG4gICAgICBzaG93RmFpbE1vZGFsOiBmYWxzZSxcbiAgICAgIHdpZGdldHM6IFtdXG4gICAgfTtcblxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBXSURHRVRfQ09VTlQ7IGkrKykge1xuICAgICAgbGV0IHdpZGdldCA9IHtcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIHN0YXR1czogV2lkZ2V0U3RhdHVzLkVNUFRZXG4gICAgICB9O1xuICAgICAgaW5pdGlhbFN0YXRlLndpZGdldHMucHVzaCh3aWRnZXQpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoeyAuLi5pbml0aWFsU3RhdGUgfSk7XG4gIH1cblxuICBvblRpY2soKSB7XG4gICAgbGV0IHN0YXRlID0gdGhpcy5nZXRTdGF0ZSgpO1xuXG4gICAgbGV0IHVubG9hZGVkV2lkZ2V0cyA9IHN0YXRlLndpZGdldHMuZmlsdGVyKCh3KSA9PiB3LnN0YXR1cyA9PT0gV2lkZ2V0U3RhdHVzLkVNUFRZKTtcbiAgICBpZiAodW5sb2FkZWRXaWRnZXRzLmxlbmd0aCkge1xuICAgICAgbGV0IGxvYWRlZCA9IDA7XG4gICAgICB1bmxvYWRlZFdpZGdldHMuZm9yRWFjaCgodykgPT4ge1xuICAgICAgICBpZiAobG9hZGVkID4gMykgeyByZXR1cm47IH1cbiAgICAgICAgdGhpcy5zZXRMb2FkaW5nKHcpO1xuICAgICAgICB0aGlzLnVwZGF0ZVdpZGdldFN0YXRlKHcpO1xuICAgICAgICBsb2FkZWQrKztcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBjaGFuZ2VhYmxlV2lkZ2V0cyA9IHN0YXRlLndpZGdldHMuZmlsdGVyKCh3KSA9PiB3LnN0YXR1cyAhPT0gV2lkZ2V0U3RhdHVzLkxPQURJTkcpO1xuICAgIGlmICghY2hhbmdlYWJsZVdpZGdldHMubGVuZ3RoKSB7IHJldHVybjsgfVxuXG4gICAgbGV0IHdpZGdldCA9IGNoYW5nZWFibGVXaWRnZXRzW2dldFJhbmRvbUludGVnZXIoMCwgY2hhbmdlYWJsZVdpZGdldHMubGVuZ3RoKV07XG5cbiAgICBpZiAod2lkZ2V0LnN0YXR1cyA9PT0gV2lkZ2V0U3RhdHVzLk9CSkVDVElWRSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzT2JqZWN0aXZlVmlzaWJsZTogZmFsc2UgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRMb2FkaW5nKHdpZGdldCk7XG4gICAgdGhpcy51cGRhdGVXaWRnZXRTdGF0ZSh3aWRnZXQpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRMb2FkaW5nKHdpZGdldDogV2lkZ2V0U3RhdGUpIHtcbiAgICB3aWRnZXQuc3RhdHVzID0gV2lkZ2V0U3RhdHVzLkxPQURJTkc7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBsZXQgc3RhdGUgPSB0aGlzLmdldFN0YXRlKCk7XG4gICAgICBpZiAoIXN0YXRlLmlzT2JqZWN0aXZlVmlzaWJsZSAmJiB3aWRnZXQuaW5kZXggPj0gMykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNPYmplY3RpdmVWaXNpYmxlOiB0cnVlIH0pO1xuICAgICAgICB3aWRnZXQuc3RhdHVzID0gV2lkZ2V0U3RhdHVzLk9CSkVDVElWRTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB3aWRnZXQuc3RhdHVzID0gV2lkZ2V0U3RhdHVzLkNPTlRFTlQ7XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZVdpZGdldFN0YXRlKHdpZGdldCk7XG4gICAgfSwgR2FtZVRpbWVyLmdldFRpY2tEZWxheSgpKVxuICB9XG5cbiAgY2xpY2soaW5kZXg6IG51bWJlciwgZXZlbnQ6IEV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBsZXQgc3RhdGUgPSB0aGlzLmdldFN0YXRlKCk7XG4gICAgbGV0IHdpZGdldCA9IHN0YXRlLndpZGdldHNbaW5kZXhdO1xuXG4gICAgc3RhdGUuY2xpY2tzID0gc3RhdGUuY2xpY2tzICsgMTtcblxuICAgIGlmICh3aWRnZXQgJiYgd2lkZ2V0LnN0YXR1cyA9PT0gV2lkZ2V0U3RhdHVzLk9CSkVDVElWRSkge1xuICAgICAgd2lkZ2V0LnN0YXR1cyA9IFdpZGdldFN0YXR1cy5DT01QTEVURTtcbiAgICAgIHRoaXMudXBkYXRlV2lkZ2V0U3RhdGUod2lkZ2V0KTtcblxuICAgICAgc3RhdGUuY2FydCA9IHN0YXRlLmNhcnQgKyAxO1xuXG4gICAgICBpZiAoIXN0YXRlLmhhc1Nob3duRXhwZXJpZW5jZU1vZGFsKSB7XG4gICAgICAgIHN0YXRlLmhhc1Nob3duRXhwZXJpZW5jZU1vZGFsID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUuc2hvd0V4cGVyaWVuY2VNb2RhbCA9IHRydWU7XG4gICAgICAgIHN0YXRlLm1vZGFsQWRqdXN0WCA9IGdldFJhbmRvbUludGVnZXIoLU1PREFMX1hfQURKVVNULE1PREFMX1hfQURKVVNUKTtcbiAgICAgICAgc3RhdGUubW9kYWxBZGp1c3RZID0gZ2V0UmFuZG9tSW50ZWdlcigtTU9EQUxfWV9BREpVU1QsTU9EQUxfWV9BREpVU1QpO1xuICAgICAgfVxuXG4gICAgICBzdGF0ZS5pc09iamVjdGl2ZVZpc2libGUgPSBmYWxzZTtcbiAgICAgIEdhbWVUaW1lci5tdWx0aXBsaWVyID0gc3RhdGUuY2xpY2tzO1xuXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgc3RhdGUuc2hvd0ZhaWxNb2RhbCA9IHRydWU7XG4gICAgICBzdGF0ZS5tb2RhbEFkanVzdFggPSBnZXRSYW5kb21JbnRlZ2VyKC1NT0RBTF9YX0FESlVTVCxNT0RBTF9YX0FESlVTVCk7XG4gICAgICBzdGF0ZS5tb2RhbEFkanVzdFkgPSBnZXRSYW5kb21JbnRlZ2VyKC1NT0RBTF9ZX0FESlVTVCxNT0RBTF9ZX0FESlVTVCk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG4gIH1cblxuICBjbGVhckZhaWwoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dGYWlsTW9kYWw6IGZhbHNlIH0pO1xuICB9XG5cbiAgZG91YmxlRmFpbCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNob3dGYWlsTW9kYWw6IHRydWUsXG4gICAgICBtb2RhbEFkanVzdFg6IGdldFJhbmRvbUludGVnZXIoLU1PREFMX1hfQURKVVNULE1PREFMX1hfQURKVVNUKSxcbiAgICAgIG1vZGFsQWRqdXN0WTogZ2V0UmFuZG9tSW50ZWdlcigtTU9EQUxfWV9BREpVU1QsTU9EQUxfWV9BREpVU1QpXG4gICAgfSk7XG4gIH1cblxuICBjbGVhckV4cGVyaWVuY2UoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dFeHBlcmllbmNlTW9kYWw6IGZhbHNlIH0pO1xuICB9XG5cbiAgY2xpY2tSYXRpbmdzKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2hvd0V4cGVyaWVuY2VNb2RhbDogZmFsc2UsXG4gICAgICBzaG93RXhwZXJpZW5jZVRoYW5rc01vZGFsOiB0cnVlLFxuICAgICAgbW9kYWxBZGp1c3RYOiBnZXRSYW5kb21JbnRlZ2VyKC1NT0RBTF9YX0FESlVTVCxNT0RBTF9YX0FESlVTVCksXG4gICAgICBtb2RhbEFkanVzdFk6IGdldFJhbmRvbUludGVnZXIoLU1PREFMX1lfQURKVVNULE1PREFMX1lfQURKVVNUKVxuICAgIH0pO1xuICB9XG5cbiAgY2xlYXJSYXRpbmdzVGhhbmtzKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93RXhwZXJpZW5jZVRoYW5rc01vZGFsOiBmYWxzZSB9KTtcbiAgfVxuXG5cbiAgcHJpdmF0ZSB1cGRhdGVXaWRnZXRTdGF0ZSh3aWRnZXQgOiBXaWRnZXRTdGF0ZSkge1xuICAgIGxldCBzdGF0ZSA9IHRoaXMuZ2V0U3RhdGUoKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHdpZGdldHM6IHN0YXRlLndpZGdldHMubWFwKCh3KSA9PiB7XG4gICAgICAgIGlmICh3LmluZGV4ID09PSB3aWRnZXQuaW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4geyAuLi53aWRnZXQgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdztcbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cblxufVxuXG5leHBvcnQgY29uc3QgU3RvcmVMZXZlbENvbnRyb2xsZXIgPSBuZXcgX1N0b3JlTGV2ZWxDb250cm9sbGVyKCk7IiwiaW1wb3J0IHsgaCwgQ29tcG9uZW50IH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IHsgZ2V0UmFuZG9tSW50ZWdlciB9IGZyb20gXCIuLi91dGlsL2dldFJhbmRvbUludGVnZXJcIjtcbmltcG9ydCB7IFN0b3JlTGV2ZWxDb250cm9sbGVyLCBXaWRnZXRTdGF0ZSwgV2lkZ2V0U3RhdHVzIH0gZnJvbSBcIi4vU3RvcmVMZXZlbENvbnRyb2xsZXJcIjtcblxuY29uc3QgQ09OVEVOVCA9IFtcbiAgLy8ge1xuICAvLyAgIHdpZHRoOiAxMDAsXG4gIC8vICAgY29udGVudDogKFxuICAvLyAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy90cmVuZGluZy5wbmdcIiBoZWlnaHQ9XCI0NjhcIiB3aWR0aD1cIjI0MDBcIiAvPlxuICAvLyAgIClcbiAgLy8gfSxcbiAgLy8ge1xuICAvLyAgIHdpZHRoOiAxMDAsXG4gIC8vICAgY29udGVudDogKFxuICAvLyAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9iZXN0LXNlbGxpbmcucG5nXCIgaGVpZ2h0PVwiNDY4XCIgd2lkdGg9XCIyNDAwXCIgLz5cbiAgLy8gICApXG4gIC8vIH0sXG4gIHtcbiAgICB3aWR0aDogNTgsXG4gICAgY29udGVudDogKFxuICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy90b3AtZGVhbHMucG5nXCIgaGVpZ2h0PVwiNDAwXCIgd2lkdGg9XCIxMjAwXCIgLz5cbiAgICApXG4gIH0sXG4gIHtcbiAgICB3aWR0aDogNTgsXG4gICAgY29udGVudDogKFxuICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9ibGFjay1mcmlkYXkucG5nXCIgaGVpZ2h0PVwiNDAwXCIgd2lkdGg9XCIxMjAwXCIgLz5cbiAgICApXG4gIH0sXG4gIHtcbiAgICB3aWR0aDogNTgsXG4gICAgY29udGVudDogKFxuICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9tYWNib29rLWFpci5wbmdcIiBoZWlnaHQ9XCI0MDBcIiB3aWR0aD1cIjEyMDBcIiAvPlxuICAgIClcbiAgfSxcbiAge1xuICAgIHdpZHRoOiAzOSxcbiAgICBjb250ZW50OiAoXG4gICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL3NtYXJ0dHZzLnBuZ1wiIGhlaWdodD1cIjQwMFwiIHdpZHRoPVwiODAwXCIgLz5cbiAgICApXG4gIH0sXG4gIHtcbiAgICB3aWR0aDogMzksXG4gICAgY29udGVudDogKFxuICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9jYXItYXVkaW8ucG5nXCIgaGVpZ2h0PVwiNDAwXCIgd2lkdGg9XCI4MDBcIiAvPlxuICAgIClcbiAgfSxcbiAge1xuICAgIHdpZHRoOiAzOSxcbiAgICBjb250ZW50OiAoXG4gICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL2dhbGF4eS13YXRjaC5wbmdcIiBoZWlnaHQ9XCI0MDBcIiB3aWR0aD1cIjgwMFwiIC8+XG4gICAgKVxuICB9LFxuICB7XG4gICAgd2lkdGg6IDM5LFxuICAgIGNvbnRlbnQ6IChcbiAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMva2l0Y2hlbi5wbmdcIiBoZWlnaHQ9XCI0MDBcIiB3aWR0aD1cIjgwMFwiIC8+XG4gICAgKVxuICB9LFxuICB7XG4gICAgd2lkdGg6IDM5LFxuICAgIGNvbnRlbnQ6IChcbiAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvc2Ftc3VuZy1nYWxheHkucG5nXCIgaGVpZ2h0PVwiNDAwXCIgd2lkdGg9XCI4MDBcIiAvPlxuICAgIClcbiAgfSxcbiAge1xuICAgIHdpZHRoOiAzOSxcbiAgICBjb250ZW50OiAoXG4gICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL3ZpZGVvLWdhbWVzLnBuZ1wiIGhlaWdodD1cIjQwMFwiIHdpZHRoPVwiODAwXCIgLz5cbiAgICApXG4gIH0sXG4gIHtcbiAgICB3aWR0aDogMjAsXG4gICAgY29udGVudDogKFxuICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9nb2Qtb2Ytd2FyLnBuZ1wiIGhlaWdodD1cIjYwMFwiIHdpZHRoPVwiNjAwXCIgLz5cbiAgICApXG4gIH0sXG4gIHtcbiAgICB3aWR0aDogMjAsXG4gICAgY29udGVudDogKFxuICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9pbnRleC1wb29sLnBuZ1wiIGhlaWdodD1cIjYwMFwiIHdpZHRoPVwiNjAwXCIgLz5cbiAgICApXG4gIH0sXG4gIHtcbiAgICB3aWR0aDogMjAsXG4gICAgY29udGVudDogKFxuICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9sZW5vdm8teW9nYS5wbmdcIiBoZWlnaHQ9XCI2MDBcIiB3aWR0aD1cIjYwMFwiIC8+XG4gICAgKVxuICB9LFxuICB7XG4gICAgd2lkdGg6IDIwLFxuICAgIGNvbnRlbnQ6IChcbiAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvcG9rZW1vbi5wbmdcIiBoZWlnaHQ9XCI2MDBcIiB3aWR0aD1cIjYwMFwiIC8+XG4gICAgKVxuICB9LFxuICB7XG4gICAgd2lkdGg6IDIwLFxuICAgIGNvbnRlbnQ6IChcbiAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvc2Ftc3VuZy0yNC5wbmdcIiBoZWlnaHQ9XCI2MDBcIiB3aWR0aD1cIjYwMFwiIC8+XG4gICAgKVxuICB9LFxuICB7XG4gICAgd2lkdGg6IDIwLFxuICAgIGNvbnRlbnQ6IChcbiAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvZ29kLW9mLXdhci5wbmdcIiBoZWlnaHQ9XCI2MDBcIiB3aWR0aD1cIjYwMFwiIC8+XG4gICAgKVxuICB9LFxuICB7XG4gICAgd2lkdGg6IDIwLFxuICAgIGNvbnRlbnQ6IChcbiAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvaW50ZXgtcG9vbC5wbmdcIiBoZWlnaHQ9XCI2MDBcIiB3aWR0aD1cIjYwMFwiIC8+XG4gICAgKVxuICB9LFxuICB7XG4gICAgd2lkdGg6IDIwLFxuICAgIGNvbnRlbnQ6IChcbiAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvbGVub3ZvLXlvZ2EucG5nXCIgaGVpZ2h0PVwiNjAwXCIgd2lkdGg9XCI2MDBcIiAvPlxuICAgIClcbiAgfSxcbiAge1xuICAgIHdpZHRoOiAyMCxcbiAgICBjb250ZW50OiAoXG4gICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL3Bva2Vtb24ucG5nXCIgaGVpZ2h0PVwiNjAwXCIgd2lkdGg9XCI2MDBcIiAvPlxuICAgIClcbiAgfSxcbiAge1xuICAgIHdpZHRoOiAyMCxcbiAgICBjb250ZW50OiAoXG4gICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL3NhbXN1bmctMjQucG5nXCIgaGVpZ2h0PVwiNjAwXCIgd2lkdGg9XCI2MDBcIiAgLz5cbiAgICApXG4gIH0sXG5dXG5cbnR5cGUgUmVuZGVyT3B0aW9ucyA9IHtcbiAgd2lkdGg6IG51bWJlcixcbiAgZ3Jvdz86IGJvb2xlYW4sXG4gIGhlaWdodD86IHN0cmluZyxcbiAgY29udGVudDogaC5KU1guRWxlbWVudFxufVxuXG5leHBvcnQgY2xhc3MgV2lkZ2V0IGV4dGVuZHMgQ29tcG9uZW50PFdpZGdldFN0YXRlLCBhbnk+IHtcblxuICByZW5kZXIoKTogaC5KU1guRWxlbWVudCB7XG4gICAgaWYgKHRoaXMucHJvcHMuc3RhdHVzID09PSBXaWRnZXRTdGF0dXMuRU1QVFkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcldpZGdldCh7XG4gICAgICAgIHdpZHRoOiAwLFxuICAgICAgICBjb250ZW50OiBudWxsXG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5wcm9wcy5zdGF0dXMgPT09IFdpZGdldFN0YXR1cy5MT0FESU5HKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJXaWRnZXQoe1xuICAgICAgICB3aWR0aDogMjAsXG4gICAgICAgIGhlaWdodDogXCJhdXRvXCIsXG4gICAgICAgIGdyb3c6IHRydWUsXG4gICAgICAgIGNvbnRlbnQ6IChcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibG9hZGluZ1wiPjxpIGNsYXNzPVwic3Bpbm5lclwiPjwvaT48L2Rpdj5cbiAgICAgICAgKVxuICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMucHJvcHMuc3RhdHVzID09PSBXaWRnZXRTdGF0dXMuQ09OVEVOVCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyV2lkZ2V0KHRoaXMuZ2V0UmFuZG9tQ29udGVudCgpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5wcm9wcy5zdGF0dXMgPT09IFdpZGdldFN0YXR1cy5PQkpFQ1RJVkUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcldpZGdldCh7XG4gICAgICAgIHdpZHRoOiAyMCxcbiAgICAgICAgY29udGVudDogKFxuICAgICAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvZGVhbC1vZi10aGUtZGF5LnBuZ1wiIGhlaWdodD1cIjYwMFwiIHdpZHRoPVwiNjAwXCIgLz5cbiAgICAgICAgKVxuICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMucHJvcHMuc3RhdHVzID09PSBXaWRnZXRTdGF0dXMuQ09NUExFVEUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcldpZGdldCh7XG4gICAgICAgIHdpZHRoOiAyMCxcbiAgICAgICAgY29udGVudDogKFxuICAgICAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvZGVhbC1vZi10aGUtZGF5LWRvbmUucG5nXCIgaGVpZ2h0PVwiNjAwXCIgd2lkdGg9XCI2MDBcIiAvPlxuICAgICAgICApXG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFdpZGdldCAke3RoaXMucHJvcHMuaW5kZXh9IGluIHVua25vd24gc3RhdHVzICR7dGhpcy5wcm9wcy5zdGF0dXN9LmApO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcldpZGdldChvcHRzOiBSZW5kZXJPcHRpb25zKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3M9XCJ3aWRnZXRcIlxuICAgICAgICBzdHlsZT17e1xuICAgICAgICAgIFwiZmxleFwiOiBgJHtvcHRzLmdyb3cgPyAnMScgOiAnMCd9IDAgJHtvcHRzLndpZHRofSVgLFxuICAgICAgICAgIFwiaGVpZ2h0XCI6IG9wdHMuaGVpZ2h0IHx8IFwiZml0LWNvbnRlbnRcIixcbiAgICAgICAgICBcImRpc3BsYXlcIjogYCR7dGhpcy5wcm9wcy5zdGF0dXMgPT09IFdpZGdldFN0YXR1cy5FTVBUWSA/IFwibm9uZVwiIDogXCJmbGV4XCIgfWBcbiAgICAgICAgfX1cbiAgICAgICAgb25Ub3VjaFN0YXJ0PXsgKGUpID0+IFN0b3JlTGV2ZWxDb250cm9sbGVyLmNsaWNrKHRoaXMucHJvcHMuaW5kZXgsIGUpIH0+XG4gICAgICAgIHtvcHRzLmNvbnRlbnR9XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cblxuICBwcml2YXRlIGdldFJhbmRvbUNvbnRlbnQoKSA6IHsgd2lkdGg6IG51bWJlciwgY29udGVudDogaC5KU1guRWxlbWVudCB9IHtcbiAgICByZXR1cm4gQ09OVEVOVFtnZXRSYW5kb21JbnRlZ2VyKDAsIENPTlRFTlQubGVuZ3RoKV07XG4gIH1cbn0iLCJpbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gXCJsdXhvblwiO1xuaW1wb3J0IHsgaCwgQ29tcG9uZW50IH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IFwiLi9UaW1lci5zY3NzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGltZXJQcm9wcyB7XG4gIHVudGlsIDogRGF0ZVRpbWVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUaW1lclN0YXRlIHtcbiAgc2Vjb25kczogbnVtYmVyLFxuICBtaWxsaXNlY29uZHM6IG51bWJlclxufVxuXG5leHBvcnQgY2xhc3MgVGltZXIgZXh0ZW5kcyBDb21wb25lbnQ8VGltZXJQcm9wcywgVGltZXJTdGF0ZT4ge1xuXG4gIHByaXZhdGUgdGltZXIgOiBOb2RlSlMuVGltZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc2Vjb25kczogMCxcbiAgICAgIG1pbGxpc2Vjb25kczogMFxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCk6IHZvaWQge1xuICAgIHRoaXMudGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMudW50aWwuaXNWYWxpZCkgeyByZXR1cm47IH1cbiAgICAgIGxldCBkaWZmID0gdGhpcy5wcm9wcy51bnRpbC5kaWZmKERhdGVUaW1lLm5vdygpKS5zaGlmdFRvKFwic2Vjb25kc1wiLCBcIm1pbGxpc2Vjb25kc1wiKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzZWNvbmRzOiBNYXRoLm1heChkaWZmLnNlY29uZHMsIDApLFxuICAgICAgICBtaWxsaXNlY29uZHM6IE1hdGgubWF4KGRpZmYubWlsbGlzZWNvbmRzLCAwKVxuICAgICAgfSk7XG4gICAgfSwgMTAwKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCk6IHZvaWQge1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7XG4gIH1cblxuICByZW5kZXIoKSA6IGguSlNYLkVsZW1lbnQge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzPVwidGltZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImxhYmVsXCI+VGltZTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPXtgdmFsdWUgJHt0aGlzLnN0YXRlLnNlY29uZHMgPD0gNSAmJiB0aGlzLnN0YXRlLm1pbGxpc2Vjb25kcyt0aGlzLnN0YXRlLnNlY29uZHMgIT09IDAgPyBcImRhbmdlclwiIDogXCJcIiB9YH0+XG4gICAgICAgICAgeyB0aGlzLnN0YXRlLnNlY29uZHMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpIH1cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1hcmtlclwiPi48L3NwYW4+XG4gICAgICAgICAgeyB0aGlzLnN0YXRlLm1pbGxpc2Vjb25kcy50b1N0cmluZygpLnBhZEVuZCgzLCAnMCcpIH1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn0iLCJleHBvcnQgZnVuY3Rpb24gZ2V0QWNjdXJhY3koY2FydDogbnVtYmVyLCBjbGlja3M6IG51bWJlcikge1xuICBpZiAoIWNhcnQgfHwgIWNsaWNrcykge1xuICAgIHJldHVybiBgMC4wMCVgO1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBgJHsoY2FydCAvIGNsaWNrcykudG9GaXhlZCgyKX0lYDtcbiAgfVxufSIsImV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21JbnRlZ2VyKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcikgOiBudW1iZXIge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKSArIG1pbjtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBpc1NhZmFyaSgpIDogYm9vbGVhbiB7XG4gIC8vaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzk0NDQ2MC9kZXRlY3Qtc2FmYXJpLWJyb3dzZXJcbiAgcmV0dXJuIHR5cGVvZiAod2luZG93IGFzIGFueSkuR2VzdHVyZUV2ZW50ID09PSBcImZ1bmN0aW9uXCJcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbFN0b3JhZ2UobmFtZSA6IHN0cmluZykgOiBhbnkge1xuICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShuYW1lKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRMb2NhbFN0b3JhZ2UobmFtZSA6IHN0cmluZywgdmFsdWUgOiBhbnkpIHtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0obmFtZSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLy8gdGhlc2UgYXJlbid0IHJlYWxseSBwcml2YXRlLCBidXQgbm9yIGFyZSB0aGV5IHJlYWxseSB1c2VmdWwgdG8gZG9jdW1lbnRcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBMdXhvbkVycm9yIGV4dGVuZHMgRXJyb3Ige31cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbmNsYXNzIEludmFsaWREYXRlVGltZUVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7XG4gIGNvbnN0cnVjdG9yKHJlYXNvbikge1xuICAgIHN1cGVyKGBJbnZhbGlkIERhdGVUaW1lOiAke3JlYXNvbi50b01lc3NhZ2UoKX1gKTtcbiAgfVxuXG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuY2xhc3MgSW52YWxpZEludGVydmFsRXJyb3IgZXh0ZW5kcyBMdXhvbkVycm9yIHtcbiAgY29uc3RydWN0b3IocmVhc29uKSB7XG4gICAgc3VwZXIoYEludmFsaWQgSW50ZXJ2YWw6ICR7cmVhc29uLnRvTWVzc2FnZSgpfWApO1xuICB9XG5cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jbGFzcyBJbnZhbGlkRHVyYXRpb25FcnJvciBleHRlbmRzIEx1eG9uRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihyZWFzb24pIHtcbiAgICBzdXBlcihgSW52YWxpZCBEdXJhdGlvbjogJHtyZWFzb24udG9NZXNzYWdlKCl9YCk7XG4gIH1cblxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmNsYXNzIENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7fVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmNsYXNzIEludmFsaWRVbml0RXJyb3IgZXh0ZW5kcyBMdXhvbkVycm9yIHtcbiAgY29uc3RydWN0b3IodW5pdCkge1xuICAgIHN1cGVyKGBJbnZhbGlkIHVuaXQgJHt1bml0fWApO1xuICB9XG5cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jbGFzcyBJbnZhbGlkQXJndW1lbnRFcnJvciBleHRlbmRzIEx1eG9uRXJyb3Ige31cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jbGFzcyBab25lSXNBYnN0cmFjdEVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiWm9uZSBpcyBhbiBhYnN0cmFjdCBjbGFzc1wiKTtcbiAgfVxuXG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgbiA9IFwibnVtZXJpY1wiLFxuICAgICAgcyA9IFwic2hvcnRcIixcbiAgICAgIGwgPSBcImxvbmdcIjtcbmNvbnN0IERBVEVfU0hPUlQgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBuLFxuICBkYXk6IG5cbn07XG5jb25zdCBEQVRFX01FRCA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IHMsXG4gIGRheTogblxufTtcbmNvbnN0IERBVEVfTUVEX1dJVEhfV0VFS0RBWSA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IHMsXG4gIGRheTogbixcbiAgd2Vla2RheTogc1xufTtcbmNvbnN0IERBVEVfRlVMTCA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IGwsXG4gIGRheTogblxufTtcbmNvbnN0IERBVEVfSFVHRSA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IGwsXG4gIGRheTogbixcbiAgd2Vla2RheTogbFxufTtcbmNvbnN0IFRJTUVfU0lNUExFID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG5cbn07XG5jb25zdCBUSU1FX1dJVEhfU0VDT05EUyA9IHtcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG5cbn07XG5jb25zdCBUSU1FX1dJVEhfU0hPUlRfT0ZGU0VUID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgdGltZVpvbmVOYW1lOiBzXG59O1xuY29uc3QgVElNRV9XSVRIX0xPTkdfT0ZGU0VUID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgdGltZVpvbmVOYW1lOiBsXG59O1xuY29uc3QgVElNRV8yNF9TSU1QTEUgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgaG91ckN5Y2xlOiBcImgyM1wiXG59O1xuY29uc3QgVElNRV8yNF9XSVRIX1NFQ09ORFMgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICBob3VyQ3ljbGU6IFwiaDIzXCJcbn07XG5jb25zdCBUSU1FXzI0X1dJVEhfU0hPUlRfT0ZGU0VUID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgaG91ckN5Y2xlOiBcImgyM1wiLFxuICB0aW1lWm9uZU5hbWU6IHNcbn07XG5jb25zdCBUSU1FXzI0X1dJVEhfTE9OR19PRkZTRVQgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICBob3VyQ3ljbGU6IFwiaDIzXCIsXG4gIHRpbWVab25lTmFtZTogbFxufTtcbmNvbnN0IERBVEVUSU1FX1NIT1JUID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbixcbiAgZGF5OiBuLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG5cbn07XG5jb25zdCBEQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFMgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBuLFxuICBkYXk6IG4sXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuXG59O1xuY29uc3QgREFURVRJTUVfTUVEID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogcyxcbiAgZGF5OiBuLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG5cbn07XG5jb25zdCBEQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogcyxcbiAgZGF5OiBuLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogblxufTtcbmNvbnN0IERBVEVUSU1FX01FRF9XSVRIX1dFRUtEQVkgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBzLFxuICBkYXk6IG4sXG4gIHdlZWtkYXk6IHMsXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogblxufTtcbmNvbnN0IERBVEVUSU1FX0ZVTEwgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBsLFxuICBkYXk6IG4sXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgdGltZVpvbmVOYW1lOiBzXG59O1xuY29uc3QgREFURVRJTUVfRlVMTF9XSVRIX1NFQ09ORFMgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBsLFxuICBkYXk6IG4sXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICB0aW1lWm9uZU5hbWU6IHNcbn07XG5jb25zdCBEQVRFVElNRV9IVUdFID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuLFxuICB3ZWVrZGF5OiBsLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHRpbWVab25lTmFtZTogbFxufTtcbmNvbnN0IERBVEVUSU1FX0hVR0VfV0lUSF9TRUNPTkRTID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuLFxuICB3ZWVrZGF5OiBsLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgdGltZVpvbmVOYW1lOiBsXG59O1xuXG4vKlxuICBUaGlzIGlzIGp1c3QgYSBqdW5rIGRyYXdlciwgY29udGFpbmluZyBhbnl0aGluZyB1c2VkIGFjcm9zcyBtdWx0aXBsZSBjbGFzc2VzLlxuICBCZWNhdXNlIEx1eG9uIGlzIHNtYWxsKGlzaCksIHRoaXMgc2hvdWxkIHN0YXkgc21hbGwgYW5kIHdlIHdvbid0IHdvcnJ5IGFib3V0IHNwbGl0dGluZ1xuICBpdCB1cCBpbnRvLCBzYXksIHBhcnNpbmdVdGlsLmpzIGFuZCBiYXNpY1V0aWwuanMgYW5kIHNvIG9uLiBCdXQgdGhleSBhcmUgZGl2aWRlZCB1cCBieSBmZWF0dXJlIGFyZWEuXG4qL1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG4vLyBUWVBFU1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gXCJ1bmRlZmluZWRcIjtcbn1cbmZ1bmN0aW9uIGlzTnVtYmVyKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSBcIm51bWJlclwiO1xufVxuZnVuY3Rpb24gaXNJbnRlZ2VyKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSBcIm51bWJlclwiICYmIG8gJSAxID09PSAwO1xufVxuZnVuY3Rpb24gaXNTdHJpbmcobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09IFwic3RyaW5nXCI7XG59XG5mdW5jdGlvbiBpc0RhdGUobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pID09PSBcIltvYmplY3QgRGF0ZV1cIjtcbn0gLy8gQ0FQQUJJTElUSUVTXG5cbmZ1bmN0aW9uIGhhc1JlbGF0aXZlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB0eXBlb2YgSW50bCAhPT0gXCJ1bmRlZmluZWRcIiAmJiAhIUludGwuUmVsYXRpdmVUaW1lRm9ybWF0O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59IC8vIE9CSkVDVFMgQU5EIEFSUkFZU1xuXG5mdW5jdGlvbiBtYXliZUFycmF5KHRoaW5nKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHRoaW5nKSA/IHRoaW5nIDogW3RoaW5nXTtcbn1cbmZ1bmN0aW9uIGJlc3RCeShhcnIsIGJ5LCBjb21wYXJlKSB7XG4gIGlmIChhcnIubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBhcnIucmVkdWNlKChiZXN0LCBuZXh0KSA9PiB7XG4gICAgY29uc3QgcGFpciA9IFtieShuZXh0KSwgbmV4dF07XG5cbiAgICBpZiAoIWJlc3QpIHtcbiAgICAgIHJldHVybiBwYWlyO1xuICAgIH0gZWxzZSBpZiAoY29tcGFyZShiZXN0WzBdLCBwYWlyWzBdKSA9PT0gYmVzdFswXSkge1xuICAgICAgcmV0dXJuIGJlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYWlyO1xuICAgIH1cbiAgfSwgbnVsbClbMV07XG59XG5mdW5jdGlvbiBwaWNrKG9iaiwga2V5cykge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoKGEsIGspID0+IHtcbiAgICBhW2tdID0gb2JqW2tdO1xuICAgIHJldHVybiBhO1xuICB9LCB7fSk7XG59XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufSAvLyBOVU1CRVJTIEFORCBTVFJJTkdTXG5cbmZ1bmN0aW9uIGludGVnZXJCZXR3ZWVuKHRoaW5nLCBib3R0b20sIHRvcCkge1xuICByZXR1cm4gaXNJbnRlZ2VyKHRoaW5nKSAmJiB0aGluZyA+PSBib3R0b20gJiYgdGhpbmcgPD0gdG9wO1xufSAvLyB4ICUgbiBidXQgdGFrZXMgdGhlIHNpZ24gb2YgbiBpbnN0ZWFkIG9mIHhcblxuZnVuY3Rpb24gZmxvb3JNb2QoeCwgbikge1xuICByZXR1cm4geCAtIG4gKiBNYXRoLmZsb29yKHggLyBuKTtcbn1cbmZ1bmN0aW9uIHBhZFN0YXJ0KGlucHV0LCBuID0gMikge1xuICBjb25zdCBpc05lZyA9IGlucHV0IDwgMDtcbiAgbGV0IHBhZGRlZDtcblxuICBpZiAoaXNOZWcpIHtcbiAgICBwYWRkZWQgPSBcIi1cIiArIChcIlwiICsgLWlucHV0KS5wYWRTdGFydChuLCBcIjBcIik7XG4gIH0gZWxzZSB7XG4gICAgcGFkZGVkID0gKFwiXCIgKyBpbnB1dCkucGFkU3RhcnQobiwgXCIwXCIpO1xuICB9XG5cbiAgcmV0dXJuIHBhZGRlZDtcbn1cbmZ1bmN0aW9uIHBhcnNlSW50ZWdlcihzdHJpbmcpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHN0cmluZykgfHwgc3RyaW5nID09PSBudWxsIHx8IHN0cmluZyA9PT0gXCJcIikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHN0cmluZywgMTApO1xuICB9XG59XG5mdW5jdGlvbiBwYXJzZUZsb2F0aW5nKHN0cmluZykge1xuICBpZiAoaXNVbmRlZmluZWQoc3RyaW5nKSB8fCBzdHJpbmcgPT09IG51bGwgfHwgc3RyaW5nID09PSBcIlwiKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChzdHJpbmcpO1xuICB9XG59XG5mdW5jdGlvbiBwYXJzZU1pbGxpcyhmcmFjdGlvbikge1xuICAvLyBSZXR1cm4gdW5kZWZpbmVkIChpbnN0ZWFkIG9mIDApIGluIHRoZXNlIGNhc2VzLCB3aGVyZSBmcmFjdGlvbiBpcyBub3Qgc2V0XG4gIGlmIChpc1VuZGVmaW5lZChmcmFjdGlvbikgfHwgZnJhY3Rpb24gPT09IG51bGwgfHwgZnJhY3Rpb24gPT09IFwiXCIpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGYgPSBwYXJzZUZsb2F0KFwiMC5cIiArIGZyYWN0aW9uKSAqIDEwMDA7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoZik7XG4gIH1cbn1cbmZ1bmN0aW9uIHJvdW5kVG8obnVtYmVyLCBkaWdpdHMsIHRvd2FyZFplcm8gPSBmYWxzZSkge1xuICBjb25zdCBmYWN0b3IgPSAxMCAqKiBkaWdpdHMsXG4gICAgICAgIHJvdW5kZXIgPSB0b3dhcmRaZXJvID8gTWF0aC50cnVuYyA6IE1hdGgucm91bmQ7XG4gIHJldHVybiByb3VuZGVyKG51bWJlciAqIGZhY3RvcikgLyBmYWN0b3I7XG59IC8vIERBVEUgQkFTSUNTXG5cbmZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICByZXR1cm4geWVhciAlIDQgPT09IDAgJiYgKHllYXIgJSAxMDAgIT09IDAgfHwgeWVhciAlIDQwMCA9PT0gMCk7XG59XG5mdW5jdGlvbiBkYXlzSW5ZZWFyKHllYXIpIHtcbiAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjU7XG59XG5mdW5jdGlvbiBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICBjb25zdCBtb2RNb250aCA9IGZsb29yTW9kKG1vbnRoIC0gMSwgMTIpICsgMSxcbiAgICAgICAgbW9kWWVhciA9IHllYXIgKyAobW9udGggLSBtb2RNb250aCkgLyAxMjtcblxuICBpZiAobW9kTW9udGggPT09IDIpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcihtb2RZZWFyKSA/IDI5IDogMjg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFszMSwgbnVsbCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdW21vZE1vbnRoIC0gMV07XG4gIH1cbn0gLy8gY292ZXJ0IGEgY2FsZW5kYXIgb2JqZWN0IHRvIGEgbG9jYWwgdGltZXN0YW1wIChlcG9jaCwgYnV0IHdpdGggdGhlIG9mZnNldCBiYWtlZCBpbilcblxuZnVuY3Rpb24gb2JqVG9Mb2NhbFRTKG9iaikge1xuICBsZXQgZCA9IERhdGUuVVRDKG9iai55ZWFyLCBvYmoubW9udGggLSAxLCBvYmouZGF5LCBvYmouaG91ciwgb2JqLm1pbnV0ZSwgb2JqLnNlY29uZCwgb2JqLm1pbGxpc2Vjb25kKTsgLy8gZm9yIGxlZ2FjeSByZWFzb25zLCB5ZWFycyBiZXR3ZWVuIDAgYW5kIDk5IGFyZSBpbnRlcnByZXRlZCBhcyAxOVhYOyByZXZlcnQgdGhhdFxuXG4gIGlmIChvYmoueWVhciA8IDEwMCAmJiBvYmoueWVhciA+PSAwKSB7XG4gICAgZCA9IG5ldyBEYXRlKGQpO1xuICAgIGQuc2V0VVRDRnVsbFllYXIoZC5nZXRVVENGdWxsWWVhcigpIC0gMTkwMCk7XG4gIH1cblxuICByZXR1cm4gK2Q7XG59XG5mdW5jdGlvbiB3ZWVrc0luV2Vla1llYXIod2Vla1llYXIpIHtcbiAgY29uc3QgcDEgPSAod2Vla1llYXIgKyBNYXRoLmZsb29yKHdlZWtZZWFyIC8gNCkgLSBNYXRoLmZsb29yKHdlZWtZZWFyIC8gMTAwKSArIE1hdGguZmxvb3Iod2Vla1llYXIgLyA0MDApKSAlIDcsXG4gICAgICAgIGxhc3QgPSB3ZWVrWWVhciAtIDEsXG4gICAgICAgIHAyID0gKGxhc3QgKyBNYXRoLmZsb29yKGxhc3QgLyA0KSAtIE1hdGguZmxvb3IobGFzdCAvIDEwMCkgKyBNYXRoLmZsb29yKGxhc3QgLyA0MDApKSAlIDc7XG4gIHJldHVybiBwMSA9PT0gNCB8fCBwMiA9PT0gMyA/IDUzIDogNTI7XG59XG5mdW5jdGlvbiB1bnRydW5jYXRlWWVhcih5ZWFyKSB7XG4gIGlmICh5ZWFyID4gOTkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHJldHVybiB5ZWFyID4gNjAgPyAxOTAwICsgeWVhciA6IDIwMDAgKyB5ZWFyO1xufSAvLyBQQVJTSU5HXG5cbmZ1bmN0aW9uIHBhcnNlWm9uZUluZm8odHMsIG9mZnNldEZvcm1hdCwgbG9jYWxlLCB0aW1lWm9uZSA9IG51bGwpIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRzKSxcbiAgICAgICAgaW50bE9wdHMgPSB7XG4gICAgaG91ckN5Y2xlOiBcImgyM1wiLFxuICAgIHllYXI6IFwibnVtZXJpY1wiLFxuICAgIG1vbnRoOiBcIjItZGlnaXRcIixcbiAgICBkYXk6IFwiMi1kaWdpdFwiLFxuICAgIGhvdXI6IFwiMi1kaWdpdFwiLFxuICAgIG1pbnV0ZTogXCIyLWRpZ2l0XCJcbiAgfTtcblxuICBpZiAodGltZVpvbmUpIHtcbiAgICBpbnRsT3B0cy50aW1lWm9uZSA9IHRpbWVab25lO1xuICB9XG5cbiAgY29uc3QgbW9kaWZpZWQgPSB7XG4gICAgdGltZVpvbmVOYW1lOiBvZmZzZXRGb3JtYXQsXG4gICAgLi4uaW50bE9wdHNcbiAgfTtcbiAgY29uc3QgcGFyc2VkID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBtb2RpZmllZCkuZm9ybWF0VG9QYXJ0cyhkYXRlKS5maW5kKG0gPT4gbS50eXBlLnRvTG93ZXJDYXNlKCkgPT09IFwidGltZXpvbmVuYW1lXCIpO1xuICByZXR1cm4gcGFyc2VkID8gcGFyc2VkLnZhbHVlIDogbnVsbDtcbn0gLy8gc2lnbmVkT2Zmc2V0KCctNScsICczMCcpIC0+IC0zMzBcblxuZnVuY3Rpb24gc2lnbmVkT2Zmc2V0KG9mZkhvdXJTdHIsIG9mZk1pbnV0ZVN0cikge1xuICBsZXQgb2ZmSG91ciA9IHBhcnNlSW50KG9mZkhvdXJTdHIsIDEwKTsgLy8gZG9uJ3QgfHwgdGhpcyBiZWNhdXNlIHdlIHdhbnQgdG8gcHJlc2VydmUgLTBcblxuICBpZiAoTnVtYmVyLmlzTmFOKG9mZkhvdXIpKSB7XG4gICAgb2ZmSG91ciA9IDA7XG4gIH1cblxuICBjb25zdCBvZmZNaW4gPSBwYXJzZUludChvZmZNaW51dGVTdHIsIDEwKSB8fCAwLFxuICAgICAgICBvZmZNaW5TaWduZWQgPSBvZmZIb3VyIDwgMCB8fCBPYmplY3QuaXMob2ZmSG91ciwgLTApID8gLW9mZk1pbiA6IG9mZk1pbjtcbiAgcmV0dXJuIG9mZkhvdXIgKiA2MCArIG9mZk1pblNpZ25lZDtcbn0gLy8gQ09FUkNJT05cblxuZnVuY3Rpb24gYXNOdW1iZXIodmFsdWUpIHtcbiAgY29uc3QgbnVtZXJpY1ZhbHVlID0gTnVtYmVyKHZhbHVlKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIgfHwgdmFsdWUgPT09IFwiXCIgfHwgTnVtYmVyLmlzTmFOKG51bWVyaWNWYWx1ZSkpIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihgSW52YWxpZCB1bml0IHZhbHVlICR7dmFsdWV9YCk7XG4gIHJldHVybiBudW1lcmljVmFsdWU7XG59XG5mdW5jdGlvbiBub3JtYWxpemVPYmplY3Qob2JqLCBub3JtYWxpemVyKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWQgPSB7fTtcblxuICBmb3IgKGNvbnN0IHUgaW4gb2JqKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KG9iaiwgdSkpIHtcbiAgICAgIGNvbnN0IHYgPSBvYmpbdV07XG4gICAgICBpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgbm9ybWFsaXplZFtub3JtYWxpemVyKHUpXSA9IGFzTnVtYmVyKHYpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBub3JtYWxpemVkO1xufVxuZnVuY3Rpb24gZm9ybWF0T2Zmc2V0KG9mZnNldCwgZm9ybWF0KSB7XG4gIGNvbnN0IGhvdXJzID0gTWF0aC50cnVuYyhNYXRoLmFicyhvZmZzZXQgLyA2MCkpLFxuICAgICAgICBtaW51dGVzID0gTWF0aC50cnVuYyhNYXRoLmFicyhvZmZzZXQgJSA2MCkpLFxuICAgICAgICBzaWduID0gb2Zmc2V0ID49IDAgPyBcIitcIiA6IFwiLVwiO1xuXG4gIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgY2FzZSBcInNob3J0XCI6XG4gICAgICByZXR1cm4gYCR7c2lnbn0ke3BhZFN0YXJ0KGhvdXJzLCAyKX06JHtwYWRTdGFydChtaW51dGVzLCAyKX1gO1xuXG4gICAgY2FzZSBcIm5hcnJvd1wiOlxuICAgICAgcmV0dXJuIGAke3NpZ259JHtob3Vyc30ke21pbnV0ZXMgPiAwID8gYDoke21pbnV0ZXN9YCA6IFwiXCJ9YDtcblxuICAgIGNhc2UgXCJ0ZWNoaWVcIjpcbiAgICAgIHJldHVybiBgJHtzaWdufSR7cGFkU3RhcnQoaG91cnMsIDIpfSR7cGFkU3RhcnQobWludXRlcywgMil9YDtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgVmFsdWUgZm9ybWF0ICR7Zm9ybWF0fSBpcyBvdXQgb2YgcmFuZ2UgZm9yIHByb3BlcnR5IGZvcm1hdGApO1xuICB9XG59XG5mdW5jdGlvbiB0aW1lT2JqZWN0KG9iaikge1xuICByZXR1cm4gcGljayhvYmosIFtcImhvdXJcIiwgXCJtaW51dGVcIiwgXCJzZWNvbmRcIiwgXCJtaWxsaXNlY29uZFwiXSk7XG59XG5jb25zdCBpYW5hUmVnZXggPSAvW0EtWmEtel8rLV17MSwyNTZ9KD86Oj9cXC9bQS1aYS16MC05XystXXsxLDI1Nn0oPzpcXC9bQS1aYS16MC05XystXXsxLDI1Nn0pPyk/LztcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuY29uc3QgbW9udGhzTG9uZyA9IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdO1xuY29uc3QgbW9udGhzU2hvcnQgPSBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl07XG5jb25zdCBtb250aHNOYXJyb3cgPSBbXCJKXCIsIFwiRlwiLCBcIk1cIiwgXCJBXCIsIFwiTVwiLCBcIkpcIiwgXCJKXCIsIFwiQVwiLCBcIlNcIiwgXCJPXCIsIFwiTlwiLCBcIkRcIl07XG5mdW5jdGlvbiBtb250aHMobGVuZ3RoKSB7XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSBcIm5hcnJvd1wiOlxuICAgICAgcmV0dXJuIFsuLi5tb250aHNOYXJyb3ddO1xuXG4gICAgY2FzZSBcInNob3J0XCI6XG4gICAgICByZXR1cm4gWy4uLm1vbnRoc1Nob3J0XTtcblxuICAgIGNhc2UgXCJsb25nXCI6XG4gICAgICByZXR1cm4gWy4uLm1vbnRoc0xvbmddO1xuXG4gICAgY2FzZSBcIm51bWVyaWNcIjpcbiAgICAgIHJldHVybiBbXCIxXCIsIFwiMlwiLCBcIjNcIiwgXCI0XCIsIFwiNVwiLCBcIjZcIiwgXCI3XCIsIFwiOFwiLCBcIjlcIiwgXCIxMFwiLCBcIjExXCIsIFwiMTJcIl07XG5cbiAgICBjYXNlIFwiMi1kaWdpdFwiOlxuICAgICAgcmV0dXJuIFtcIjAxXCIsIFwiMDJcIiwgXCIwM1wiLCBcIjA0XCIsIFwiMDVcIiwgXCIwNlwiLCBcIjA3XCIsIFwiMDhcIiwgXCIwOVwiLCBcIjEwXCIsIFwiMTFcIiwgXCIxMlwiXTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuY29uc3Qgd2Vla2RheXNMb25nID0gW1wiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIiwgXCJTdW5kYXlcIl07XG5jb25zdCB3ZWVrZGF5c1Nob3J0ID0gW1wiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCIsIFwiU3VuXCJdO1xuY29uc3Qgd2Vla2RheXNOYXJyb3cgPSBbXCJNXCIsIFwiVFwiLCBcIldcIiwgXCJUXCIsIFwiRlwiLCBcIlNcIiwgXCJTXCJdO1xuZnVuY3Rpb24gd2Vla2RheXMobGVuZ3RoKSB7XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSBcIm5hcnJvd1wiOlxuICAgICAgcmV0dXJuIFsuLi53ZWVrZGF5c05hcnJvd107XG5cbiAgICBjYXNlIFwic2hvcnRcIjpcbiAgICAgIHJldHVybiBbLi4ud2Vla2RheXNTaG9ydF07XG5cbiAgICBjYXNlIFwibG9uZ1wiOlxuICAgICAgcmV0dXJuIFsuLi53ZWVrZGF5c0xvbmddO1xuXG4gICAgY2FzZSBcIm51bWVyaWNcIjpcbiAgICAgIHJldHVybiBbXCIxXCIsIFwiMlwiLCBcIjNcIiwgXCI0XCIsIFwiNVwiLCBcIjZcIiwgXCI3XCJdO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5jb25zdCBtZXJpZGllbXMgPSBbXCJBTVwiLCBcIlBNXCJdO1xuY29uc3QgZXJhc0xvbmcgPSBbXCJCZWZvcmUgQ2hyaXN0XCIsIFwiQW5ubyBEb21pbmlcIl07XG5jb25zdCBlcmFzU2hvcnQgPSBbXCJCQ1wiLCBcIkFEXCJdO1xuY29uc3QgZXJhc05hcnJvdyA9IFtcIkJcIiwgXCJBXCJdO1xuZnVuY3Rpb24gZXJhcyhsZW5ndGgpIHtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIFwibmFycm93XCI6XG4gICAgICByZXR1cm4gWy4uLmVyYXNOYXJyb3ddO1xuXG4gICAgY2FzZSBcInNob3J0XCI6XG4gICAgICByZXR1cm4gWy4uLmVyYXNTaG9ydF07XG5cbiAgICBjYXNlIFwibG9uZ1wiOlxuICAgICAgcmV0dXJuIFsuLi5lcmFzTG9uZ107XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIG1lcmlkaWVtRm9yRGF0ZVRpbWUoZHQpIHtcbiAgcmV0dXJuIG1lcmlkaWVtc1tkdC5ob3VyIDwgMTIgPyAwIDogMV07XG59XG5mdW5jdGlvbiB3ZWVrZGF5Rm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkge1xuICByZXR1cm4gd2Vla2RheXMobGVuZ3RoKVtkdC53ZWVrZGF5IC0gMV07XG59XG5mdW5jdGlvbiBtb250aEZvckRhdGVUaW1lKGR0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIG1vbnRocyhsZW5ndGgpW2R0Lm1vbnRoIC0gMV07XG59XG5mdW5jdGlvbiBlcmFGb3JEYXRlVGltZShkdCwgbGVuZ3RoKSB7XG4gIHJldHVybiBlcmFzKGxlbmd0aClbZHQueWVhciA8IDAgPyAwIDogMV07XG59XG5mdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZVRpbWUodW5pdCwgY291bnQsIG51bWVyaWMgPSBcImFsd2F5c1wiLCBuYXJyb3cgPSBmYWxzZSkge1xuICBjb25zdCB1bml0cyA9IHtcbiAgICB5ZWFyczogW1wieWVhclwiLCBcInlyLlwiXSxcbiAgICBxdWFydGVyczogW1wicXVhcnRlclwiLCBcInF0ci5cIl0sXG4gICAgbW9udGhzOiBbXCJtb250aFwiLCBcIm1vLlwiXSxcbiAgICB3ZWVrczogW1wid2Vla1wiLCBcIndrLlwiXSxcbiAgICBkYXlzOiBbXCJkYXlcIiwgXCJkYXlcIiwgXCJkYXlzXCJdLFxuICAgIGhvdXJzOiBbXCJob3VyXCIsIFwiaHIuXCJdLFxuICAgIG1pbnV0ZXM6IFtcIm1pbnV0ZVwiLCBcIm1pbi5cIl0sXG4gICAgc2Vjb25kczogW1wic2Vjb25kXCIsIFwic2VjLlwiXVxuICB9O1xuICBjb25zdCBsYXN0YWJsZSA9IFtcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIl0uaW5kZXhPZih1bml0KSA9PT0gLTE7XG5cbiAgaWYgKG51bWVyaWMgPT09IFwiYXV0b1wiICYmIGxhc3RhYmxlKSB7XG4gICAgY29uc3QgaXNEYXkgPSB1bml0ID09PSBcImRheXNcIjtcblxuICAgIHN3aXRjaCAoY291bnQpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIGlzRGF5ID8gXCJ0b21vcnJvd1wiIDogYG5leHQgJHt1bml0c1t1bml0XVswXX1gO1xuXG4gICAgICBjYXNlIC0xOlxuICAgICAgICByZXR1cm4gaXNEYXkgPyBcInllc3RlcmRheVwiIDogYGxhc3QgJHt1bml0c1t1bml0XVswXX1gO1xuXG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiBpc0RheSA/IFwidG9kYXlcIiA6IGB0aGlzICR7dW5pdHNbdW5pdF1bMF19YDtcblxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGlzSW5QYXN0ID0gT2JqZWN0LmlzKGNvdW50LCAtMCkgfHwgY291bnQgPCAwLFxuICAgICAgICBmbXRWYWx1ZSA9IE1hdGguYWJzKGNvdW50KSxcbiAgICAgICAgc2luZ3VsYXIgPSBmbXRWYWx1ZSA9PT0gMSxcbiAgICAgICAgbGlsVW5pdHMgPSB1bml0c1t1bml0XSxcbiAgICAgICAgZm10VW5pdCA9IG5hcnJvdyA/IHNpbmd1bGFyID8gbGlsVW5pdHNbMV0gOiBsaWxVbml0c1syXSB8fCBsaWxVbml0c1sxXSA6IHNpbmd1bGFyID8gdW5pdHNbdW5pdF1bMF0gOiB1bml0O1xuICByZXR1cm4gaXNJblBhc3QgPyBgJHtmbXRWYWx1ZX0gJHtmbXRVbml0fSBhZ29gIDogYGluICR7Zm10VmFsdWV9ICR7Zm10VW5pdH1gO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlUb2tlbnMoc3BsaXRzLCB0b2tlblRvU3RyaW5nKSB7XG4gIGxldCBzID0gXCJcIjtcblxuICBmb3IgKGNvbnN0IHRva2VuIG9mIHNwbGl0cykge1xuICAgIGlmICh0b2tlbi5saXRlcmFsKSB7XG4gICAgICBzICs9IHRva2VuLnZhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcyArPSB0b2tlblRvU3RyaW5nKHRva2VuLnZhbCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHM7XG59XG5cbmNvbnN0IG1hY3JvVG9rZW5Ub0Zvcm1hdE9wdHMgPSB7XG4gIEQ6IERBVEVfU0hPUlQsXG4gIEREOiBEQVRFX01FRCxcbiAgREREOiBEQVRFX0ZVTEwsXG4gIEREREQ6IERBVEVfSFVHRSxcbiAgdDogVElNRV9TSU1QTEUsXG4gIHR0OiBUSU1FX1dJVEhfU0VDT05EUyxcbiAgdHR0OiBUSU1FX1dJVEhfU0hPUlRfT0ZGU0VULFxuICB0dHR0OiBUSU1FX1dJVEhfTE9OR19PRkZTRVQsXG4gIFQ6IFRJTUVfMjRfU0lNUExFLFxuICBUVDogVElNRV8yNF9XSVRIX1NFQ09ORFMsXG4gIFRUVDogVElNRV8yNF9XSVRIX1NIT1JUX09GRlNFVCxcbiAgVFRUVDogVElNRV8yNF9XSVRIX0xPTkdfT0ZGU0VULFxuICBmOiBEQVRFVElNRV9TSE9SVCxcbiAgZmY6IERBVEVUSU1FX01FRCxcbiAgZmZmOiBEQVRFVElNRV9GVUxMLFxuICBmZmZmOiBEQVRFVElNRV9IVUdFLFxuICBGOiBEQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFMsXG4gIEZGOiBEQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTLFxuICBGRkY6IERBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTLFxuICBGRkZGOiBEQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EU1xufTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jbGFzcyBGb3JtYXR0ZXIge1xuICBzdGF0aWMgY3JlYXRlKGxvY2FsZSwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBGb3JtYXR0ZXIobG9jYWxlLCBvcHRzKTtcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZUZvcm1hdChmbXQpIHtcbiAgICBsZXQgY3VycmVudCA9IG51bGwsXG4gICAgICAgIGN1cnJlbnRGdWxsID0gXCJcIixcbiAgICAgICAgYnJhY2tldGVkID0gZmFsc2U7XG4gICAgY29uc3Qgc3BsaXRzID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZtdC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYyA9IGZtdC5jaGFyQXQoaSk7XG5cbiAgICAgIGlmIChjID09PSBcIidcIikge1xuICAgICAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNwbGl0cy5wdXNoKHtcbiAgICAgICAgICAgIGxpdGVyYWw6IGJyYWNrZXRlZCxcbiAgICAgICAgICAgIHZhbDogY3VycmVudEZ1bGxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPSBudWxsO1xuICAgICAgICBjdXJyZW50RnVsbCA9IFwiXCI7XG4gICAgICAgIGJyYWNrZXRlZCA9ICFicmFja2V0ZWQ7XG4gICAgICB9IGVsc2UgaWYgKGJyYWNrZXRlZCkge1xuICAgICAgICBjdXJyZW50RnVsbCArPSBjO1xuICAgICAgfSBlbHNlIGlmIChjID09PSBjdXJyZW50KSB7XG4gICAgICAgIGN1cnJlbnRGdWxsICs9IGM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNwbGl0cy5wdXNoKHtcbiAgICAgICAgICAgIGxpdGVyYWw6IGZhbHNlLFxuICAgICAgICAgICAgdmFsOiBjdXJyZW50RnVsbFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudEZ1bGwgPSBjO1xuICAgICAgICBjdXJyZW50ID0gYztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgc3BsaXRzLnB1c2goe1xuICAgICAgICBsaXRlcmFsOiBicmFja2V0ZWQsXG4gICAgICAgIHZhbDogY3VycmVudEZ1bGxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzcGxpdHM7XG4gIH1cblxuICBzdGF0aWMgbWFjcm9Ub2tlblRvRm9ybWF0T3B0cyh0b2tlbikge1xuICAgIHJldHVybiBtYWNyb1Rva2VuVG9Gb3JtYXRPcHRzW3Rva2VuXTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGxvY2FsZSwgZm9ybWF0T3B0cykge1xuICAgIHRoaXMub3B0cyA9IGZvcm1hdE9wdHM7XG4gICAgdGhpcy5sb2MgPSBsb2NhbGU7XG4gICAgdGhpcy5zeXN0ZW1Mb2MgPSBudWxsO1xuICB9XG5cbiAgZm9ybWF0V2l0aFN5c3RlbURlZmF1bHQoZHQsIG9wdHMpIHtcbiAgICBpZiAodGhpcy5zeXN0ZW1Mb2MgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuc3lzdGVtTG9jID0gdGhpcy5sb2MucmVkZWZhdWx0VG9TeXN0ZW0oKTtcbiAgICB9XG5cbiAgICBjb25zdCBkZiA9IHRoaXMuc3lzdGVtTG9jLmR0Rm9ybWF0dGVyKGR0LCB7IC4uLnRoaXMub3B0cyxcbiAgICAgIC4uLm9wdHNcbiAgICB9KTtcbiAgICByZXR1cm4gZGYuZm9ybWF0KCk7XG4gIH1cblxuICBmb3JtYXREYXRlVGltZShkdCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgZGYgPSB0aGlzLmxvYy5kdEZvcm1hdHRlcihkdCwgeyAuLi50aGlzLm9wdHMsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgcmV0dXJuIGRmLmZvcm1hdCgpO1xuICB9XG5cbiAgZm9ybWF0RGF0ZVRpbWVQYXJ0cyhkdCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgZGYgPSB0aGlzLmxvYy5kdEZvcm1hdHRlcihkdCwgeyAuLi50aGlzLm9wdHMsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgcmV0dXJuIGRmLmZvcm1hdFRvUGFydHMoKTtcbiAgfVxuXG4gIHJlc29sdmVkT3B0aW9ucyhkdCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgZGYgPSB0aGlzLmxvYy5kdEZvcm1hdHRlcihkdCwgeyAuLi50aGlzLm9wdHMsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgcmV0dXJuIGRmLnJlc29sdmVkT3B0aW9ucygpO1xuICB9XG5cbiAgbnVtKG4sIHAgPSAwKSB7XG4gICAgLy8gd2UgZ2V0IHNvbWUgcGVyZiBvdXQgb2YgZG9pbmcgdGhpcyBoZXJlLCBhbm5veWluZ2x5XG4gICAgaWYgKHRoaXMub3B0cy5mb3JjZVNpbXBsZSkge1xuICAgICAgcmV0dXJuIHBhZFN0YXJ0KG4sIHApO1xuICAgIH1cblxuICAgIGNvbnN0IG9wdHMgPSB7IC4uLnRoaXMub3B0c1xuICAgIH07XG5cbiAgICBpZiAocCA+IDApIHtcbiAgICAgIG9wdHMucGFkVG8gPSBwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmxvYy5udW1iZXJGb3JtYXR0ZXIob3B0cykuZm9ybWF0KG4pO1xuICB9XG5cbiAgZm9ybWF0RGF0ZVRpbWVGcm9tU3RyaW5nKGR0LCBmbXQpIHtcbiAgICBjb25zdCBrbm93bkVuZ2xpc2ggPSB0aGlzLmxvYy5saXN0aW5nTW9kZSgpID09PSBcImVuXCIsXG4gICAgICAgICAgdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPSB0aGlzLmxvYy5vdXRwdXRDYWxlbmRhciAmJiB0aGlzLmxvYy5vdXRwdXRDYWxlbmRhciAhPT0gXCJncmVnb3J5XCIsXG4gICAgICAgICAgc3RyaW5nID0gKG9wdHMsIGV4dHJhY3QpID0+IHRoaXMubG9jLmV4dHJhY3QoZHQsIG9wdHMsIGV4dHJhY3QpLFxuICAgICAgICAgIGZvcm1hdE9mZnNldCA9IG9wdHMgPT4ge1xuICAgICAgaWYgKGR0LmlzT2Zmc2V0Rml4ZWQgJiYgZHQub2Zmc2V0ID09PSAwICYmIG9wdHMuYWxsb3daKSB7XG4gICAgICAgIHJldHVybiBcIlpcIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGR0LmlzVmFsaWQgPyBkdC56b25lLmZvcm1hdE9mZnNldChkdC50cywgb3B0cy5mb3JtYXQpIDogXCJcIjtcbiAgICB9LFxuICAgICAgICAgIG1lcmlkaWVtID0gKCkgPT4ga25vd25FbmdsaXNoID8gbWVyaWRpZW1Gb3JEYXRlVGltZShkdCkgOiBzdHJpbmcoe1xuICAgICAgaG91cjogXCJudW1lcmljXCIsXG4gICAgICBob3VyQ3ljbGU6IFwiaDEyXCJcbiAgICB9LCBcImRheXBlcmlvZFwiKSxcbiAgICAgICAgICBtb250aCA9IChsZW5ndGgsIHN0YW5kYWxvbmUpID0+IGtub3duRW5nbGlzaCA/IG1vbnRoRm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkgOiBzdHJpbmcoc3RhbmRhbG9uZSA/IHtcbiAgICAgIG1vbnRoOiBsZW5ndGhcbiAgICB9IDoge1xuICAgICAgbW9udGg6IGxlbmd0aCxcbiAgICAgIGRheTogXCJudW1lcmljXCJcbiAgICB9LCBcIm1vbnRoXCIpLFxuICAgICAgICAgIHdlZWtkYXkgPSAobGVuZ3RoLCBzdGFuZGFsb25lKSA9PiBrbm93bkVuZ2xpc2ggPyB3ZWVrZGF5Rm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkgOiBzdHJpbmcoc3RhbmRhbG9uZSA/IHtcbiAgICAgIHdlZWtkYXk6IGxlbmd0aFxuICAgIH0gOiB7XG4gICAgICB3ZWVrZGF5OiBsZW5ndGgsXG4gICAgICBtb250aDogXCJsb25nXCIsXG4gICAgICBkYXk6IFwibnVtZXJpY1wiXG4gICAgfSwgXCJ3ZWVrZGF5XCIpLFxuICAgICAgICAgIG1heWJlTWFjcm8gPSB0b2tlbiA9PiB7XG4gICAgICBjb25zdCBmb3JtYXRPcHRzID0gRm9ybWF0dGVyLm1hY3JvVG9rZW5Ub0Zvcm1hdE9wdHModG9rZW4pO1xuXG4gICAgICBpZiAoZm9ybWF0T3B0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRXaXRoU3lzdGVtRGVmYXVsdChkdCwgZm9ybWF0T3B0cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgICBlcmEgPSBsZW5ndGggPT4ga25vd25FbmdsaXNoID8gZXJhRm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkgOiBzdHJpbmcoe1xuICAgICAgZXJhOiBsZW5ndGhcbiAgICB9LCBcImVyYVwiKSxcbiAgICAgICAgICB0b2tlblRvU3RyaW5nID0gdG9rZW4gPT4ge1xuICAgICAgLy8gV2hlcmUgcG9zc2libGU6IGh0dHA6Ly9jbGRyLnVuaWNvZGUub3JnL3RyYW5zbGF0aW9uL2RhdGUtdGltZS0xL2RhdGUtdGltZSNUT0MtU3RhbmRhbG9uZS12cy4tRm9ybWF0LVN0eWxlc1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAvLyBtc1xuICAgICAgICBjYXNlIFwiU1wiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5taWxsaXNlY29uZCk7XG5cbiAgICAgICAgY2FzZSBcInVcIjogLy8gZmFsbHMgdGhyb3VnaFxuXG4gICAgICAgIGNhc2UgXCJTU1NcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubWlsbGlzZWNvbmQsIDMpO1xuICAgICAgICAvLyBzZWNvbmRzXG5cbiAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQuc2Vjb25kKTtcblxuICAgICAgICBjYXNlIFwic3NcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQuc2Vjb25kLCAyKTtcbiAgICAgICAgLy8gZnJhY3Rpb25hbCBzZWNvbmRzXG5cbiAgICAgICAgY2FzZSBcInV1XCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKE1hdGguZmxvb3IoZHQubWlsbGlzZWNvbmQgLyAxMCksIDIpO1xuXG4gICAgICAgIGNhc2UgXCJ1dXVcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oTWF0aC5mbG9vcihkdC5taWxsaXNlY29uZCAvIDEwMCkpO1xuICAgICAgICAvLyBtaW51dGVzXG5cbiAgICAgICAgY2FzZSBcIm1cIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubWludXRlKTtcblxuICAgICAgICBjYXNlIFwibW1cIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubWludXRlLCAyKTtcbiAgICAgICAgLy8gaG91cnNcblxuICAgICAgICBjYXNlIFwiaFwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5ob3VyICUgMTIgPT09IDAgPyAxMiA6IGR0LmhvdXIgJSAxMik7XG5cbiAgICAgICAgY2FzZSBcImhoXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LmhvdXIgJSAxMiA9PT0gMCA/IDEyIDogZHQuaG91ciAlIDEyLCAyKTtcblxuICAgICAgICBjYXNlIFwiSFwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5ob3VyKTtcblxuICAgICAgICBjYXNlIFwiSEhcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQuaG91ciwgMik7XG4gICAgICAgIC8vIG9mZnNldFxuXG4gICAgICAgIGNhc2UgXCJaXCI6XG4gICAgICAgICAgLy8gbGlrZSArNlxuICAgICAgICAgIHJldHVybiBmb3JtYXRPZmZzZXQoe1xuICAgICAgICAgICAgZm9ybWF0OiBcIm5hcnJvd1wiLFxuICAgICAgICAgICAgYWxsb3daOiB0aGlzLm9wdHMuYWxsb3daXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSBcIlpaXCI6XG4gICAgICAgICAgLy8gbGlrZSArMDY6MDBcbiAgICAgICAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHtcbiAgICAgICAgICAgIGZvcm1hdDogXCJzaG9ydFwiLFxuICAgICAgICAgICAgYWxsb3daOiB0aGlzLm9wdHMuYWxsb3daXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSBcIlpaWlwiOlxuICAgICAgICAgIC8vIGxpa2UgKzA2MDBcbiAgICAgICAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHtcbiAgICAgICAgICAgIGZvcm1hdDogXCJ0ZWNoaWVcIixcbiAgICAgICAgICAgIGFsbG93WjogdGhpcy5vcHRzLmFsbG93WlxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNhc2UgXCJaWlpaXCI6XG4gICAgICAgICAgLy8gbGlrZSBFU1RcbiAgICAgICAgICByZXR1cm4gZHQuem9uZS5vZmZzZXROYW1lKGR0LnRzLCB7XG4gICAgICAgICAgICBmb3JtYXQ6IFwic2hvcnRcIixcbiAgICAgICAgICAgIGxvY2FsZTogdGhpcy5sb2MubG9jYWxlXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSBcIlpaWlpaXCI6XG4gICAgICAgICAgLy8gbGlrZSBFYXN0ZXJuIFN0YW5kYXJkIFRpbWVcbiAgICAgICAgICByZXR1cm4gZHQuem9uZS5vZmZzZXROYW1lKGR0LnRzLCB7XG4gICAgICAgICAgICBmb3JtYXQ6IFwibG9uZ1wiLFxuICAgICAgICAgICAgbG9jYWxlOiB0aGlzLmxvYy5sb2NhbGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gem9uZVxuXG4gICAgICAgIGNhc2UgXCJ6XCI6XG4gICAgICAgICAgLy8gbGlrZSBBbWVyaWNhL05ld19Zb3JrXG4gICAgICAgICAgcmV0dXJuIGR0LnpvbmVOYW1lO1xuICAgICAgICAvLyBtZXJpZGllbXNcblxuICAgICAgICBjYXNlIFwiYVwiOlxuICAgICAgICAgIHJldHVybiBtZXJpZGllbSgpO1xuICAgICAgICAvLyBkYXRlc1xuXG4gICAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHtcbiAgICAgICAgICAgIGRheTogXCJudW1lcmljXCJcbiAgICAgICAgICB9LCBcImRheVwiKSA6IHRoaXMubnVtKGR0LmRheSk7XG5cbiAgICAgICAgY2FzZSBcImRkXCI6XG4gICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHtcbiAgICAgICAgICAgIGRheTogXCIyLWRpZ2l0XCJcbiAgICAgICAgICB9LCBcImRheVwiKSA6IHRoaXMubnVtKGR0LmRheSwgMik7XG4gICAgICAgIC8vIHdlZWtkYXlzIC0gc3RhbmRhbG9uZVxuXG4gICAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgICAgLy8gbGlrZSAxXG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtkYXkpO1xuXG4gICAgICAgIGNhc2UgXCJjY2NcIjpcbiAgICAgICAgICAvLyBsaWtlICdUdWVzJ1xuICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwic2hvcnRcIiwgdHJ1ZSk7XG5cbiAgICAgICAgY2FzZSBcImNjY2NcIjpcbiAgICAgICAgICAvLyBsaWtlICdUdWVzZGF5J1xuICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwibG9uZ1wiLCB0cnVlKTtcblxuICAgICAgICBjYXNlIFwiY2NjY2NcIjpcbiAgICAgICAgICAvLyBsaWtlICdUJ1xuICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwibmFycm93XCIsIHRydWUpO1xuICAgICAgICAvLyB3ZWVrZGF5cyAtIGZvcm1hdFxuXG4gICAgICAgIGNhc2UgXCJFXCI6XG4gICAgICAgICAgLy8gbGlrZSAxXG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtkYXkpO1xuXG4gICAgICAgIGNhc2UgXCJFRUVcIjpcbiAgICAgICAgICAvLyBsaWtlICdUdWVzJ1xuICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwic2hvcnRcIiwgZmFsc2UpO1xuXG4gICAgICAgIGNhc2UgXCJFRUVFXCI6XG4gICAgICAgICAgLy8gbGlrZSAnVHVlc2RheSdcbiAgICAgICAgICByZXR1cm4gd2Vla2RheShcImxvbmdcIiwgZmFsc2UpO1xuXG4gICAgICAgIGNhc2UgXCJFRUVFRVwiOlxuICAgICAgICAgIC8vIGxpa2UgJ1QnXG4gICAgICAgICAgcmV0dXJuIHdlZWtkYXkoXCJuYXJyb3dcIiwgZmFsc2UpO1xuICAgICAgICAvLyBtb250aHMgLSBzdGFuZGFsb25lXG5cbiAgICAgICAgY2FzZSBcIkxcIjpcbiAgICAgICAgICAvLyBsaWtlIDFcbiAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoe1xuICAgICAgICAgICAgbW9udGg6IFwibnVtZXJpY1wiLFxuICAgICAgICAgICAgZGF5OiBcIm51bWVyaWNcIlxuICAgICAgICAgIH0sIFwibW9udGhcIikgOiB0aGlzLm51bShkdC5tb250aCk7XG5cbiAgICAgICAgY2FzZSBcIkxMXCI6XG4gICAgICAgICAgLy8gbGlrZSAwMSwgZG9lc24ndCBzZWVtIHRvIHdvcmtcbiAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoe1xuICAgICAgICAgICAgbW9udGg6IFwiMi1kaWdpdFwiLFxuICAgICAgICAgICAgZGF5OiBcIm51bWVyaWNcIlxuICAgICAgICAgIH0sIFwibW9udGhcIikgOiB0aGlzLm51bShkdC5tb250aCwgMik7XG5cbiAgICAgICAgY2FzZSBcIkxMTFwiOlxuICAgICAgICAgIC8vIGxpa2UgSmFuXG4gICAgICAgICAgcmV0dXJuIG1vbnRoKFwic2hvcnRcIiwgdHJ1ZSk7XG5cbiAgICAgICAgY2FzZSBcIkxMTExcIjpcbiAgICAgICAgICAvLyBsaWtlIEphbnVhcnlcbiAgICAgICAgICByZXR1cm4gbW9udGgoXCJsb25nXCIsIHRydWUpO1xuXG4gICAgICAgIGNhc2UgXCJMTExMTFwiOlxuICAgICAgICAgIC8vIGxpa2UgSlxuICAgICAgICAgIHJldHVybiBtb250aChcIm5hcnJvd1wiLCB0cnVlKTtcbiAgICAgICAgLy8gbW9udGhzIC0gZm9ybWF0XG5cbiAgICAgICAgY2FzZSBcIk1cIjpcbiAgICAgICAgICAvLyBsaWtlIDFcbiAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoe1xuICAgICAgICAgICAgbW9udGg6IFwibnVtZXJpY1wiXG4gICAgICAgICAgfSwgXCJtb250aFwiKSA6IHRoaXMubnVtKGR0Lm1vbnRoKTtcblxuICAgICAgICBjYXNlIFwiTU1cIjpcbiAgICAgICAgICAvLyBsaWtlIDAxXG4gICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHtcbiAgICAgICAgICAgIG1vbnRoOiBcIjItZGlnaXRcIlxuICAgICAgICAgIH0sIFwibW9udGhcIikgOiB0aGlzLm51bShkdC5tb250aCwgMik7XG5cbiAgICAgICAgY2FzZSBcIk1NTVwiOlxuICAgICAgICAgIC8vIGxpa2UgSmFuXG4gICAgICAgICAgcmV0dXJuIG1vbnRoKFwic2hvcnRcIiwgZmFsc2UpO1xuXG4gICAgICAgIGNhc2UgXCJNTU1NXCI6XG4gICAgICAgICAgLy8gbGlrZSBKYW51YXJ5XG4gICAgICAgICAgcmV0dXJuIG1vbnRoKFwibG9uZ1wiLCBmYWxzZSk7XG5cbiAgICAgICAgY2FzZSBcIk1NTU1NXCI6XG4gICAgICAgICAgLy8gbGlrZSBKXG4gICAgICAgICAgcmV0dXJuIG1vbnRoKFwibmFycm93XCIsIGZhbHNlKTtcbiAgICAgICAgLy8geWVhcnNcblxuICAgICAgICBjYXNlIFwieVwiOlxuICAgICAgICAgIC8vIGxpa2UgMjAxNFxuICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZyh7XG4gICAgICAgICAgICB5ZWFyOiBcIm51bWVyaWNcIlxuICAgICAgICAgIH0sIFwieWVhclwiKSA6IHRoaXMubnVtKGR0LnllYXIpO1xuXG4gICAgICAgIGNhc2UgXCJ5eVwiOlxuICAgICAgICAgIC8vIGxpa2UgMTRcbiAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoe1xuICAgICAgICAgICAgeWVhcjogXCIyLWRpZ2l0XCJcbiAgICAgICAgICB9LCBcInllYXJcIikgOiB0aGlzLm51bShkdC55ZWFyLnRvU3RyaW5nKCkuc2xpY2UoLTIpLCAyKTtcblxuICAgICAgICBjYXNlIFwieXl5eVwiOlxuICAgICAgICAgIC8vIGxpa2UgMDAxMlxuICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZyh7XG4gICAgICAgICAgICB5ZWFyOiBcIm51bWVyaWNcIlxuICAgICAgICAgIH0sIFwieWVhclwiKSA6IHRoaXMubnVtKGR0LnllYXIsIDQpO1xuXG4gICAgICAgIGNhc2UgXCJ5eXl5eXlcIjpcbiAgICAgICAgICAvLyBsaWtlIDAwMDAxMlxuICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZyh7XG4gICAgICAgICAgICB5ZWFyOiBcIm51bWVyaWNcIlxuICAgICAgICAgIH0sIFwieWVhclwiKSA6IHRoaXMubnVtKGR0LnllYXIsIDYpO1xuICAgICAgICAvLyBlcmFzXG5cbiAgICAgICAgY2FzZSBcIkdcIjpcbiAgICAgICAgICAvLyBsaWtlIEFEXG4gICAgICAgICAgcmV0dXJuIGVyYShcInNob3J0XCIpO1xuXG4gICAgICAgIGNhc2UgXCJHR1wiOlxuICAgICAgICAgIC8vIGxpa2UgQW5ubyBEb21pbmlcbiAgICAgICAgICByZXR1cm4gZXJhKFwibG9uZ1wiKTtcblxuICAgICAgICBjYXNlIFwiR0dHR0dcIjpcbiAgICAgICAgICByZXR1cm4gZXJhKFwibmFycm93XCIpO1xuXG4gICAgICAgIGNhc2UgXCJra1wiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrWWVhci50b1N0cmluZygpLnNsaWNlKC0yKSwgMik7XG5cbiAgICAgICAgY2FzZSBcImtra2tcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQud2Vla1llYXIsIDQpO1xuXG4gICAgICAgIGNhc2UgXCJXXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtOdW1iZXIpO1xuXG4gICAgICAgIGNhc2UgXCJXV1wiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrTnVtYmVyLCAyKTtcblxuICAgICAgICBjYXNlIFwib1wiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5vcmRpbmFsKTtcblxuICAgICAgICBjYXNlIFwib29vXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0Lm9yZGluYWwsIDMpO1xuXG4gICAgICAgIGNhc2UgXCJxXCI6XG4gICAgICAgICAgLy8gbGlrZSAxXG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LnF1YXJ0ZXIpO1xuXG4gICAgICAgIGNhc2UgXCJxcVwiOlxuICAgICAgICAgIC8vIGxpa2UgMDFcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQucXVhcnRlciwgMik7XG5cbiAgICAgICAgY2FzZSBcIlhcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oTWF0aC5mbG9vcihkdC50cyAvIDEwMDApKTtcblxuICAgICAgICBjYXNlIFwieFwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC50cyk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF5YmVNYWNybyh0b2tlbik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBzdHJpbmdpZnlUb2tlbnMoRm9ybWF0dGVyLnBhcnNlRm9ybWF0KGZtdCksIHRva2VuVG9TdHJpbmcpO1xuICB9XG5cbiAgZm9ybWF0RHVyYXRpb25Gcm9tU3RyaW5nKGR1ciwgZm10KSB7XG4gICAgY29uc3QgdG9rZW5Ub0ZpZWxkID0gdG9rZW4gPT4ge1xuICAgICAgc3dpdGNoICh0b2tlblswXSkge1xuICAgICAgICBjYXNlIFwiU1wiOlxuICAgICAgICAgIHJldHVybiBcIm1pbGxpc2Vjb25kXCI7XG5cbiAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICByZXR1cm4gXCJzZWNvbmRcIjtcblxuICAgICAgICBjYXNlIFwibVwiOlxuICAgICAgICAgIHJldHVybiBcIm1pbnV0ZVwiO1xuXG4gICAgICAgIGNhc2UgXCJoXCI6XG4gICAgICAgICAgcmV0dXJuIFwiaG91clwiO1xuXG4gICAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgICAgcmV0dXJuIFwiZGF5XCI7XG5cbiAgICAgICAgY2FzZSBcIndcIjpcbiAgICAgICAgICByZXR1cm4gXCJ3ZWVrXCI7XG5cbiAgICAgICAgY2FzZSBcIk1cIjpcbiAgICAgICAgICByZXR1cm4gXCJtb250aFwiO1xuXG4gICAgICAgIGNhc2UgXCJ5XCI6XG4gICAgICAgICAgcmV0dXJuIFwieWVhclwiO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgICB0b2tlblRvU3RyaW5nID0gbGlsZHVyID0+IHRva2VuID0+IHtcbiAgICAgIGNvbnN0IG1hcHBlZCA9IHRva2VuVG9GaWVsZCh0b2tlbik7XG5cbiAgICAgIGlmIChtYXBwZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubnVtKGxpbGR1ci5nZXQobWFwcGVkKSwgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgIH1cbiAgICB9LFxuICAgICAgICAgIHRva2VucyA9IEZvcm1hdHRlci5wYXJzZUZvcm1hdChmbXQpLFxuICAgICAgICAgIHJlYWxUb2tlbnMgPSB0b2tlbnMucmVkdWNlKChmb3VuZCwge1xuICAgICAgbGl0ZXJhbCxcbiAgICAgIHZhbFxuICAgIH0pID0+IGxpdGVyYWwgPyBmb3VuZCA6IGZvdW5kLmNvbmNhdCh2YWwpLCBbXSksXG4gICAgICAgICAgY29sbGFwc2VkID0gZHVyLnNoaWZ0VG8oLi4ucmVhbFRva2Vucy5tYXAodG9rZW5Ub0ZpZWxkKS5maWx0ZXIodCA9PiB0KSk7XG5cbiAgICByZXR1cm4gc3RyaW5naWZ5VG9rZW5zKHRva2VucywgdG9rZW5Ub1N0cmluZyhjb2xsYXBzZWQpKTtcbiAgfVxuXG59XG5cbmNsYXNzIEludmFsaWQge1xuICBjb25zdHJ1Y3RvcihyZWFzb24sIGV4cGxhbmF0aW9uKSB7XG4gICAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgdGhpcy5leHBsYW5hdGlvbiA9IGV4cGxhbmF0aW9uO1xuICB9XG5cbiAgdG9NZXNzYWdlKCkge1xuICAgIGlmICh0aGlzLmV4cGxhbmF0aW9uKSB7XG4gICAgICByZXR1cm4gYCR7dGhpcy5yZWFzb259OiAke3RoaXMuZXhwbGFuYXRpb259YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxuXG59XG5cbi8qKlxuICogQGludGVyZmFjZVxuICovXG5cbmNsYXNzIFpvbmUge1xuICAvKipcbiAgICogVGhlIHR5cGUgb2Ygem9uZVxuICAgKiBAYWJzdHJhY3RcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCB0eXBlKCkge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoaXMgem9uZS5cbiAgICogQGFic3RyYWN0XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IG5hbWUoKSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuXG4gIGdldCBpYW5hTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIG9mZnNldCBpcyBrbm93biB0byBiZSBmaXhlZCBmb3IgdGhlIHdob2xlIHllYXIuXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBnZXQgaXNVbml2ZXJzYWwoKSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb2Zmc2V0J3MgY29tbW9uIG5hbWUgKHN1Y2ggYXMgRVNUKSBhdCB0aGUgc3BlY2lmaWVkIHRpbWVzdGFtcFxuICAgKiBAYWJzdHJhY3RcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRzIC0gRXBvY2ggbWlsbGlzZWNvbmRzIGZvciB3aGljaCB0byBnZXQgdGhlIG5hbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBPcHRpb25zIHRvIGFmZmVjdCB0aGUgZm9ybWF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZvcm1hdCAtIFdoYXQgc3R5bGUgb2Ygb2Zmc2V0IHRvIHJldHVybi4gQWNjZXB0cyAnbG9uZycgb3IgJ3Nob3J0Jy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubG9jYWxlIC0gV2hhdCBsb2NhbGUgdG8gcmV0dXJuIHRoZSBvZmZzZXQgbmFtZSBpbi5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIG9mZnNldE5hbWUodHMsIG9wdHMpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBvZmZzZXQncyB2YWx1ZSBhcyBhIHN0cmluZ1xuICAgKiBAYWJzdHJhY3RcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRzIC0gRXBvY2ggbWlsbGlzZWNvbmRzIGZvciB3aGljaCB0byBnZXQgdGhlIG9mZnNldFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0IC0gV2hhdCBzdHlsZSBvZiBvZmZzZXQgdG8gcmV0dXJuLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQWNjZXB0cyAnbmFycm93JywgJ3Nob3J0Jywgb3IgJ3RlY2hpZScuIFJldHVybmluZyAnKzYnLCAnKzA2OjAwJywgb3IgJyswNjAwJyByZXNwZWN0aXZlbHlcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIGZvcm1hdE9mZnNldCh0cywgZm9ybWF0KSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSBvZmZzZXQgaW4gbWludXRlcyBmb3IgdGhpcyB6b25lIGF0IHRoZSBzcGVjaWZpZWQgdGltZXN0YW1wLlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRzIC0gRXBvY2ggbWlsbGlzZWNvbmRzIGZvciB3aGljaCB0byBjb21wdXRlIHRoZSBvZmZzZXRcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cblxuXG4gIG9mZnNldCh0cykge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgWm9uZSBpcyBlcXVhbCB0byBhbm90aGVyIHpvbmVcbiAgICogQGFic3RyYWN0XG4gICAqIEBwYXJhbSB7Wm9uZX0gb3RoZXJab25lIC0gdGhlIHpvbmUgdG8gY29tcGFyZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIGVxdWFscyhvdGhlclpvbmUpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIFpvbmUgaXMgdmFsaWQuXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBnZXQgaXNWYWxpZCgpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG5cbn1cblxubGV0IHNpbmdsZXRvbiQxID0gbnVsbDtcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgbG9jYWwgem9uZSBmb3IgdGhpcyBKYXZhU2NyaXB0IGVudmlyb25tZW50LlxuICogQGltcGxlbWVudHMge1pvbmV9XG4gKi9cblxuY2xhc3MgU3lzdGVtWm9uZSBleHRlbmRzIFpvbmUge1xuICAvKipcbiAgICogR2V0IGEgc2luZ2xldG9uIGluc3RhbmNlIG9mIHRoZSBsb2NhbCB6b25lXG4gICAqIEByZXR1cm4ge1N5c3RlbVpvbmV9XG4gICAqL1xuICBzdGF0aWMgZ2V0IGluc3RhbmNlKCkge1xuICAgIGlmIChzaW5nbGV0b24kMSA9PT0gbnVsbCkge1xuICAgICAgc2luZ2xldG9uJDEgPSBuZXcgU3lzdGVtWm9uZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBzaW5nbGV0b24kMTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuIFwic3lzdGVtXCI7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cblxuXG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLnRpbWVab25lO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBnZXQgaXNVbml2ZXJzYWwoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBvZmZzZXROYW1lKHRzLCB7XG4gICAgZm9ybWF0LFxuICAgIGxvY2FsZVxuICB9KSB7XG4gICAgcmV0dXJuIHBhcnNlWm9uZUluZm8odHMsIGZvcm1hdCwgbG9jYWxlKTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZm9ybWF0T2Zmc2V0KHRzLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHRoaXMub2Zmc2V0KHRzKSwgZm9ybWF0KTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgb2Zmc2V0KHRzKSB7XG4gICAgcmV0dXJuIC1uZXcgRGF0ZSh0cykuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZXF1YWxzKG90aGVyWm9uZSkge1xuICAgIHJldHVybiBvdGhlclpvbmUudHlwZSA9PT0gXCJzeXN0ZW1cIjtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxufVxuXG5sZXQgZHRmQ2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gbWFrZURURih6b25lKSB7XG4gIGlmICghZHRmQ2FjaGVbem9uZV0pIHtcbiAgICBkdGZDYWNoZVt6b25lXSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFwiZW4tVVNcIiwge1xuICAgICAgaG91cjEyOiBmYWxzZSxcbiAgICAgIHRpbWVab25lOiB6b25lLFxuICAgICAgeWVhcjogXCJudW1lcmljXCIsXG4gICAgICBtb250aDogXCIyLWRpZ2l0XCIsXG4gICAgICBkYXk6IFwiMi1kaWdpdFwiLFxuICAgICAgaG91cjogXCIyLWRpZ2l0XCIsXG4gICAgICBtaW51dGU6IFwiMi1kaWdpdFwiLFxuICAgICAgc2Vjb25kOiBcIjItZGlnaXRcIixcbiAgICAgIGVyYTogXCJzaG9ydFwiXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZHRmQ2FjaGVbem9uZV07XG59XG5cbmNvbnN0IHR5cGVUb1BvcyA9IHtcbiAgeWVhcjogMCxcbiAgbW9udGg6IDEsXG4gIGRheTogMixcbiAgZXJhOiAzLFxuICBob3VyOiA0LFxuICBtaW51dGU6IDUsXG4gIHNlY29uZDogNlxufTtcblxuZnVuY3Rpb24gaGFja3lPZmZzZXQoZHRmLCBkYXRlKSB7XG4gIGNvbnN0IGZvcm1hdHRlZCA9IGR0Zi5mb3JtYXQoZGF0ZSkucmVwbGFjZSgvXFx1MjAwRS9nLCBcIlwiKSxcbiAgICAgICAgcGFyc2VkID0gLyhcXGQrKVxcLyhcXGQrKVxcLyhcXGQrKSAoQUR8QkMpLD8gKFxcZCspOihcXGQrKTooXFxkKykvLmV4ZWMoZm9ybWF0dGVkKSxcbiAgICAgICAgWywgZk1vbnRoLCBmRGF5LCBmWWVhciwgZmFkT3JCYywgZkhvdXIsIGZNaW51dGUsIGZTZWNvbmRdID0gcGFyc2VkO1xuICByZXR1cm4gW2ZZZWFyLCBmTW9udGgsIGZEYXksIGZhZE9yQmMsIGZIb3VyLCBmTWludXRlLCBmU2Vjb25kXTtcbn1cblxuZnVuY3Rpb24gcGFydHNPZmZzZXQoZHRmLCBkYXRlKSB7XG4gIGNvbnN0IGZvcm1hdHRlZCA9IGR0Zi5mb3JtYXRUb1BhcnRzKGRhdGUpO1xuICBjb25zdCBmaWxsZWQgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGZvcm1hdHRlZC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHtcbiAgICAgIHR5cGUsXG4gICAgICB2YWx1ZVxuICAgIH0gPSBmb3JtYXR0ZWRbaV07XG4gICAgY29uc3QgcG9zID0gdHlwZVRvUG9zW3R5cGVdO1xuXG4gICAgaWYgKHR5cGUgPT09IFwiZXJhXCIpIHtcbiAgICAgIGZpbGxlZFtwb3NdID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmICghaXNVbmRlZmluZWQocG9zKSkge1xuICAgICAgZmlsbGVkW3Bvc10gPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmaWxsZWQ7XG59XG5cbmxldCBpYW5hWm9uZUNhY2hlID0ge307XG4vKipcbiAqIEEgem9uZSBpZGVudGlmaWVkIGJ5IGFuIElBTkEgaWRlbnRpZmllciwgbGlrZSBBbWVyaWNhL05ld19Zb3JrXG4gKiBAaW1wbGVtZW50cyB7Wm9uZX1cbiAqL1xuXG5jbGFzcyBJQU5BWm9uZSBleHRlbmRzIFpvbmUge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBab25lIG5hbWVcbiAgICogQHJldHVybiB7SUFOQVpvbmV9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlKG5hbWUpIHtcbiAgICBpZiAoIWlhbmFab25lQ2FjaGVbbmFtZV0pIHtcbiAgICAgIGlhbmFab25lQ2FjaGVbbmFtZV0gPSBuZXcgSUFOQVpvbmUobmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlhbmFab25lQ2FjaGVbbmFtZV07XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IGxvY2FsIGNhY2hlcy4gU2hvdWxkIG9ubHkgYmUgbmVjZXNzYXJ5IGluIHRlc3Rpbmcgc2NlbmFyaW9zLlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cblxuXG4gIHN0YXRpYyByZXNldENhY2hlKCkge1xuICAgIGlhbmFab25lQ2FjaGUgPSB7fTtcbiAgICBkdGZDYWNoZSA9IHt9O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHN0cmluZyBpcyBhIHZhbGlkIHNwZWNpZmllci4gVGhpcyBvbmx5IGNoZWNrcyB0aGUgc3RyaW5nJ3MgZm9ybWF0LCBub3QgdGhhdCB0aGUgc3BlY2lmaWVyIGlkZW50aWZpZXMgYSBrbm93biB6b25lOyBzZWUgaXNWYWxpZFpvbmUgZm9yIHRoYXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzIC0gVGhlIHN0cmluZyB0byBjaGVjayB2YWxpZGl0eSBvblxuICAgKiBAZXhhbXBsZSBJQU5BWm9uZS5pc1ZhbGlkU3BlY2lmaWVyKFwiQW1lcmljYS9OZXdfWW9ya1wiKSAvLz0+IHRydWVcbiAgICogQGV4YW1wbGUgSUFOQVpvbmUuaXNWYWxpZFNwZWNpZmllcihcIlNwb3J0fn5ibG9ycFwiKSAvLz0+IGZhbHNlXG4gICAqIEBkZXByZWNhdGVkIFRoaXMgbWV0aG9kIHJldHVybnMgZmFsc2UgZm9yIHNvbWUgdmFsaWQgSUFOQSBuYW1lcy4gVXNlIGlzVmFsaWRab25lIGluc3RlYWQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuXG5cbiAgc3RhdGljIGlzVmFsaWRTcGVjaWZpZXIocykge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWRab25lKHMpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHN0cmluZyBpZGVudGlmaWVzIGEgcmVhbCB6b25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB6b25lIC0gVGhlIHN0cmluZyB0byBjaGVja1xuICAgKiBAZXhhbXBsZSBJQU5BWm9uZS5pc1ZhbGlkWm9uZShcIkFtZXJpY2EvTmV3X1lvcmtcIikgLy89PiB0cnVlXG4gICAqIEBleGFtcGxlIElBTkFab25lLmlzVmFsaWRab25lKFwiRmFudGFzaWEvQ2FzdGxlXCIpIC8vPT4gZmFsc2VcbiAgICogQGV4YW1wbGUgSUFOQVpvbmUuaXNWYWxpZFpvbmUoXCJTcG9ydH5+YmxvcnBcIikgLy89PiBmYWxzZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIHN0YXRpYyBpc1ZhbGlkWm9uZSh6b25lKSB7XG4gICAgaWYgKCF6b25lKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFwiZW4tVVNcIiwge1xuICAgICAgICB0aW1lWm9uZTogem9uZVxuICAgICAgfSkuZm9ybWF0KCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IobmFtZSkge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqIEBwcml2YXRlICoqL1xuXG4gICAgdGhpcy56b25lTmFtZSA9IG5hbWU7XG4gICAgLyoqIEBwcml2YXRlICoqL1xuXG4gICAgdGhpcy52YWxpZCA9IElBTkFab25lLmlzVmFsaWRab25lKG5hbWUpO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gXCJpYW5hXCI7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cblxuXG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLnpvbmVOYW1lO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBnZXQgaXNVbml2ZXJzYWwoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBvZmZzZXROYW1lKHRzLCB7XG4gICAgZm9ybWF0LFxuICAgIGxvY2FsZVxuICB9KSB7XG4gICAgcmV0dXJuIHBhcnNlWm9uZUluZm8odHMsIGZvcm1hdCwgbG9jYWxlLCB0aGlzLm5hbWUpO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBmb3JtYXRPZmZzZXQodHMsIGZvcm1hdCkge1xuICAgIHJldHVybiBmb3JtYXRPZmZzZXQodGhpcy5vZmZzZXQodHMpLCBmb3JtYXQpO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBvZmZzZXQodHMpIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodHMpO1xuICAgIGlmIChpc05hTihkYXRlKSkgcmV0dXJuIE5hTjtcbiAgICBjb25zdCBkdGYgPSBtYWtlRFRGKHRoaXMubmFtZSk7XG4gICAgbGV0IFt5ZWFyLCBtb250aCwgZGF5LCBhZE9yQmMsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kXSA9IGR0Zi5mb3JtYXRUb1BhcnRzID8gcGFydHNPZmZzZXQoZHRmLCBkYXRlKSA6IGhhY2t5T2Zmc2V0KGR0ZiwgZGF0ZSk7XG5cbiAgICBpZiAoYWRPckJjID09PSBcIkJDXCIpIHtcbiAgICAgIHllYXIgPSAtTWF0aC5hYnMoeWVhcikgKyAxO1xuICAgIH0gLy8gYmVjYXVzZSB3ZSdyZSB1c2luZyBob3VyMTIgYW5kIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEwMjU1NjQmY2FuPTImcT0lMjIyNCUzQTAwJTIyJTIwZGF0ZXRpbWVmb3JtYXRcblxuXG4gICAgY29uc3QgYWRqdXN0ZWRIb3VyID0gaG91ciA9PT0gMjQgPyAwIDogaG91cjtcbiAgICBjb25zdCBhc1VUQyA9IG9ialRvTG9jYWxUUyh7XG4gICAgICB5ZWFyLFxuICAgICAgbW9udGgsXG4gICAgICBkYXksXG4gICAgICBob3VyOiBhZGp1c3RlZEhvdXIsXG4gICAgICBtaW51dGUsXG4gICAgICBzZWNvbmQsXG4gICAgICBtaWxsaXNlY29uZDogMFxuICAgIH0pO1xuICAgIGxldCBhc1RTID0gK2RhdGU7XG4gICAgY29uc3Qgb3ZlciA9IGFzVFMgJSAxMDAwO1xuICAgIGFzVFMgLT0gb3ZlciA+PSAwID8gb3ZlciA6IDEwMDAgKyBvdmVyO1xuICAgIHJldHVybiAoYXNVVEMgLSBhc1RTKSAvICg2MCAqIDEwMDApO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBlcXVhbHMob3RoZXJab25lKSB7XG4gICAgcmV0dXJuIG90aGVyWm9uZS50eXBlID09PSBcImlhbmFcIiAmJiBvdGhlclpvbmUubmFtZSA9PT0gdGhpcy5uYW1lO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZDtcbiAgfVxuXG59XG5cbmxldCBzaW5nbGV0b24gPSBudWxsO1xuLyoqXG4gKiBBIHpvbmUgd2l0aCBhIGZpeGVkIG9mZnNldCAobWVhbmluZyBubyBEU1QpXG4gKiBAaW1wbGVtZW50cyB7Wm9uZX1cbiAqL1xuXG5jbGFzcyBGaXhlZE9mZnNldFpvbmUgZXh0ZW5kcyBab25lIHtcbiAgLyoqXG4gICAqIEdldCBhIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiBVVENcbiAgICogQHJldHVybiB7Rml4ZWRPZmZzZXRab25lfVxuICAgKi9cbiAgc3RhdGljIGdldCB1dGNJbnN0YW5jZSgpIHtcbiAgICBpZiAoc2luZ2xldG9uID09PSBudWxsKSB7XG4gICAgICBzaW5nbGV0b24gPSBuZXcgRml4ZWRPZmZzZXRab25lKDApO1xuICAgIH1cblxuICAgIHJldHVybiBzaW5nbGV0b247XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhbiBpbnN0YW5jZSB3aXRoIGEgc3BlY2lmaWVkIG9mZnNldFxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IC0gVGhlIG9mZnNldCBpbiBtaW51dGVzXG4gICAqIEByZXR1cm4ge0ZpeGVkT2Zmc2V0Wm9uZX1cbiAgICovXG5cblxuICBzdGF0aWMgaW5zdGFuY2Uob2Zmc2V0KSB7XG4gICAgcmV0dXJuIG9mZnNldCA9PT0gMCA/IEZpeGVkT2Zmc2V0Wm9uZS51dGNJbnN0YW5jZSA6IG5ldyBGaXhlZE9mZnNldFpvbmUob2Zmc2V0KTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFuIGluc3RhbmNlIG9mIEZpeGVkT2Zmc2V0Wm9uZSBmcm9tIGEgVVRDIG9mZnNldCBzdHJpbmcsIGxpa2UgXCJVVEMrNlwiXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzIC0gVGhlIG9mZnNldCBzdHJpbmcgdG8gcGFyc2VcbiAgICogQGV4YW1wbGUgRml4ZWRPZmZzZXRab25lLnBhcnNlU3BlY2lmaWVyKFwiVVRDKzZcIilcbiAgICogQGV4YW1wbGUgRml4ZWRPZmZzZXRab25lLnBhcnNlU3BlY2lmaWVyKFwiVVRDKzA2XCIpXG4gICAqIEBleGFtcGxlIEZpeGVkT2Zmc2V0Wm9uZS5wYXJzZVNwZWNpZmllcihcIlVUQy02OjAwXCIpXG4gICAqIEByZXR1cm4ge0ZpeGVkT2Zmc2V0Wm9uZX1cbiAgICovXG5cblxuICBzdGF0aWMgcGFyc2VTcGVjaWZpZXIocykge1xuICAgIGlmIChzKSB7XG4gICAgICBjb25zdCByID0gcy5tYXRjaCgvXnV0Yyg/OihbKy1dXFxkezEsMn0pKD86OihcXGR7Mn0pKT8pPyQvaSk7XG5cbiAgICAgIGlmIChyKSB7XG4gICAgICAgIHJldHVybiBuZXcgRml4ZWRPZmZzZXRab25lKHNpZ25lZE9mZnNldChyWzFdLCByWzJdKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihvZmZzZXQpIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKiBAcHJpdmF0ZSAqKi9cblxuICAgIHRoaXMuZml4ZWQgPSBvZmZzZXQ7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cblxuXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiBcImZpeGVkXCI7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cblxuXG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmZpeGVkID09PSAwID8gXCJVVENcIiA6IGBVVEMke2Zvcm1hdE9mZnNldCh0aGlzLmZpeGVkLCBcIm5hcnJvd1wiKX1gO1xuICB9XG5cbiAgZ2V0IGlhbmFOYW1lKCkge1xuICAgIGlmICh0aGlzLmZpeGVkID09PSAwKSB7XG4gICAgICByZXR1cm4gXCJFdGMvVVRDXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgRXRjL0dNVCR7Zm9ybWF0T2Zmc2V0KC10aGlzLmZpeGVkLCBcIm5hcnJvd1wiKX1gO1xuICAgIH1cbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgb2Zmc2V0TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBmb3JtYXRPZmZzZXQodHMsIGZvcm1hdCkge1xuICAgIHJldHVybiBmb3JtYXRPZmZzZXQodGhpcy5maXhlZCwgZm9ybWF0KTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZ2V0IGlzVW5pdmVyc2FsKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBvZmZzZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZml4ZWQ7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cblxuXG4gIGVxdWFscyhvdGhlclpvbmUpIHtcbiAgICByZXR1cm4gb3RoZXJab25lLnR5cGUgPT09IFwiZml4ZWRcIiAmJiBvdGhlclpvbmUuZml4ZWQgPT09IHRoaXMuZml4ZWQ7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cblxuXG4gIGdldCBpc1ZhbGlkKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbn1cblxuLyoqXG4gKiBBIHpvbmUgdGhhdCBmYWlsZWQgdG8gcGFyc2UuIFlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byBpbnN0YW50aWF0ZSB0aGlzLlxuICogQGltcGxlbWVudHMge1pvbmV9XG4gKi9cblxuY2xhc3MgSW52YWxpZFpvbmUgZXh0ZW5kcyBab25lIHtcbiAgY29uc3RydWN0b3Ioem9uZU5hbWUpIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKiAgQHByaXZhdGUgKi9cblxuICAgIHRoaXMuem9uZU5hbWUgPSB6b25lTmFtZTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuIFwiaW52YWxpZFwiO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy56b25lTmFtZTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZ2V0IGlzVW5pdmVyc2FsKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgb2Zmc2V0TmFtZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZm9ybWF0T2Zmc2V0KCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICBvZmZzZXQoKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZXF1YWxzKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVab25lKGlucHV0LCBkZWZhdWx0Wm9uZSkge1xuXG4gIGlmIChpc1VuZGVmaW5lZChpbnB1dCkgfHwgaW5wdXQgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZGVmYXVsdFpvbmU7XG4gIH0gZWxzZSBpZiAoaW5wdXQgaW5zdGFuY2VvZiBab25lKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9IGVsc2UgaWYgKGlzU3RyaW5nKGlucHV0KSkge1xuICAgIGNvbnN0IGxvd2VyZWQgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChsb3dlcmVkID09PSBcImRlZmF1bHRcIikgcmV0dXJuIGRlZmF1bHRab25lO2Vsc2UgaWYgKGxvd2VyZWQgPT09IFwibG9jYWxcIiB8fCBsb3dlcmVkID09PSBcInN5c3RlbVwiKSByZXR1cm4gU3lzdGVtWm9uZS5pbnN0YW5jZTtlbHNlIGlmIChsb3dlcmVkID09PSBcInV0Y1wiIHx8IGxvd2VyZWQgPT09IFwiZ210XCIpIHJldHVybiBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2U7ZWxzZSByZXR1cm4gRml4ZWRPZmZzZXRab25lLnBhcnNlU3BlY2lmaWVyKGxvd2VyZWQpIHx8IElBTkFab25lLmNyZWF0ZShpbnB1dCk7XG4gIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgcmV0dXJuIEZpeGVkT2Zmc2V0Wm9uZS5pbnN0YW5jZShpbnB1dCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcIm9iamVjdFwiICYmIGlucHV0Lm9mZnNldCAmJiB0eXBlb2YgaW5wdXQub2Zmc2V0ID09PSBcIm51bWJlclwiKSB7XG4gICAgLy8gVGhpcyBpcyBkdW1iLCBidXQgdGhlIGluc3RhbmNlb2YgY2hlY2sgYWJvdmUgZG9lc24ndCBzZWVtIHRvIHJlYWxseSB3b3JrXG4gICAgLy8gc28gd2UncmUgZHVjayBjaGVja2luZyBpdFxuICAgIHJldHVybiBpbnB1dDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEludmFsaWRab25lKGlucHV0KTtcbiAgfVxufVxuXG5sZXQgbm93ID0gKCkgPT4gRGF0ZS5ub3coKSxcbiAgICBkZWZhdWx0Wm9uZSA9IFwic3lzdGVtXCIsXG4gICAgZGVmYXVsdExvY2FsZSA9IG51bGwsXG4gICAgZGVmYXVsdE51bWJlcmluZ1N5c3RlbSA9IG51bGwsXG4gICAgZGVmYXVsdE91dHB1dENhbGVuZGFyID0gbnVsbCxcbiAgICB0aHJvd09uSW52YWxpZDtcbi8qKlxuICogU2V0dGluZ3MgY29udGFpbnMgc3RhdGljIGdldHRlcnMgYW5kIHNldHRlcnMgdGhhdCBjb250cm9sIEx1eG9uJ3Mgb3ZlcmFsbCBiZWhhdmlvci4gTHV4b24gaXMgYSBzaW1wbGUgbGlicmFyeSB3aXRoIGZldyBvcHRpb25zLCBidXQgdGhlIG9uZXMgaXQgZG9lcyBoYXZlIGxpdmUgaGVyZS5cbiAqL1xuXG5cbmNsYXNzIFNldHRpbmdzIHtcbiAgLyoqXG4gICAqIEdldCB0aGUgY2FsbGJhY2sgZm9yIHJldHVybmluZyB0aGUgY3VycmVudCB0aW1lc3RhbXAuXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICovXG4gIHN0YXRpYyBnZXQgbm93KCkge1xuICAgIHJldHVybiBub3c7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgY2FsbGJhY2sgZm9yIHJldHVybmluZyB0aGUgY3VycmVudCB0aW1lc3RhbXAuXG4gICAqIFRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgbnVtYmVyLCB3aGljaCB3aWxsIGJlIGludGVycHJldGVkIGFzIGFuIEVwb2NoIG1pbGxpc2Vjb25kIGNvdW50XG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQGV4YW1wbGUgU2V0dGluZ3Mubm93ID0gKCkgPT4gRGF0ZS5ub3coKSArIDMwMDAgLy8gcHJldGVuZCBpdCBpcyAzIHNlY29uZHMgaW4gdGhlIGZ1dHVyZVxuICAgKiBAZXhhbXBsZSBTZXR0aW5ncy5ub3cgPSAoKSA9PiAwIC8vIGFsd2F5cyBwcmV0ZW5kIGl0J3MgSmFuIDEsIDE5NzAgYXQgbWlkbmlnaHQgaW4gVVRDIHRpbWVcbiAgICovXG5cblxuICBzdGF0aWMgc2V0IG5vdyhuKSB7XG4gICAgbm93ID0gbjtcbiAgfVxuICAvKipcbiAgICogU2V0IHRoZSBkZWZhdWx0IHRpbWUgem9uZSB0byBjcmVhdGUgRGF0ZVRpbWVzIGluLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgKiBVc2UgdGhlIHZhbHVlIFwic3lzdGVtXCIgdG8gcmVzZXQgdGhpcyB2YWx1ZSB0byB0aGUgc3lzdGVtJ3MgdGltZSB6b25lLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHN0YXRpYyBzZXQgZGVmYXVsdFpvbmUoem9uZSkge1xuICAgIGRlZmF1bHRab25lID0gem9uZTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBkZWZhdWx0IHRpbWUgem9uZSBvYmplY3QgY3VycmVudGx5IHVzZWQgdG8gY3JlYXRlIERhdGVUaW1lcy4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgdGhlIHN5c3RlbSdzIHRpbWUgem9uZSAodGhlIG9uZSBzZXQgb24gdGhlIG1hY2hpbmUgdGhhdCBydW5zIHRoaXMgY29kZSkuXG4gICAqIEB0eXBlIHtab25lfVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgZGVmYXVsdFpvbmUoKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZVpvbmUoZGVmYXVsdFpvbmUsIFN5c3RlbVpvbmUuaW5zdGFuY2UpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGRlZmF1bHQgbG9jYWxlIHRvIGNyZWF0ZSBEYXRlVGltZXMgd2l0aC4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG5cblxuICBzdGF0aWMgZ2V0IGRlZmF1bHRMb2NhbGUoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRMb2NhbGU7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgZGVmYXVsdCBsb2NhbGUgdG8gY3JlYXRlIERhdGVUaW1lcyB3aXRoLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHN0YXRpYyBzZXQgZGVmYXVsdExvY2FsZShsb2NhbGUpIHtcbiAgICBkZWZhdWx0TG9jYWxlID0gbG9jYWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGRlZmF1bHQgbnVtYmVyaW5nIHN5c3RlbSB0byBjcmVhdGUgRGF0ZVRpbWVzIHdpdGguIERvZXMgbm90IGFmZmVjdCBleGlzdGluZyBpbnN0YW5jZXMuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBkZWZhdWx0TnVtYmVyaW5nU3lzdGVtKCkge1xuICAgIHJldHVybiBkZWZhdWx0TnVtYmVyaW5nU3lzdGVtO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIGRlZmF1bHQgbnVtYmVyaW5nIHN5c3RlbSB0byBjcmVhdGUgRGF0ZVRpbWVzIHdpdGguIERvZXMgbm90IGFmZmVjdCBleGlzdGluZyBpbnN0YW5jZXMuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgc3RhdGljIHNldCBkZWZhdWx0TnVtYmVyaW5nU3lzdGVtKG51bWJlcmluZ1N5c3RlbSkge1xuICAgIGRlZmF1bHROdW1iZXJpbmdTeXN0ZW0gPSBudW1iZXJpbmdTeXN0ZW07XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgZGVmYXVsdCBvdXRwdXQgY2FsZW5kYXIgdG8gY3JlYXRlIERhdGVUaW1lcyB3aXRoLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE91dHB1dENhbGVuZGFyKCkge1xuICAgIHJldHVybiBkZWZhdWx0T3V0cHV0Q2FsZW5kYXI7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgZGVmYXVsdCBvdXRwdXQgY2FsZW5kYXIgdG8gY3JlYXRlIERhdGVUaW1lcyB3aXRoLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHN0YXRpYyBzZXQgZGVmYXVsdE91dHB1dENhbGVuZGFyKG91dHB1dENhbGVuZGFyKSB7XG4gICAgZGVmYXVsdE91dHB1dENhbGVuZGFyID0gb3V0cHV0Q2FsZW5kYXI7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB3aGV0aGVyIEx1eG9uIHdpbGwgdGhyb3cgd2hlbiBpdCBlbmNvdW50ZXJzIGludmFsaWQgRGF0ZVRpbWVzLCBEdXJhdGlvbnMsIG9yIEludGVydmFsc1xuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBzdGF0aWMgZ2V0IHRocm93T25JbnZhbGlkKCkge1xuICAgIHJldHVybiB0aHJvd09uSW52YWxpZDtcbiAgfVxuICAvKipcbiAgICogU2V0IHdoZXRoZXIgTHV4b24gd2lsbCB0aHJvdyB3aGVuIGl0IGVuY291bnRlcnMgaW52YWxpZCBEYXRlVGltZXMsIER1cmF0aW9ucywgb3IgSW50ZXJ2YWxzXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cblxuXG4gIHN0YXRpYyBzZXQgdGhyb3dPbkludmFsaWQodCkge1xuICAgIHRocm93T25JbnZhbGlkID0gdDtcbiAgfVxuICAvKipcbiAgICogUmVzZXQgTHV4b24ncyBnbG9iYWwgY2FjaGVzLiBTaG91bGQgb25seSBiZSBuZWNlc3NhcnkgaW4gdGVzdGluZyBzY2VuYXJpb3MuXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuXG5cbiAgc3RhdGljIHJlc2V0Q2FjaGVzKCkge1xuICAgIExvY2FsZS5yZXNldENhY2hlKCk7XG4gICAgSUFOQVpvbmUucmVzZXRDYWNoZSgpO1xuICB9XG5cbn1cblxubGV0IGludGxMRkNhY2hlID0ge307XG5cbmZ1bmN0aW9uIGdldENhY2hlZExGKGxvY1N0cmluZywgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IGtleSA9IEpTT04uc3RyaW5naWZ5KFtsb2NTdHJpbmcsIG9wdHNdKTtcbiAgbGV0IGR0ZiA9IGludGxMRkNhY2hlW2tleV07XG5cbiAgaWYgKCFkdGYpIHtcbiAgICBkdGYgPSBuZXcgSW50bC5MaXN0Rm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bExGQ2FjaGVba2V5XSA9IGR0ZjtcbiAgfVxuXG4gIHJldHVybiBkdGY7XG59XG5cbmxldCBpbnRsRFRDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBnZXRDYWNoZWREVEYobG9jU3RyaW5nLCBvcHRzID0ge30pIHtcbiAgY29uc3Qga2V5ID0gSlNPTi5zdHJpbmdpZnkoW2xvY1N0cmluZywgb3B0c10pO1xuICBsZXQgZHRmID0gaW50bERUQ2FjaGVba2V5XTtcblxuICBpZiAoIWR0Zikge1xuICAgIGR0ZiA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bERUQ2FjaGVba2V5XSA9IGR0ZjtcbiAgfVxuXG4gIHJldHVybiBkdGY7XG59XG5cbmxldCBpbnRsTnVtQ2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gZ2V0Q2FjaGVkSU5GKGxvY1N0cmluZywgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IGtleSA9IEpTT04uc3RyaW5naWZ5KFtsb2NTdHJpbmcsIG9wdHNdKTtcbiAgbGV0IGluZiA9IGludGxOdW1DYWNoZVtrZXldO1xuXG4gIGlmICghaW5mKSB7XG4gICAgaW5mID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bE51bUNhY2hlW2tleV0gPSBpbmY7XG4gIH1cblxuICByZXR1cm4gaW5mO1xufVxuXG5sZXQgaW50bFJlbENhY2hlID0ge307XG5cbmZ1bmN0aW9uIGdldENhY2hlZFJURihsb2NTdHJpbmcsIG9wdHMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgYmFzZSxcbiAgICAuLi5jYWNoZUtleU9wdHNcbiAgfSA9IG9wdHM7IC8vIGV4Y2x1ZGUgYGJhc2VgIGZyb20gdGhlIG9wdGlvbnNcblxuICBjb25zdCBrZXkgPSBKU09OLnN0cmluZ2lmeShbbG9jU3RyaW5nLCBjYWNoZUtleU9wdHNdKTtcbiAgbGV0IGluZiA9IGludGxSZWxDYWNoZVtrZXldO1xuXG4gIGlmICghaW5mKSB7XG4gICAgaW5mID0gbmV3IEludGwuUmVsYXRpdmVUaW1lRm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bFJlbENhY2hlW2tleV0gPSBpbmY7XG4gIH1cblxuICByZXR1cm4gaW5mO1xufVxuXG5sZXQgc3lzTG9jYWxlQ2FjaGUgPSBudWxsO1xuXG5mdW5jdGlvbiBzeXN0ZW1Mb2NhbGUoKSB7XG4gIGlmIChzeXNMb2NhbGVDYWNoZSkge1xuICAgIHJldHVybiBzeXNMb2NhbGVDYWNoZTtcbiAgfSBlbHNlIHtcbiAgICBzeXNMb2NhbGVDYWNoZSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkubG9jYWxlO1xuICAgIHJldHVybiBzeXNMb2NhbGVDYWNoZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZUxvY2FsZVN0cmluZyhsb2NhbGVTdHIpIHtcbiAgLy8gSSByZWFsbHkgd2FudCB0byBhdm9pZCB3cml0aW5nIGEgQkNQIDQ3IHBhcnNlclxuICAvLyBzZWUsIGUuZy4gaHR0cHM6Ly9naXRodWIuY29tL3dvb29ybS9iY3AtNDdcbiAgLy8gSW5zdGVhZCwgd2UnbGwgZG8gdGhpczpcbiAgLy8gYSkgaWYgdGhlIHN0cmluZyBoYXMgbm8gLXUgZXh0ZW5zaW9ucywganVzdCBsZWF2ZSBpdCBhbG9uZVxuICAvLyBiKSBpZiBpdCBkb2VzLCB1c2UgSW50bCB0byByZXNvbHZlIGV2ZXJ5dGhpbmdcbiAgLy8gYykgaWYgSW50bCBmYWlscywgdHJ5IGFnYWluIHdpdGhvdXQgdGhlIC11XG4gIGNvbnN0IHVJbmRleCA9IGxvY2FsZVN0ci5pbmRleE9mKFwiLXUtXCIpO1xuXG4gIGlmICh1SW5kZXggPT09IC0xKSB7XG4gICAgcmV0dXJuIFtsb2NhbGVTdHJdO1xuICB9IGVsc2Uge1xuICAgIGxldCBvcHRpb25zO1xuICAgIGNvbnN0IHNtYWxsZXIgPSBsb2NhbGVTdHIuc3Vic3RyaW5nKDAsIHVJbmRleCk7XG5cbiAgICB0cnkge1xuICAgICAgb3B0aW9ucyA9IGdldENhY2hlZERURihsb2NhbGVTdHIpLnJlc29sdmVkT3B0aW9ucygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIG9wdGlvbnMgPSBnZXRDYWNoZWREVEYoc21hbGxlcikucmVzb2x2ZWRPcHRpb25zKCk7XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgbnVtYmVyaW5nU3lzdGVtLFxuICAgICAgY2FsZW5kYXJcbiAgICB9ID0gb3B0aW9uczsgLy8gcmV0dXJuIHRoZSBzbWFsbGVyIG9uZSBzbyB0aGF0IHdlIGNhbiBhcHBlbmQgdGhlIGNhbGVuZGFyIGFuZCBudW1iZXJpbmcgb3ZlcnJpZGVzIHRvIGl0XG5cbiAgICByZXR1cm4gW3NtYWxsZXIsIG51bWJlcmluZ1N5c3RlbSwgY2FsZW5kYXJdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludGxDb25maWdTdHJpbmcobG9jYWxlU3RyLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyKSB7XG4gIGlmIChvdXRwdXRDYWxlbmRhciB8fCBudW1iZXJpbmdTeXN0ZW0pIHtcbiAgICBsb2NhbGVTdHIgKz0gXCItdVwiO1xuXG4gICAgaWYgKG91dHB1dENhbGVuZGFyKSB7XG4gICAgICBsb2NhbGVTdHIgKz0gYC1jYS0ke291dHB1dENhbGVuZGFyfWA7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlcmluZ1N5c3RlbSkge1xuICAgICAgbG9jYWxlU3RyICs9IGAtbnUtJHtudW1iZXJpbmdTeXN0ZW19YDtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9jYWxlU3RyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsb2NhbGVTdHI7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwTW9udGhzKGYpIHtcbiAgY29uc3QgbXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8PSAxMjsgaSsrKSB7XG4gICAgY29uc3QgZHQgPSBEYXRlVGltZS51dGMoMjAxNiwgaSwgMSk7XG4gICAgbXMucHVzaChmKGR0KSk7XG4gIH1cblxuICByZXR1cm4gbXM7XG59XG5cbmZ1bmN0aW9uIG1hcFdlZWtkYXlzKGYpIHtcbiAgY29uc3QgbXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8PSA3OyBpKyspIHtcbiAgICBjb25zdCBkdCA9IERhdGVUaW1lLnV0YygyMDE2LCAxMSwgMTMgKyBpKTtcbiAgICBtcy5wdXNoKGYoZHQpKTtcbiAgfVxuXG4gIHJldHVybiBtcztcbn1cblxuZnVuY3Rpb24gbGlzdFN0dWZmKGxvYywgbGVuZ3RoLCBkZWZhdWx0T0ssIGVuZ2xpc2hGbiwgaW50bEZuKSB7XG4gIGNvbnN0IG1vZGUgPSBsb2MubGlzdGluZ01vZGUoZGVmYXVsdE9LKTtcblxuICBpZiAobW9kZSA9PT0gXCJlcnJvclwiKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gZWxzZSBpZiAobW9kZSA9PT0gXCJlblwiKSB7XG4gICAgcmV0dXJuIGVuZ2xpc2hGbihsZW5ndGgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbnRsRm4obGVuZ3RoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdXBwb3J0c0Zhc3ROdW1iZXJzKGxvYykge1xuICBpZiAobG9jLm51bWJlcmluZ1N5c3RlbSAmJiBsb2MubnVtYmVyaW5nU3lzdGVtICE9PSBcImxhdG5cIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbG9jLm51bWJlcmluZ1N5c3RlbSA9PT0gXCJsYXRuXCIgfHwgIWxvYy5sb2NhbGUgfHwgbG9jLmxvY2FsZS5zdGFydHNXaXRoKFwiZW5cIikgfHwgbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jLmludGwpLnJlc29sdmVkT3B0aW9ucygpLm51bWJlcmluZ1N5c3RlbSA9PT0gXCJsYXRuXCI7XG4gIH1cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbmNsYXNzIFBvbHlOdW1iZXJGb3JtYXR0ZXIge1xuICBjb25zdHJ1Y3RvcihpbnRsLCBmb3JjZVNpbXBsZSwgb3B0cykge1xuICAgIHRoaXMucGFkVG8gPSBvcHRzLnBhZFRvIHx8IDA7XG4gICAgdGhpcy5mbG9vciA9IG9wdHMuZmxvb3IgfHwgZmFsc2U7XG4gICAgY29uc3Qge1xuICAgICAgcGFkVG8sXG4gICAgICBmbG9vcixcbiAgICAgIC4uLm90aGVyT3B0c1xuICAgIH0gPSBvcHRzO1xuXG4gICAgaWYgKCFmb3JjZVNpbXBsZSB8fCBPYmplY3Qua2V5cyhvdGhlck9wdHMpLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGludGxPcHRzID0ge1xuICAgICAgICB1c2VHcm91cGluZzogZmFsc2UsXG4gICAgICAgIC4uLm9wdHNcbiAgICAgIH07XG4gICAgICBpZiAob3B0cy5wYWRUbyA+IDApIGludGxPcHRzLm1pbmltdW1JbnRlZ2VyRGlnaXRzID0gb3B0cy5wYWRUbztcbiAgICAgIHRoaXMuaW5mID0gZ2V0Q2FjaGVkSU5GKGludGwsIGludGxPcHRzKTtcbiAgICB9XG4gIH1cblxuICBmb3JtYXQoaSkge1xuICAgIGlmICh0aGlzLmluZikge1xuICAgICAgY29uc3QgZml4ZWQgPSB0aGlzLmZsb29yID8gTWF0aC5mbG9vcihpKSA6IGk7XG4gICAgICByZXR1cm4gdGhpcy5pbmYuZm9ybWF0KGZpeGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdG8gbWF0Y2ggdGhlIGJyb3dzZXIncyBudW1iZXJmb3JtYXR0ZXIgZGVmYXVsdHNcbiAgICAgIGNvbnN0IGZpeGVkID0gdGhpcy5mbG9vciA/IE1hdGguZmxvb3IoaSkgOiByb3VuZFRvKGksIDMpO1xuICAgICAgcmV0dXJuIHBhZFN0YXJ0KGZpeGVkLCB0aGlzLnBhZFRvKTtcbiAgICB9XG4gIH1cblxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuY2xhc3MgUG9seURhdGVGb3JtYXR0ZXIge1xuICBjb25zdHJ1Y3RvcihkdCwgaW50bCwgb3B0cykge1xuICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gICAgbGV0IHo7XG5cbiAgICBpZiAoZHQuem9uZS5pc1VuaXZlcnNhbCkge1xuICAgICAgLy8gVVRDLTggb3IgRXRjL1VUQy04IGFyZSBub3QgcGFydCBvZiB0emRhdGEsIG9ubHkgRXRjL0dNVCs4IGFuZCB0aGUgbGlrZS5cbiAgICAgIC8vIFRoYXQgaXMgd2h5IGZpeGVkLW9mZnNldCBUWiBpcyBzZXQgdG8gdGhhdCB1bmxlc3MgaXQgaXM6XG4gICAgICAvLyAxLiBSZXByZXNlbnRpbmcgb2Zmc2V0IDAgd2hlbiBVVEMgaXMgdXNlZCB0byBtYWludGFpbiBwcmV2aW91cyBiZWhhdmlvciBhbmQgZG9lcyBub3QgYmVjb21lIEdNVC5cbiAgICAgIC8vIDIuIFVuc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyOlxuICAgICAgLy8gICAgLSBzb21lIGRvIG5vdCBzdXBwb3J0IEV0Yy9cbiAgICAgIC8vICAgIC0gPCBFdGMvR01ULTE0LCA+IEV0Yy9HTVQrMTIsIGFuZCAzMC1taW51dGUgb3IgNDUtbWludXRlIG9mZnNldHMgYXJlIG5vdCBwYXJ0IG9mIHR6ZGF0YVxuICAgICAgY29uc3QgZ210T2Zmc2V0ID0gLTEgKiAoZHQub2Zmc2V0IC8gNjApO1xuICAgICAgY29uc3Qgb2Zmc2V0WiA9IGdtdE9mZnNldCA+PSAwID8gYEV0Yy9HTVQrJHtnbXRPZmZzZXR9YCA6IGBFdGMvR01UJHtnbXRPZmZzZXR9YDtcblxuICAgICAgaWYgKGR0Lm9mZnNldCAhPT0gMCAmJiBJQU5BWm9uZS5jcmVhdGUob2Zmc2V0WikudmFsaWQpIHtcbiAgICAgICAgeiA9IG9mZnNldFo7XG4gICAgICAgIHRoaXMuZHQgPSBkdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vdCBhbGwgZml4ZWQtb2Zmc2V0IHpvbmVzIGxpa2UgRXRjLys0OjMwIGFyZSBwcmVzZW50IGluIHR6ZGF0YS5cbiAgICAgICAgLy8gU28gd2UgaGF2ZSB0byBtYWtlIGRvLiBUd28gY2FzZXM6XG4gICAgICAgIC8vIDEuIFRoZSBmb3JtYXQgb3B0aW9ucyB0ZWxsIHVzIHRvIHNob3cgdGhlIHpvbmUuIFdlIGNhbid0IGRvIHRoYXQsIHNvIHRoZSBiZXN0XG4gICAgICAgIC8vIHdlIGNhbiBkbyBpcyBmb3JtYXQgdGhlIGRhdGUgaW4gVVRDLlxuICAgICAgICAvLyAyLiBUaGUgZm9ybWF0IG9wdGlvbnMgZG9uJ3QgdGVsbCB1cyB0byBzaG93IHRoZSB6b25lLiBUaGVuIHdlIGNhbiBhZGp1c3QgdGhlbVxuICAgICAgICAvLyB0aGUgdGltZSBhbmQgdGVsbCB0aGUgZm9ybWF0dGVyIHRvIHNob3cgaXQgdG8gdXMgaW4gVVRDLCBzbyB0aGF0IHRoZSB0aW1lIGlzIHJpZ2h0XG4gICAgICAgIC8vIGFuZCB0aGUgYmFkIHpvbmUgZG9lc24ndCBzaG93IHVwLlxuICAgICAgICB6ID0gXCJVVENcIjtcblxuICAgICAgICBpZiAob3B0cy50aW1lWm9uZU5hbWUpIHtcbiAgICAgICAgICB0aGlzLmR0ID0gZHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kdCA9IGR0Lm9mZnNldCA9PT0gMCA/IGR0IDogRGF0ZVRpbWUuZnJvbU1pbGxpcyhkdC50cyArIGR0Lm9mZnNldCAqIDYwICogMTAwMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGR0LnpvbmUudHlwZSA9PT0gXCJzeXN0ZW1cIikge1xuICAgICAgdGhpcy5kdCA9IGR0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmR0ID0gZHQ7XG4gICAgICB6ID0gZHQuem9uZS5uYW1lO1xuICAgIH1cblxuICAgIGNvbnN0IGludGxPcHRzID0geyAuLi50aGlzLm9wdHNcbiAgICB9O1xuXG4gICAgaWYgKHopIHtcbiAgICAgIGludGxPcHRzLnRpbWVab25lID0gejtcbiAgICB9XG5cbiAgICB0aGlzLmR0ZiA9IGdldENhY2hlZERURihpbnRsLCBpbnRsT3B0cyk7XG4gIH1cblxuICBmb3JtYXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZHRmLmZvcm1hdCh0aGlzLmR0LnRvSlNEYXRlKCkpO1xuICB9XG5cbiAgZm9ybWF0VG9QYXJ0cygpIHtcbiAgICByZXR1cm4gdGhpcy5kdGYuZm9ybWF0VG9QYXJ0cyh0aGlzLmR0LnRvSlNEYXRlKCkpO1xuICB9XG5cbiAgcmVzb2x2ZWRPcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLmR0Zi5yZXNvbHZlZE9wdGlvbnMoKTtcbiAgfVxuXG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5jbGFzcyBQb2x5UmVsRm9ybWF0dGVyIHtcbiAgY29uc3RydWN0b3IoaW50bCwgaXNFbmdsaXNoLCBvcHRzKSB7XG4gICAgdGhpcy5vcHRzID0ge1xuICAgICAgc3R5bGU6IFwibG9uZ1wiLFxuICAgICAgLi4ub3B0c1xuICAgIH07XG5cbiAgICBpZiAoIWlzRW5nbGlzaCAmJiBoYXNSZWxhdGl2ZSgpKSB7XG4gICAgICB0aGlzLnJ0ZiA9IGdldENhY2hlZFJURihpbnRsLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICBmb3JtYXQoY291bnQsIHVuaXQpIHtcbiAgICBpZiAodGhpcy5ydGYpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ0Zi5mb3JtYXQoY291bnQsIHVuaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZm9ybWF0UmVsYXRpdmVUaW1lKHVuaXQsIGNvdW50LCB0aGlzLm9wdHMubnVtZXJpYywgdGhpcy5vcHRzLnN0eWxlICE9PSBcImxvbmdcIik7XG4gICAgfVxuICB9XG5cbiAgZm9ybWF0VG9QYXJ0cyhjb3VudCwgdW5pdCkge1xuICAgIGlmICh0aGlzLnJ0Zikge1xuICAgICAgcmV0dXJuIHRoaXMucnRmLmZvcm1hdFRvUGFydHMoY291bnQsIHVuaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG5cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbmNsYXNzIExvY2FsZSB7XG4gIHN0YXRpYyBmcm9tT3B0cyhvcHRzKSB7XG4gICAgcmV0dXJuIExvY2FsZS5jcmVhdGUob3B0cy5sb2NhbGUsIG9wdHMubnVtYmVyaW5nU3lzdGVtLCBvcHRzLm91dHB1dENhbGVuZGFyLCBvcHRzLmRlZmF1bHRUb0VOKTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyLCBkZWZhdWx0VG9FTiA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc3BlY2lmaWVkTG9jYWxlID0gbG9jYWxlIHx8IFNldHRpbmdzLmRlZmF1bHRMb2NhbGU7IC8vIHRoZSBzeXN0ZW0gbG9jYWxlIGlzIHVzZWZ1bCBmb3IgaHVtYW4gcmVhZGFibGUgc3RyaW5ncyBidXQgYW5ub3lpbmcgZm9yIHBhcnNpbmcvZm9ybWF0dGluZyBrbm93biBmb3JtYXRzXG5cbiAgICBjb25zdCBsb2NhbGVSID0gc3BlY2lmaWVkTG9jYWxlIHx8IChkZWZhdWx0VG9FTiA/IFwiZW4tVVNcIiA6IHN5c3RlbUxvY2FsZSgpKTtcbiAgICBjb25zdCBudW1iZXJpbmdTeXN0ZW1SID0gbnVtYmVyaW5nU3lzdGVtIHx8IFNldHRpbmdzLmRlZmF1bHROdW1iZXJpbmdTeXN0ZW07XG4gICAgY29uc3Qgb3V0cHV0Q2FsZW5kYXJSID0gb3V0cHV0Q2FsZW5kYXIgfHwgU2V0dGluZ3MuZGVmYXVsdE91dHB1dENhbGVuZGFyO1xuICAgIHJldHVybiBuZXcgTG9jYWxlKGxvY2FsZVIsIG51bWJlcmluZ1N5c3RlbVIsIG91dHB1dENhbGVuZGFyUiwgc3BlY2lmaWVkTG9jYWxlKTtcbiAgfVxuXG4gIHN0YXRpYyByZXNldENhY2hlKCkge1xuICAgIHN5c0xvY2FsZUNhY2hlID0gbnVsbDtcbiAgICBpbnRsRFRDYWNoZSA9IHt9O1xuICAgIGludGxOdW1DYWNoZSA9IHt9O1xuICAgIGludGxSZWxDYWNoZSA9IHt9O1xuICB9XG5cbiAgc3RhdGljIGZyb21PYmplY3Qoe1xuICAgIGxvY2FsZSxcbiAgICBudW1iZXJpbmdTeXN0ZW0sXG4gICAgb3V0cHV0Q2FsZW5kYXJcbiAgfSA9IHt9KSB7XG4gICAgcmV0dXJuIExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGxvY2FsZSwgbnVtYmVyaW5nLCBvdXRwdXRDYWxlbmRhciwgc3BlY2lmaWVkTG9jYWxlKSB7XG4gICAgY29uc3QgW3BhcnNlZExvY2FsZSwgcGFyc2VkTnVtYmVyaW5nU3lzdGVtLCBwYXJzZWRPdXRwdXRDYWxlbmRhcl0gPSBwYXJzZUxvY2FsZVN0cmluZyhsb2NhbGUpO1xuICAgIHRoaXMubG9jYWxlID0gcGFyc2VkTG9jYWxlO1xuICAgIHRoaXMubnVtYmVyaW5nU3lzdGVtID0gbnVtYmVyaW5nIHx8IHBhcnNlZE51bWJlcmluZ1N5c3RlbSB8fCBudWxsO1xuICAgIHRoaXMub3V0cHV0Q2FsZW5kYXIgPSBvdXRwdXRDYWxlbmRhciB8fCBwYXJzZWRPdXRwdXRDYWxlbmRhciB8fCBudWxsO1xuICAgIHRoaXMuaW50bCA9IGludGxDb25maWdTdHJpbmcodGhpcy5sb2NhbGUsIHRoaXMubnVtYmVyaW5nU3lzdGVtLCB0aGlzLm91dHB1dENhbGVuZGFyKTtcbiAgICB0aGlzLndlZWtkYXlzQ2FjaGUgPSB7XG4gICAgICBmb3JtYXQ6IHt9LFxuICAgICAgc3RhbmRhbG9uZToge31cbiAgICB9O1xuICAgIHRoaXMubW9udGhzQ2FjaGUgPSB7XG4gICAgICBmb3JtYXQ6IHt9LFxuICAgICAgc3RhbmRhbG9uZToge31cbiAgICB9O1xuICAgIHRoaXMubWVyaWRpZW1DYWNoZSA9IG51bGw7XG4gICAgdGhpcy5lcmFDYWNoZSA9IHt9O1xuICAgIHRoaXMuc3BlY2lmaWVkTG9jYWxlID0gc3BlY2lmaWVkTG9jYWxlO1xuICAgIHRoaXMuZmFzdE51bWJlcnNDYWNoZWQgPSBudWxsO1xuICB9XG5cbiAgZ2V0IGZhc3ROdW1iZXJzKCkge1xuICAgIGlmICh0aGlzLmZhc3ROdW1iZXJzQ2FjaGVkID09IG51bGwpIHtcbiAgICAgIHRoaXMuZmFzdE51bWJlcnNDYWNoZWQgPSBzdXBwb3J0c0Zhc3ROdW1iZXJzKHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmZhc3ROdW1iZXJzQ2FjaGVkO1xuICB9XG5cbiAgbGlzdGluZ01vZGUoKSB7XG4gICAgY29uc3QgaXNBY3R1YWxseUVuID0gdGhpcy5pc0VuZ2xpc2goKTtcbiAgICBjb25zdCBoYXNOb1dlaXJkbmVzcyA9ICh0aGlzLm51bWJlcmluZ1N5c3RlbSA9PT0gbnVsbCB8fCB0aGlzLm51bWJlcmluZ1N5c3RlbSA9PT0gXCJsYXRuXCIpICYmICh0aGlzLm91dHB1dENhbGVuZGFyID09PSBudWxsIHx8IHRoaXMub3V0cHV0Q2FsZW5kYXIgPT09IFwiZ3JlZ29yeVwiKTtcbiAgICByZXR1cm4gaXNBY3R1YWxseUVuICYmIGhhc05vV2VpcmRuZXNzID8gXCJlblwiIDogXCJpbnRsXCI7XG4gIH1cblxuICBjbG9uZShhbHRzKSB7XG4gICAgaWYgKCFhbHRzIHx8IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFsdHMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKGFsdHMubG9jYWxlIHx8IHRoaXMuc3BlY2lmaWVkTG9jYWxlLCBhbHRzLm51bWJlcmluZ1N5c3RlbSB8fCB0aGlzLm51bWJlcmluZ1N5c3RlbSwgYWx0cy5vdXRwdXRDYWxlbmRhciB8fCB0aGlzLm91dHB1dENhbGVuZGFyLCBhbHRzLmRlZmF1bHRUb0VOIHx8IGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICByZWRlZmF1bHRUb0VOKGFsdHMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKHsgLi4uYWx0cyxcbiAgICAgIGRlZmF1bHRUb0VOOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICByZWRlZmF1bHRUb1N5c3RlbShhbHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSh7IC4uLmFsdHMsXG4gICAgICBkZWZhdWx0VG9FTjogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIG1vbnRocyhsZW5ndGgsIGZvcm1hdCA9IGZhbHNlLCBkZWZhdWx0T0sgPSB0cnVlKSB7XG4gICAgcmV0dXJuIGxpc3RTdHVmZih0aGlzLCBsZW5ndGgsIGRlZmF1bHRPSywgbW9udGhzLCAoKSA9PiB7XG4gICAgICBjb25zdCBpbnRsID0gZm9ybWF0ID8ge1xuICAgICAgICBtb250aDogbGVuZ3RoLFxuICAgICAgICBkYXk6IFwibnVtZXJpY1wiXG4gICAgICB9IDoge1xuICAgICAgICBtb250aDogbGVuZ3RoXG4gICAgICB9LFxuICAgICAgICAgICAgZm9ybWF0U3RyID0gZm9ybWF0ID8gXCJmb3JtYXRcIiA6IFwic3RhbmRhbG9uZVwiO1xuXG4gICAgICBpZiAoIXRoaXMubW9udGhzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdKSB7XG4gICAgICAgIHRoaXMubW9udGhzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdID0gbWFwTW9udGhzKGR0ID0+IHRoaXMuZXh0cmFjdChkdCwgaW50bCwgXCJtb250aFwiKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLm1vbnRoc0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXTtcbiAgICB9KTtcbiAgfVxuXG4gIHdlZWtkYXlzKGxlbmd0aCwgZm9ybWF0ID0gZmFsc2UsIGRlZmF1bHRPSyA9IHRydWUpIHtcbiAgICByZXR1cm4gbGlzdFN0dWZmKHRoaXMsIGxlbmd0aCwgZGVmYXVsdE9LLCB3ZWVrZGF5cywgKCkgPT4ge1xuICAgICAgY29uc3QgaW50bCA9IGZvcm1hdCA/IHtcbiAgICAgICAgd2Vla2RheTogbGVuZ3RoLFxuICAgICAgICB5ZWFyOiBcIm51bWVyaWNcIixcbiAgICAgICAgbW9udGg6IFwibG9uZ1wiLFxuICAgICAgICBkYXk6IFwibnVtZXJpY1wiXG4gICAgICB9IDoge1xuICAgICAgICB3ZWVrZGF5OiBsZW5ndGhcbiAgICAgIH0sXG4gICAgICAgICAgICBmb3JtYXRTdHIgPSBmb3JtYXQgPyBcImZvcm1hdFwiIDogXCJzdGFuZGFsb25lXCI7XG5cbiAgICAgIGlmICghdGhpcy53ZWVrZGF5c0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXSkge1xuICAgICAgICB0aGlzLndlZWtkYXlzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdID0gbWFwV2Vla2RheXMoZHQgPT4gdGhpcy5leHRyYWN0KGR0LCBpbnRsLCBcIndlZWtkYXlcIikpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy53ZWVrZGF5c0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXTtcbiAgICB9KTtcbiAgfVxuXG4gIG1lcmlkaWVtcyhkZWZhdWx0T0sgPSB0cnVlKSB7XG4gICAgcmV0dXJuIGxpc3RTdHVmZih0aGlzLCB1bmRlZmluZWQsIGRlZmF1bHRPSywgKCkgPT4gbWVyaWRpZW1zLCAoKSA9PiB7XG4gICAgICAvLyBJbiB0aGVvcnkgdGhlcmUgY291bGQgYmUgYXJpYml0cmFyeSBkYXkgcGVyaW9kcy4gV2UncmUgZ29ubmEgYXNzdW1lIHRoZXJlIGFyZSBleGFjdGx5IHR3b1xuICAgICAgLy8gZm9yIEFNIGFuZCBQTS4gVGhpcyBpcyBwcm9iYWJseSB3cm9uZywgYnV0IGl0J3MgbWFrZXMgcGFyc2luZyB3YXkgZWFzaWVyLlxuICAgICAgaWYgKCF0aGlzLm1lcmlkaWVtQ2FjaGUpIHtcbiAgICAgICAgY29uc3QgaW50bCA9IHtcbiAgICAgICAgICBob3VyOiBcIm51bWVyaWNcIixcbiAgICAgICAgICBob3VyQ3ljbGU6IFwiaDEyXCJcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tZXJpZGllbUNhY2hlID0gW0RhdGVUaW1lLnV0YygyMDE2LCAxMSwgMTMsIDkpLCBEYXRlVGltZS51dGMoMjAxNiwgMTEsIDEzLCAxOSldLm1hcChkdCA9PiB0aGlzLmV4dHJhY3QoZHQsIGludGwsIFwiZGF5cGVyaW9kXCIpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMubWVyaWRpZW1DYWNoZTtcbiAgICB9KTtcbiAgfVxuXG4gIGVyYXMobGVuZ3RoLCBkZWZhdWx0T0sgPSB0cnVlKSB7XG4gICAgcmV0dXJuIGxpc3RTdHVmZih0aGlzLCBsZW5ndGgsIGRlZmF1bHRPSywgZXJhcywgKCkgPT4ge1xuICAgICAgY29uc3QgaW50bCA9IHtcbiAgICAgICAgZXJhOiBsZW5ndGhcbiAgICAgIH07IC8vIFRoaXMgaXMgcHJvYmxlbWF0aWMuIERpZmZlcmVudCBjYWxlbmRhcnMgYXJlIGdvaW5nIHRvIGRlZmluZSBlcmFzIHRvdGFsbHkgZGlmZmVyZW50bHkuIFdoYXQgSSBuZWVkIGlzIHRoZSBtaW5pbXVtIHNldCBvZiBkYXRlc1xuICAgICAgLy8gdG8gZGVmaW5pdGVseSBlbnVtZXJhdGUgdGhlbS5cblxuICAgICAgaWYgKCF0aGlzLmVyYUNhY2hlW2xlbmd0aF0pIHtcbiAgICAgICAgdGhpcy5lcmFDYWNoZVtsZW5ndGhdID0gW0RhdGVUaW1lLnV0YygtNDAsIDEsIDEpLCBEYXRlVGltZS51dGMoMjAxNywgMSwgMSldLm1hcChkdCA9PiB0aGlzLmV4dHJhY3QoZHQsIGludGwsIFwiZXJhXCIpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZXJhQ2FjaGVbbGVuZ3RoXTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4dHJhY3QoZHQsIGludGxPcHRzLCBmaWVsZCkge1xuICAgIGNvbnN0IGRmID0gdGhpcy5kdEZvcm1hdHRlcihkdCwgaW50bE9wdHMpLFxuICAgICAgICAgIHJlc3VsdHMgPSBkZi5mb3JtYXRUb1BhcnRzKCksXG4gICAgICAgICAgbWF0Y2hpbmcgPSByZXN1bHRzLmZpbmQobSA9PiBtLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gZmllbGQpO1xuICAgIHJldHVybiBtYXRjaGluZyA/IG1hdGNoaW5nLnZhbHVlIDogbnVsbDtcbiAgfVxuXG4gIG51bWJlckZvcm1hdHRlcihvcHRzID0ge30pIHtcbiAgICAvLyB0aGlzIGZvcmNlc2ltcGxlIG9wdGlvbiBpcyBuZXZlciB1c2VkICh0aGUgb25seSBjYWxsZXIgc2hvcnQtY2lyY3VpdHMgb24gaXQsIGJ1dCBpdCBzZWVtcyBzYWZlciB0byBsZWF2ZSlcbiAgICAvLyAoaW4gY29udHJhc3QsIHRoZSByZXN0IG9mIHRoZSBjb25kaXRpb24gaXMgdXNlZCBoZWF2aWx5KVxuICAgIHJldHVybiBuZXcgUG9seU51bWJlckZvcm1hdHRlcih0aGlzLmludGwsIG9wdHMuZm9yY2VTaW1wbGUgfHwgdGhpcy5mYXN0TnVtYmVycywgb3B0cyk7XG4gIH1cblxuICBkdEZvcm1hdHRlcihkdCwgaW50bE9wdHMgPSB7fSkge1xuICAgIHJldHVybiBuZXcgUG9seURhdGVGb3JtYXR0ZXIoZHQsIHRoaXMuaW50bCwgaW50bE9wdHMpO1xuICB9XG5cbiAgcmVsRm9ybWF0dGVyKG9wdHMgPSB7fSkge1xuICAgIHJldHVybiBuZXcgUG9seVJlbEZvcm1hdHRlcih0aGlzLmludGwsIHRoaXMuaXNFbmdsaXNoKCksIG9wdHMpO1xuICB9XG5cbiAgbGlzdEZvcm1hdHRlcihvcHRzID0ge30pIHtcbiAgICByZXR1cm4gZ2V0Q2FjaGVkTEYodGhpcy5pbnRsLCBvcHRzKTtcbiAgfVxuXG4gIGlzRW5nbGlzaCgpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGUgPT09IFwiZW5cIiB8fCB0aGlzLmxvY2FsZS50b0xvd2VyQ2FzZSgpID09PSBcImVuLXVzXCIgfHwgbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQodGhpcy5pbnRsKS5yZXNvbHZlZE9wdGlvbnMoKS5sb2NhbGUuc3RhcnRzV2l0aChcImVuLXVzXCIpO1xuICB9XG5cbiAgZXF1YWxzKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlID09PSBvdGhlci5sb2NhbGUgJiYgdGhpcy5udW1iZXJpbmdTeXN0ZW0gPT09IG90aGVyLm51bWJlcmluZ1N5c3RlbSAmJiB0aGlzLm91dHB1dENhbGVuZGFyID09PSBvdGhlci5vdXRwdXRDYWxlbmRhcjtcbiAgfVxuXG59XG5cbi8qXG4gKiBUaGlzIGZpbGUgaGFuZGxlcyBwYXJzaW5nIGZvciB3ZWxsLXNwZWNpZmllZCBmb3JtYXRzLiBIZXJlJ3MgaG93IGl0IHdvcmtzOlxuICogVHdvIHRoaW5ncyBnbyBpbnRvIHBhcnNpbmc6IGEgcmVnZXggdG8gbWF0Y2ggd2l0aCBhbmQgYW4gZXh0cmFjdG9yIHRvIHRha2UgYXBhcnQgdGhlIGdyb3VwcyBpbiB0aGUgbWF0Y2guXG4gKiBBbiBleHRyYWN0b3IgaXMganVzdCBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSByZWdleCBtYXRjaCBhcnJheSBhbmQgcmV0dXJucyBhIHsgeWVhcjogLi4uLCBtb250aDogLi4uIH0gb2JqZWN0XG4gKiBwYXJzZSgpIGRvZXMgdGhlIHdvcmsgb2YgZXhlY3V0aW5nIHRoZSByZWdleCBhbmQgYXBwbHlpbmcgdGhlIGV4dHJhY3Rvci4gSXQgdGFrZXMgbXVsdGlwbGUgcmVnZXgvZXh0cmFjdG9yIHBhaXJzIHRvIHRyeSBpbiBzZXF1ZW5jZS5cbiAqIEV4dHJhY3RvcnMgY2FuIHRha2UgYSBcImN1cnNvclwiIHJlcHJlc2VudGluZyB0aGUgb2Zmc2V0IGluIHRoZSBtYXRjaCB0byBsb29rIGF0LiBUaGlzIG1ha2VzIGl0IGVhc3kgdG8gY29tYmluZSBleHRyYWN0b3JzLlxuICogY29tYmluZUV4dHJhY3RvcnMoKSBkb2VzIHRoZSB3b3JrIG9mIGNvbWJpbmluZyB0aGVtLCBrZWVwaW5nIHRyYWNrIG9mIHRoZSBjdXJzb3IgdGhyb3VnaCBtdWx0aXBsZSBleHRyYWN0aW9ucy5cbiAqIFNvbWUgZXh0cmFjdGlvbnMgYXJlIHN1cGVyIGR1bWIgYW5kIHNpbXBsZVBhcnNlIGFuZCBmcm9tU3RyaW5ncyBoZWxwIERSWSB0aGVtLlxuICovXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWdleGVzKC4uLnJlZ2V4ZXMpIHtcbiAgY29uc3QgZnVsbCA9IHJlZ2V4ZXMucmVkdWNlKChmLCByKSA9PiBmICsgci5zb3VyY2UsIFwiXCIpO1xuICByZXR1cm4gUmVnRXhwKGBeJHtmdWxsfSRgKTtcbn1cblxuZnVuY3Rpb24gY29tYmluZUV4dHJhY3RvcnMoLi4uZXh0cmFjdG9ycykge1xuICByZXR1cm4gbSA9PiBleHRyYWN0b3JzLnJlZHVjZSgoW21lcmdlZFZhbHMsIG1lcmdlZFpvbmUsIGN1cnNvcl0sIGV4KSA9PiB7XG4gICAgY29uc3QgW3ZhbCwgem9uZSwgbmV4dF0gPSBleChtLCBjdXJzb3IpO1xuICAgIHJldHVybiBbeyAuLi5tZXJnZWRWYWxzLFxuICAgICAgLi4udmFsXG4gICAgfSwgem9uZSB8fCBtZXJnZWRab25lLCBuZXh0XTtcbiAgfSwgW3t9LCBudWxsLCAxXSkuc2xpY2UoMCwgMik7XG59XG5cbmZ1bmN0aW9uIHBhcnNlKHMsIC4uLnBhdHRlcm5zKSB7XG4gIGlmIChzID09IG51bGwpIHtcbiAgICByZXR1cm4gW251bGwsIG51bGxdO1xuICB9XG5cbiAgZm9yIChjb25zdCBbcmVnZXgsIGV4dHJhY3Rvcl0gb2YgcGF0dGVybnMpIHtcbiAgICBjb25zdCBtID0gcmVnZXguZXhlYyhzKTtcblxuICAgIGlmIChtKSB7XG4gICAgICByZXR1cm4gZXh0cmFjdG9yKG0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbbnVsbCwgbnVsbF07XG59XG5cbmZ1bmN0aW9uIHNpbXBsZVBhcnNlKC4uLmtleXMpIHtcbiAgcmV0dXJuIChtYXRjaCwgY3Vyc29yKSA9PiB7XG4gICAgY29uc3QgcmV0ID0ge307XG4gICAgbGV0IGk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgcmV0W2tleXNbaV1dID0gcGFyc2VJbnRlZ2VyKG1hdGNoW2N1cnNvciArIGldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW3JldCwgbnVsbCwgY3Vyc29yICsgaV07XG4gIH07XG59IC8vIElTTyBhbmQgU1FMIHBhcnNpbmdcblxuXG5jb25zdCBvZmZzZXRSZWdleCA9IC8oPzooWil8KFsrLV1cXGRcXGQpKD86Oj8oXFxkXFxkKSk/KS87XG5jb25zdCBpc29FeHRlbmRlZFpvbmUgPSBgKD86JHtvZmZzZXRSZWdleC5zb3VyY2V9Pyg/OlxcXFxbKCR7aWFuYVJlZ2V4LnNvdXJjZX0pXFxcXF0pPyk/YDtcbmNvbnN0IGlzb1RpbWVCYXNlUmVnZXggPSAvKFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86Oj8oXFxkXFxkKSg/OlsuLF0oXFxkezEsMzB9KSk/KT8pPy87XG5jb25zdCBpc29UaW1lUmVnZXggPSBSZWdFeHAoYCR7aXNvVGltZUJhc2VSZWdleC5zb3VyY2V9JHtpc29FeHRlbmRlZFpvbmV9YCk7XG5jb25zdCBpc29UaW1lRXh0ZW5zaW9uUmVnZXggPSBSZWdFeHAoYCg/OlQke2lzb1RpbWVSZWdleC5zb3VyY2V9KT9gKTtcbmNvbnN0IGlzb1ltZFJlZ2V4ID0gLyhbKy1dXFxkezZ9fFxcZHs0fSkoPzotPyhcXGRcXGQpKD86LT8oXFxkXFxkKSk/KT8vO1xuY29uc3QgaXNvV2Vla1JlZ2V4ID0gLyhcXGR7NH0pLT9XKFxcZFxcZCkoPzotPyhcXGQpKT8vO1xuY29uc3QgaXNvT3JkaW5hbFJlZ2V4ID0gLyhcXGR7NH0pLT8oXFxkezN9KS87XG5jb25zdCBleHRyYWN0SVNPV2Vla0RhdGEgPSBzaW1wbGVQYXJzZShcIndlZWtZZWFyXCIsIFwid2Vla051bWJlclwiLCBcIndlZWtEYXlcIik7XG5jb25zdCBleHRyYWN0SVNPT3JkaW5hbERhdGEgPSBzaW1wbGVQYXJzZShcInllYXJcIiwgXCJvcmRpbmFsXCIpO1xuY29uc3Qgc3FsWW1kUmVnZXggPSAvKFxcZHs0fSktKFxcZFxcZCktKFxcZFxcZCkvOyAvLyBkdW1iZWQtZG93biB2ZXJzaW9uIG9mIHRoZSBJU08gb25lXG5cbmNvbnN0IHNxbFRpbWVSZWdleCA9IFJlZ0V4cChgJHtpc29UaW1lQmFzZVJlZ2V4LnNvdXJjZX0gPyg/OiR7b2Zmc2V0UmVnZXguc291cmNlfXwoJHtpYW5hUmVnZXguc291cmNlfSkpP2ApO1xuY29uc3Qgc3FsVGltZUV4dGVuc2lvblJlZ2V4ID0gUmVnRXhwKGAoPzogJHtzcWxUaW1lUmVnZXguc291cmNlfSk/YCk7XG5cbmZ1bmN0aW9uIGludChtYXRjaCwgcG9zLCBmYWxsYmFjaykge1xuICBjb25zdCBtID0gbWF0Y2hbcG9zXTtcbiAgcmV0dXJuIGlzVW5kZWZpbmVkKG0pID8gZmFsbGJhY2sgOiBwYXJzZUludGVnZXIobSk7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RJU09ZbWQobWF0Y2gsIGN1cnNvcikge1xuICBjb25zdCBpdGVtID0ge1xuICAgIHllYXI6IGludChtYXRjaCwgY3Vyc29yKSxcbiAgICBtb250aDogaW50KG1hdGNoLCBjdXJzb3IgKyAxLCAxKSxcbiAgICBkYXk6IGludChtYXRjaCwgY3Vyc29yICsgMiwgMSlcbiAgfTtcbiAgcmV0dXJuIFtpdGVtLCBudWxsLCBjdXJzb3IgKyAzXTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdElTT1RpbWUobWF0Y2gsIGN1cnNvcikge1xuICBjb25zdCBpdGVtID0ge1xuICAgIGhvdXJzOiBpbnQobWF0Y2gsIGN1cnNvciwgMCksXG4gICAgbWludXRlczogaW50KG1hdGNoLCBjdXJzb3IgKyAxLCAwKSxcbiAgICBzZWNvbmRzOiBpbnQobWF0Y2gsIGN1cnNvciArIDIsIDApLFxuICAgIG1pbGxpc2Vjb25kczogcGFyc2VNaWxsaXMobWF0Y2hbY3Vyc29yICsgM10pXG4gIH07XG4gIHJldHVybiBbaXRlbSwgbnVsbCwgY3Vyc29yICsgNF07XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RJU09PZmZzZXQobWF0Y2gsIGN1cnNvcikge1xuICBjb25zdCBsb2NhbCA9ICFtYXRjaFtjdXJzb3JdICYmICFtYXRjaFtjdXJzb3IgKyAxXSxcbiAgICAgICAgZnVsbE9mZnNldCA9IHNpZ25lZE9mZnNldChtYXRjaFtjdXJzb3IgKyAxXSwgbWF0Y2hbY3Vyc29yICsgMl0pLFxuICAgICAgICB6b25lID0gbG9jYWwgPyBudWxsIDogRml4ZWRPZmZzZXRab25lLmluc3RhbmNlKGZ1bGxPZmZzZXQpO1xuICByZXR1cm4gW3t9LCB6b25lLCBjdXJzb3IgKyAzXTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdElBTkFab25lKG1hdGNoLCBjdXJzb3IpIHtcbiAgY29uc3Qgem9uZSA9IG1hdGNoW2N1cnNvcl0gPyBJQU5BWm9uZS5jcmVhdGUobWF0Y2hbY3Vyc29yXSkgOiBudWxsO1xuICByZXR1cm4gW3t9LCB6b25lLCBjdXJzb3IgKyAxXTtcbn0gLy8gSVNPIHRpbWUgcGFyc2luZ1xuXG5cbmNvbnN0IGlzb1RpbWVPbmx5ID0gUmVnRXhwKGBeVD8ke2lzb1RpbWVCYXNlUmVnZXguc291cmNlfSRgKTsgLy8gSVNPIGR1cmF0aW9uIHBhcnNpbmdcblxuY29uc3QgaXNvRHVyYXRpb24gPSAvXi0/UCg/Oig/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KVkpPyg/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KU0pPyg/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KVcpPyg/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KUQpPyg/OlQoPzooLT9cXGR7MSwyMH0oPzpcXC5cXGR7MSwyMH0pPylIKT8oPzooLT9cXGR7MSwyMH0oPzpcXC5cXGR7MSwyMH0pPylNKT8oPzooLT9cXGR7MSwyMH0pKD86Wy4sXSgtP1xcZHsxLDIwfSkpP1MpPyk/KSQvO1xuXG5mdW5jdGlvbiBleHRyYWN0SVNPRHVyYXRpb24obWF0Y2gpIHtcbiAgY29uc3QgW3MsIHllYXJTdHIsIG1vbnRoU3RyLCB3ZWVrU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyLCBtaWxsaXNlY29uZHNTdHJdID0gbWF0Y2g7XG4gIGNvbnN0IGhhc05lZ2F0aXZlUHJlZml4ID0gc1swXSA9PT0gXCItXCI7XG4gIGNvbnN0IG5lZ2F0aXZlU2Vjb25kcyA9IHNlY29uZFN0ciAmJiBzZWNvbmRTdHJbMF0gPT09IFwiLVwiO1xuXG4gIGNvbnN0IG1heWJlTmVnYXRlID0gKG51bSwgZm9yY2UgPSBmYWxzZSkgPT4gbnVtICE9PSB1bmRlZmluZWQgJiYgKGZvcmNlIHx8IG51bSAmJiBoYXNOZWdhdGl2ZVByZWZpeCkgPyAtbnVtIDogbnVtO1xuXG4gIHJldHVybiBbe1xuICAgIHllYXJzOiBtYXliZU5lZ2F0ZShwYXJzZUZsb2F0aW5nKHllYXJTdHIpKSxcbiAgICBtb250aHM6IG1heWJlTmVnYXRlKHBhcnNlRmxvYXRpbmcobW9udGhTdHIpKSxcbiAgICB3ZWVrczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyh3ZWVrU3RyKSksXG4gICAgZGF5czogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhkYXlTdHIpKSxcbiAgICBob3VyczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhob3VyU3RyKSksXG4gICAgbWludXRlczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhtaW51dGVTdHIpKSxcbiAgICBzZWNvbmRzOiBtYXliZU5lZ2F0ZShwYXJzZUZsb2F0aW5nKHNlY29uZFN0ciksIHNlY29uZFN0ciA9PT0gXCItMFwiKSxcbiAgICBtaWxsaXNlY29uZHM6IG1heWJlTmVnYXRlKHBhcnNlTWlsbGlzKG1pbGxpc2Vjb25kc1N0ciksIG5lZ2F0aXZlU2Vjb25kcylcbiAgfV07XG59IC8vIFRoZXNlIGFyZSBhIGxpdHRsZSBicmFpbmRlYWQuIEVEVCAqc2hvdWxkKiB0ZWxsIHVzIHRoYXQgd2UncmUgaW4sIHNheSwgQW1lcmljYS9OZXdfWW9ya1xuLy8gYW5kIG5vdCBqdXN0IHRoYXQgd2UncmUgaW4gLTI0MCAqcmlnaHQgbm93Ki4gQnV0IHNpbmNlIEkgZG9uJ3QgdGhpbmsgdGhlc2UgYXJlIHVzZWQgdGhhdCBvZnRlblxuLy8gSSdtIGp1c3QgZ29pbmcgdG8gaWdub3JlIHRoYXRcblxuXG5jb25zdCBvYnNPZmZzZXRzID0ge1xuICBHTVQ6IDAsXG4gIEVEVDogLTQgKiA2MCxcbiAgRVNUOiAtNSAqIDYwLFxuICBDRFQ6IC01ICogNjAsXG4gIENTVDogLTYgKiA2MCxcbiAgTURUOiAtNiAqIDYwLFxuICBNU1Q6IC03ICogNjAsXG4gIFBEVDogLTcgKiA2MCxcbiAgUFNUOiAtOCAqIDYwXG59O1xuXG5mdW5jdGlvbiBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cikge1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgeWVhcjogeWVhclN0ci5sZW5ndGggPT09IDIgPyB1bnRydW5jYXRlWWVhcihwYXJzZUludGVnZXIoeWVhclN0cikpIDogcGFyc2VJbnRlZ2VyKHllYXJTdHIpLFxuICAgIG1vbnRoOiBtb250aHNTaG9ydC5pbmRleE9mKG1vbnRoU3RyKSArIDEsXG4gICAgZGF5OiBwYXJzZUludGVnZXIoZGF5U3RyKSxcbiAgICBob3VyOiBwYXJzZUludGVnZXIoaG91clN0ciksXG4gICAgbWludXRlOiBwYXJzZUludGVnZXIobWludXRlU3RyKVxuICB9O1xuICBpZiAoc2Vjb25kU3RyKSByZXN1bHQuc2Vjb25kID0gcGFyc2VJbnRlZ2VyKHNlY29uZFN0cik7XG5cbiAgaWYgKHdlZWtkYXlTdHIpIHtcbiAgICByZXN1bHQud2Vla2RheSA9IHdlZWtkYXlTdHIubGVuZ3RoID4gMyA/IHdlZWtkYXlzTG9uZy5pbmRleE9mKHdlZWtkYXlTdHIpICsgMSA6IHdlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSArIDE7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSAvLyBSRkMgMjgyMi81MzIyXG5cblxuY29uc3QgcmZjMjgyMiA9IC9eKD86KE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksXFxzKT8oXFxkezEsMn0pXFxzKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxccyhcXGR7Miw0fSlcXHMoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKSk/XFxzKD86KFVUfEdNVHxbRUNNUF1bU0RdVCl8KFtael0pfCg/OihbKy1dXFxkXFxkKShcXGRcXGQpKSkkLztcblxuZnVuY3Rpb24gZXh0cmFjdFJGQzI4MjIobWF0Y2gpIHtcbiAgY29uc3QgWywgd2Vla2RheVN0ciwgZGF5U3RyLCBtb250aFN0ciwgeWVhclN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIsIG9ic09mZnNldCwgbWlsT2Zmc2V0LCBvZmZIb3VyU3RyLCBvZmZNaW51dGVTdHJdID0gbWF0Y2gsXG4gICAgICAgIHJlc3VsdCA9IGZyb21TdHJpbmdzKHdlZWtkYXlTdHIsIHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyKTtcbiAgbGV0IG9mZnNldDtcblxuICBpZiAob2JzT2Zmc2V0KSB7XG4gICAgb2Zmc2V0ID0gb2JzT2Zmc2V0c1tvYnNPZmZzZXRdO1xuICB9IGVsc2UgaWYgKG1pbE9mZnNldCkge1xuICAgIG9mZnNldCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0ID0gc2lnbmVkT2Zmc2V0KG9mZkhvdXJTdHIsIG9mZk1pbnV0ZVN0cik7XG4gIH1cblxuICByZXR1cm4gW3Jlc3VsdCwgbmV3IEZpeGVkT2Zmc2V0Wm9uZShvZmZzZXQpXTtcbn1cblxuZnVuY3Rpb24gcHJlcHJvY2Vzc1JGQzI4MjIocykge1xuICAvLyBSZW1vdmUgY29tbWVudHMgYW5kIGZvbGRpbmcgd2hpdGVzcGFjZSBhbmQgcmVwbGFjZSBtdWx0aXBsZS1zcGFjZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuICByZXR1cm4gcy5yZXBsYWNlKC9cXChbXildKlxcKXxbXFxuXFx0XS9nLCBcIiBcIikucmVwbGFjZSgvKFxcc1xccyspL2csIFwiIFwiKS50cmltKCk7XG59IC8vIGh0dHAgZGF0ZVxuXG5cbmNvbnN0IHJmYzExMjMgPSAvXihNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pLCAoXFxkXFxkKSAoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpIChcXGR7NH0pIChcXGRcXGQpOihcXGRcXGQpOihcXGRcXGQpIEdNVCQvLFxuICAgICAgcmZjODUwID0gL14oTW9uZGF5fFR1ZXNkYXl8V2VkbmVzZGF5fFRodXJzZGF5fEZyaWRheXxTYXR1cmRheXxTdW5kYXkpLCAoXFxkXFxkKS0oSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpLShcXGRcXGQpIChcXGRcXGQpOihcXGRcXGQpOihcXGRcXGQpIEdNVCQvLFxuICAgICAgYXNjaWkgPSAvXihNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pIChKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYykgKCBcXGR8XFxkXFxkKSAoXFxkXFxkKTooXFxkXFxkKTooXFxkXFxkKSAoXFxkezR9KSQvO1xuXG5mdW5jdGlvbiBleHRyYWN0UkZDMTEyM09yODUwKG1hdGNoKSB7XG4gIGNvbnN0IFssIHdlZWtkYXlTdHIsIGRheVN0ciwgbW9udGhTdHIsIHllYXJTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyXSA9IG1hdGNoLFxuICAgICAgICByZXN1bHQgPSBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cik7XG4gIHJldHVybiBbcmVzdWx0LCBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2VdO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0QVNDSUkobWF0Y2gpIHtcbiAgY29uc3QgWywgd2Vla2RheVN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIsIHllYXJTdHJdID0gbWF0Y2gsXG4gICAgICAgIHJlc3VsdCA9IGZyb21TdHJpbmdzKHdlZWtkYXlTdHIsIHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyKTtcbiAgcmV0dXJuIFtyZXN1bHQsIEZpeGVkT2Zmc2V0Wm9uZS51dGNJbnN0YW5jZV07XG59XG5cbmNvbnN0IGlzb1ltZFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXggPSBjb21iaW5lUmVnZXhlcyhpc29ZbWRSZWdleCwgaXNvVGltZUV4dGVuc2lvblJlZ2V4KTtcbmNvbnN0IGlzb1dlZWtXaXRoVGltZUV4dGVuc2lvblJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoaXNvV2Vla1JlZ2V4LCBpc29UaW1lRXh0ZW5zaW9uUmVnZXgpO1xuY29uc3QgaXNvT3JkaW5hbFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXggPSBjb21iaW5lUmVnZXhlcyhpc29PcmRpbmFsUmVnZXgsIGlzb1RpbWVFeHRlbnNpb25SZWdleCk7XG5jb25zdCBpc29UaW1lQ29tYmluZWRSZWdleCA9IGNvbWJpbmVSZWdleGVzKGlzb1RpbWVSZWdleCk7XG5jb25zdCBleHRyYWN0SVNPWW1kVGltZUFuZE9mZnNldCA9IGNvbWJpbmVFeHRyYWN0b3JzKGV4dHJhY3RJU09ZbWQsIGV4dHJhY3RJU09UaW1lLCBleHRyYWN0SVNPT2Zmc2V0LCBleHRyYWN0SUFOQVpvbmUpO1xuY29uc3QgZXh0cmFjdElTT1dlZWtUaW1lQW5kT2Zmc2V0ID0gY29tYmluZUV4dHJhY3RvcnMoZXh0cmFjdElTT1dlZWtEYXRhLCBleHRyYWN0SVNPVGltZSwgZXh0cmFjdElTT09mZnNldCwgZXh0cmFjdElBTkFab25lKTtcbmNvbnN0IGV4dHJhY3RJU09PcmRpbmFsRGF0ZUFuZFRpbWUgPSBjb21iaW5lRXh0cmFjdG9ycyhleHRyYWN0SVNPT3JkaW5hbERhdGEsIGV4dHJhY3RJU09UaW1lLCBleHRyYWN0SVNPT2Zmc2V0LCBleHRyYWN0SUFOQVpvbmUpO1xuY29uc3QgZXh0cmFjdElTT1RpbWVBbmRPZmZzZXQgPSBjb21iaW5lRXh0cmFjdG9ycyhleHRyYWN0SVNPVGltZSwgZXh0cmFjdElTT09mZnNldCwgZXh0cmFjdElBTkFab25lKTtcbi8qXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlSVNPRGF0ZShzKSB7XG4gIHJldHVybiBwYXJzZShzLCBbaXNvWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCwgZXh0cmFjdElTT1ltZFRpbWVBbmRPZmZzZXRdLCBbaXNvV2Vla1dpdGhUaW1lRXh0ZW5zaW9uUmVnZXgsIGV4dHJhY3RJU09XZWVrVGltZUFuZE9mZnNldF0sIFtpc29PcmRpbmFsV2l0aFRpbWVFeHRlbnNpb25SZWdleCwgZXh0cmFjdElTT09yZGluYWxEYXRlQW5kVGltZV0sIFtpc29UaW1lQ29tYmluZWRSZWdleCwgZXh0cmFjdElTT1RpbWVBbmRPZmZzZXRdKTtcbn1cbmZ1bmN0aW9uIHBhcnNlUkZDMjgyMkRhdGUocykge1xuICByZXR1cm4gcGFyc2UocHJlcHJvY2Vzc1JGQzI4MjIocyksIFtyZmMyODIyLCBleHRyYWN0UkZDMjgyMl0pO1xufVxuZnVuY3Rpb24gcGFyc2VIVFRQRGF0ZShzKSB7XG4gIHJldHVybiBwYXJzZShzLCBbcmZjMTEyMywgZXh0cmFjdFJGQzExMjNPcjg1MF0sIFtyZmM4NTAsIGV4dHJhY3RSRkMxMTIzT3I4NTBdLCBbYXNjaWksIGV4dHJhY3RBU0NJSV0pO1xufVxuZnVuY3Rpb24gcGFyc2VJU09EdXJhdGlvbihzKSB7XG4gIHJldHVybiBwYXJzZShzLCBbaXNvRHVyYXRpb24sIGV4dHJhY3RJU09EdXJhdGlvbl0pO1xufVxuY29uc3QgZXh0cmFjdElTT1RpbWVPbmx5ID0gY29tYmluZUV4dHJhY3RvcnMoZXh0cmFjdElTT1RpbWUpO1xuZnVuY3Rpb24gcGFyc2VJU09UaW1lT25seShzKSB7XG4gIHJldHVybiBwYXJzZShzLCBbaXNvVGltZU9ubHksIGV4dHJhY3RJU09UaW1lT25seV0pO1xufVxuY29uc3Qgc3FsWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCA9IGNvbWJpbmVSZWdleGVzKHNxbFltZFJlZ2V4LCBzcWxUaW1lRXh0ZW5zaW9uUmVnZXgpO1xuY29uc3Qgc3FsVGltZUNvbWJpbmVkUmVnZXggPSBjb21iaW5lUmVnZXhlcyhzcWxUaW1lUmVnZXgpO1xuY29uc3QgZXh0cmFjdElTT1RpbWVPZmZzZXRBbmRJQU5BWm9uZSA9IGNvbWJpbmVFeHRyYWN0b3JzKGV4dHJhY3RJU09UaW1lLCBleHRyYWN0SVNPT2Zmc2V0LCBleHRyYWN0SUFOQVpvbmUpO1xuZnVuY3Rpb24gcGFyc2VTUUwocykge1xuICByZXR1cm4gcGFyc2UocywgW3NxbFltZFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXgsIGV4dHJhY3RJU09ZbWRUaW1lQW5kT2Zmc2V0XSwgW3NxbFRpbWVDb21iaW5lZFJlZ2V4LCBleHRyYWN0SVNPVGltZU9mZnNldEFuZElBTkFab25lXSk7XG59XG5cbmNvbnN0IElOVkFMSUQkMiA9IFwiSW52YWxpZCBEdXJhdGlvblwiOyAvLyB1bml0IGNvbnZlcnNpb24gY29uc3RhbnRzXG5cbmNvbnN0IGxvd09yZGVyTWF0cml4ID0ge1xuICB3ZWVrczoge1xuICAgIGRheXM6IDcsXG4gICAgaG91cnM6IDcgKiAyNCxcbiAgICBtaW51dGVzOiA3ICogMjQgKiA2MCxcbiAgICBzZWNvbmRzOiA3ICogMjQgKiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogNyAqIDI0ICogNjAgKiA2MCAqIDEwMDBcbiAgfSxcbiAgZGF5czoge1xuICAgIGhvdXJzOiAyNCxcbiAgICBtaW51dGVzOiAyNCAqIDYwLFxuICAgIHNlY29uZHM6IDI0ICogNjAgKiA2MCxcbiAgICBtaWxsaXNlY29uZHM6IDI0ICogNjAgKiA2MCAqIDEwMDBcbiAgfSxcbiAgaG91cnM6IHtcbiAgICBtaW51dGVzOiA2MCxcbiAgICBzZWNvbmRzOiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogNjAgKiA2MCAqIDEwMDBcbiAgfSxcbiAgbWludXRlczoge1xuICAgIHNlY29uZHM6IDYwLFxuICAgIG1pbGxpc2Vjb25kczogNjAgKiAxMDAwXG4gIH0sXG4gIHNlY29uZHM6IHtcbiAgICBtaWxsaXNlY29uZHM6IDEwMDBcbiAgfVxufSxcbiAgICAgIGNhc3VhbE1hdHJpeCA9IHtcbiAgeWVhcnM6IHtcbiAgICBxdWFydGVyczogNCxcbiAgICBtb250aHM6IDEyLFxuICAgIHdlZWtzOiA1MixcbiAgICBkYXlzOiAzNjUsXG4gICAgaG91cnM6IDM2NSAqIDI0LFxuICAgIG1pbnV0ZXM6IDM2NSAqIDI0ICogNjAsXG4gICAgc2Vjb25kczogMzY1ICogMjQgKiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogMzY1ICogMjQgKiA2MCAqIDYwICogMTAwMFxuICB9LFxuICBxdWFydGVyczoge1xuICAgIG1vbnRoczogMyxcbiAgICB3ZWVrczogMTMsXG4gICAgZGF5czogOTEsXG4gICAgaG91cnM6IDkxICogMjQsXG4gICAgbWludXRlczogOTEgKiAyNCAqIDYwLFxuICAgIHNlY29uZHM6IDkxICogMjQgKiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogOTEgKiAyNCAqIDYwICogNjAgKiAxMDAwXG4gIH0sXG4gIG1vbnRoczoge1xuICAgIHdlZWtzOiA0LFxuICAgIGRheXM6IDMwLFxuICAgIGhvdXJzOiAzMCAqIDI0LFxuICAgIG1pbnV0ZXM6IDMwICogMjQgKiA2MCxcbiAgICBzZWNvbmRzOiAzMCAqIDI0ICogNjAgKiA2MCxcbiAgICBtaWxsaXNlY29uZHM6IDMwICogMjQgKiA2MCAqIDYwICogMTAwMFxuICB9LFxuICAuLi5sb3dPcmRlck1hdHJpeFxufSxcbiAgICAgIGRheXNJblllYXJBY2N1cmF0ZSA9IDE0NjA5Ny4wIC8gNDAwLFxuICAgICAgZGF5c0luTW9udGhBY2N1cmF0ZSA9IDE0NjA5Ny4wIC8gNDgwMCxcbiAgICAgIGFjY3VyYXRlTWF0cml4ID0ge1xuICB5ZWFyczoge1xuICAgIHF1YXJ0ZXJzOiA0LFxuICAgIG1vbnRoczogMTIsXG4gICAgd2Vla3M6IGRheXNJblllYXJBY2N1cmF0ZSAvIDcsXG4gICAgZGF5czogZGF5c0luWWVhckFjY3VyYXRlLFxuICAgIGhvdXJzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCxcbiAgICBtaW51dGVzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwLFxuICAgIHNlY29uZHM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCxcbiAgICBtaWxsaXNlY29uZHM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCAqIDEwMDBcbiAgfSxcbiAgcXVhcnRlcnM6IHtcbiAgICBtb250aHM6IDMsXG4gICAgd2Vla3M6IGRheXNJblllYXJBY2N1cmF0ZSAvIDI4LFxuICAgIGRheXM6IGRheXNJblllYXJBY2N1cmF0ZSAvIDQsXG4gICAgaG91cnM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0IC8gNCxcbiAgICBtaW51dGVzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwIC8gNCxcbiAgICBzZWNvbmRzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwICogNjAgLyA0LFxuICAgIG1pbGxpc2Vjb25kczogZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCAqIDYwICogMTAwMCAvIDRcbiAgfSxcbiAgbW9udGhzOiB7XG4gICAgd2Vla3M6IGRheXNJbk1vbnRoQWNjdXJhdGUgLyA3LFxuICAgIGRheXM6IGRheXNJbk1vbnRoQWNjdXJhdGUsXG4gICAgaG91cnM6IGRheXNJbk1vbnRoQWNjdXJhdGUgKiAyNCxcbiAgICBtaW51dGVzOiBkYXlzSW5Nb250aEFjY3VyYXRlICogMjQgKiA2MCxcbiAgICBzZWNvbmRzOiBkYXlzSW5Nb250aEFjY3VyYXRlICogMjQgKiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogZGF5c0luTW9udGhBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCAqIDEwMDBcbiAgfSxcbiAgLi4ubG93T3JkZXJNYXRyaXhcbn07IC8vIHVuaXRzIG9yZGVyZWQgYnkgc2l6ZVxuXG5jb25zdCBvcmRlcmVkVW5pdHMkMSA9IFtcInllYXJzXCIsIFwicXVhcnRlcnNcIiwgXCJtb250aHNcIiwgXCJ3ZWVrc1wiLCBcImRheXNcIiwgXCJob3Vyc1wiLCBcIm1pbnV0ZXNcIiwgXCJzZWNvbmRzXCIsIFwibWlsbGlzZWNvbmRzXCJdO1xuY29uc3QgcmV2ZXJzZVVuaXRzID0gb3JkZXJlZFVuaXRzJDEuc2xpY2UoMCkucmV2ZXJzZSgpOyAvLyBjbG9uZSByZWFsbHkgbWVhbnMgXCJjcmVhdGUgYW5vdGhlciBpbnN0YW5jZSBqdXN0IGxpa2UgdGhpcyBvbmUsIGJ1dCB3aXRoIHRoZXNlIGNoYW5nZXNcIlxuXG5mdW5jdGlvbiBjbG9uZSQxKGR1ciwgYWx0cywgY2xlYXIgPSBmYWxzZSkge1xuICAvLyBkZWVwIG1lcmdlIGZvciB2YWxzXG4gIGNvbnN0IGNvbmYgPSB7XG4gICAgdmFsdWVzOiBjbGVhciA/IGFsdHMudmFsdWVzIDogeyAuLi5kdXIudmFsdWVzLFxuICAgICAgLi4uKGFsdHMudmFsdWVzIHx8IHt9KVxuICAgIH0sXG4gICAgbG9jOiBkdXIubG9jLmNsb25lKGFsdHMubG9jKSxcbiAgICBjb252ZXJzaW9uQWNjdXJhY3k6IGFsdHMuY29udmVyc2lvbkFjY3VyYWN5IHx8IGR1ci5jb252ZXJzaW9uQWNjdXJhY3lcbiAgfTtcbiAgcmV0dXJuIG5ldyBEdXJhdGlvbihjb25mKTtcbn1cblxuZnVuY3Rpb24gYW50aVRydW5jKG4pIHtcbiAgcmV0dXJuIG4gPCAwID8gTWF0aC5mbG9vcihuKSA6IE1hdGguY2VpbChuKTtcbn0gLy8gTkI6IG11dGF0ZXMgcGFyYW1ldGVyc1xuXG5cbmZ1bmN0aW9uIGNvbnZlcnQobWF0cml4LCBmcm9tTWFwLCBmcm9tVW5pdCwgdG9NYXAsIHRvVW5pdCkge1xuICBjb25zdCBjb252ID0gbWF0cml4W3RvVW5pdF1bZnJvbVVuaXRdLFxuICAgICAgICByYXcgPSBmcm9tTWFwW2Zyb21Vbml0XSAvIGNvbnYsXG4gICAgICAgIHNhbWVTaWduID0gTWF0aC5zaWduKHJhdykgPT09IE1hdGguc2lnbih0b01hcFt0b1VuaXRdKSxcbiAgICAgICAgLy8gb2ssIHNvIHRoaXMgaXMgd2lsZCwgYnV0IHNlZSB0aGUgbWF0cml4IGluIHRoZSB0ZXN0c1xuICBhZGRlZCA9ICFzYW1lU2lnbiAmJiB0b01hcFt0b1VuaXRdICE9PSAwICYmIE1hdGguYWJzKHJhdykgPD0gMSA/IGFudGlUcnVuYyhyYXcpIDogTWF0aC50cnVuYyhyYXcpO1xuICB0b01hcFt0b1VuaXRdICs9IGFkZGVkO1xuICBmcm9tTWFwW2Zyb21Vbml0XSAtPSBhZGRlZCAqIGNvbnY7XG59IC8vIE5COiBtdXRhdGVzIHBhcmFtZXRlcnNcblxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZXMobWF0cml4LCB2YWxzKSB7XG4gIHJldmVyc2VVbml0cy5yZWR1Y2UoKHByZXZpb3VzLCBjdXJyZW50KSA9PiB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh2YWxzW2N1cnJlbnRdKSkge1xuICAgICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICAgIGNvbnZlcnQobWF0cml4LCB2YWxzLCBwcmV2aW91cywgdmFscywgY3VycmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcHJldmlvdXM7XG4gICAgfVxuICB9LCBudWxsKTtcbn1cbi8qKlxuICogQSBEdXJhdGlvbiBvYmplY3QgcmVwcmVzZW50cyBhIHBlcmlvZCBvZiB0aW1lLCBsaWtlIFwiMiBtb250aHNcIiBvciBcIjEgZGF5LCAxIGhvdXJcIi4gQ29uY2VwdHVhbGx5LCBpdCdzIGp1c3QgYSBtYXAgb2YgdW5pdHMgdG8gdGhlaXIgcXVhbnRpdGllcywgYWNjb21wYW5pZWQgYnkgc29tZSBhZGRpdGlvbmFsIGNvbmZpZ3VyYXRpb24gYW5kIG1ldGhvZHMgZm9yIGNyZWF0aW5nLCBwYXJzaW5nLCBpbnRlcnJvZ2F0aW5nLCB0cmFuc2Zvcm1pbmcsIGFuZCBmb3JtYXR0aW5nIHRoZW0uIFRoZXkgY2FuIGJlIHVzZWQgb24gdGhlaXIgb3duIG9yIGluIGNvbmp1bmN0aW9uIHdpdGggb3RoZXIgTHV4b24gdHlwZXM7IGZvciBleGFtcGxlLCB5b3UgY2FuIHVzZSB7QGxpbmsgRGF0ZVRpbWUjcGx1c30gdG8gYWRkIGEgRHVyYXRpb24gb2JqZWN0IHRvIGEgRGF0ZVRpbWUsIHByb2R1Y2luZyBhbm90aGVyIERhdGVUaW1lLlxuICpcbiAqIEhlcmUgaXMgYSBicmllZiBvdmVydmlldyBvZiBjb21tb25seSB1c2VkIG1ldGhvZHMgYW5kIGdldHRlcnMgaW4gRHVyYXRpb246XG4gKlxuICogKiAqKkNyZWF0aW9uKiogVG8gY3JlYXRlIGEgRHVyYXRpb24sIHVzZSB7QGxpbmsgRHVyYXRpb24jZnJvbU1pbGxpc30sIHtAbGluayBEdXJhdGlvbiNmcm9tT2JqZWN0fSwgb3Ige0BsaW5rIER1cmF0aW9uI2Zyb21JU099LlxuICogKiAqKlVuaXQgdmFsdWVzKiogU2VlIHRoZSB7QGxpbmsgRHVyYXRpb24jeWVhcnN9LCB7QGxpbmsgRHVyYXRpb24jbW9udGhzfSwge0BsaW5rIER1cmF0aW9uI3dlZWtzfSwge0BsaW5rIER1cmF0aW9uI2RheXN9LCB7QGxpbmsgRHVyYXRpb24jaG91cnN9LCB7QGxpbmsgRHVyYXRpb24jbWludXRlc30sIHtAbGluayBEdXJhdGlvbiNzZWNvbmRzfSwge0BsaW5rIER1cmF0aW9uI21pbGxpc2Vjb25kc30gYWNjZXNzb3JzLlxuICogKiAqKkNvbmZpZ3VyYXRpb24qKiBTZWUgIHtAbGluayBEdXJhdGlvbiNsb2NhbGV9IGFuZCB7QGxpbmsgRHVyYXRpb24jbnVtYmVyaW5nU3lzdGVtfSBhY2Nlc3NvcnMuXG4gKiAqICoqVHJhbnNmb3JtYXRpb24qKiBUbyBjcmVhdGUgbmV3IER1cmF0aW9ucyBvdXQgb2Ygb2xkIG9uZXMgdXNlIHtAbGluayBEdXJhdGlvbiNwbHVzfSwge0BsaW5rIER1cmF0aW9uI21pbnVzfSwge0BsaW5rIER1cmF0aW9uI25vcm1hbGl6ZX0sIHtAbGluayBEdXJhdGlvbiNzZXR9LCB7QGxpbmsgRHVyYXRpb24jcmVjb25maWd1cmV9LCB7QGxpbmsgRHVyYXRpb24jc2hpZnRUb30sIGFuZCB7QGxpbmsgRHVyYXRpb24jbmVnYXRlfS5cbiAqICogKipPdXRwdXQqKiBUbyBjb252ZXJ0IHRoZSBEdXJhdGlvbiBpbnRvIG90aGVyIHJlcHJlc2VudGF0aW9ucywgc2VlIHtAbGluayBEdXJhdGlvbiNhc30sIHtAbGluayBEdXJhdGlvbiN0b0lTT30sIHtAbGluayBEdXJhdGlvbiN0b0Zvcm1hdH0sIGFuZCB7QGxpbmsgRHVyYXRpb24jdG9KU09OfVxuICpcbiAqIFRoZXJlJ3MgYXJlIG1vcmUgbWV0aG9kcyBkb2N1bWVudGVkIGJlbG93LiBJbiBhZGRpdGlvbiwgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gc3VidGxlciB0b3BpY3MgbGlrZSBpbnRlcm5hdGlvbmFsaXphdGlvbiBhbmQgdmFsaWRpdHksIHNlZSB0aGUgZXh0ZXJuYWwgZG9jdW1lbnRhdGlvbi5cbiAqL1xuXG5cbmNsYXNzIER1cmF0aW9uIHtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBjb25zdCBhY2N1cmF0ZSA9IGNvbmZpZy5jb252ZXJzaW9uQWNjdXJhY3kgPT09IFwibG9uZ3Rlcm1cIiB8fCBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMudmFsdWVzID0gY29uZmlnLnZhbHVlcztcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMubG9jID0gY29uZmlnLmxvYyB8fCBMb2NhbGUuY3JlYXRlKCk7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLmNvbnZlcnNpb25BY2N1cmFjeSA9IGFjY3VyYXRlID8gXCJsb25ndGVybVwiIDogXCJjYXN1YWxcIjtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMuaW52YWxpZCA9IGNvbmZpZy5pbnZhbGlkIHx8IG51bGw7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLm1hdHJpeCA9IGFjY3VyYXRlID8gYWNjdXJhdGVNYXRyaXggOiBjYXN1YWxNYXRyaXg7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLmlzTHV4b25EdXJhdGlvbiA9IHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBEdXJhdGlvbiBmcm9tIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IG9mIG1pbGxpc2Vjb25kc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgZm9yIHBhcnNpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nZW4tVVMnXSAtIHRoZSBsb2NhbGUgdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuXG5cbiAgc3RhdGljIGZyb21NaWxsaXMoY291bnQsIG9wdHMpIHtcbiAgICByZXR1cm4gRHVyYXRpb24uZnJvbU9iamVjdCh7XG4gICAgICBtaWxsaXNlY29uZHM6IGNvdW50XG4gICAgfSwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIER1cmF0aW9uIGZyb20gYSBKYXZhU2NyaXB0IG9iamVjdCB3aXRoIGtleXMgbGlrZSAneWVhcnMnIGFuZCAnaG91cnMnLlxuICAgKiBJZiB0aGlzIG9iamVjdCBpcyBlbXB0eSB0aGVuIGEgemVybyBtaWxsaXNlY29uZHMgZHVyYXRpb24gaXMgcmV0dXJuZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSB0aGUgb2JqZWN0IHRvIGNyZWF0ZSB0aGUgRGF0ZVRpbWUgZnJvbVxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLnllYXJzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoucXVhcnRlcnNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5tb250aHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai53ZWVrc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLmRheXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5ob3Vyc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm1pbnV0ZXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5zZWNvbmRzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cz1bXV0gLSBvcHRpb25zIGZvciBjcmVhdGluZyB0aGlzIER1cmF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J2VuLVVTJ10gLSB0aGUgbG9jYWxlIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cblxuXG4gIHN0YXRpYyBmcm9tT2JqZWN0KG9iaiwgb3B0cyA9IHt9KSB7XG4gICAgaWYgKG9iaiA9PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihgRHVyYXRpb24uZnJvbU9iamVjdDogYXJndW1lbnQgZXhwZWN0ZWQgdG8gYmUgYW4gb2JqZWN0LCBnb3QgJHtvYmogPT09IG51bGwgPyBcIm51bGxcIiA6IHR5cGVvZiBvYmp9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEdXJhdGlvbih7XG4gICAgICB2YWx1ZXM6IG5vcm1hbGl6ZU9iamVjdChvYmosIER1cmF0aW9uLm5vcm1hbGl6ZVVuaXQpLFxuICAgICAgbG9jOiBMb2NhbGUuZnJvbU9iamVjdChvcHRzKSxcbiAgICAgIGNvbnZlcnNpb25BY2N1cmFjeTogb3B0cy5jb252ZXJzaW9uQWNjdXJhY3lcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgRHVyYXRpb24gZnJvbSBEdXJhdGlvbkxpa2UuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0IHwgbnVtYmVyIHwgRHVyYXRpb259IGR1cmF0aW9uTGlrZVxuICAgKiBPbmUgb2Y6XG4gICAqIC0gb2JqZWN0IHdpdGgga2V5cyBsaWtlICd5ZWFycycgYW5kICdob3VycycuXG4gICAqIC0gbnVtYmVyIHJlcHJlc2VudGluZyBtaWxsaXNlY29uZHNcbiAgICogLSBEdXJhdGlvbiBpbnN0YW5jZVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG5cblxuICBzdGF0aWMgZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbkxpa2UpIHtcbiAgICBpZiAoaXNOdW1iZXIoZHVyYXRpb25MaWtlKSkge1xuICAgICAgcmV0dXJuIER1cmF0aW9uLmZyb21NaWxsaXMoZHVyYXRpb25MaWtlKTtcbiAgICB9IGVsc2UgaWYgKER1cmF0aW9uLmlzRHVyYXRpb24oZHVyYXRpb25MaWtlKSkge1xuICAgICAgcmV0dXJuIGR1cmF0aW9uTGlrZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkdXJhdGlvbkxpa2UgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5mcm9tT2JqZWN0KGR1cmF0aW9uTGlrZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihgVW5rbm93biBkdXJhdGlvbiBhcmd1bWVudCAke2R1cmF0aW9uTGlrZX0gb2YgdHlwZSAke3R5cGVvZiBkdXJhdGlvbkxpa2V9YCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEdXJhdGlvbiBmcm9tIGFuIElTTyA4NjAxIGR1cmF0aW9uIHN0cmluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0ZXh0IHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyBmb3IgcGFyc2luZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gdGhlIGxvY2FsZSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5jb252ZXJzaW9uQWNjdXJhY3k9J2Nhc3VhbCddIC0gdGhlIGNvbnZlcnNpb24gc3lzdGVtIHRvIHVzZVxuICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI0R1cmF0aW9uc1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPKCdQM1k2TTFXNERUMTJIMzBNNVMnKS50b09iamVjdCgpIC8vPT4geyB5ZWFyczogMywgbW9udGhzOiA2LCB3ZWVrczogMSwgZGF5czogNCwgaG91cnM6IDEyLCBtaW51dGVzOiAzMCwgc2Vjb25kczogNSB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU08oJ1BUMjNIJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDIzIH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbUlTTygnUDVZM00nKS50b09iamVjdCgpIC8vPT4geyB5ZWFyczogNSwgbW9udGhzOiAzIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuXG5cbiAgc3RhdGljIGZyb21JU08odGV4dCwgb3B0cykge1xuICAgIGNvbnN0IFtwYXJzZWRdID0gcGFyc2VJU09EdXJhdGlvbih0ZXh0KTtcblxuICAgIGlmIChwYXJzZWQpIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5mcm9tT2JqZWN0KHBhcnNlZCwgb3B0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5pbnZhbGlkKFwidW5wYXJzYWJsZVwiLCBgdGhlIGlucHV0IFwiJHt0ZXh0fVwiIGNhbid0IGJlIHBhcnNlZCBhcyBJU08gODYwMWApO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgRHVyYXRpb24gZnJvbSBhbiBJU08gODYwMSB0aW1lIHN0cmluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0ZXh0IHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyBmb3IgcGFyc2luZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gdGhlIGxvY2FsZSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5jb252ZXJzaW9uQWNjdXJhY3k9J2Nhc3VhbCddIC0gdGhlIGNvbnZlcnNpb24gc3lzdGVtIHRvIHVzZVxuICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI1RpbWVzXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU09UaW1lKCcxMToyMjozMy40NDQnKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMTEsIG1pbnV0ZXM6IDIyLCBzZWNvbmRzOiAzMywgbWlsbGlzZWNvbmRzOiA0NDQgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPVGltZSgnMTE6MDAnKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMTEsIG1pbnV0ZXM6IDAsIHNlY29uZHM6IDAgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPVGltZSgnVDExOjAwJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDExLCBtaW51dGVzOiAwLCBzZWNvbmRzOiAwIH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbUlTT1RpbWUoJzExMDAnKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMTEsIG1pbnV0ZXM6IDAsIHNlY29uZHM6IDAgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPVGltZSgnVDExMDAnKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMTEsIG1pbnV0ZXM6IDAsIHNlY29uZHM6IDAgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG5cblxuICBzdGF0aWMgZnJvbUlTT1RpbWUodGV4dCwgb3B0cykge1xuICAgIGNvbnN0IFtwYXJzZWRdID0gcGFyc2VJU09UaW1lT25seSh0ZXh0KTtcblxuICAgIGlmIChwYXJzZWQpIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5mcm9tT2JqZWN0KHBhcnNlZCwgb3B0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5pbnZhbGlkKFwidW5wYXJzYWJsZVwiLCBgdGhlIGlucHV0IFwiJHt0ZXh0fVwiIGNhbid0IGJlIHBhcnNlZCBhcyBJU08gODYwMWApO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuIGludmFsaWQgRHVyYXRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gLSBzaW1wbGUgc3RyaW5nIG9mIHdoeSB0aGlzIGRhdGV0aW1lIGlzIGludmFsaWQuIFNob3VsZCBub3QgY29udGFpbiBwYXJhbWV0ZXJzIG9yIGFueXRoaW5nIGVsc2UgZGF0YS1kZXBlbmRlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtleHBsYW5hdGlvbj1udWxsXSAtIGxvbmdlciBleHBsYW5hdGlvbiwgbWF5IGluY2x1ZGUgcGFyYW1ldGVycyBhbmQgb3RoZXIgdXNlZnVsIGRlYnVnZ2luZyBpbmZvcm1hdGlvblxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG5cblxuICBzdGF0aWMgaW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uID0gbnVsbCkge1xuICAgIGlmICghcmVhc29uKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJuZWVkIHRvIHNwZWNpZnkgYSByZWFzb24gdGhlIER1cmF0aW9uIGlzIGludmFsaWRcIik7XG4gICAgfVxuXG4gICAgY29uc3QgaW52YWxpZCA9IHJlYXNvbiBpbnN0YW5jZW9mIEludmFsaWQgPyByZWFzb24gOiBuZXcgSW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uKTtcblxuICAgIGlmIChTZXR0aW5ncy50aHJvd09uSW52YWxpZCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWREdXJhdGlvbkVycm9yKGludmFsaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IER1cmF0aW9uKHtcbiAgICAgICAgaW52YWxpZFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuXG4gIHN0YXRpYyBub3JtYWxpemVVbml0KHVuaXQpIHtcbiAgICBjb25zdCBub3JtYWxpemVkID0ge1xuICAgICAgeWVhcjogXCJ5ZWFyc1wiLFxuICAgICAgeWVhcnM6IFwieWVhcnNcIixcbiAgICAgIHF1YXJ0ZXI6IFwicXVhcnRlcnNcIixcbiAgICAgIHF1YXJ0ZXJzOiBcInF1YXJ0ZXJzXCIsXG4gICAgICBtb250aDogXCJtb250aHNcIixcbiAgICAgIG1vbnRoczogXCJtb250aHNcIixcbiAgICAgIHdlZWs6IFwid2Vla3NcIixcbiAgICAgIHdlZWtzOiBcIndlZWtzXCIsXG4gICAgICBkYXk6IFwiZGF5c1wiLFxuICAgICAgZGF5czogXCJkYXlzXCIsXG4gICAgICBob3VyOiBcImhvdXJzXCIsXG4gICAgICBob3VyczogXCJob3Vyc1wiLFxuICAgICAgbWludXRlOiBcIm1pbnV0ZXNcIixcbiAgICAgIG1pbnV0ZXM6IFwibWludXRlc1wiLFxuICAgICAgc2Vjb25kOiBcInNlY29uZHNcIixcbiAgICAgIHNlY29uZHM6IFwic2Vjb25kc1wiLFxuICAgICAgbWlsbGlzZWNvbmQ6IFwibWlsbGlzZWNvbmRzXCIsXG4gICAgICBtaWxsaXNlY29uZHM6IFwibWlsbGlzZWNvbmRzXCJcbiAgICB9W3VuaXQgPyB1bml0LnRvTG93ZXJDYXNlKCkgOiB1bml0XTtcbiAgICBpZiAoIW5vcm1hbGl6ZWQpIHRocm93IG5ldyBJbnZhbGlkVW5pdEVycm9yKHVuaXQpO1xuICAgIHJldHVybiBub3JtYWxpemVkO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBvYmplY3QgaXMgYSBEdXJhdGlvbi4gV29ya3MgYWNyb3NzIGNvbnRleHQgYm91bmRhcmllc1xuICAgKiBAcGFyYW0ge29iamVjdH0gb1xuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIHN0YXRpYyBpc0R1cmF0aW9uKG8pIHtcbiAgICByZXR1cm4gbyAmJiBvLmlzTHV4b25EdXJhdGlvbiB8fCBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogR2V0ICB0aGUgbG9jYWxlIG9mIGEgRHVyYXRpb24sIHN1Y2ggJ2VuLUdCJ1xuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cblxuXG4gIGdldCBsb2NhbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMubG9jLmxvY2FsZSA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgbnVtYmVyaW5nIHN5c3RlbSBvZiBhIER1cmF0aW9uLCBzdWNoICdiZW5nJy4gVGhlIG51bWJlcmluZyBzeXN0ZW0gaXMgdXNlZCB3aGVuIGZvcm1hdHRpbmcgdGhlIER1cmF0aW9uXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IG51bWJlcmluZ1N5c3RlbSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2MubnVtYmVyaW5nU3lzdGVtIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uIGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBmb3JtYXQgc3RyaW5nLiBZb3UgbWF5IHVzZSB0aGVzZSB0b2tlbnM6XG4gICAqICogYFNgIGZvciBtaWxsaXNlY29uZHNcbiAgICogKiBgc2AgZm9yIHNlY29uZHNcbiAgICogKiBgbWAgZm9yIG1pbnV0ZXNcbiAgICogKiBgaGAgZm9yIGhvdXJzXG4gICAqICogYGRgIGZvciBkYXlzXG4gICAqICogYHdgIGZvciB3ZWVrc1xuICAgKiAqIGBNYCBmb3IgbW9udGhzXG4gICAqICogYHlgIGZvciB5ZWFyc1xuICAgKiBOb3RlczpcbiAgICogKiBBZGQgcGFkZGluZyBieSByZXBlYXRpbmcgdGhlIHRva2VuLCBlLmcuIFwieXlcIiBwYWRzIHRoZSB5ZWFycyB0byB0d28gZGlnaXRzLCBcImhoaGhcIiBwYWRzIHRoZSBob3VycyBvdXQgdG8gZm91ciBkaWdpdHNcbiAgICogKiBUb2tlbnMgY2FuIGJlIGVzY2FwZWQgYnkgd3JhcHBpbmcgd2l0aCBzaW5nbGUgcXVvdGVzLlxuICAgKiAqIFRoZSBkdXJhdGlvbiB3aWxsIGJlIGNvbnZlcnRlZCB0byB0aGUgc2V0IG9mIHVuaXRzIGluIHRoZSBmb3JtYXQgc3RyaW5nIHVzaW5nIHtAbGluayBEdXJhdGlvbiNzaGlmdFRvfSBhbmQgdGhlIER1cmF0aW9ucydzIGNvbnZlcnNpb24gYWNjdXJhY3kgc2V0dGluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGZtdCAtIHRoZSBmb3JtYXQgc3RyaW5nXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmZsb29yPXRydWVdIC0gZmxvb3IgbnVtZXJpY2FsIHZhbHVlc1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDEsIGRheXM6IDYsIHNlY29uZHM6IDIgfSkudG9Gb3JtYXQoXCJ5IGQgc1wiKSAvLz0+IFwiMSA2IDJcIlxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDEsIGRheXM6IDYsIHNlY29uZHM6IDIgfSkudG9Gb3JtYXQoXCJ5eSBkZCBzc3NcIikgLy89PiBcIjAxIDA2IDAwMlwiXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMSwgZGF5czogNiwgc2Vjb25kczogMiB9KS50b0Zvcm1hdChcIk0gU1wiKSAvLz0+IFwiMTIgNTE4NDAyMDAwXCJcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHRvRm9ybWF0KGZtdCwgb3B0cyA9IHt9KSB7XG4gICAgLy8gcmV2ZXJzZS1jb21wYXQgc2luY2UgMS4yOyB3ZSBhbHdheXMgcm91bmQgZG93biBub3csIG5ldmVyIHVwLCBhbmQgd2UgZG8gaXQgYnkgZGVmYXVsdFxuICAgIGNvbnN0IGZtdE9wdHMgPSB7IC4uLm9wdHMsXG4gICAgICBmbG9vcjogb3B0cy5yb3VuZCAhPT0gZmFsc2UgJiYgb3B0cy5mbG9vciAhPT0gZmFsc2VcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBGb3JtYXR0ZXIuY3JlYXRlKHRoaXMubG9jLCBmbXRPcHRzKS5mb3JtYXREdXJhdGlvbkZyb21TdHJpbmcodGhpcywgZm10KSA6IElOVkFMSUQkMjtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIER1cmF0aW9uIHdpdGggYWxsIHVuaXRzIGluY2x1ZGVkLlxuICAgKiBUbyBtb2RpZnkgaXRzIGJlaGF2aW9yIHVzZSB0aGUgYGxpc3RTdHlsZWAgYW5kIGFueSBJbnRsLk51bWJlckZvcm1hdCBvcHRpb24sIHRob3VnaCBgdW5pdERpc3BsYXlgIGlzIGVzcGVjaWFsbHkgcmVsZXZhbnQuXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSW50bC9OdW1iZXJGb3JtYXRcbiAgICogQHBhcmFtIG9wdHMgLSBPbiBvcHRpb24gb2JqZWN0IHRvIG92ZXJyaWRlIHRoZSBmb3JtYXR0aW5nLiBBY2NlcHRzIHRoZSBzYW1lIGtleXMgYXMgdGhlIG9wdGlvbnMgcGFyYW1ldGVyIG9mIHRoZSBuYXRpdmUgYEludC5OdW1iZXJGb3JtYXRgIGNvbnN0cnVjdG9yLCBhcyB3ZWxsIGFzIGBsaXN0U3R5bGVgLlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqc1xuICAgKiB2YXIgZHVyID0gRHVyYXRpb24uZnJvbU9iamVjdCh7IGRheXM6IDEsIGhvdXJzOiA1LCBtaW51dGVzOiA2IH0pXG4gICAqIGR1ci50b0h1bWFuKCkgLy89PiAnMSBkYXksIDUgaG91cnMsIDYgbWludXRlcydcbiAgICogZHVyLnRvSHVtYW4oeyBsaXN0U3R5bGU6IFwibG9uZ1wiIH0pIC8vPT4gJzEgZGF5LCA1IGhvdXJzLCBhbmQgNiBtaW51dGVzJ1xuICAgKiBkdXIudG9IdW1hbih7IHVuaXREaXNwbGF5OiBcInNob3J0XCIgfSkgLy89PiAnMSBkYXksIDUgaHIsIDYgbWluJ1xuICAgKiBgYGBcbiAgICovXG5cblxuICB0b0h1bWFuKG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IGwgPSBvcmRlcmVkVW5pdHMkMS5tYXAodW5pdCA9PiB7XG4gICAgICBjb25zdCB2YWwgPSB0aGlzLnZhbHVlc1t1bml0XTtcblxuICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmxvYy5udW1iZXJGb3JtYXR0ZXIoe1xuICAgICAgICBzdHlsZTogXCJ1bml0XCIsXG4gICAgICAgIHVuaXREaXNwbGF5OiBcImxvbmdcIixcbiAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgdW5pdDogdW5pdC5zbGljZSgwLCAtMSlcbiAgICAgIH0pLmZvcm1hdCh2YWwpO1xuICAgIH0pLmZpbHRlcihuID0+IG4pO1xuICAgIHJldHVybiB0aGlzLmxvYy5saXN0Rm9ybWF0dGVyKHtcbiAgICAgIHR5cGU6IFwiY29uanVuY3Rpb25cIixcbiAgICAgIHN0eWxlOiBvcHRzLmxpc3RTdHlsZSB8fCBcIm5hcnJvd1wiLFxuICAgICAgLi4ub3B0c1xuICAgIH0pLmZvcm1hdChsKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0IHdpdGggdGhpcyBEdXJhdGlvbidzIHZhbHVlcy5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAxLCBkYXlzOiA2LCBzZWNvbmRzOiAyIH0pLnRvT2JqZWN0KCkgLy89PiB7IHllYXJzOiAxLCBkYXlzOiA2LCBzZWNvbmRzOiAyIH1cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHRvT2JqZWN0KCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4ge307XG4gICAgcmV0dXJuIHsgLi4udGhpcy52YWx1ZXNcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEdXJhdGlvbi5cbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNEdXJhdGlvbnNcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAzLCBzZWNvbmRzOiA0NSB9KS50b0lTTygpIC8vPT4gJ1AzWVQ0NVMnXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBtb250aHM6IDQsIHNlY29uZHM6IDQ1IH0pLnRvSVNPKCkgLy89PiAnUDRNVDQ1UydcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IG1vbnRoczogNSB9KS50b0lTTygpIC8vPT4gJ1A1TSdcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IG1pbnV0ZXM6IDUgfSkudG9JU08oKSAvLz0+ICdQVDVNJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgbWlsbGlzZWNvbmRzOiA2IH0pLnRvSVNPKCkgLy89PiAnUFQwLjAwNlMnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG5cblxuICB0b0lTTygpIHtcbiAgICAvLyB3ZSBjb3VsZCB1c2UgdGhlIGZvcm1hdHRlciwgYnV0IHRoaXMgaXMgYW4gZWFzaWVyIHdheSB0byBnZXQgdGhlIG1pbmltdW0gc3RyaW5nXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsO1xuICAgIGxldCBzID0gXCJQXCI7XG4gICAgaWYgKHRoaXMueWVhcnMgIT09IDApIHMgKz0gdGhpcy55ZWFycyArIFwiWVwiO1xuICAgIGlmICh0aGlzLm1vbnRocyAhPT0gMCB8fCB0aGlzLnF1YXJ0ZXJzICE9PSAwKSBzICs9IHRoaXMubW9udGhzICsgdGhpcy5xdWFydGVycyAqIDMgKyBcIk1cIjtcbiAgICBpZiAodGhpcy53ZWVrcyAhPT0gMCkgcyArPSB0aGlzLndlZWtzICsgXCJXXCI7XG4gICAgaWYgKHRoaXMuZGF5cyAhPT0gMCkgcyArPSB0aGlzLmRheXMgKyBcIkRcIjtcbiAgICBpZiAodGhpcy5ob3VycyAhPT0gMCB8fCB0aGlzLm1pbnV0ZXMgIT09IDAgfHwgdGhpcy5zZWNvbmRzICE9PSAwIHx8IHRoaXMubWlsbGlzZWNvbmRzICE9PSAwKSBzICs9IFwiVFwiO1xuICAgIGlmICh0aGlzLmhvdXJzICE9PSAwKSBzICs9IHRoaXMuaG91cnMgKyBcIkhcIjtcbiAgICBpZiAodGhpcy5taW51dGVzICE9PSAwKSBzICs9IHRoaXMubWludXRlcyArIFwiTVwiO1xuICAgIGlmICh0aGlzLnNlY29uZHMgIT09IDAgfHwgdGhpcy5taWxsaXNlY29uZHMgIT09IDApIC8vIHRoaXMgd2lsbCBoYW5kbGUgXCJmbG9hdGluZyBwb2ludCBtYWRuZXNzXCIgYnkgcmVtb3ZpbmcgZXh0cmEgZGVjaW1hbCBwbGFjZXNcbiAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU4ODAwNC9pcy1mbG9hdGluZy1wb2ludC1tYXRoLWJyb2tlblxuICAgICAgcyArPSByb3VuZFRvKHRoaXMuc2Vjb25kcyArIHRoaXMubWlsbGlzZWNvbmRzIC8gMTAwMCwgMykgKyBcIlNcIjtcbiAgICBpZiAocyA9PT0gXCJQXCIpIHMgKz0gXCJUMFNcIjtcbiAgICByZXR1cm4gcztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRHVyYXRpb24sIGZvcm1hdHRlZCBhcyBhIHRpbWUgb2YgZGF5LlxuICAgKiBOb3RlIHRoYXQgdGhpcyB3aWxsIHJldHVybiBudWxsIGlmIHRoZSBkdXJhdGlvbiBpcyBpbnZhbGlkLCBuZWdhdGl2ZSwgb3IgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIDI0IGhvdXJzLlxuICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI1RpbWVzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnN1cHByZXNzTWlsbGlzZWNvbmRzPWZhbHNlXSAtIGV4Y2x1ZGUgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGZvcm1hdCBpZiB0aGV5J3JlIDBcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zdXBwcmVzc1NlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBzZWNvbmRzIGZyb20gdGhlIGZvcm1hdCBpZiB0aGV5J3JlIDBcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlUHJlZml4PWZhbHNlXSAtIGluY2x1ZGUgdGhlIGBUYCBwcmVmaXhcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmZvcm1hdD0nZXh0ZW5kZWQnXSAtIGNob29zZSBiZXR3ZWVuIHRoZSBiYXNpYyBhbmQgZXh0ZW5kZWQgZm9ybWF0XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMTEgfSkudG9JU09UaW1lKCkgLy89PiAnMTE6MDA6MDAuMDAwJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDExIH0pLnRvSVNPVGltZSh7IHN1cHByZXNzTWlsbGlzZWNvbmRzOiB0cnVlIH0pIC8vPT4gJzExOjAwOjAwJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDExIH0pLnRvSVNPVGltZSh7IHN1cHByZXNzU2Vjb25kczogdHJ1ZSB9KSAvLz0+ICcxMTowMCdcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxMSB9KS50b0lTT1RpbWUoeyBpbmNsdWRlUHJlZml4OiB0cnVlIH0pIC8vPT4gJ1QxMTowMDowMC4wMDAnXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMTEgfSkudG9JU09UaW1lKHsgZm9ybWF0OiAnYmFzaWMnIH0pIC8vPT4gJzExMDAwMC4wMDAnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG5cblxuICB0b0lTT1RpbWUob3B0cyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IG1pbGxpcyA9IHRoaXMudG9NaWxsaXMoKTtcbiAgICBpZiAobWlsbGlzIDwgMCB8fCBtaWxsaXMgPj0gODY0MDAwMDApIHJldHVybiBudWxsO1xuICAgIG9wdHMgPSB7XG4gICAgICBzdXBwcmVzc01pbGxpc2Vjb25kczogZmFsc2UsXG4gICAgICBzdXBwcmVzc1NlY29uZHM6IGZhbHNlLFxuICAgICAgaW5jbHVkZVByZWZpeDogZmFsc2UsXG4gICAgICBmb3JtYXQ6IFwiZXh0ZW5kZWRcIixcbiAgICAgIC4uLm9wdHNcbiAgICB9O1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5zaGlmdFRvKFwiaG91cnNcIiwgXCJtaW51dGVzXCIsIFwic2Vjb25kc1wiLCBcIm1pbGxpc2Vjb25kc1wiKTtcbiAgICBsZXQgZm10ID0gb3B0cy5mb3JtYXQgPT09IFwiYmFzaWNcIiA/IFwiaGhtbVwiIDogXCJoaDptbVwiO1xuXG4gICAgaWYgKCFvcHRzLnN1cHByZXNzU2Vjb25kcyB8fCB2YWx1ZS5zZWNvbmRzICE9PSAwIHx8IHZhbHVlLm1pbGxpc2Vjb25kcyAhPT0gMCkge1xuICAgICAgZm10ICs9IG9wdHMuZm9ybWF0ID09PSBcImJhc2ljXCIgPyBcInNzXCIgOiBcIjpzc1wiO1xuXG4gICAgICBpZiAoIW9wdHMuc3VwcHJlc3NNaWxsaXNlY29uZHMgfHwgdmFsdWUubWlsbGlzZWNvbmRzICE9PSAwKSB7XG4gICAgICAgIGZtdCArPSBcIi5TU1NcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgc3RyID0gdmFsdWUudG9Gb3JtYXQoZm10KTtcblxuICAgIGlmIChvcHRzLmluY2x1ZGVQcmVmaXgpIHtcbiAgICAgIHN0ciA9IFwiVFwiICsgc3RyO1xuICAgIH1cblxuICAgIHJldHVybiBzdHI7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEdXJhdGlvbiBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIEpTT04uXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG5cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9JU08oKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gZGVidWdnaW5nLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9JU08oKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBtaWxsaXNlY29uZHMgdmFsdWUgb2YgdGhpcyBEdXJhdGlvbi5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cblxuXG4gIHRvTWlsbGlzKCkge1xuICAgIHJldHVybiB0aGlzLmFzKFwibWlsbGlzZWNvbmRzXCIpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG1pbGxpc2Vjb25kcyB2YWx1ZSBvZiB0aGlzIER1cmF0aW9uLiBBbGlhcyBvZiB7QGxpbmsgdG9NaWxsaXN9XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG5cblxuICB2YWx1ZU9mKCkge1xuICAgIHJldHVybiB0aGlzLnRvTWlsbGlzKCk7XG4gIH1cbiAgLyoqXG4gICAqIE1ha2UgdGhpcyBEdXJhdGlvbiBsb25nZXIgYnkgdGhlIHNwZWNpZmllZCBhbW91bnQuIFJldHVybiBhIG5ld2x5LWNvbnN0cnVjdGVkIER1cmF0aW9uLlxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBhZGQuIEVpdGhlciBhIEx1eG9uIER1cmF0aW9uLCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIHRoZSBvYmplY3QgYXJndW1lbnQgdG8gRHVyYXRpb24uZnJvbU9iamVjdCgpXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cblxuXG4gIHBsdXMoZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbiksXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICBmb3IgKGNvbnN0IGsgb2Ygb3JkZXJlZFVuaXRzJDEpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eShkdXIudmFsdWVzLCBrKSB8fCBoYXNPd25Qcm9wZXJ0eSh0aGlzLnZhbHVlcywgaykpIHtcbiAgICAgICAgcmVzdWx0W2tdID0gZHVyLmdldChrKSArIHRoaXMuZ2V0KGspO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIHtcbiAgICAgIHZhbHVlczogcmVzdWx0XG4gICAgfSwgdHJ1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIE1ha2UgdGhpcyBEdXJhdGlvbiBzaG9ydGVyIGJ5IHRoZSBzcGVjaWZpZWQgYW1vdW50LiBSZXR1cm4gYSBuZXdseS1jb25zdHJ1Y3RlZCBEdXJhdGlvbi5cbiAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBhbW91bnQgdG8gc3VidHJhY3QuIEVpdGhlciBhIEx1eG9uIER1cmF0aW9uLCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIHRoZSBvYmplY3QgYXJndW1lbnQgdG8gRHVyYXRpb24uZnJvbU9iamVjdCgpXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cblxuXG4gIG1pbnVzKGR1cmF0aW9uKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pO1xuICAgIHJldHVybiB0aGlzLnBsdXMoZHVyLm5lZ2F0ZSgpKTtcbiAgfVxuICAvKipcbiAgICogU2NhbGUgdGhpcyBEdXJhdGlvbiBieSB0aGUgc3BlY2lmaWVkIGFtb3VudC4gUmV0dXJuIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIGVhY2ggdW5pdC4gQXJpdHkgaXMgMSBvciAyOiB0aGUgdmFsdWUgb2YgdGhlIHVuaXQgYW5kLCBvcHRpb25hbGx5LCB0aGUgdW5pdCBuYW1lLiBNdXN0IHJldHVybiBhIG51bWJlci5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBtaW51dGVzOiAzMCB9KS5tYXBVbml0cyh4ID0+IHggKiAyKSAvLz0+IHsgaG91cnM6IDIsIG1pbnV0ZXM6IDYwIH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBtaW51dGVzOiAzMCB9KS5tYXBVbml0cygoeCwgdSkgPT4gdSA9PT0gXCJob3VyXCIgPyB4ICogMiA6IHgpIC8vPT4geyBob3VyczogMiwgbWludXRlczogMzAgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG5cblxuICBtYXBVbml0cyhmbikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcblxuICAgIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyh0aGlzLnZhbHVlcykpIHtcbiAgICAgIHJlc3VsdFtrXSA9IGFzTnVtYmVyKGZuKHRoaXMudmFsdWVzW2tdLCBrKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lJDEodGhpcywge1xuICAgICAgdmFsdWVzOiByZXN1bHRcbiAgICB9LCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSB2YWx1ZSBvZiB1bml0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIGEgdW5pdCBzdWNoIGFzICdtaW51dGUnIG9yICdkYXknXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe3llYXJzOiAyLCBkYXlzOiAzfSkuZ2V0KCd5ZWFycycpIC8vPT4gMlxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHt5ZWFyczogMiwgZGF5czogM30pLmdldCgnbW9udGhzJykgLy89PiAwXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe3llYXJzOiAyLCBkYXlzOiAzfSkuZ2V0KCdkYXlzJykgLy89PiAzXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG5cblxuICBnZXQodW5pdCkge1xuICAgIHJldHVybiB0aGlzW0R1cmF0aW9uLm5vcm1hbGl6ZVVuaXQodW5pdCldO1xuICB9XG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSB2YWx1ZXMgb2Ygc3BlY2lmaWVkIHVuaXRzLiBSZXR1cm4gYSBuZXdseS1jb25zdHJ1Y3RlZCBEdXJhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlcyAtIGEgbWFwcGluZyBvZiB1bml0cyB0byBudW1iZXJzXG4gICAqIEBleGFtcGxlIGR1ci5zZXQoeyB5ZWFyczogMjAxNyB9KVxuICAgKiBAZXhhbXBsZSBkdXIuc2V0KHsgaG91cnM6IDgsIG1pbnV0ZXM6IDMwIH0pXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cblxuXG4gIHNldCh2YWx1ZXMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgbWl4ZWQgPSB7IC4uLnRoaXMudmFsdWVzLFxuICAgICAgLi4ubm9ybWFsaXplT2JqZWN0KHZhbHVlcywgRHVyYXRpb24ubm9ybWFsaXplVW5pdClcbiAgICB9O1xuICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIHtcbiAgICAgIHZhbHVlczogbWl4ZWRcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgbG9jYWxlIGFuZC9vciBudW1iZXJpbmdTeXN0ZW0uICBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uXG4gICAqIEBleGFtcGxlIGR1ci5yZWNvbmZpZ3VyZSh7IGxvY2FsZTogJ2VuLUdCJyB9KVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG5cblxuICByZWNvbmZpZ3VyZSh7XG4gICAgbG9jYWxlLFxuICAgIG51bWJlcmluZ1N5c3RlbSxcbiAgICBjb252ZXJzaW9uQWNjdXJhY3lcbiAgfSA9IHt9KSB7XG4gICAgY29uc3QgbG9jID0gdGhpcy5sb2MuY2xvbmUoe1xuICAgICAgbG9jYWxlLFxuICAgICAgbnVtYmVyaW5nU3lzdGVtXG4gICAgfSksXG4gICAgICAgICAgb3B0cyA9IHtcbiAgICAgIGxvY1xuICAgIH07XG5cbiAgICBpZiAoY29udmVyc2lvbkFjY3VyYWN5KSB7XG4gICAgICBvcHRzLmNvbnZlcnNpb25BY2N1cmFjeSA9IGNvbnZlcnNpb25BY2N1cmFjeTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmUkMSh0aGlzLCBvcHRzKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGR1cmF0aW9uIGluIHRoZSBzcGVjaWZpZWQgdW5pdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBhIHVuaXQgc3VjaCBhcyAnbWludXRlcycgb3IgJ2RheXMnXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe3llYXJzOiAxfSkuYXMoJ2RheXMnKSAvLz0+IDM2NVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHt5ZWFyczogMX0pLmFzKCdtb250aHMnKSAvLz0+IDEyXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe2hvdXJzOiA2MH0pLmFzKCdkYXlzJykgLy89PiAyLjVcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGFzKHVuaXQpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5zaGlmdFRvKHVuaXQpLmdldCh1bml0KSA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogUmVkdWNlIHRoaXMgRHVyYXRpb24gdG8gaXRzIGNhbm9uaWNhbCByZXByZXNlbnRhdGlvbiBpbiBpdHMgY3VycmVudCB1bml0cy5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAyLCBkYXlzOiA1MDAwIH0pLm5vcm1hbGl6ZSgpLnRvT2JqZWN0KCkgLy89PiB7IHllYXJzOiAxNSwgZGF5czogMjU1IH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxMiwgbWludXRlczogLTQ1IH0pLm5vcm1hbGl6ZSgpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMSwgbWludXRlczogMTUgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG5cblxuICBub3JtYWxpemUoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IHZhbHMgPSB0aGlzLnRvT2JqZWN0KCk7XG4gICAgbm9ybWFsaXplVmFsdWVzKHRoaXMubWF0cml4LCB2YWxzKTtcbiAgICByZXR1cm4gY2xvbmUkMSh0aGlzLCB7XG4gICAgICB2YWx1ZXM6IHZhbHNcbiAgICB9LCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydCB0aGlzIER1cmF0aW9uIGludG8gaXRzIHJlcHJlc2VudGF0aW9uIGluIGEgZGlmZmVyZW50IHNldCBvZiB1bml0cy5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBzZWNvbmRzOiAzMCB9KS5zaGlmdFRvKCdtaW51dGVzJywgJ21pbGxpc2Vjb25kcycpLnRvT2JqZWN0KCkgLy89PiB7IG1pbnV0ZXM6IDYwLCBtaWxsaXNlY29uZHM6IDMwMDAwIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuXG5cbiAgc2hpZnRUbyguLi51bml0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcblxuICAgIGlmICh1bml0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHVuaXRzID0gdW5pdHMubWFwKHUgPT4gRHVyYXRpb24ubm9ybWFsaXplVW5pdCh1KSk7XG4gICAgY29uc3QgYnVpbHQgPSB7fSxcbiAgICAgICAgICBhY2N1bXVsYXRlZCA9IHt9LFxuICAgICAgICAgIHZhbHMgPSB0aGlzLnRvT2JqZWN0KCk7XG4gICAgbGV0IGxhc3RVbml0O1xuXG4gICAgZm9yIChjb25zdCBrIG9mIG9yZGVyZWRVbml0cyQxKSB7XG4gICAgICBpZiAodW5pdHMuaW5kZXhPZihrKSA+PSAwKSB7XG4gICAgICAgIGxhc3RVbml0ID0gaztcbiAgICAgICAgbGV0IG93biA9IDA7IC8vIGFueXRoaW5nIHdlIGhhdmVuJ3QgYm9pbGVkIGRvd24geWV0IHNob3VsZCBnZXQgYm9pbGVkIHRvIHRoaXMgdW5pdFxuXG4gICAgICAgIGZvciAoY29uc3QgYWsgaW4gYWNjdW11bGF0ZWQpIHtcbiAgICAgICAgICBvd24gKz0gdGhpcy5tYXRyaXhbYWtdW2tdICogYWNjdW11bGF0ZWRbYWtdO1xuICAgICAgICAgIGFjY3VtdWxhdGVkW2FrXSA9IDA7XG4gICAgICAgIH0gLy8gcGx1cyBhbnl0aGluZyB0aGF0J3MgYWxyZWFkeSBpbiB0aGlzIHVuaXRcblxuXG4gICAgICAgIGlmIChpc051bWJlcih2YWxzW2tdKSkge1xuICAgICAgICAgIG93biArPSB2YWxzW2tdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaSA9IE1hdGgudHJ1bmMob3duKTtcbiAgICAgICAgYnVpbHRba10gPSBpO1xuICAgICAgICBhY2N1bXVsYXRlZFtrXSA9IChvd24gKiAxMDAwIC0gaSAqIDEwMDApIC8gMTAwMDsgLy8gcGx1cyBhbnl0aGluZyBmdXJ0aGVyIGRvd24gdGhlIGNoYWluIHRoYXQgc2hvdWxkIGJlIHJvbGxlZCB1cCBpbiB0byB0aGlzXG5cbiAgICAgICAgZm9yIChjb25zdCBkb3duIGluIHZhbHMpIHtcbiAgICAgICAgICBpZiAob3JkZXJlZFVuaXRzJDEuaW5kZXhPZihkb3duKSA+IG9yZGVyZWRVbml0cyQxLmluZGV4T2YoaykpIHtcbiAgICAgICAgICAgIGNvbnZlcnQodGhpcy5tYXRyaXgsIHZhbHMsIGRvd24sIGJ1aWx0LCBrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gb3RoZXJ3aXNlLCBrZWVwIGl0IGluIHRoZSB3aW5ncyB0byBib2lsIGl0IGxhdGVyXG5cbiAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIodmFsc1trXSkpIHtcbiAgICAgICAgYWNjdW11bGF0ZWRba10gPSB2YWxzW2tdO1xuICAgICAgfVxuICAgIH0gLy8gYW55dGhpbmcgbGVmdG92ZXIgYmVjb21lcyB0aGUgZGVjaW1hbCBmb3IgdGhlIGxhc3QgdW5pdFxuICAgIC8vIGxhc3RVbml0IG11c3QgYmUgZGVmaW5lZCBzaW5jZSB1bml0cyBpcyBub3QgZW1wdHlcblxuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gYWNjdW11bGF0ZWQpIHtcbiAgICAgIGlmIChhY2N1bXVsYXRlZFtrZXldICE9PSAwKSB7XG4gICAgICAgIGJ1aWx0W2xhc3RVbml0XSArPSBrZXkgPT09IGxhc3RVbml0ID8gYWNjdW11bGF0ZWRba2V5XSA6IGFjY3VtdWxhdGVkW2tleV0gLyB0aGlzLm1hdHJpeFtsYXN0VW5pdF1ba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmUkMSh0aGlzLCB7XG4gICAgICB2YWx1ZXM6IGJ1aWx0XG4gICAgfSwgdHJ1ZSkubm9ybWFsaXplKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbmVnYXRpdmUgb2YgdGhpcyBEdXJhdGlvbi5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBzZWNvbmRzOiAzMCB9KS5uZWdhdGUoKS50b09iamVjdCgpIC8vPT4geyBob3VyczogLTEsIHNlY29uZHM6IC0zMCB9XG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cblxuXG4gIG5lZ2F0ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgbmVnYXRlZCA9IHt9O1xuXG4gICAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKHRoaXMudmFsdWVzKSkge1xuICAgICAgbmVnYXRlZFtrXSA9IHRoaXMudmFsdWVzW2tdID09PSAwID8gMCA6IC10aGlzLnZhbHVlc1trXTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmUkMSh0aGlzLCB7XG4gICAgICB2YWx1ZXM6IG5lZ2F0ZWRcbiAgICB9LCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSB5ZWFycy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgeWVhcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLnllYXJzIHx8IDAgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgcXVhcnRlcnMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IHF1YXJ0ZXJzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5xdWFydGVycyB8fCAwIDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIG1vbnRocy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgbW9udGhzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5tb250aHMgfHwgMCA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSB3ZWVrc1xuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGdldCB3ZWVrcygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMud2Vla3MgfHwgMCA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBkYXlzLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGdldCBkYXlzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5kYXlzIHx8IDAgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgaG91cnMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IGhvdXJzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5ob3VycyB8fCAwIDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIG1pbnV0ZXMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IG1pbnV0ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLm1pbnV0ZXMgfHwgMCA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBzZWNvbmRzLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IHNlY29uZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLnNlY29uZHMgfHwgMCA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBtaWxsaXNlY29uZHMuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgbWlsbGlzZWNvbmRzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5taWxsaXNlY29uZHMgfHwgMCA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBEdXJhdGlvbiBpcyBpbnZhbGlkLiBJbnZhbGlkIGR1cmF0aW9ucyBhcmUgcmV0dXJuZWQgYnkgZGlmZiBvcGVyYXRpb25zXG4gICAqIG9uIGludmFsaWQgRGF0ZVRpbWVzIG9yIEludGVydmFscy5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID09PSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGVycm9yIGNvZGUgaWYgdGhpcyBEdXJhdGlvbiBiZWNhbWUgaW52YWxpZCwgb3IgbnVsbCBpZiB0aGUgRHVyYXRpb24gaXMgdmFsaWRcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIGdldCBpbnZhbGlkUmVhc29uKCkge1xuICAgIHJldHVybiB0aGlzLmludmFsaWQgPyB0aGlzLmludmFsaWQucmVhc29uIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBleHBsYW5hdGlvbiBvZiB3aHkgdGhpcyBEdXJhdGlvbiBiZWNhbWUgaW52YWxpZCwgb3IgbnVsbCBpZiB0aGUgRHVyYXRpb24gaXMgdmFsaWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG5cblxuICBnZXQgaW52YWxpZEV4cGxhbmF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmludmFsaWQgPyB0aGlzLmludmFsaWQuZXhwbGFuYXRpb24gOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBFcXVhbGl0eSBjaGVja1xuICAgKiBUd28gRHVyYXRpb25zIGFyZSBlcXVhbCBpZmYgdGhleSBoYXZlIHRoZSBzYW1lIHVuaXRzIGFuZCB0aGUgc2FtZSB2YWx1ZXMgZm9yIGVhY2ggdW5pdC5cbiAgICogQHBhcmFtIHtEdXJhdGlvbn0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBlcXVhbHMob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXIuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5sb2MuZXF1YWxzKG90aGVyLmxvYykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcSh2MSwgdjIpIHtcbiAgICAgIC8vIENvbnNpZGVyIDAgYW5kIHVuZGVmaW5lZCBhcyBlcXVhbFxuICAgICAgaWYgKHYxID09PSB1bmRlZmluZWQgfHwgdjEgPT09IDApIHJldHVybiB2MiA9PT0gdW5kZWZpbmVkIHx8IHYyID09PSAwO1xuICAgICAgcmV0dXJuIHYxID09PSB2MjtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHUgb2Ygb3JkZXJlZFVuaXRzJDEpIHtcbiAgICAgIGlmICghZXEodGhpcy52YWx1ZXNbdV0sIG90aGVyLnZhbHVlc1t1XSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbn1cblxuY29uc3QgSU5WQUxJRCQxID0gXCJJbnZhbGlkIEludGVydmFsXCI7IC8vIGNoZWNrcyBpZiB0aGUgc3RhcnQgaXMgZXF1YWwgdG8gb3IgYmVmb3JlIHRoZSBlbmRcblxuZnVuY3Rpb24gdmFsaWRhdGVTdGFydEVuZChzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQgfHwgIXN0YXJ0LmlzVmFsaWQpIHtcbiAgICByZXR1cm4gSW50ZXJ2YWwuaW52YWxpZChcIm1pc3Npbmcgb3IgaW52YWxpZCBzdGFydFwiKTtcbiAgfSBlbHNlIGlmICghZW5kIHx8ICFlbmQuaXNWYWxpZCkge1xuICAgIHJldHVybiBJbnRlcnZhbC5pbnZhbGlkKFwibWlzc2luZyBvciBpbnZhbGlkIGVuZFwiKTtcbiAgfSBlbHNlIGlmIChlbmQgPCBzdGFydCkge1xuICAgIHJldHVybiBJbnRlcnZhbC5pbnZhbGlkKFwiZW5kIGJlZm9yZSBzdGFydFwiLCBgVGhlIGVuZCBvZiBhbiBpbnRlcnZhbCBtdXN0IGJlIGFmdGVyIGl0cyBzdGFydCwgYnV0IHlvdSBoYWQgc3RhcnQ9JHtzdGFydC50b0lTTygpfSBhbmQgZW5kPSR7ZW5kLnRvSVNPKCl9YCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbi8qKlxuICogQW4gSW50ZXJ2YWwgb2JqZWN0IHJlcHJlc2VudHMgYSBoYWxmLW9wZW4gaW50ZXJ2YWwgb2YgdGltZSwgd2hlcmUgZWFjaCBlbmRwb2ludCBpcyBhIHtAbGluayBEYXRlVGltZX0uIENvbmNlcHR1YWxseSwgaXQncyBhIGNvbnRhaW5lciBmb3IgdGhvc2UgdHdvIGVuZHBvaW50cywgYWNjb21wYW5pZWQgYnkgbWV0aG9kcyBmb3IgY3JlYXRpbmcsIHBhcnNpbmcsIGludGVycm9nYXRpbmcsIGNvbXBhcmluZywgdHJhbnNmb3JtaW5nLCBhbmQgZm9ybWF0dGluZyB0aGVtLlxuICpcbiAqIEhlcmUgaXMgYSBicmllZiBvdmVydmlldyBvZiB0aGUgbW9zdCBjb21tb25seSB1c2VkIG1ldGhvZHMgYW5kIGdldHRlcnMgaW4gSW50ZXJ2YWw6XG4gKlxuICogKiAqKkNyZWF0aW9uKiogVG8gY3JlYXRlIGFuIEludGVydmFsLCB1c2Uge0BsaW5rIEludGVydmFsI2Zyb21EYXRlVGltZXN9LCB7QGxpbmsgSW50ZXJ2YWwjYWZ0ZXJ9LCB7QGxpbmsgSW50ZXJ2YWwjYmVmb3JlfSwgb3Ige0BsaW5rIEludGVydmFsI2Zyb21JU099LlxuICogKiAqKkFjY2Vzc29ycyoqIFVzZSB7QGxpbmsgSW50ZXJ2YWwjc3RhcnR9IGFuZCB7QGxpbmsgSW50ZXJ2YWwjZW5kfSB0byBnZXQgdGhlIHN0YXJ0IGFuZCBlbmQuXG4gKiAqICoqSW50ZXJyb2dhdGlvbioqIFRvIGFuYWx5emUgdGhlIEludGVydmFsLCB1c2Uge0BsaW5rIEludGVydmFsI2NvdW50fSwge0BsaW5rIEludGVydmFsI2xlbmd0aH0sIHtAbGluayBJbnRlcnZhbCNoYXNTYW1lfSwge0BsaW5rIEludGVydmFsI2NvbnRhaW5zfSwge0BsaW5rIEludGVydmFsI2lzQWZ0ZXJ9LCBvciB7QGxpbmsgSW50ZXJ2YWwjaXNCZWZvcmV9LlxuICogKiAqKlRyYW5zZm9ybWF0aW9uKiogVG8gY3JlYXRlIG90aGVyIEludGVydmFscyBvdXQgb2YgdGhpcyBvbmUsIHVzZSB7QGxpbmsgSW50ZXJ2YWwjc2V0fSwge0BsaW5rIEludGVydmFsI3NwbGl0QXR9LCB7QGxpbmsgSW50ZXJ2YWwjc3BsaXRCeX0sIHtAbGluayBJbnRlcnZhbCNkaXZpZGVFcXVhbGx5fSwge0BsaW5rIEludGVydmFsI21lcmdlfSwge0BsaW5rIEludGVydmFsI3hvcn0sIHtAbGluayBJbnRlcnZhbCN1bmlvbn0sIHtAbGluayBJbnRlcnZhbCNpbnRlcnNlY3Rpb259LCBvciB7QGxpbmsgSW50ZXJ2YWwjZGlmZmVyZW5jZX0uXG4gKiAqICoqQ29tcGFyaXNvbioqIFRvIGNvbXBhcmUgdGhpcyBJbnRlcnZhbCB0byBhbm90aGVyIG9uZSwgdXNlIHtAbGluayBJbnRlcnZhbCNlcXVhbHN9LCB7QGxpbmsgSW50ZXJ2YWwjb3ZlcmxhcHN9LCB7QGxpbmsgSW50ZXJ2YWwjYWJ1dHNTdGFydH0sIHtAbGluayBJbnRlcnZhbCNhYnV0c0VuZH0sIHtAbGluayBJbnRlcnZhbCNlbmd1bGZzfVxuICogKiAqKk91dHB1dCoqIFRvIGNvbnZlcnQgdGhlIEludGVydmFsIGludG8gb3RoZXIgcmVwcmVzZW50YXRpb25zLCBzZWUge0BsaW5rIEludGVydmFsI3RvU3RyaW5nfSwge0BsaW5rIEludGVydmFsI3RvSVNPfSwge0BsaW5rIEludGVydmFsI3RvSVNPRGF0ZX0sIHtAbGluayBJbnRlcnZhbCN0b0lTT1RpbWV9LCB7QGxpbmsgSW50ZXJ2YWwjdG9Gb3JtYXR9LCBhbmQge0BsaW5rIEludGVydmFsI3RvRHVyYXRpb259LlxuICovXG5cblxuY2xhc3MgSW50ZXJ2YWwge1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMucyA9IGNvbmZpZy5zdGFydDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMuZSA9IGNvbmZpZy5lbmQ7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLmludmFsaWQgPSBjb25maWcuaW52YWxpZCB8fCBudWxsO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy5pc0x1eG9uSW50ZXJ2YWwgPSB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW52YWxpZCBJbnRlcnZhbC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiAtIHNpbXBsZSBzdHJpbmcgb2Ygd2h5IHRoaXMgSW50ZXJ2YWwgaXMgaW52YWxpZC4gU2hvdWxkIG5vdCBjb250YWluIHBhcmFtZXRlcnMgb3IgYW55dGhpbmcgZWxzZSBkYXRhLWRlcGVuZGVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2V4cGxhbmF0aW9uPW51bGxdIC0gbG9uZ2VyIGV4cGxhbmF0aW9uLCBtYXkgaW5jbHVkZSBwYXJhbWV0ZXJzIGFuZCBvdGhlciB1c2VmdWwgZGVidWdnaW5nIGluZm9ybWF0aW9uXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cblxuXG4gIHN0YXRpYyBpbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24gPSBudWxsKSB7XG4gICAgaWYgKCFyZWFzb24pIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm5lZWQgdG8gc3BlY2lmeSBhIHJlYXNvbiB0aGUgSW50ZXJ2YWwgaXMgaW52YWxpZFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbnZhbGlkID0gcmVhc29uIGluc3RhbmNlb2YgSW52YWxpZCA/IHJlYXNvbiA6IG5ldyBJbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24pO1xuXG4gICAgaWYgKFNldHRpbmdzLnRocm93T25JbnZhbGlkKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEludGVydmFsRXJyb3IoaW52YWxpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgSW50ZXJ2YWwoe1xuICAgICAgICBpbnZhbGlkXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGEgc3RhcnQgRGF0ZVRpbWUgYW5kIGFuIGVuZCBEYXRlVGltZS4gSW5jbHVzaXZlIG9mIHRoZSBzdGFydCBidXQgbm90IHRoZSBlbmQuXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV8RGF0ZXxPYmplY3R9IHN0YXJ0XG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV8RGF0ZXxPYmplY3R9IGVuZFxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG5cblxuICBzdGF0aWMgZnJvbURhdGVUaW1lcyhzdGFydCwgZW5kKSB7XG4gICAgY29uc3QgYnVpbHRTdGFydCA9IGZyaWVuZGx5RGF0ZVRpbWUoc3RhcnQpLFxuICAgICAgICAgIGJ1aWx0RW5kID0gZnJpZW5kbHlEYXRlVGltZShlbmQpO1xuICAgIGNvbnN0IHZhbGlkYXRlRXJyb3IgPSB2YWxpZGF0ZVN0YXJ0RW5kKGJ1aWx0U3RhcnQsIGJ1aWx0RW5kKTtcblxuICAgIGlmICh2YWxpZGF0ZUVycm9yID09IG51bGwpIHtcbiAgICAgIHJldHVybiBuZXcgSW50ZXJ2YWwoe1xuICAgICAgICBzdGFydDogYnVpbHRTdGFydCxcbiAgICAgICAgZW5kOiBidWlsdEVuZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZUVycm9yO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuIEludGVydmFsIGZyb20gYSBzdGFydCBEYXRlVGltZSBhbmQgYSBEdXJhdGlvbiB0byBleHRlbmQgdG8uXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV8RGF0ZXxPYmplY3R9IHN0YXJ0XG4gICAqIEBwYXJhbSB7RHVyYXRpb258T2JqZWN0fG51bWJlcn0gZHVyYXRpb24gLSB0aGUgbGVuZ3RoIG9mIHRoZSBJbnRlcnZhbC5cbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuXG5cbiAgc3RhdGljIGFmdGVyKHN0YXJ0LCBkdXJhdGlvbikge1xuICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pLFxuICAgICAgICAgIGR0ID0gZnJpZW5kbHlEYXRlVGltZShzdGFydCk7XG4gICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQsIGR0LnBsdXMoZHVyKSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGFuIGVuZCBEYXRlVGltZSBhbmQgYSBEdXJhdGlvbiB0byBleHRlbmQgYmFja3dhcmRzIHRvLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfERhdGV8T2JqZWN0fSBlbmRcbiAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIHRoZSBsZW5ndGggb2YgdGhlIEludGVydmFsLlxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG5cblxuICBzdGF0aWMgYmVmb3JlKGVuZCwgZHVyYXRpb24pIHtcbiAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uKSxcbiAgICAgICAgICBkdCA9IGZyaWVuZGx5RGF0ZVRpbWUoZW5kKTtcbiAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdC5taW51cyhkdXIpLCBkdCk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGFuIElTTyA4NjAxIHN0cmluZy5cbiAgICogQWNjZXB0cyBgPHN0YXJ0Pi88ZW5kPmAsIGA8c3RhcnQ+LzxkdXJhdGlvbj5gLCBhbmQgYDxkdXJhdGlvbj4vPGVuZD5gIGZvcm1hdHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIElTTyBzdHJpbmcgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXSAtIG9wdGlvbnMgdG8gcGFzcyB7QGxpbmsgRGF0ZVRpbWUjZnJvbUlTT30gYW5kIG9wdGlvbmFsbHkge0BsaW5rIER1cmF0aW9uI2Zyb21JU099XG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHNcbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuXG5cbiAgc3RhdGljIGZyb21JU08odGV4dCwgb3B0cykge1xuICAgIGNvbnN0IFtzLCBlXSA9ICh0ZXh0IHx8IFwiXCIpLnNwbGl0KFwiL1wiLCAyKTtcblxuICAgIGlmIChzICYmIGUpIHtcbiAgICAgIGxldCBzdGFydCwgc3RhcnRJc1ZhbGlkO1xuXG4gICAgICB0cnkge1xuICAgICAgICBzdGFydCA9IERhdGVUaW1lLmZyb21JU08ocywgb3B0cyk7XG4gICAgICAgIHN0YXJ0SXNWYWxpZCA9IHN0YXJ0LmlzVmFsaWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHN0YXJ0SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBsZXQgZW5kLCBlbmRJc1ZhbGlkO1xuXG4gICAgICB0cnkge1xuICAgICAgICBlbmQgPSBEYXRlVGltZS5mcm9tSVNPKGUsIG9wdHMpO1xuICAgICAgICBlbmRJc1ZhbGlkID0gZW5kLmlzVmFsaWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGVuZElzVmFsaWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXJ0SXNWYWxpZCAmJiBlbmRJc1ZhbGlkKSB7XG4gICAgICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhcnRJc1ZhbGlkKSB7XG4gICAgICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21JU08oZSwgb3B0cyk7XG5cbiAgICAgICAgaWYgKGR1ci5pc1ZhbGlkKSB7XG4gICAgICAgICAgcmV0dXJuIEludGVydmFsLmFmdGVyKHN0YXJ0LCBkdXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGVuZElzVmFsaWQpIHtcbiAgICAgICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUlTTyhzLCBvcHRzKTtcblxuICAgICAgICBpZiAoZHVyLmlzVmFsaWQpIHtcbiAgICAgICAgICByZXR1cm4gSW50ZXJ2YWwuYmVmb3JlKGVuZCwgZHVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBJbnRlcnZhbC5pbnZhbGlkKFwidW5wYXJzYWJsZVwiLCBgdGhlIGlucHV0IFwiJHt0ZXh0fVwiIGNhbid0IGJlIHBhcnNlZCBhcyBJU08gODYwMWApO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBvYmplY3QgaXMgYW4gSW50ZXJ2YWwuIFdvcmtzIGFjcm9zcyBjb250ZXh0IGJvdW5kYXJpZXNcbiAgICogQHBhcmFtIHtvYmplY3R9IG9cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBzdGF0aWMgaXNJbnRlcnZhbChvKSB7XG4gICAgcmV0dXJuIG8gJiYgby5pc0x1eG9uSW50ZXJ2YWwgfHwgZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0YXJ0IG9mIHRoZSBJbnRlcnZhbFxuICAgKiBAdHlwZSB7RGF0ZVRpbWV9XG4gICAqL1xuXG5cbiAgZ2V0IHN0YXJ0KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnMgOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBlbmQgb2YgdGhlIEludGVydmFsXG4gICAqIEB0eXBlIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBnZXQgZW5kKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmUgOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIGVuZCBpcyBhdCBsZWFzdCBpdHMgc3RhcnQsIG1lYW5pbmcgdGhhdCB0aGUgSW50ZXJ2YWwgaXNuJ3QgJ2JhY2t3YXJkcycuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cblxuXG4gIGdldCBpc1ZhbGlkKCkge1xuICAgIHJldHVybiB0aGlzLmludmFsaWRSZWFzb24gPT09IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gZXJyb3IgY29kZSBpZiB0aGlzIEludGVydmFsIGlzIGludmFsaWQsIG9yIG51bGwgaWYgdGhlIEludGVydmFsIGlzIHZhbGlkXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IGludmFsaWRSZWFzb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5yZWFzb24gOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGV4cGxhbmF0aW9uIG9mIHdoeSB0aGlzIEludGVydmFsIGJlY2FtZSBpbnZhbGlkLCBvciBudWxsIGlmIHRoZSBJbnRlcnZhbCBpcyB2YWxpZFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cblxuXG4gIGdldCBpbnZhbGlkRXhwbGFuYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5leHBsYW5hdGlvbiA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgSW50ZXJ2YWwgaW4gdGhlIHNwZWNpZmllZCB1bml0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIHRoZSB1bml0IChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byByZXR1cm4gdGhlIGxlbmd0aCBpbi5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGxlbmd0aCh1bml0ID0gXCJtaWxsaXNlY29uZHNcIikge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnRvRHVyYXRpb24oLi4uW3VuaXRdKS5nZXQodW5pdCkgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNvdW50IG9mIG1pbnV0ZXMsIGhvdXJzLCBkYXlzLCBtb250aHMsIG9yIHllYXJzIGluY2x1ZGVkIGluIHRoZSBJbnRlcnZhbCwgZXZlbiBpbiBwYXJ0LlxuICAgKiBVbmxpa2Uge0BsaW5rIEludGVydmFsI2xlbmd0aH0gdGhpcyBjb3VudHMgc2VjdGlvbnMgb2YgdGhlIGNhbGVuZGFyLCBub3QgcGVyaW9kcyBvZiB0aW1lLCBlLmcuIHNwZWNpZnlpbmcgJ2RheSdcbiAgICogYXNrcyAnd2hhdCBkYXRlcyBhcmUgaW5jbHVkZWQgaW4gdGhpcyBpbnRlcnZhbD8nLCBub3QgJ2hvdyBtYW55IGRheXMgbG9uZyBpcyB0aGlzIGludGVydmFsPydcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt1bml0PSdtaWxsaXNlY29uZHMnXSAtIHRoZSB1bml0IG9mIHRpbWUgdG8gY291bnQuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG5cblxuICBjb3VudCh1bml0ID0gXCJtaWxsaXNlY29uZHNcIikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gTmFOO1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5zdGFydC5zdGFydE9mKHVuaXQpLFxuICAgICAgICAgIGVuZCA9IHRoaXMuZW5kLnN0YXJ0T2YodW5pdCk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoZW5kLmRpZmYoc3RhcnQsIHVuaXQpLmdldCh1bml0KSkgKyAxO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIHN0YXJ0IGFuZCBlbmQgYXJlIGJvdGggaW4gdGhlIHNhbWUgdW5pdCBvZiB0aW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gdGhlIHVuaXQgb2YgdGltZSB0byBjaGVjayBzYW1lbmVzcyBvblxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIGhhc1NhbWUodW5pdCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmlzRW1wdHkoKSB8fCB0aGlzLmUubWludXMoMSkuaGFzU2FtZSh0aGlzLnMsIHVuaXQpIDogZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwgaGFzIHRoZSBzYW1lIHN0YXJ0IGFuZCBlbmQgRGF0ZVRpbWVzLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMucy52YWx1ZU9mKCkgPT09IHRoaXMuZS52YWx1ZU9mKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwncyBzdGFydCBpcyBhZnRlciB0aGUgc3BlY2lmaWVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBkYXRlVGltZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIGlzQWZ0ZXIoZGF0ZVRpbWUpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLnMgPiBkYXRlVGltZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIGVuZCBpcyBiZWZvcmUgdGhlIHNwZWNpZmllZCBEYXRlVGltZS5cbiAgICogQHBhcmFtIHtEYXRlVGltZX0gZGF0ZVRpbWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBpc0JlZm9yZShkYXRlVGltZSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXMuZSA8PSBkYXRlVGltZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCBjb250YWlucyB0aGUgc3BlY2lmaWVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBkYXRlVGltZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIGNvbnRhaW5zKGRhdGVUaW1lKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5zIDw9IGRhdGVUaW1lICYmIHRoaXMuZSA+IGRhdGVUaW1lO1xuICB9XG4gIC8qKlxuICAgKiBcIlNldHNcIiB0aGUgc3RhcnQgYW5kL29yIGVuZCBkYXRlcy4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIEludGVydmFsLlxuICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzIC0gdGhlIHZhbHVlcyB0byBzZXRcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gdmFsdWVzLnN0YXJ0IC0gdGhlIHN0YXJ0aW5nIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IHZhbHVlcy5lbmQgLSB0aGUgZW5kaW5nIERhdGVUaW1lXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cblxuXG4gIHNldCh7XG4gICAgc3RhcnQsXG4gICAgZW5kXG4gIH0gPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzdGFydCB8fCB0aGlzLnMsIGVuZCB8fCB0aGlzLmUpO1xuICB9XG4gIC8qKlxuICAgKiBTcGxpdCB0aGlzIEludGVydmFsIGF0IGVhY2ggb2YgdGhlIHNwZWNpZmllZCBEYXRlVGltZXNcbiAgICogQHBhcmFtIHsuLi5EYXRlVGltZX0gZGF0ZVRpbWVzIC0gdGhlIHVuaXQgb2YgdGltZSB0byBjb3VudC5cbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuXG5cbiAgc3BsaXRBdCguLi5kYXRlVGltZXMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIFtdO1xuICAgIGNvbnN0IHNvcnRlZCA9IGRhdGVUaW1lcy5tYXAoZnJpZW5kbHlEYXRlVGltZSkuZmlsdGVyKGQgPT4gdGhpcy5jb250YWlucyhkKSkuc29ydCgpLFxuICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICBsZXQge1xuICAgICAgc1xuICAgIH0gPSB0aGlzLFxuICAgICAgICBpID0gMDtcblxuICAgIHdoaWxlIChzIDwgdGhpcy5lKSB7XG4gICAgICBjb25zdCBhZGRlZCA9IHNvcnRlZFtpXSB8fCB0aGlzLmUsXG4gICAgICAgICAgICBuZXh0ID0gK2FkZGVkID4gK3RoaXMuZSA/IHRoaXMuZSA6IGFkZGVkO1xuICAgICAgcmVzdWx0cy5wdXNoKEludGVydmFsLmZyb21EYXRlVGltZXMocywgbmV4dCkpO1xuICAgICAgcyA9IG5leHQ7XG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH1cbiAgLyoqXG4gICAqIFNwbGl0IHRoaXMgSW50ZXJ2YWwgaW50byBzbWFsbGVyIEludGVydmFscywgZWFjaCBvZiB0aGUgc3BlY2lmaWVkIGxlbmd0aC5cbiAgICogTGVmdCBvdmVyIHRpbWUgaXMgZ3JvdXBlZCBpbnRvIGEgc21hbGxlciBpbnRlcnZhbFxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGxlbmd0aCBvZiBlYWNoIHJlc3VsdGluZyBpbnRlcnZhbC5cbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuXG5cbiAgc3BsaXRCeShkdXJhdGlvbikge1xuICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pO1xuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQgfHwgIWR1ci5pc1ZhbGlkIHx8IGR1ci5hcyhcIm1pbGxpc2Vjb25kc1wiKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGxldCB7XG4gICAgICBzXG4gICAgfSA9IHRoaXMsXG4gICAgICAgIGlkeCA9IDEsXG4gICAgICAgIG5leHQ7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuXG4gICAgd2hpbGUgKHMgPCB0aGlzLmUpIHtcbiAgICAgIGNvbnN0IGFkZGVkID0gdGhpcy5zdGFydC5wbHVzKGR1ci5tYXBVbml0cyh4ID0+IHggKiBpZHgpKTtcbiAgICAgIG5leHQgPSArYWRkZWQgPiArdGhpcy5lID8gdGhpcy5lIDogYWRkZWQ7XG4gICAgICByZXN1bHRzLnB1c2goSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzLCBuZXh0KSk7XG4gICAgICBzID0gbmV4dDtcbiAgICAgIGlkeCArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG4gIC8qKlxuICAgKiBTcGxpdCB0aGlzIEludGVydmFsIGludG8gdGhlIHNwZWNpZmllZCBudW1iZXIgb2Ygc21hbGxlciBpbnRlcnZhbHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJPZlBhcnRzIC0gVGhlIG51bWJlciBvZiBJbnRlcnZhbHMgdG8gZGl2aWRlIHRoZSBJbnRlcnZhbCBpbnRvLlxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG5cblxuICBkaXZpZGVFcXVhbGx5KG51bWJlck9mUGFydHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIFtdO1xuICAgIHJldHVybiB0aGlzLnNwbGl0QnkodGhpcy5sZW5ndGgoKSAvIG51bWJlck9mUGFydHMpLnNsaWNlKDAsIG51bWJlck9mUGFydHMpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIG92ZXJsYXBzIHdpdGggdGhlIHNwZWNpZmllZCBJbnRlcnZhbFxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIG92ZXJsYXBzKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZSA+IG90aGVyLnMgJiYgdGhpcy5zIDwgb3RoZXIuZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIGVuZCBpcyBhZGphY2VudCB0byB0aGUgc3BlY2lmaWVkIEludGVydmFsJ3Mgc3RhcnQuXG4gICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuXG5cbiAgYWJ1dHNTdGFydChvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICt0aGlzLmUgPT09ICtvdGhlci5zO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsJ3Mgc3RhcnQgaXMgYWRqYWNlbnQgdG8gdGhlIHNwZWNpZmllZCBJbnRlcnZhbCdzIGVuZC5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBhYnV0c0VuZChvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICtvdGhlci5lID09PSArdGhpcy5zO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIGVuZ3VsZnMgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIHNwZWNpZmllZCBJbnRlcnZhbC5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBlbmd1bGZzKG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5zIDw9IG90aGVyLnMgJiYgdGhpcy5lID49IG90aGVyLmU7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwgaGFzIHRoZSBzYW1lIHN0YXJ0IGFuZCBlbmQgYXMgdGhlIHNwZWNpZmllZCBJbnRlcnZhbC5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBlcXVhbHMob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXIuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnMuZXF1YWxzKG90aGVyLnMpICYmIHRoaXMuZS5lcXVhbHMob3RoZXIuZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhbiBJbnRlcnZhbCByZXByZXNlbnRpbmcgdGhlIGludGVyc2VjdGlvbiBvZiB0aGlzIEludGVydmFsIGFuZCB0aGUgc3BlY2lmaWVkIEludGVydmFsLlxuICAgKiBTcGVjaWZpY2FsbHksIHRoZSByZXN1bHRpbmcgSW50ZXJ2YWwgaGFzIHRoZSBtYXhpbXVtIHN0YXJ0IHRpbWUgYW5kIHRoZSBtaW5pbXVtIGVuZCB0aW1lIG9mIHRoZSB0d28gSW50ZXJ2YWxzLlxuICAgKiBSZXR1cm5zIG51bGwgaWYgdGhlIGludGVyc2VjdGlvbiBpcyBlbXB0eSwgbWVhbmluZywgdGhlIGludGVydmFscyBkb24ndCBpbnRlcnNlY3QuXG4gICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cblxuXG4gIGludGVyc2VjdGlvbihvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBzID0gdGhpcy5zID4gb3RoZXIucyA/IHRoaXMucyA6IG90aGVyLnMsXG4gICAgICAgICAgZSA9IHRoaXMuZSA8IG90aGVyLmUgPyB0aGlzLmUgOiBvdGhlci5lO1xuXG4gICAgaWYgKHMgPj0gZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHMsIGUpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIEludGVydmFsIHJlcHJlc2VudGluZyB0aGUgdW5pb24gb2YgdGhpcyBJbnRlcnZhbCBhbmQgdGhlIHNwZWNpZmllZCBJbnRlcnZhbC5cbiAgICogU3BlY2lmaWNhbGx5LCB0aGUgcmVzdWx0aW5nIEludGVydmFsIGhhcyB0aGUgbWluaW11bSBzdGFydCB0aW1lIGFuZCB0aGUgbWF4aW11bSBlbmQgdGltZSBvZiB0aGUgdHdvIEludGVydmFscy5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuXG5cbiAgdW5pb24ob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgcyA9IHRoaXMucyA8IG90aGVyLnMgPyB0aGlzLnMgOiBvdGhlci5zLFxuICAgICAgICAgIGUgPSB0aGlzLmUgPiBvdGhlci5lID8gdGhpcy5lIDogb3RoZXIuZTtcbiAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzLCBlKTtcbiAgfVxuICAvKipcbiAgICogTWVyZ2UgYW4gYXJyYXkgb2YgSW50ZXJ2YWxzIGludG8gYSBlcXVpdmFsZW50IG1pbmltYWwgc2V0IG9mIEludGVydmFscy5cbiAgICogQ29tYmluZXMgb3ZlcmxhcHBpbmcgYW5kIGFkamFjZW50IEludGVydmFscy5cbiAgICogQHBhcmFtIHtBcnJheX0gaW50ZXJ2YWxzXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cblxuXG4gIHN0YXRpYyBtZXJnZShpbnRlcnZhbHMpIHtcbiAgICBjb25zdCBbZm91bmQsIGZpbmFsXSA9IGludGVydmFscy5zb3J0KChhLCBiKSA9PiBhLnMgLSBiLnMpLnJlZHVjZSgoW3NvZmFyLCBjdXJyZW50XSwgaXRlbSkgPT4ge1xuICAgICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICAgIHJldHVybiBbc29mYXIsIGl0ZW1dO1xuICAgICAgfSBlbHNlIGlmIChjdXJyZW50Lm92ZXJsYXBzKGl0ZW0pIHx8IGN1cnJlbnQuYWJ1dHNTdGFydChpdGVtKSkge1xuICAgICAgICByZXR1cm4gW3NvZmFyLCBjdXJyZW50LnVuaW9uKGl0ZW0pXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbc29mYXIuY29uY2F0KFtjdXJyZW50XSksIGl0ZW1dO1xuICAgICAgfVxuICAgIH0sIFtbXSwgbnVsbF0pO1xuXG4gICAgaWYgKGZpbmFsKSB7XG4gICAgICBmb3VuZC5wdXNoKGZpbmFsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm91bmQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBJbnRlcnZhbHMgcmVwcmVzZW50aW5nIHRoZSBzcGFucyBvZiB0aW1lIHRoYXQgb25seSBhcHBlYXIgaW4gb25lIG9mIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWxzLlxuICAgKiBAcGFyYW0ge0FycmF5fSBpbnRlcnZhbHNcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuXG5cbiAgc3RhdGljIHhvcihpbnRlcnZhbHMpIHtcbiAgICBsZXQgc3RhcnQgPSBudWxsLFxuICAgICAgICBjdXJyZW50Q291bnQgPSAwO1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXSxcbiAgICAgICAgICBlbmRzID0gaW50ZXJ2YWxzLm1hcChpID0+IFt7XG4gICAgICB0aW1lOiBpLnMsXG4gICAgICB0eXBlOiBcInNcIlxuICAgIH0sIHtcbiAgICAgIHRpbWU6IGkuZSxcbiAgICAgIHR5cGU6IFwiZVwiXG4gICAgfV0pLFxuICAgICAgICAgIGZsYXR0ZW5lZCA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQoLi4uZW5kcyksXG4gICAgICAgICAgYXJyID0gZmxhdHRlbmVkLnNvcnQoKGEsIGIpID0+IGEudGltZSAtIGIudGltZSk7XG5cbiAgICBmb3IgKGNvbnN0IGkgb2YgYXJyKSB7XG4gICAgICBjdXJyZW50Q291bnQgKz0gaS50eXBlID09PSBcInNcIiA/IDEgOiAtMTtcblxuICAgICAgaWYgKGN1cnJlbnRDb3VudCA9PT0gMSkge1xuICAgICAgICBzdGFydCA9IGkudGltZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGFydCAmJiArc3RhcnQgIT09ICtpLnRpbWUpIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2goSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzdGFydCwgaS50aW1lKSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIEludGVydmFsLm1lcmdlKHJlc3VsdHMpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gSW50ZXJ2YWwgcmVwcmVzZW50aW5nIHRoZSBzcGFuIG9mIHRpbWUgaW4gdGhpcyBJbnRlcnZhbCB0aGF0IGRvZXNuJ3Qgb3ZlcmxhcCB3aXRoIGFueSBvZiB0aGUgc3BlY2lmaWVkIEludGVydmFscy5cbiAgICogQHBhcmFtIHsuLi5JbnRlcnZhbH0gaW50ZXJ2YWxzXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cblxuXG4gIGRpZmZlcmVuY2UoLi4uaW50ZXJ2YWxzKSB7XG4gICAgcmV0dXJuIEludGVydmFsLnhvcihbdGhpc10uY29uY2F0KGludGVydmFscykpLm1hcChpID0+IHRoaXMuaW50ZXJzZWN0aW9uKGkpKS5maWx0ZXIoaSA9PiBpICYmICFpLmlzRW1wdHkoKSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBJbnRlcnZhbCBhcHByb3ByaWF0ZSBmb3IgZGVidWdnaW5nLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEJDE7XG4gICAgcmV0dXJuIGBbJHt0aGlzLnMudG9JU08oKX0g4oCTICR7dGhpcy5lLnRvSVNPKCl9KWA7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIEludGVydmFsLlxuICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI1RpbWVfaW50ZXJ2YWxzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gVGhlIHNhbWUgb3B0aW9ucyBhcyB7QGxpbmsgRGF0ZVRpbWUjdG9JU099XG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG5cblxuICB0b0lTTyhvcHRzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEJDE7XG4gICAgcmV0dXJuIGAke3RoaXMucy50b0lTTyhvcHRzKX0vJHt0aGlzLmUudG9JU08ob3B0cyl9YDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGRhdGUgb2YgdGhpcyBJbnRlcnZhbC5cbiAgICogVGhlIHRpbWUgY29tcG9uZW50cyBhcmUgaWdub3JlZC5cbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNUaW1lX2ludGVydmFsc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9JU09EYXRlKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gSU5WQUxJRCQxO1xuICAgIHJldHVybiBgJHt0aGlzLnMudG9JU09EYXRlKCl9LyR7dGhpcy5lLnRvSVNPRGF0ZSgpfWA7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aW1lIG9mIHRoaXMgSW50ZXJ2YWwuXG4gICAqIFRoZSBkYXRlIGNvbXBvbmVudHMgYXJlIGlnbm9yZWQuXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBUaGUgc2FtZSBvcHRpb25zIGFzIHtAbGluayBEYXRlVGltZSN0b0lTT31cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHRvSVNPVGltZShvcHRzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEJDE7XG4gICAgcmV0dXJuIGAke3RoaXMucy50b0lTT1RpbWUob3B0cyl9LyR7dGhpcy5lLnRvSVNPVGltZShvcHRzKX1gO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgSW50ZXJ2YWwgZm9ybWF0dGVkIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGZvcm1hdCBzdHJpbmcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRlRm9ybWF0IC0gdGhlIGZvcm1hdCBzdHJpbmcuIFRoaXMgc3RyaW5nIGZvcm1hdHMgdGhlIHN0YXJ0IGFuZCBlbmQgdGltZS4gU2VlIHtAbGluayBEYXRlVGltZSN0b0Zvcm1hdH0gZm9yIGRldGFpbHMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc2VwYXJhdG9yID0gICcg4oCTICddIC0gYSBzZXBhcmF0b3IgdG8gcGxhY2UgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZCByZXByZXNlbnRhdGlvbnNcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHRvRm9ybWF0KGRhdGVGb3JtYXQsIHtcbiAgICBzZXBhcmF0b3IgPSBcIiDigJMgXCJcbiAgfSA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEJDE7XG4gICAgcmV0dXJuIGAke3RoaXMucy50b0Zvcm1hdChkYXRlRm9ybWF0KX0ke3NlcGFyYXRvcn0ke3RoaXMuZS50b0Zvcm1hdChkYXRlRm9ybWF0KX1gO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYSBEdXJhdGlvbiByZXByZXNlbnRpbmcgdGhlIHRpbWUgc3Bhbm5lZCBieSB0aGlzIGludGVydmFsLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gW3VuaXQ9WydtaWxsaXNlY29uZHMnXV0gLSB0aGUgdW5pdCBvciB1bml0cyAoc3VjaCBhcyAnaG91cnMnIG9yICdkYXlzJykgdG8gaW5jbHVkZSBpbiB0aGUgZHVyYXRpb24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0aGF0IGFmZmVjdCB0aGUgY3JlYXRpb24gb2YgdGhlIER1cmF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5jb252ZXJzaW9uQWNjdXJhY3k9J2Nhc3VhbCddIC0gdGhlIGNvbnZlcnNpb24gc3lzdGVtIHRvIHVzZVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS50b0R1cmF0aW9uKCkudG9PYmplY3QoKSAvLz0+IHsgbWlsbGlzZWNvbmRzOiA4ODQ4OTI1NyB9XG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLnRvRHVyYXRpb24oJ2RheXMnKS50b09iamVjdCgpIC8vPT4geyBkYXlzOiAxLjAyNDE4MTIxNTI3Nzc3NzggfVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS50b0R1cmF0aW9uKFsnaG91cnMnLCAnbWludXRlcyddKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMjQsIG1pbnV0ZXM6IDM0LjgyMDk1IH1cbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdDEsIGR0MikudG9EdXJhdGlvbihbJ2hvdXJzJywgJ21pbnV0ZXMnLCAnc2Vjb25kcyddKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMjQsIG1pbnV0ZXM6IDM0LCBzZWNvbmRzOiA0OS4yNTcgfVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS50b0R1cmF0aW9uKCdzZWNvbmRzJykudG9PYmplY3QoKSAvLz0+IHsgc2Vjb25kczogODg0ODkuMjU3IH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuXG5cbiAgdG9EdXJhdGlvbih1bml0LCBvcHRzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5pbnZhbGlkKHRoaXMuaW52YWxpZFJlYXNvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZS5kaWZmKHRoaXMucywgdW5pdCwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIFJ1biBtYXBGbiBvbiB0aGUgaW50ZXJ2YWwgc3RhcnQgYW5kIGVuZCwgcmV0dXJuaW5nIGEgbmV3IEludGVydmFsIGZyb20gdGhlIHJlc3VsdGluZyBEYXRlVGltZXNcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWFwRm5cbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLm1hcEVuZHBvaW50cyhlbmRwb2ludCA9PiBlbmRwb2ludC50b1VUQygpKVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS5tYXBFbmRwb2ludHMoZW5kcG9pbnQgPT4gZW5kcG9pbnQucGx1cyh7IGhvdXJzOiAyIH0pKVxuICAgKi9cblxuXG4gIG1hcEVuZHBvaW50cyhtYXBGbikge1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKG1hcEZuKHRoaXMucyksIG1hcEZuKHRoaXMuZSkpO1xuICB9XG5cbn1cblxuLyoqXG4gKiBUaGUgSW5mbyBjbGFzcyBjb250YWlucyBzdGF0aWMgbWV0aG9kcyBmb3IgcmV0cmlldmluZyBnZW5lcmFsIHRpbWUgYW5kIGRhdGUgcmVsYXRlZCBkYXRhLiBGb3IgZXhhbXBsZSwgaXQgaGFzIG1ldGhvZHMgZm9yIGZpbmRpbmcgb3V0IGlmIGEgdGltZSB6b25lIGhhcyBhIERTVCwgZm9yIGxpc3RpbmcgdGhlIG1vbnRocyBpbiBhbnkgc3VwcG9ydGVkIGxvY2FsZSwgYW5kIGZvciBkaXNjb3ZlcmluZyB3aGljaCBvZiBMdXhvbiBmZWF0dXJlcyBhcmUgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LlxuICovXG5cbmNsYXNzIEluZm8ge1xuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhlIHNwZWNpZmllZCB6b25lIGNvbnRhaW5zIGEgRFNULlxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbem9uZT0nbG9jYWwnXSAtIFpvbmUgdG8gY2hlY2suIERlZmF1bHRzIHRvIHRoZSBlbnZpcm9ubWVudCdzIGxvY2FsIHpvbmUuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaGFzRFNUKHpvbmUgPSBTZXR0aW5ncy5kZWZhdWx0Wm9uZSkge1xuICAgIGNvbnN0IHByb3RvID0gRGF0ZVRpbWUubm93KCkuc2V0Wm9uZSh6b25lKS5zZXQoe1xuICAgICAgbW9udGg6IDEyXG4gICAgfSk7XG4gICAgcmV0dXJuICF6b25lLmlzVW5pdmVyc2FsICYmIHByb3RvLm9mZnNldCAhPT0gcHJvdG8uc2V0KHtcbiAgICAgIG1vbnRoOiA2XG4gICAgfSkub2Zmc2V0O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGUgc3BlY2lmaWVkIHpvbmUgaXMgYSB2YWxpZCBJQU5BIHNwZWNpZmllci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHpvbmUgLSBab25lIHRvIGNoZWNrXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuXG5cbiAgc3RhdGljIGlzVmFsaWRJQU5BWm9uZSh6b25lKSB7XG4gICAgcmV0dXJuIElBTkFab25lLmlzVmFsaWRab25lKHpvbmUpO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgaW5wdXQgaW50byBhIHtAbGluayBab25lfSBpbnN0YW5jZS5cbiAgICpcbiAgICogKiBJZiBgaW5wdXRgIGlzIGFscmVhZHkgYSBab25lIGluc3RhbmNlLCBpdCBpcyByZXR1cm5lZCB1bmNoYW5nZWQuXG4gICAqICogSWYgYGlucHV0YCBpcyBhIHN0cmluZyBjb250YWluaW5nIGEgdmFsaWQgdGltZSB6b25lIG5hbWUsIGEgWm9uZSBpbnN0YW5jZVxuICAgKiAgIHdpdGggdGhhdCBuYW1lIGlzIHJldHVybmVkLlxuICAgKiAqIElmIGBpbnB1dGAgaXMgYSBzdHJpbmcgdGhhdCBkb2Vzbid0IHJlZmVyIHRvIGEga25vd24gdGltZSB6b25lLCBhIFpvbmVcbiAgICogICBpbnN0YW5jZSB3aXRoIHtAbGluayBab25lI2lzVmFsaWR9ID09IGZhbHNlIGlzIHJldHVybmVkLlxuICAgKiAqIElmIGBpbnB1dCBpcyBhIG51bWJlciwgYSBab25lIGluc3RhbmNlIHdpdGggdGhlIHNwZWNpZmllZCBmaXhlZCBvZmZzZXRcbiAgICogICBpbiBtaW51dGVzIGlzIHJldHVybmVkLlxuICAgKiAqIElmIGBpbnB1dGAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLCB0aGUgZGVmYXVsdCB6b25lIGlzIHJldHVybmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfG51bWJlcn0gW2lucHV0XSAtIHRoZSB2YWx1ZSB0byBiZSBjb252ZXJ0ZWRcbiAgICogQHJldHVybiB7Wm9uZX1cbiAgICovXG5cblxuICBzdGF0aWMgbm9ybWFsaXplWm9uZShpbnB1dCkge1xuICAgIHJldHVybiBub3JtYWxpemVab25lKGlucHV0LCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBzdGFuZGFsb25lIG1vbnRoIG5hbWVzLlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGVUaW1lRm9ybWF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdsb25nJ10gLSB0aGUgbGVuZ3RoIG9mIHRoZSBtb250aCByZXByZXNlbnRhdGlvbiwgc3VjaCBhcyBcIm51bWVyaWNcIiwgXCIyLWRpZ2l0XCIsIFwibmFycm93XCIsIFwic2hvcnRcIiwgXCJsb25nXCJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGVdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5udW1iZXJpbmdTeXN0ZW09bnVsbF0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jT2JqPW51bGxdIC0gYW4gZXhpc3RpbmcgbG9jYWxlIG9iamVjdCB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm91dHB1dENhbGVuZGFyPSdncmVnb3J5J10gLSB0aGUgY2FsZW5kYXJcbiAgICogQGV4YW1wbGUgSW5mby5tb250aHMoKVswXSAvLz0+ICdKYW51YXJ5J1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnc2hvcnQnKVswXSAvLz0+ICdKYW4nXG4gICAqIEBleGFtcGxlIEluZm8ubW9udGhzKCdudW1lcmljJylbMF0gLy89PiAnMSdcbiAgICogQGV4YW1wbGUgSW5mby5tb250aHMoJ3Nob3J0JywgeyBsb2NhbGU6ICdmci1DQScgfSApWzBdIC8vPT4gJ2phbnYuJ1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnbnVtZXJpYycsIHsgbG9jYWxlOiAnYXInIH0pWzBdIC8vPT4gJ9mhJ1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnbG9uZycsIHsgb3V0cHV0Q2FsZW5kYXI6ICdpc2xhbWljJyB9KVswXSAvLz0+ICdSYWJpyrsgSSdcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuXG5cbiAgc3RhdGljIG1vbnRocyhsZW5ndGggPSBcImxvbmdcIiwge1xuICAgIGxvY2FsZSA9IG51bGwsXG4gICAgbnVtYmVyaW5nU3lzdGVtID0gbnVsbCxcbiAgICBsb2NPYmogPSBudWxsLFxuICAgIG91dHB1dENhbGVuZGFyID0gXCJncmVnb3J5XCJcbiAgfSA9IHt9KSB7XG4gICAgcmV0dXJuIChsb2NPYmogfHwgTG9jYWxlLmNyZWF0ZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXIpKS5tb250aHMobGVuZ3RoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIGZvcm1hdCBtb250aCBuYW1lcy5cbiAgICogRm9ybWF0IG1vbnRocyBkaWZmZXIgZnJvbSBzdGFuZGFsb25lIG1vbnRocyBpbiB0aGF0IHRoZXkncmUgbWVhbnQgdG8gYXBwZWFyIG5leHQgdG8gdGhlIGRheSBvZiB0aGUgbW9udGguIEluIHNvbWUgbGFuZ3VhZ2VzLCB0aGF0XG4gICAqIGNoYW5nZXMgdGhlIHN0cmluZy5cbiAgICogU2VlIHtAbGluayBJbmZvI21vbnRoc31cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsZW5ndGg9J2xvbmcnXSAtIHRoZSBsZW5ndGggb2YgdGhlIG1vbnRoIHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzIFwibnVtZXJpY1wiLCBcIjItZGlnaXRcIiwgXCJuYXJyb3dcIiwgXCJzaG9ydFwiLCBcImxvbmdcIlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZV0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm51bWJlcmluZ1N5c3RlbT1udWxsXSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NPYmo9bnVsbF0gLSBhbiBleGlzdGluZyBsb2NhbGUgb2JqZWN0IHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMub3V0cHV0Q2FsZW5kYXI9J2dyZWdvcnknXSAtIHRoZSBjYWxlbmRhclxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG5cblxuICBzdGF0aWMgbW9udGhzRm9ybWF0KGxlbmd0aCA9IFwibG9uZ1wiLCB7XG4gICAgbG9jYWxlID0gbnVsbCxcbiAgICBudW1iZXJpbmdTeXN0ZW0gPSBudWxsLFxuICAgIGxvY09iaiA9IG51bGwsXG4gICAgb3V0cHV0Q2FsZW5kYXIgPSBcImdyZWdvcnlcIlxuICB9ID0ge30pIHtcbiAgICByZXR1cm4gKGxvY09iaiB8fCBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcikpLm1vbnRocyhsZW5ndGgsIHRydWUpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2Ygc3RhbmRhbG9uZSB3ZWVrIG5hbWVzLlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGVUaW1lRm9ybWF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdsb25nJ10gLSB0aGUgbGVuZ3RoIG9mIHRoZSB3ZWVrZGF5IHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzIFwibmFycm93XCIsIFwic2hvcnRcIiwgXCJsb25nXCIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlXSAtIHRoZSBsb2NhbGUgY29kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubnVtYmVyaW5nU3lzdGVtPW51bGxdIC0gdGhlIG51bWJlcmluZyBzeXN0ZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY09iaj1udWxsXSAtIGFuIGV4aXN0aW5nIGxvY2FsZSBvYmplY3QgdG8gdXNlXG4gICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoKVswXSAvLz0+ICdNb25kYXknXG4gICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoJ3Nob3J0JylbMF0gLy89PiAnTW9uJ1xuICAgKiBAZXhhbXBsZSBJbmZvLndlZWtkYXlzKCdzaG9ydCcsIHsgbG9jYWxlOiAnZnItQ0EnIH0pWzBdIC8vPT4gJ2x1bi4nXG4gICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoJ3Nob3J0JywgeyBsb2NhbGU6ICdhcicgfSlbMF0gLy89PiAn2KfZhNin2KvZhtmK2YYnXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cblxuXG4gIHN0YXRpYyB3ZWVrZGF5cyhsZW5ndGggPSBcImxvbmdcIiwge1xuICAgIGxvY2FsZSA9IG51bGwsXG4gICAgbnVtYmVyaW5nU3lzdGVtID0gbnVsbCxcbiAgICBsb2NPYmogPSBudWxsXG4gIH0gPSB7fSkge1xuICAgIHJldHVybiAobG9jT2JqIHx8IExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG51bGwpKS53ZWVrZGF5cyhsZW5ndGgpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgZm9ybWF0IHdlZWsgbmFtZXMuXG4gICAqIEZvcm1hdCB3ZWVrZGF5cyBkaWZmZXIgZnJvbSBzdGFuZGFsb25lIHdlZWtkYXlzIGluIHRoYXQgdGhleSdyZSBtZWFudCB0byBhcHBlYXIgbmV4dCB0byBtb3JlIGRhdGUgaW5mb3JtYXRpb24uIEluIHNvbWUgbGFuZ3VhZ2VzLCB0aGF0XG4gICAqIGNoYW5nZXMgdGhlIHN0cmluZy5cbiAgICogU2VlIHtAbGluayBJbmZvI3dlZWtkYXlzfVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2xlbmd0aD0nbG9uZyddIC0gdGhlIGxlbmd0aCBvZiB0aGUgbW9udGggcmVwcmVzZW50YXRpb24sIHN1Y2ggYXMgXCJuYXJyb3dcIiwgXCJzaG9ydFwiLCBcImxvbmdcIi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9bnVsbF0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm51bWJlcmluZ1N5c3RlbT1udWxsXSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NPYmo9bnVsbF0gLSBhbiBleGlzdGluZyBsb2NhbGUgb2JqZWN0IHRvIHVzZVxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG5cblxuICBzdGF0aWMgd2Vla2RheXNGb3JtYXQobGVuZ3RoID0gXCJsb25nXCIsIHtcbiAgICBsb2NhbGUgPSBudWxsLFxuICAgIG51bWJlcmluZ1N5c3RlbSA9IG51bGwsXG4gICAgbG9jT2JqID0gbnVsbFxuICB9ID0ge30pIHtcbiAgICByZXR1cm4gKGxvY09iaiB8fCBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBudWxsKSkud2Vla2RheXMobGVuZ3RoLCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIG1lcmlkaWVtcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGVdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBleGFtcGxlIEluZm8ubWVyaWRpZW1zKCkgLy89PiBbICdBTScsICdQTScgXVxuICAgKiBAZXhhbXBsZSBJbmZvLm1lcmlkaWVtcyh7IGxvY2FsZTogJ215JyB9KSAvLz0+IFsgJ+GAlOGAtuGAlOGAgOGAuicsICfhgIrhgJThgLEnIF1cbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuXG5cbiAgc3RhdGljIG1lcmlkaWVtcyh7XG4gICAgbG9jYWxlID0gbnVsbFxuICB9ID0ge30pIHtcbiAgICByZXR1cm4gTG9jYWxlLmNyZWF0ZShsb2NhbGUpLm1lcmlkaWVtcygpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgZXJhcywgc3VjaCBhcyBbJ0JDJywgJ0FEJ10uIFRoZSBsb2NhbGUgY2FuIGJlIHNwZWNpZmllZCwgYnV0IHRoZSBjYWxlbmRhciBzeXN0ZW0gaXMgYWx3YXlzIEdyZWdvcmlhbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsZW5ndGg9J3Nob3J0J10gLSB0aGUgbGVuZ3RoIG9mIHRoZSBlcmEgcmVwcmVzZW50YXRpb24sIHN1Y2ggYXMgXCJzaG9ydFwiIG9yIFwibG9uZ1wiLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZV0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQGV4YW1wbGUgSW5mby5lcmFzKCkgLy89PiBbICdCQycsICdBRCcgXVxuICAgKiBAZXhhbXBsZSBJbmZvLmVyYXMoJ2xvbmcnKSAvLz0+IFsgJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknIF1cbiAgICogQGV4YW1wbGUgSW5mby5lcmFzKCdsb25nJywgeyBsb2NhbGU6ICdmcicgfSkgLy89PiBbICdhdmFudCBKw6lzdXMtQ2hyaXN0JywgJ2FwcsOocyBKw6lzdXMtQ2hyaXN0JyBdXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cblxuXG4gIHN0YXRpYyBlcmFzKGxlbmd0aCA9IFwic2hvcnRcIiwge1xuICAgIGxvY2FsZSA9IG51bGxcbiAgfSA9IHt9KSB7XG4gICAgcmV0dXJuIExvY2FsZS5jcmVhdGUobG9jYWxlLCBudWxsLCBcImdyZWdvcnlcIikuZXJhcyhsZW5ndGgpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHNldCBvZiBhdmFpbGFibGUgZmVhdHVyZXMgaW4gdGhpcyBlbnZpcm9ubWVudC5cbiAgICogU29tZSBmZWF0dXJlcyBvZiBMdXhvbiBhcmUgbm90IGF2YWlsYWJsZSBpbiBhbGwgZW52aXJvbm1lbnRzLiBGb3IgZXhhbXBsZSwgb24gb2xkZXIgYnJvd3NlcnMsIHJlbGF0aXZlIHRpbWUgZm9ybWF0dGluZyBzdXBwb3J0IGlzIG5vdCBhdmFpbGFibGUuIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgaWYgdGhhdCdzIHRoZSBjYXNlLlxuICAgKiBLZXlzOlxuICAgKiAqIGByZWxhdGl2ZWA6IHdoZXRoZXIgdGhpcyBlbnZpcm9ubWVudCBzdXBwb3J0cyByZWxhdGl2ZSB0aW1lIGZvcm1hdHRpbmdcbiAgICogQGV4YW1wbGUgSW5mby5mZWF0dXJlcygpIC8vPT4geyByZWxhdGl2ZTogZmFsc2UgfVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGZlYXR1cmVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZWxhdGl2ZTogaGFzUmVsYXRpdmUoKVxuICAgIH07XG4gIH1cblxufVxuXG5mdW5jdGlvbiBkYXlEaWZmKGVhcmxpZXIsIGxhdGVyKSB7XG4gIGNvbnN0IHV0Y0RheVN0YXJ0ID0gZHQgPT4gZHQudG9VVEMoMCwge1xuICAgIGtlZXBMb2NhbFRpbWU6IHRydWVcbiAgfSkuc3RhcnRPZihcImRheVwiKS52YWx1ZU9mKCksXG4gICAgICAgIG1zID0gdXRjRGF5U3RhcnQobGF0ZXIpIC0gdXRjRGF5U3RhcnQoZWFybGllcik7XG5cbiAgcmV0dXJuIE1hdGguZmxvb3IoRHVyYXRpb24uZnJvbU1pbGxpcyhtcykuYXMoXCJkYXlzXCIpKTtcbn1cblxuZnVuY3Rpb24gaGlnaE9yZGVyRGlmZnMoY3Vyc29yLCBsYXRlciwgdW5pdHMpIHtcbiAgY29uc3QgZGlmZmVycyA9IFtbXCJ5ZWFyc1wiLCAoYSwgYikgPT4gYi55ZWFyIC0gYS55ZWFyXSwgW1wicXVhcnRlcnNcIiwgKGEsIGIpID0+IGIucXVhcnRlciAtIGEucXVhcnRlcl0sIFtcIm1vbnRoc1wiLCAoYSwgYikgPT4gYi5tb250aCAtIGEubW9udGggKyAoYi55ZWFyIC0gYS55ZWFyKSAqIDEyXSwgW1wid2Vla3NcIiwgKGEsIGIpID0+IHtcbiAgICBjb25zdCBkYXlzID0gZGF5RGlmZihhLCBiKTtcbiAgICByZXR1cm4gKGRheXMgLSBkYXlzICUgNykgLyA3O1xuICB9XSwgW1wiZGF5c1wiLCBkYXlEaWZmXV07XG4gIGNvbnN0IHJlc3VsdHMgPSB7fTtcbiAgbGV0IGxvd2VzdE9yZGVyLCBoaWdoV2F0ZXI7XG5cbiAgZm9yIChjb25zdCBbdW5pdCwgZGlmZmVyXSBvZiBkaWZmZXJzKSB7XG4gICAgaWYgKHVuaXRzLmluZGV4T2YodW5pdCkgPj0gMCkge1xuICAgICAgbG93ZXN0T3JkZXIgPSB1bml0O1xuICAgICAgbGV0IGRlbHRhID0gZGlmZmVyKGN1cnNvciwgbGF0ZXIpO1xuICAgICAgaGlnaFdhdGVyID0gY3Vyc29yLnBsdXMoe1xuICAgICAgICBbdW5pdF06IGRlbHRhXG4gICAgICB9KTtcblxuICAgICAgaWYgKGhpZ2hXYXRlciA+IGxhdGVyKSB7XG4gICAgICAgIGN1cnNvciA9IGN1cnNvci5wbHVzKHtcbiAgICAgICAgICBbdW5pdF06IGRlbHRhIC0gMVxuICAgICAgICB9KTtcbiAgICAgICAgZGVsdGEgLT0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnNvciA9IGhpZ2hXYXRlcjtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0c1t1bml0XSA9IGRlbHRhO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbY3Vyc29yLCByZXN1bHRzLCBoaWdoV2F0ZXIsIGxvd2VzdE9yZGVyXTtcbn1cblxuZnVuY3Rpb24gZGlmZiAoZWFybGllciwgbGF0ZXIsIHVuaXRzLCBvcHRzKSB7XG4gIGxldCBbY3Vyc29yLCByZXN1bHRzLCBoaWdoV2F0ZXIsIGxvd2VzdE9yZGVyXSA9IGhpZ2hPcmRlckRpZmZzKGVhcmxpZXIsIGxhdGVyLCB1bml0cyk7XG4gIGNvbnN0IHJlbWFpbmluZ01pbGxpcyA9IGxhdGVyIC0gY3Vyc29yO1xuICBjb25zdCBsb3dlck9yZGVyVW5pdHMgPSB1bml0cy5maWx0ZXIodSA9PiBbXCJob3Vyc1wiLCBcIm1pbnV0ZXNcIiwgXCJzZWNvbmRzXCIsIFwibWlsbGlzZWNvbmRzXCJdLmluZGV4T2YodSkgPj0gMCk7XG5cbiAgaWYgKGxvd2VyT3JkZXJVbml0cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaGlnaFdhdGVyIDwgbGF0ZXIpIHtcbiAgICAgIGhpZ2hXYXRlciA9IGN1cnNvci5wbHVzKHtcbiAgICAgICAgW2xvd2VzdE9yZGVyXTogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGhpZ2hXYXRlciAhPT0gY3Vyc29yKSB7XG4gICAgICByZXN1bHRzW2xvd2VzdE9yZGVyXSA9IChyZXN1bHRzW2xvd2VzdE9yZGVyXSB8fCAwKSArIHJlbWFpbmluZ01pbGxpcyAvIChoaWdoV2F0ZXIgLSBjdXJzb3IpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGR1cmF0aW9uID0gRHVyYXRpb24uZnJvbU9iamVjdChyZXN1bHRzLCBvcHRzKTtcblxuICBpZiAobG93ZXJPcmRlclVuaXRzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gRHVyYXRpb24uZnJvbU1pbGxpcyhyZW1haW5pbmdNaWxsaXMsIG9wdHMpLnNoaWZ0VG8oLi4ubG93ZXJPcmRlclVuaXRzKS5wbHVzKGR1cmF0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZHVyYXRpb247XG4gIH1cbn1cblxuY29uc3QgbnVtYmVyaW5nU3lzdGVtcyA9IHtcbiAgYXJhYjogXCJbXFx1MDY2MC1cXHUwNjY5XVwiLFxuICBhcmFiZXh0OiBcIltcXHUwNkYwLVxcdTA2RjldXCIsXG4gIGJhbGk6IFwiW1xcdTFCNTAtXFx1MUI1OV1cIixcbiAgYmVuZzogXCJbXFx1MDlFNi1cXHUwOUVGXVwiLFxuICBkZXZhOiBcIltcXHUwOTY2LVxcdTA5NkZdXCIsXG4gIGZ1bGx3aWRlOiBcIltcXHVGRjEwLVxcdUZGMTldXCIsXG4gIGd1anI6IFwiW1xcdTBBRTYtXFx1MEFFRl1cIixcbiAgaGFuaWRlYzogXCJb44CHfOS4gHzkuox85LiJfOWbm3zkupR85YWtfOS4g3zlhat85LmdXVwiLFxuICBraG1yOiBcIltcXHUxN0UwLVxcdTE3RTldXCIsXG4gIGtuZGE6IFwiW1xcdTBDRTYtXFx1MENFRl1cIixcbiAgbGFvbzogXCJbXFx1MEVEMC1cXHUwRUQ5XVwiLFxuICBsaW1iOiBcIltcXHUxOTQ2LVxcdTE5NEZdXCIsXG4gIG1seW06IFwiW1xcdTBENjYtXFx1MEQ2Rl1cIixcbiAgbW9uZzogXCJbXFx1MTgxMC1cXHUxODE5XVwiLFxuICBteW1yOiBcIltcXHUxMDQwLVxcdTEwNDldXCIsXG4gIG9yeWE6IFwiW1xcdTBCNjYtXFx1MEI2Rl1cIixcbiAgdGFtbGRlYzogXCJbXFx1MEJFNi1cXHUwQkVGXVwiLFxuICB0ZWx1OiBcIltcXHUwQzY2LVxcdTBDNkZdXCIsXG4gIHRoYWk6IFwiW1xcdTBFNTAtXFx1MEU1OV1cIixcbiAgdGlidDogXCJbXFx1MEYyMC1cXHUwRjI5XVwiLFxuICBsYXRuOiBcIlxcXFxkXCJcbn07XG5jb25zdCBudW1iZXJpbmdTeXN0ZW1zVVRGMTYgPSB7XG4gIGFyYWI6IFsxNjMyLCAxNjQxXSxcbiAgYXJhYmV4dDogWzE3NzYsIDE3ODVdLFxuICBiYWxpOiBbNjk5MiwgNzAwMV0sXG4gIGJlbmc6IFsyNTM0LCAyNTQzXSxcbiAgZGV2YTogWzI0MDYsIDI0MTVdLFxuICBmdWxsd2lkZTogWzY1Mjk2LCA2NTMwM10sXG4gIGd1anI6IFsyNzkwLCAyNzk5XSxcbiAga2htcjogWzYxMTIsIDYxMjFdLFxuICBrbmRhOiBbMzMwMiwgMzMxMV0sXG4gIGxhb286IFszNzkyLCAzODAxXSxcbiAgbGltYjogWzY0NzAsIDY0NzldLFxuICBtbHltOiBbMzQzMCwgMzQzOV0sXG4gIG1vbmc6IFs2MTYwLCA2MTY5XSxcbiAgbXltcjogWzQxNjAsIDQxNjldLFxuICBvcnlhOiBbMjkxOCwgMjkyN10sXG4gIHRhbWxkZWM6IFszMDQ2LCAzMDU1XSxcbiAgdGVsdTogWzMxNzQsIDMxODNdLFxuICB0aGFpOiBbMzY2NCwgMzY3M10sXG4gIHRpYnQ6IFszODcyLCAzODgxXVxufTtcbmNvbnN0IGhhbmlkZWNDaGFycyA9IG51bWJlcmluZ1N5c3RlbXMuaGFuaWRlYy5yZXBsYWNlKC9bXFxbfFxcXV0vZywgXCJcIikuc3BsaXQoXCJcIik7XG5mdW5jdGlvbiBwYXJzZURpZ2l0cyhzdHIpIHtcbiAgbGV0IHZhbHVlID0gcGFyc2VJbnQoc3RyLCAxMCk7XG5cbiAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgIHZhbHVlID0gXCJcIjtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgIGlmIChzdHJbaV0uc2VhcmNoKG51bWJlcmluZ1N5c3RlbXMuaGFuaWRlYykgIT09IC0xKSB7XG4gICAgICAgIHZhbHVlICs9IGhhbmlkZWNDaGFycy5pbmRleE9mKHN0cltpXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBudW1iZXJpbmdTeXN0ZW1zVVRGMTYpIHtcbiAgICAgICAgICBjb25zdCBbbWluLCBtYXhdID0gbnVtYmVyaW5nU3lzdGVtc1VURjE2W2tleV07XG5cbiAgICAgICAgICBpZiAoY29kZSA+PSBtaW4gJiYgY29kZSA8PSBtYXgpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IGNvZGUgLSBtaW47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5mdW5jdGlvbiBkaWdpdFJlZ2V4KHtcbiAgbnVtYmVyaW5nU3lzdGVtXG59LCBhcHBlbmQgPSBcIlwiKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKGAke251bWJlcmluZ1N5c3RlbXNbbnVtYmVyaW5nU3lzdGVtIHx8IFwibGF0blwiXX0ke2FwcGVuZH1gKTtcbn1cblxuY29uc3QgTUlTU0lOR19GVFAgPSBcIm1pc3NpbmcgSW50bC5EYXRlVGltZUZvcm1hdC5mb3JtYXRUb1BhcnRzIHN1cHBvcnRcIjtcblxuZnVuY3Rpb24gaW50VW5pdChyZWdleCwgcG9zdCA9IGkgPT4gaSkge1xuICByZXR1cm4ge1xuICAgIHJlZ2V4LFxuICAgIGRlc2VyOiAoW3NdKSA9PiBwb3N0KHBhcnNlRGlnaXRzKHMpKVxuICB9O1xufVxuXG5jb25zdCBOQlNQID0gU3RyaW5nLmZyb21DaGFyQ29kZSgxNjApO1xuY29uc3Qgc3BhY2VPck5CU1AgPSBgWyAke05CU1B9XWA7XG5jb25zdCBzcGFjZU9yTkJTUFJlZ0V4cCA9IG5ldyBSZWdFeHAoc3BhY2VPck5CU1AsIFwiZ1wiKTtcblxuZnVuY3Rpb24gZml4TGlzdFJlZ2V4KHMpIHtcbiAgLy8gbWFrZSBkb3RzIG9wdGlvbmFsIGFuZCBhbHNvIG1ha2UgdGhlbSBsaXRlcmFsXG4gIC8vIG1ha2Ugc3BhY2UgYW5kIG5vbiBicmVha2FibGUgc3BhY2UgY2hhcmFjdGVycyBpbnRlcmNoYW5nZWFibGVcbiAgcmV0dXJuIHMucmVwbGFjZSgvXFwuL2csIFwiXFxcXC4/XCIpLnJlcGxhY2Uoc3BhY2VPck5CU1BSZWdFeHAsIHNwYWNlT3JOQlNQKTtcbn1cblxuZnVuY3Rpb24gc3RyaXBJbnNlbnNpdGl2aXRpZXMocykge1xuICByZXR1cm4gcy5yZXBsYWNlKC9cXC4vZywgXCJcIikgLy8gaWdub3JlIGRvdHMgdGhhdCB3ZXJlIG1hZGUgb3B0aW9uYWxcbiAgLnJlcGxhY2Uoc3BhY2VPck5CU1BSZWdFeHAsIFwiIFwiKSAvLyBpbnRlcmNoYW5nZSBzcGFjZSBhbmQgbmJzcFxuICAudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gb25lT2Yoc3RyaW5ncywgc3RhcnRJbmRleCkge1xuICBpZiAoc3RyaW5ncyA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICByZWdleDogUmVnRXhwKHN0cmluZ3MubWFwKGZpeExpc3RSZWdleCkuam9pbihcInxcIikpLFxuICAgICAgZGVzZXI6IChbc10pID0+IHN0cmluZ3MuZmluZEluZGV4KGkgPT4gc3RyaXBJbnNlbnNpdGl2aXRpZXMocykgPT09IHN0cmlwSW5zZW5zaXRpdml0aWVzKGkpKSArIHN0YXJ0SW5kZXhcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIG9mZnNldChyZWdleCwgZ3JvdXBzKSB7XG4gIHJldHVybiB7XG4gICAgcmVnZXgsXG4gICAgZGVzZXI6IChbLCBoLCBtXSkgPT4gc2lnbmVkT2Zmc2V0KGgsIG0pLFxuICAgIGdyb3Vwc1xuICB9O1xufVxuXG5mdW5jdGlvbiBzaW1wbGUocmVnZXgpIHtcbiAgcmV0dXJuIHtcbiAgICByZWdleCxcbiAgICBkZXNlcjogKFtzXSkgPT4gc1xuICB9O1xufVxuXG5mdW5jdGlvbiBlc2NhcGVUb2tlbih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUucmVwbGFjZSgvW1xcLVxcW1xcXXt9KCkqKz8uLFxcXFxcXF4kfCNcXHNdL2csIFwiXFxcXCQmXCIpO1xufVxuXG5mdW5jdGlvbiB1bml0Rm9yVG9rZW4odG9rZW4sIGxvYykge1xuICBjb25zdCBvbmUgPSBkaWdpdFJlZ2V4KGxvYyksXG4gICAgICAgIHR3byA9IGRpZ2l0UmVnZXgobG9jLCBcInsyfVwiKSxcbiAgICAgICAgdGhyZWUgPSBkaWdpdFJlZ2V4KGxvYywgXCJ7M31cIiksXG4gICAgICAgIGZvdXIgPSBkaWdpdFJlZ2V4KGxvYywgXCJ7NH1cIiksXG4gICAgICAgIHNpeCA9IGRpZ2l0UmVnZXgobG9jLCBcIns2fVwiKSxcbiAgICAgICAgb25lT3JUd28gPSBkaWdpdFJlZ2V4KGxvYywgXCJ7MSwyfVwiKSxcbiAgICAgICAgb25lVG9UaHJlZSA9IGRpZ2l0UmVnZXgobG9jLCBcInsxLDN9XCIpLFxuICAgICAgICBvbmVUb1NpeCA9IGRpZ2l0UmVnZXgobG9jLCBcInsxLDZ9XCIpLFxuICAgICAgICBvbmVUb05pbmUgPSBkaWdpdFJlZ2V4KGxvYywgXCJ7MSw5fVwiKSxcbiAgICAgICAgdHdvVG9Gb3VyID0gZGlnaXRSZWdleChsb2MsIFwiezIsNH1cIiksXG4gICAgICAgIGZvdXJUb1NpeCA9IGRpZ2l0UmVnZXgobG9jLCBcIns0LDZ9XCIpLFxuICAgICAgICBsaXRlcmFsID0gdCA9PiAoe1xuICAgIHJlZ2V4OiBSZWdFeHAoZXNjYXBlVG9rZW4odC52YWwpKSxcbiAgICBkZXNlcjogKFtzXSkgPT4gcyxcbiAgICBsaXRlcmFsOiB0cnVlXG4gIH0pLFxuICAgICAgICB1bml0YXRlID0gdCA9PiB7XG4gICAgaWYgKHRva2VuLmxpdGVyYWwpIHtcbiAgICAgIHJldHVybiBsaXRlcmFsKHQpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodC52YWwpIHtcbiAgICAgIC8vIGVyYVxuICAgICAgY2FzZSBcIkdcIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5lcmFzKFwic2hvcnRcIiwgZmFsc2UpLCAwKTtcblxuICAgICAgY2FzZSBcIkdHXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2MuZXJhcyhcImxvbmdcIiwgZmFsc2UpLCAwKTtcbiAgICAgIC8vIHllYXJzXG5cbiAgICAgIGNhc2UgXCJ5XCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZVRvU2l4KTtcblxuICAgICAgY2FzZSBcInl5XCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3b1RvRm91ciwgdW50cnVuY2F0ZVllYXIpO1xuXG4gICAgICBjYXNlIFwieXl5eVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChmb3VyKTtcblxuICAgICAgY2FzZSBcInl5eXl5XCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KGZvdXJUb1NpeCk7XG5cbiAgICAgIGNhc2UgXCJ5eXl5eXlcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQoc2l4KTtcbiAgICAgIC8vIG1vbnRoc1xuXG4gICAgICBjYXNlIFwiTVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG5cbiAgICAgIGNhc2UgXCJNTVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuXG4gICAgICBjYXNlIFwiTU1NXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2MubW9udGhzKFwic2hvcnRcIiwgdHJ1ZSwgZmFsc2UpLCAxKTtcblxuICAgICAgY2FzZSBcIk1NTU1cIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoXCJsb25nXCIsIHRydWUsIGZhbHNlKSwgMSk7XG5cbiAgICAgIGNhc2UgXCJMXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcblxuICAgICAgY2FzZSBcIkxMXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG5cbiAgICAgIGNhc2UgXCJMTExcIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoXCJzaG9ydFwiLCBmYWxzZSwgZmFsc2UpLCAxKTtcblxuICAgICAgY2FzZSBcIkxMTExcIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoXCJsb25nXCIsIGZhbHNlLCBmYWxzZSksIDEpO1xuICAgICAgLy8gZGF0ZXNcblxuICAgICAgY2FzZSBcImRcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuXG4gICAgICBjYXNlIFwiZGRcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgIC8vIG9yZGluYWxzXG5cbiAgICAgIGNhc2UgXCJvXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZVRvVGhyZWUpO1xuXG4gICAgICBjYXNlIFwib29vXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHRocmVlKTtcbiAgICAgIC8vIHRpbWVcblxuICAgICAgY2FzZSBcIkhIXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG5cbiAgICAgIGNhc2UgXCJIXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcblxuICAgICAgY2FzZSBcImhoXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG5cbiAgICAgIGNhc2UgXCJoXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcblxuICAgICAgY2FzZSBcIm1tXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG5cbiAgICAgIGNhc2UgXCJtXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcblxuICAgICAgY2FzZSBcInFcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuXG4gICAgICBjYXNlIFwicXFcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcblxuICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuXG4gICAgICBjYXNlIFwic3NcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcblxuICAgICAgY2FzZSBcIlNcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lVG9UaHJlZSk7XG5cbiAgICAgIGNhc2UgXCJTU1NcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodGhyZWUpO1xuXG4gICAgICBjYXNlIFwidVwiOlxuICAgICAgICByZXR1cm4gc2ltcGxlKG9uZVRvTmluZSk7XG5cbiAgICAgIGNhc2UgXCJ1dVwiOlxuICAgICAgICByZXR1cm4gc2ltcGxlKG9uZU9yVHdvKTtcblxuICAgICAgY2FzZSBcInV1dVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmUpO1xuICAgICAgLy8gbWVyaWRpZW1cblxuICAgICAgY2FzZSBcImFcIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tZXJpZGllbXMoKSwgMCk7XG4gICAgICAvLyB3ZWVrWWVhciAoaylcblxuICAgICAgY2FzZSBcImtra2tcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQoZm91cik7XG5cbiAgICAgIGNhc2UgXCJra1wiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d29Ub0ZvdXIsIHVudHJ1bmNhdGVZZWFyKTtcbiAgICAgIC8vIHdlZWtOdW1iZXIgKFcpXG5cbiAgICAgIGNhc2UgXCJXXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcblxuICAgICAgY2FzZSBcIldXXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG4gICAgICAvLyB3ZWVrZGF5c1xuXG4gICAgICBjYXNlIFwiRVwiOlxuICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lKTtcblxuICAgICAgY2FzZSBcIkVFRVwiOlxuICAgICAgICByZXR1cm4gb25lT2YobG9jLndlZWtkYXlzKFwic2hvcnRcIiwgZmFsc2UsIGZhbHNlKSwgMSk7XG5cbiAgICAgIGNhc2UgXCJFRUVFXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoXCJsb25nXCIsIGZhbHNlLCBmYWxzZSksIDEpO1xuXG4gICAgICBjYXNlIFwiY2NjXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoXCJzaG9ydFwiLCB0cnVlLCBmYWxzZSksIDEpO1xuXG4gICAgICBjYXNlIFwiY2NjY1wiOlxuICAgICAgICByZXR1cm4gb25lT2YobG9jLndlZWtkYXlzKFwibG9uZ1wiLCB0cnVlLCBmYWxzZSksIDEpO1xuICAgICAgLy8gb2Zmc2V0L3pvbmVcblxuICAgICAgY2FzZSBcIlpcIjpcbiAgICAgIGNhc2UgXCJaWlwiOlxuICAgICAgICByZXR1cm4gb2Zmc2V0KG5ldyBSZWdFeHAoYChbKy1dJHtvbmVPclR3by5zb3VyY2V9KSg/OjooJHt0d28uc291cmNlfSkpP2ApLCAyKTtcblxuICAgICAgY2FzZSBcIlpaWlwiOlxuICAgICAgICByZXR1cm4gb2Zmc2V0KG5ldyBSZWdFeHAoYChbKy1dJHtvbmVPclR3by5zb3VyY2V9KSgke3R3by5zb3VyY2V9KT9gKSwgMik7XG4gICAgICAvLyB3ZSBkb24ndCBzdXBwb3J0IFpaWlogKFBTVCkgb3IgWlpaWlogKFBhY2lmaWMgU3RhbmRhcmQgVGltZSkgaW4gcGFyc2luZ1xuICAgICAgLy8gYmVjYXVzZSB3ZSBkb24ndCBoYXZlIGFueSB3YXkgdG8gZmlndXJlIG91dCB3aGF0IHRoZXkgYXJlXG5cbiAgICAgIGNhc2UgXCJ6XCI6XG4gICAgICAgIHJldHVybiBzaW1wbGUoL1thLXpfKy0vXXsxLDI1Nn0/L2kpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbGl0ZXJhbCh0KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdW5pdCA9IHVuaXRhdGUodG9rZW4pIHx8IHtcbiAgICBpbnZhbGlkUmVhc29uOiBNSVNTSU5HX0ZUUFxuICB9O1xuICB1bml0LnRva2VuID0gdG9rZW47XG4gIHJldHVybiB1bml0O1xufVxuXG5jb25zdCBwYXJ0VHlwZVN0eWxlVG9Ub2tlblZhbCA9IHtcbiAgeWVhcjoge1xuICAgIFwiMi1kaWdpdFwiOiBcInl5XCIsXG4gICAgbnVtZXJpYzogXCJ5eXl5eVwiXG4gIH0sXG4gIG1vbnRoOiB7XG4gICAgbnVtZXJpYzogXCJNXCIsXG4gICAgXCIyLWRpZ2l0XCI6IFwiTU1cIixcbiAgICBzaG9ydDogXCJNTU1cIixcbiAgICBsb25nOiBcIk1NTU1cIlxuICB9LFxuICBkYXk6IHtcbiAgICBudW1lcmljOiBcImRcIixcbiAgICBcIjItZGlnaXRcIjogXCJkZFwiXG4gIH0sXG4gIHdlZWtkYXk6IHtcbiAgICBzaG9ydDogXCJFRUVcIixcbiAgICBsb25nOiBcIkVFRUVcIlxuICB9LFxuICBkYXlwZXJpb2Q6IFwiYVwiLFxuICBkYXlQZXJpb2Q6IFwiYVwiLFxuICBob3VyOiB7XG4gICAgbnVtZXJpYzogXCJoXCIsXG4gICAgXCIyLWRpZ2l0XCI6IFwiaGhcIlxuICB9LFxuICBtaW51dGU6IHtcbiAgICBudW1lcmljOiBcIm1cIixcbiAgICBcIjItZGlnaXRcIjogXCJtbVwiXG4gIH0sXG4gIHNlY29uZDoge1xuICAgIG51bWVyaWM6IFwic1wiLFxuICAgIFwiMi1kaWdpdFwiOiBcInNzXCJcbiAgfSxcbiAgdGltZVpvbmVOYW1lOiB7XG4gICAgbG9uZzogXCJaWlpaWlwiLFxuICAgIHNob3J0OiBcIlpaWlwiXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHRva2VuRm9yUGFydChwYXJ0LCBsb2NhbGUsIGZvcm1hdE9wdHMpIHtcbiAgY29uc3Qge1xuICAgIHR5cGUsXG4gICAgdmFsdWVcbiAgfSA9IHBhcnQ7XG5cbiAgaWYgKHR5cGUgPT09IFwibGl0ZXJhbFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxpdGVyYWw6IHRydWUsXG4gICAgICB2YWw6IHZhbHVlXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IHN0eWxlID0gZm9ybWF0T3B0c1t0eXBlXTtcbiAgbGV0IHZhbCA9IHBhcnRUeXBlU3R5bGVUb1Rva2VuVmFsW3R5cGVdO1xuXG4gIGlmICh0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiKSB7XG4gICAgdmFsID0gdmFsW3N0eWxlXTtcbiAgfVxuXG4gIGlmICh2YWwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGl0ZXJhbDogZmFsc2UsXG4gICAgICB2YWxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gYnVpbGRSZWdleCh1bml0cykge1xuICBjb25zdCByZSA9IHVuaXRzLm1hcCh1ID0+IHUucmVnZXgpLnJlZHVjZSgoZiwgcikgPT4gYCR7Zn0oJHtyLnNvdXJjZX0pYCwgXCJcIik7XG4gIHJldHVybiBbYF4ke3JlfSRgLCB1bml0c107XG59XG5cbmZ1bmN0aW9uIG1hdGNoKGlucHV0LCByZWdleCwgaGFuZGxlcnMpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IGlucHV0Lm1hdGNoKHJlZ2V4KTtcblxuICBpZiAobWF0Y2hlcykge1xuICAgIGNvbnN0IGFsbCA9IHt9O1xuICAgIGxldCBtYXRjaEluZGV4ID0gMTtcblxuICAgIGZvciAoY29uc3QgaSBpbiBoYW5kbGVycykge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5KGhhbmRsZXJzLCBpKSkge1xuICAgICAgICBjb25zdCBoID0gaGFuZGxlcnNbaV0sXG4gICAgICAgICAgICAgIGdyb3VwcyA9IGguZ3JvdXBzID8gaC5ncm91cHMgKyAxIDogMTtcblxuICAgICAgICBpZiAoIWgubGl0ZXJhbCAmJiBoLnRva2VuKSB7XG4gICAgICAgICAgYWxsW2gudG9rZW4udmFsWzBdXSA9IGguZGVzZXIobWF0Y2hlcy5zbGljZShtYXRjaEluZGV4LCBtYXRjaEluZGV4ICsgZ3JvdXBzKSk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXRjaEluZGV4ICs9IGdyb3VwcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gW21hdGNoZXMsIGFsbF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFttYXRjaGVzLCB7fV07XG4gIH1cbn1cblxuZnVuY3Rpb24gZGF0ZVRpbWVGcm9tTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIGNvbnN0IHRvRmllbGQgPSB0b2tlbiA9PiB7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSBcIlNcIjpcbiAgICAgICAgcmV0dXJuIFwibWlsbGlzZWNvbmRcIjtcblxuICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgcmV0dXJuIFwic2Vjb25kXCI7XG5cbiAgICAgIGNhc2UgXCJtXCI6XG4gICAgICAgIHJldHVybiBcIm1pbnV0ZVwiO1xuXG4gICAgICBjYXNlIFwiaFwiOlxuICAgICAgY2FzZSBcIkhcIjpcbiAgICAgICAgcmV0dXJuIFwiaG91clwiO1xuXG4gICAgICBjYXNlIFwiZFwiOlxuICAgICAgICByZXR1cm4gXCJkYXlcIjtcblxuICAgICAgY2FzZSBcIm9cIjpcbiAgICAgICAgcmV0dXJuIFwib3JkaW5hbFwiO1xuXG4gICAgICBjYXNlIFwiTFwiOlxuICAgICAgY2FzZSBcIk1cIjpcbiAgICAgICAgcmV0dXJuIFwibW9udGhcIjtcblxuICAgICAgY2FzZSBcInlcIjpcbiAgICAgICAgcmV0dXJuIFwieWVhclwiO1xuXG4gICAgICBjYXNlIFwiRVwiOlxuICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgcmV0dXJuIFwid2Vla2RheVwiO1xuXG4gICAgICBjYXNlIFwiV1wiOlxuICAgICAgICByZXR1cm4gXCJ3ZWVrTnVtYmVyXCI7XG5cbiAgICAgIGNhc2UgXCJrXCI6XG4gICAgICAgIHJldHVybiBcIndlZWtZZWFyXCI7XG5cbiAgICAgIGNhc2UgXCJxXCI6XG4gICAgICAgIHJldHVybiBcInF1YXJ0ZXJcIjtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuXG4gIGxldCB6b25lID0gbnVsbDtcbiAgbGV0IHNwZWNpZmljT2Zmc2V0O1xuXG4gIGlmICghaXNVbmRlZmluZWQobWF0Y2hlcy56KSkge1xuICAgIHpvbmUgPSBJQU5BWm9uZS5jcmVhdGUobWF0Y2hlcy56KTtcbiAgfVxuXG4gIGlmICghaXNVbmRlZmluZWQobWF0Y2hlcy5aKSkge1xuICAgIGlmICghem9uZSkge1xuICAgICAgem9uZSA9IG5ldyBGaXhlZE9mZnNldFpvbmUobWF0Y2hlcy5aKTtcbiAgICB9XG5cbiAgICBzcGVjaWZpY09mZnNldCA9IG1hdGNoZXMuWjtcbiAgfVxuXG4gIGlmICghaXNVbmRlZmluZWQobWF0Y2hlcy5xKSkge1xuICAgIG1hdGNoZXMuTSA9IChtYXRjaGVzLnEgLSAxKSAqIDMgKyAxO1xuICB9XG5cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLmgpKSB7XG4gICAgaWYgKG1hdGNoZXMuaCA8IDEyICYmIG1hdGNoZXMuYSA9PT0gMSkge1xuICAgICAgbWF0Y2hlcy5oICs9IDEyO1xuICAgIH0gZWxzZSBpZiAobWF0Y2hlcy5oID09PSAxMiAmJiBtYXRjaGVzLmEgPT09IDApIHtcbiAgICAgIG1hdGNoZXMuaCA9IDA7XG4gICAgfVxuICB9XG5cbiAgaWYgKG1hdGNoZXMuRyA9PT0gMCAmJiBtYXRjaGVzLnkpIHtcbiAgICBtYXRjaGVzLnkgPSAtbWF0Y2hlcy55O1xuICB9XG5cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLnUpKSB7XG4gICAgbWF0Y2hlcy5TID0gcGFyc2VNaWxsaXMobWF0Y2hlcy51KTtcbiAgfVxuXG4gIGNvbnN0IHZhbHMgPSBPYmplY3Qua2V5cyhtYXRjaGVzKS5yZWR1Y2UoKHIsIGspID0+IHtcbiAgICBjb25zdCBmID0gdG9GaWVsZChrKTtcblxuICAgIGlmIChmKSB7XG4gICAgICByW2ZdID0gbWF0Y2hlc1trXTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfSwge30pO1xuICByZXR1cm4gW3ZhbHMsIHpvbmUsIHNwZWNpZmljT2Zmc2V0XTtcbn1cblxubGV0IGR1bW15RGF0ZVRpbWVDYWNoZSA9IG51bGw7XG5cbmZ1bmN0aW9uIGdldER1bW15RGF0ZVRpbWUoKSB7XG4gIGlmICghZHVtbXlEYXRlVGltZUNhY2hlKSB7XG4gICAgZHVtbXlEYXRlVGltZUNhY2hlID0gRGF0ZVRpbWUuZnJvbU1pbGxpcygxNTU1NTU1NTU1NTU1KTtcbiAgfVxuXG4gIHJldHVybiBkdW1teURhdGVUaW1lQ2FjaGU7XG59XG5cbmZ1bmN0aW9uIG1heWJlRXhwYW5kTWFjcm9Ub2tlbih0b2tlbiwgbG9jYWxlKSB7XG4gIGlmICh0b2tlbi5saXRlcmFsKSB7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9XG5cbiAgY29uc3QgZm9ybWF0T3B0cyA9IEZvcm1hdHRlci5tYWNyb1Rva2VuVG9Gb3JtYXRPcHRzKHRva2VuLnZhbCk7XG4gIGNvbnN0IHRva2VucyA9IGZvcm1hdE9wdHNUb1Rva2Vucyhmb3JtYXRPcHRzLCBsb2NhbGUpO1xuXG4gIGlmICh0b2tlbnMgPT0gbnVsbCB8fCB0b2tlbnMuaW5jbHVkZXModW5kZWZpbmVkKSkge1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnM7XG59XG5cbmZ1bmN0aW9uIGV4cGFuZE1hY3JvVG9rZW5zKHRva2VucywgbG9jYWxlKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0KC4uLnRva2Vucy5tYXAodCA9PiBtYXliZUV4cGFuZE1hY3JvVG9rZW4odCwgbG9jYWxlKSkpO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gZXhwbGFpbkZyb21Ub2tlbnMobG9jYWxlLCBpbnB1dCwgZm9ybWF0KSB7XG4gIGNvbnN0IHRva2VucyA9IGV4cGFuZE1hY3JvVG9rZW5zKEZvcm1hdHRlci5wYXJzZUZvcm1hdChmb3JtYXQpLCBsb2NhbGUpLFxuICAgICAgICB1bml0cyA9IHRva2Vucy5tYXAodCA9PiB1bml0Rm9yVG9rZW4odCwgbG9jYWxlKSksXG4gICAgICAgIGRpc3F1YWxpZnlpbmdVbml0ID0gdW5pdHMuZmluZCh0ID0+IHQuaW52YWxpZFJlYXNvbik7XG5cbiAgaWYgKGRpc3F1YWxpZnlpbmdVbml0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlucHV0LFxuICAgICAgdG9rZW5zLFxuICAgICAgaW52YWxpZFJlYXNvbjogZGlzcXVhbGlmeWluZ1VuaXQuaW52YWxpZFJlYXNvblxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgW3JlZ2V4U3RyaW5nLCBoYW5kbGVyc10gPSBidWlsZFJlZ2V4KHVuaXRzKSxcbiAgICAgICAgICByZWdleCA9IFJlZ0V4cChyZWdleFN0cmluZywgXCJpXCIpLFxuICAgICAgICAgIFtyYXdNYXRjaGVzLCBtYXRjaGVzXSA9IG1hdGNoKGlucHV0LCByZWdleCwgaGFuZGxlcnMpLFxuICAgICAgICAgIFtyZXN1bHQsIHpvbmUsIHNwZWNpZmljT2Zmc2V0XSA9IG1hdGNoZXMgPyBkYXRlVGltZUZyb21NYXRjaGVzKG1hdGNoZXMpIDogW251bGwsIG51bGwsIHVuZGVmaW5lZF07XG5cbiAgICBpZiAoaGFzT3duUHJvcGVydHkobWF0Y2hlcywgXCJhXCIpICYmIGhhc093blByb3BlcnR5KG1hdGNoZXMsIFwiSFwiKSkge1xuICAgICAgdGhyb3cgbmV3IENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yKFwiQ2FuJ3QgaW5jbHVkZSBtZXJpZGllbSB3aGVuIHNwZWNpZnlpbmcgMjQtaG91ciBmb3JtYXRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlucHV0LFxuICAgICAgdG9rZW5zLFxuICAgICAgcmVnZXgsXG4gICAgICByYXdNYXRjaGVzLFxuICAgICAgbWF0Y2hlcyxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHpvbmUsXG4gICAgICBzcGVjaWZpY09mZnNldFxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIHBhcnNlRnJvbVRva2Vucyhsb2NhbGUsIGlucHV0LCBmb3JtYXQpIHtcbiAgY29uc3Qge1xuICAgIHJlc3VsdCxcbiAgICB6b25lLFxuICAgIHNwZWNpZmljT2Zmc2V0LFxuICAgIGludmFsaWRSZWFzb25cbiAgfSA9IGV4cGxhaW5Gcm9tVG9rZW5zKGxvY2FsZSwgaW5wdXQsIGZvcm1hdCk7XG4gIHJldHVybiBbcmVzdWx0LCB6b25lLCBzcGVjaWZpY09mZnNldCwgaW52YWxpZFJlYXNvbl07XG59XG5mdW5jdGlvbiBmb3JtYXRPcHRzVG9Ub2tlbnMoZm9ybWF0T3B0cywgbG9jYWxlKSB7XG4gIGlmICghZm9ybWF0T3B0cykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgZm9ybWF0dGVyID0gRm9ybWF0dGVyLmNyZWF0ZShsb2NhbGUsIGZvcm1hdE9wdHMpO1xuICBjb25zdCBwYXJ0cyA9IGZvcm1hdHRlci5mb3JtYXREYXRlVGltZVBhcnRzKGdldER1bW15RGF0ZVRpbWUoKSk7XG4gIHJldHVybiBwYXJ0cy5tYXAocCA9PiB0b2tlbkZvclBhcnQocCwgbG9jYWxlLCBmb3JtYXRPcHRzKSk7XG59XG5cbmNvbnN0IG5vbkxlYXBMYWRkZXIgPSBbMCwgMzEsIDU5LCA5MCwgMTIwLCAxNTEsIDE4MSwgMjEyLCAyNDMsIDI3MywgMzA0LCAzMzRdLFxuICAgICAgbGVhcExhZGRlciA9IFswLCAzMSwgNjAsIDkxLCAxMjEsIDE1MiwgMTgyLCAyMTMsIDI0NCwgMjc0LCAzMDUsIDMzNV07XG5cbmZ1bmN0aW9uIHVuaXRPdXRPZlJhbmdlKHVuaXQsIHZhbHVlKSB7XG4gIHJldHVybiBuZXcgSW52YWxpZChcInVuaXQgb3V0IG9mIHJhbmdlXCIsIGB5b3Ugc3BlY2lmaWVkICR7dmFsdWV9IChvZiB0eXBlICR7dHlwZW9mIHZhbHVlfSkgYXMgYSAke3VuaXR9LCB3aGljaCBpcyBpbnZhbGlkYCk7XG59XG5cbmZ1bmN0aW9uIGRheU9mV2Vlayh5ZWFyLCBtb250aCwgZGF5KSB7XG4gIGNvbnN0IGQgPSBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCAtIDEsIGRheSkpO1xuXG4gIGlmICh5ZWFyIDwgMTAwICYmIHllYXIgPj0gMCkge1xuICAgIGQuc2V0VVRDRnVsbFllYXIoZC5nZXRVVENGdWxsWWVhcigpIC0gMTkwMCk7XG4gIH1cblxuICBjb25zdCBqcyA9IGQuZ2V0VVRDRGF5KCk7XG4gIHJldHVybiBqcyA9PT0gMCA/IDcgOiBqcztcbn1cblxuZnVuY3Rpb24gY29tcHV0ZU9yZGluYWwoeWVhciwgbW9udGgsIGRheSkge1xuICByZXR1cm4gZGF5ICsgKGlzTGVhcFllYXIoeWVhcikgPyBsZWFwTGFkZGVyIDogbm9uTGVhcExhZGRlcilbbW9udGggLSAxXTtcbn1cblxuZnVuY3Rpb24gdW5jb21wdXRlT3JkaW5hbCh5ZWFyLCBvcmRpbmFsKSB7XG4gIGNvbnN0IHRhYmxlID0gaXNMZWFwWWVhcih5ZWFyKSA/IGxlYXBMYWRkZXIgOiBub25MZWFwTGFkZGVyLFxuICAgICAgICBtb250aDAgPSB0YWJsZS5maW5kSW5kZXgoaSA9PiBpIDwgb3JkaW5hbCksXG4gICAgICAgIGRheSA9IG9yZGluYWwgLSB0YWJsZVttb250aDBdO1xuICByZXR1cm4ge1xuICAgIG1vbnRoOiBtb250aDAgKyAxLFxuICAgIGRheVxuICB9O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gZ3JlZ29yaWFuVG9XZWVrKGdyZWdPYmopIHtcbiAgY29uc3Qge1xuICAgIHllYXIsXG4gICAgbW9udGgsXG4gICAgZGF5XG4gIH0gPSBncmVnT2JqLFxuICAgICAgICBvcmRpbmFsID0gY29tcHV0ZU9yZGluYWwoeWVhciwgbW9udGgsIGRheSksXG4gICAgICAgIHdlZWtkYXkgPSBkYXlPZldlZWsoeWVhciwgbW9udGgsIGRheSk7XG4gIGxldCB3ZWVrTnVtYmVyID0gTWF0aC5mbG9vcigob3JkaW5hbCAtIHdlZWtkYXkgKyAxMCkgLyA3KSxcbiAgICAgIHdlZWtZZWFyO1xuXG4gIGlmICh3ZWVrTnVtYmVyIDwgMSkge1xuICAgIHdlZWtZZWFyID0geWVhciAtIDE7XG4gICAgd2Vla051bWJlciA9IHdlZWtzSW5XZWVrWWVhcih3ZWVrWWVhcik7XG4gIH0gZWxzZSBpZiAod2Vla051bWJlciA+IHdlZWtzSW5XZWVrWWVhcih5ZWFyKSkge1xuICAgIHdlZWtZZWFyID0geWVhciArIDE7XG4gICAgd2Vla051bWJlciA9IDE7XG4gIH0gZWxzZSB7XG4gICAgd2Vla1llYXIgPSB5ZWFyO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3ZWVrWWVhcixcbiAgICB3ZWVrTnVtYmVyLFxuICAgIHdlZWtkYXksXG4gICAgLi4udGltZU9iamVjdChncmVnT2JqKVxuICB9O1xufVxuZnVuY3Rpb24gd2Vla1RvR3JlZ29yaWFuKHdlZWtEYXRhKSB7XG4gIGNvbnN0IHtcbiAgICB3ZWVrWWVhcixcbiAgICB3ZWVrTnVtYmVyLFxuICAgIHdlZWtkYXlcbiAgfSA9IHdlZWtEYXRhLFxuICAgICAgICB3ZWVrZGF5T2ZKYW40ID0gZGF5T2ZXZWVrKHdlZWtZZWFyLCAxLCA0KSxcbiAgICAgICAgeWVhckluRGF5cyA9IGRheXNJblllYXIod2Vla1llYXIpO1xuICBsZXQgb3JkaW5hbCA9IHdlZWtOdW1iZXIgKiA3ICsgd2Vla2RheSAtIHdlZWtkYXlPZkphbjQgLSAzLFxuICAgICAgeWVhcjtcblxuICBpZiAob3JkaW5hbCA8IDEpIHtcbiAgICB5ZWFyID0gd2Vla1llYXIgLSAxO1xuICAgIG9yZGluYWwgKz0gZGF5c0luWWVhcih5ZWFyKTtcbiAgfSBlbHNlIGlmIChvcmRpbmFsID4geWVhckluRGF5cykge1xuICAgIHllYXIgPSB3ZWVrWWVhciArIDE7XG4gICAgb3JkaW5hbCAtPSBkYXlzSW5ZZWFyKHdlZWtZZWFyKTtcbiAgfSBlbHNlIHtcbiAgICB5ZWFyID0gd2Vla1llYXI7XG4gIH1cblxuICBjb25zdCB7XG4gICAgbW9udGgsXG4gICAgZGF5XG4gIH0gPSB1bmNvbXB1dGVPcmRpbmFsKHllYXIsIG9yZGluYWwpO1xuICByZXR1cm4ge1xuICAgIHllYXIsXG4gICAgbW9udGgsXG4gICAgZGF5LFxuICAgIC4uLnRpbWVPYmplY3Qod2Vla0RhdGEpXG4gIH07XG59XG5mdW5jdGlvbiBncmVnb3JpYW5Ub09yZGluYWwoZ3JlZ0RhdGEpIHtcbiAgY29uc3Qge1xuICAgIHllYXIsXG4gICAgbW9udGgsXG4gICAgZGF5XG4gIH0gPSBncmVnRGF0YTtcbiAgY29uc3Qgb3JkaW5hbCA9IGNvbXB1dGVPcmRpbmFsKHllYXIsIG1vbnRoLCBkYXkpO1xuICByZXR1cm4ge1xuICAgIHllYXIsXG4gICAgb3JkaW5hbCxcbiAgICAuLi50aW1lT2JqZWN0KGdyZWdEYXRhKVxuICB9O1xufVxuZnVuY3Rpb24gb3JkaW5hbFRvR3JlZ29yaWFuKG9yZGluYWxEYXRhKSB7XG4gIGNvbnN0IHtcbiAgICB5ZWFyLFxuICAgIG9yZGluYWxcbiAgfSA9IG9yZGluYWxEYXRhO1xuICBjb25zdCB7XG4gICAgbW9udGgsXG4gICAgZGF5XG4gIH0gPSB1bmNvbXB1dGVPcmRpbmFsKHllYXIsIG9yZGluYWwpO1xuICByZXR1cm4ge1xuICAgIHllYXIsXG4gICAgbW9udGgsXG4gICAgZGF5LFxuICAgIC4uLnRpbWVPYmplY3Qob3JkaW5hbERhdGEpXG4gIH07XG59XG5mdW5jdGlvbiBoYXNJbnZhbGlkV2Vla0RhdGEob2JqKSB7XG4gIGNvbnN0IHZhbGlkWWVhciA9IGlzSW50ZWdlcihvYmoud2Vla1llYXIpLFxuICAgICAgICB2YWxpZFdlZWsgPSBpbnRlZ2VyQmV0d2VlbihvYmoud2Vla051bWJlciwgMSwgd2Vla3NJbldlZWtZZWFyKG9iai53ZWVrWWVhcikpLFxuICAgICAgICB2YWxpZFdlZWtkYXkgPSBpbnRlZ2VyQmV0d2VlbihvYmoud2Vla2RheSwgMSwgNyk7XG5cbiAgaWYgKCF2YWxpZFllYXIpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJ3ZWVrWWVhclwiLCBvYmoud2Vla1llYXIpO1xuICB9IGVsc2UgaWYgKCF2YWxpZFdlZWspIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJ3ZWVrXCIsIG9iai53ZWVrKTtcbiAgfSBlbHNlIGlmICghdmFsaWRXZWVrZGF5KSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwid2Vla2RheVwiLCBvYmoud2Vla2RheSk7XG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBoYXNJbnZhbGlkT3JkaW5hbERhdGEob2JqKSB7XG4gIGNvbnN0IHZhbGlkWWVhciA9IGlzSW50ZWdlcihvYmoueWVhciksXG4gICAgICAgIHZhbGlkT3JkaW5hbCA9IGludGVnZXJCZXR3ZWVuKG9iai5vcmRpbmFsLCAxLCBkYXlzSW5ZZWFyKG9iai55ZWFyKSk7XG5cbiAgaWYgKCF2YWxpZFllYXIpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJ5ZWFyXCIsIG9iai55ZWFyKTtcbiAgfSBlbHNlIGlmICghdmFsaWRPcmRpbmFsKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwib3JkaW5hbFwiLCBvYmoub3JkaW5hbCk7XG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBoYXNJbnZhbGlkR3JlZ29yaWFuRGF0YShvYmopIHtcbiAgY29uc3QgdmFsaWRZZWFyID0gaXNJbnRlZ2VyKG9iai55ZWFyKSxcbiAgICAgICAgdmFsaWRNb250aCA9IGludGVnZXJCZXR3ZWVuKG9iai5tb250aCwgMSwgMTIpLFxuICAgICAgICB2YWxpZERheSA9IGludGVnZXJCZXR3ZWVuKG9iai5kYXksIDEsIGRheXNJbk1vbnRoKG9iai55ZWFyLCBvYmoubW9udGgpKTtcblxuICBpZiAoIXZhbGlkWWVhcikge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcInllYXJcIiwgb2JqLnllYXIpO1xuICB9IGVsc2UgaWYgKCF2YWxpZE1vbnRoKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwibW9udGhcIiwgb2JqLm1vbnRoKTtcbiAgfSBlbHNlIGlmICghdmFsaWREYXkpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJkYXlcIiwgb2JqLmRheSk7XG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBoYXNJbnZhbGlkVGltZURhdGEob2JqKSB7XG4gIGNvbnN0IHtcbiAgICBob3VyLFxuICAgIG1pbnV0ZSxcbiAgICBzZWNvbmQsXG4gICAgbWlsbGlzZWNvbmRcbiAgfSA9IG9iajtcbiAgY29uc3QgdmFsaWRIb3VyID0gaW50ZWdlckJldHdlZW4oaG91ciwgMCwgMjMpIHx8IGhvdXIgPT09IDI0ICYmIG1pbnV0ZSA9PT0gMCAmJiBzZWNvbmQgPT09IDAgJiYgbWlsbGlzZWNvbmQgPT09IDAsXG4gICAgICAgIHZhbGlkTWludXRlID0gaW50ZWdlckJldHdlZW4obWludXRlLCAwLCA1OSksXG4gICAgICAgIHZhbGlkU2Vjb25kID0gaW50ZWdlckJldHdlZW4oc2Vjb25kLCAwLCA1OSksXG4gICAgICAgIHZhbGlkTWlsbGlzZWNvbmQgPSBpbnRlZ2VyQmV0d2VlbihtaWxsaXNlY29uZCwgMCwgOTk5KTtcblxuICBpZiAoIXZhbGlkSG91cikge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcImhvdXJcIiwgaG91cik7XG4gIH0gZWxzZSBpZiAoIXZhbGlkTWludXRlKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwibWludXRlXCIsIG1pbnV0ZSk7XG4gIH0gZWxzZSBpZiAoIXZhbGlkU2Vjb25kKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwic2Vjb25kXCIsIHNlY29uZCk7XG4gIH0gZWxzZSBpZiAoIXZhbGlkTWlsbGlzZWNvbmQpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJtaWxsaXNlY29uZFwiLCBtaWxsaXNlY29uZCk7XG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XG59XG5cbmNvbnN0IElOVkFMSUQgPSBcIkludmFsaWQgRGF0ZVRpbWVcIjtcbmNvbnN0IE1BWF9EQVRFID0gOC42NGUxNTtcblxuZnVuY3Rpb24gdW5zdXBwb3J0ZWRab25lKHpvbmUpIHtcbiAgcmV0dXJuIG5ldyBJbnZhbGlkKFwidW5zdXBwb3J0ZWQgem9uZVwiLCBgdGhlIHpvbmUgXCIke3pvbmUubmFtZX1cIiBpcyBub3Qgc3VwcG9ydGVkYCk7XG59IC8vIHdlIGNhY2hlIHdlZWsgZGF0YSBvbiB0aGUgRFQgb2JqZWN0IGFuZCB0aGlzIGludGVybWVkaWF0ZXMgdGhlIGNhY2hlXG5cblxuZnVuY3Rpb24gcG9zc2libHlDYWNoZWRXZWVrRGF0YShkdCkge1xuICBpZiAoZHQud2Vla0RhdGEgPT09IG51bGwpIHtcbiAgICBkdC53ZWVrRGF0YSA9IGdyZWdvcmlhblRvV2VlayhkdC5jKTtcbiAgfVxuXG4gIHJldHVybiBkdC53ZWVrRGF0YTtcbn0gLy8gY2xvbmUgcmVhbGx5IG1lYW5zLCBcIm1ha2UgYSBuZXcgb2JqZWN0IHdpdGggdGhlc2UgbW9kaWZpY2F0aW9uc1wiLiBhbGwgXCJzZXR0ZXJzXCIgcmVhbGx5IHVzZSB0aGlzXG4vLyB0byBjcmVhdGUgYSBuZXcgb2JqZWN0IHdoaWxlIG9ubHkgY2hhbmdpbmcgc29tZSBvZiB0aGUgcHJvcGVydGllc1xuXG5cbmZ1bmN0aW9uIGNsb25lKGluc3QsIGFsdHMpIHtcbiAgY29uc3QgY3VycmVudCA9IHtcbiAgICB0czogaW5zdC50cyxcbiAgICB6b25lOiBpbnN0LnpvbmUsXG4gICAgYzogaW5zdC5jLFxuICAgIG86IGluc3QubyxcbiAgICBsb2M6IGluc3QubG9jLFxuICAgIGludmFsaWQ6IGluc3QuaW52YWxpZFxuICB9O1xuICByZXR1cm4gbmV3IERhdGVUaW1lKHsgLi4uY3VycmVudCxcbiAgICAuLi5hbHRzLFxuICAgIG9sZDogY3VycmVudFxuICB9KTtcbn0gLy8gZmluZCB0aGUgcmlnaHQgb2Zmc2V0IGEgZ2l2ZW4gbG9jYWwgdGltZS4gVGhlIG8gaW5wdXQgaXMgb3VyIGd1ZXNzLCB3aGljaCBkZXRlcm1pbmVzIHdoaWNoXG4vLyBvZmZzZXQgd2UnbGwgcGljayBpbiBhbWJpZ3VvdXMgY2FzZXMgKGUuZy4gdGhlcmUgYXJlIHR3byAzIEFNcyBiL2MgRmFsbGJhY2sgRFNUKVxuXG5cbmZ1bmN0aW9uIGZpeE9mZnNldChsb2NhbFRTLCBvLCB0eikge1xuICAvLyBPdXIgVVRDIHRpbWUgaXMganVzdCBhIGd1ZXNzIGJlY2F1c2Ugb3VyIG9mZnNldCBpcyBqdXN0IGEgZ3Vlc3NcbiAgbGV0IHV0Y0d1ZXNzID0gbG9jYWxUUyAtIG8gKiA2MCAqIDEwMDA7IC8vIFRlc3Qgd2hldGhlciB0aGUgem9uZSBtYXRjaGVzIHRoZSBvZmZzZXQgZm9yIHRoaXMgdHNcblxuICBjb25zdCBvMiA9IHR6Lm9mZnNldCh1dGNHdWVzcyk7IC8vIElmIHNvLCBvZmZzZXQgZGlkbid0IGNoYW5nZSBhbmQgd2UncmUgZG9uZVxuXG4gIGlmIChvID09PSBvMikge1xuICAgIHJldHVybiBbdXRjR3Vlc3MsIG9dO1xuICB9IC8vIElmIG5vdCwgY2hhbmdlIHRoZSB0cyBieSB0aGUgZGlmZmVyZW5jZSBpbiB0aGUgb2Zmc2V0XG5cblxuICB1dGNHdWVzcyAtPSAobzIgLSBvKSAqIDYwICogMTAwMDsgLy8gSWYgdGhhdCBnaXZlcyB1cyB0aGUgbG9jYWwgdGltZSB3ZSB3YW50LCB3ZSdyZSBkb25lXG5cbiAgY29uc3QgbzMgPSB0ei5vZmZzZXQodXRjR3Vlc3MpO1xuXG4gIGlmIChvMiA9PT0gbzMpIHtcbiAgICByZXR1cm4gW3V0Y0d1ZXNzLCBvMl07XG4gIH0gLy8gSWYgaXQncyBkaWZmZXJlbnQsIHdlJ3JlIGluIGEgaG9sZSB0aW1lLiBUaGUgb2Zmc2V0IGhhcyBjaGFuZ2VkLCBidXQgdGhlIHdlIGRvbid0IGFkanVzdCB0aGUgdGltZVxuXG5cbiAgcmV0dXJuIFtsb2NhbFRTIC0gTWF0aC5taW4obzIsIG8zKSAqIDYwICogMTAwMCwgTWF0aC5tYXgobzIsIG8zKV07XG59IC8vIGNvbnZlcnQgYW4gZXBvY2ggdGltZXN0YW1wIGludG8gYSBjYWxlbmRhciBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gb2Zmc2V0XG5cblxuZnVuY3Rpb24gdHNUb09iaih0cywgb2Zmc2V0KSB7XG4gIHRzICs9IG9mZnNldCAqIDYwICogMTAwMDtcbiAgY29uc3QgZCA9IG5ldyBEYXRlKHRzKTtcbiAgcmV0dXJuIHtcbiAgICB5ZWFyOiBkLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgbW9udGg6IGQuZ2V0VVRDTW9udGgoKSArIDEsXG4gICAgZGF5OiBkLmdldFVUQ0RhdGUoKSxcbiAgICBob3VyOiBkLmdldFVUQ0hvdXJzKCksXG4gICAgbWludXRlOiBkLmdldFVUQ01pbnV0ZXMoKSxcbiAgICBzZWNvbmQ6IGQuZ2V0VVRDU2Vjb25kcygpLFxuICAgIG1pbGxpc2Vjb25kOiBkLmdldFVUQ01pbGxpc2Vjb25kcygpXG4gIH07XG59IC8vIGNvbnZlcnQgYSBjYWxlbmRhciBvYmplY3QgdG8gYSBlcG9jaCB0aW1lc3RhbXBcblxuXG5mdW5jdGlvbiBvYmpUb1RTKG9iaiwgb2Zmc2V0LCB6b25lKSB7XG4gIHJldHVybiBmaXhPZmZzZXQob2JqVG9Mb2NhbFRTKG9iaiksIG9mZnNldCwgem9uZSk7XG59IC8vIGNyZWF0ZSBhIG5ldyBEVCBpbnN0YW5jZSBieSBhZGRpbmcgYSBkdXJhdGlvbiwgYWRqdXN0aW5nIGZvciBEU1RzXG5cblxuZnVuY3Rpb24gYWRqdXN0VGltZShpbnN0LCBkdXIpIHtcbiAgY29uc3Qgb1ByZSA9IGluc3QubyxcbiAgICAgICAgeWVhciA9IGluc3QuYy55ZWFyICsgTWF0aC50cnVuYyhkdXIueWVhcnMpLFxuICAgICAgICBtb250aCA9IGluc3QuYy5tb250aCArIE1hdGgudHJ1bmMoZHVyLm1vbnRocykgKyBNYXRoLnRydW5jKGR1ci5xdWFydGVycykgKiAzLFxuICAgICAgICBjID0geyAuLi5pbnN0LmMsXG4gICAgeWVhcixcbiAgICBtb250aCxcbiAgICBkYXk6IE1hdGgubWluKGluc3QuYy5kYXksIGRheXNJbk1vbnRoKHllYXIsIG1vbnRoKSkgKyBNYXRoLnRydW5jKGR1ci5kYXlzKSArIE1hdGgudHJ1bmMoZHVyLndlZWtzKSAqIDdcbiAgfSxcbiAgICAgICAgbWlsbGlzVG9BZGQgPSBEdXJhdGlvbi5mcm9tT2JqZWN0KHtcbiAgICB5ZWFyczogZHVyLnllYXJzIC0gTWF0aC50cnVuYyhkdXIueWVhcnMpLFxuICAgIHF1YXJ0ZXJzOiBkdXIucXVhcnRlcnMgLSBNYXRoLnRydW5jKGR1ci5xdWFydGVycyksXG4gICAgbW9udGhzOiBkdXIubW9udGhzIC0gTWF0aC50cnVuYyhkdXIubW9udGhzKSxcbiAgICB3ZWVrczogZHVyLndlZWtzIC0gTWF0aC50cnVuYyhkdXIud2Vla3MpLFxuICAgIGRheXM6IGR1ci5kYXlzIC0gTWF0aC50cnVuYyhkdXIuZGF5cyksXG4gICAgaG91cnM6IGR1ci5ob3VycyxcbiAgICBtaW51dGVzOiBkdXIubWludXRlcyxcbiAgICBzZWNvbmRzOiBkdXIuc2Vjb25kcyxcbiAgICBtaWxsaXNlY29uZHM6IGR1ci5taWxsaXNlY29uZHNcbiAgfSkuYXMoXCJtaWxsaXNlY29uZHNcIiksXG4gICAgICAgIGxvY2FsVFMgPSBvYmpUb0xvY2FsVFMoYyk7XG4gIGxldCBbdHMsIG9dID0gZml4T2Zmc2V0KGxvY2FsVFMsIG9QcmUsIGluc3Quem9uZSk7XG5cbiAgaWYgKG1pbGxpc1RvQWRkICE9PSAwKSB7XG4gICAgdHMgKz0gbWlsbGlzVG9BZGQ7IC8vIHRoYXQgY291bGQgaGF2ZSBjaGFuZ2VkIHRoZSBvZmZzZXQgYnkgZ29pbmcgb3ZlciBhIERTVCwgYnV0IHdlIHdhbnQgdG8ga2VlcCB0aGUgdHMgdGhlIHNhbWVcblxuICAgIG8gPSBpbnN0LnpvbmUub2Zmc2V0KHRzKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHMsXG4gICAgb1xuICB9O1xufSAvLyBoZWxwZXIgdXNlZnVsIGluIHR1cm5pbmcgdGhlIHJlc3VsdHMgb2YgcGFyc2luZyBpbnRvIHJlYWwgZGF0ZXNcbi8vIGJ5IGhhbmRsaW5nIHRoZSB6b25lIG9wdGlvbnNcblxuXG5mdW5jdGlvbiBwYXJzZURhdGFUb0RhdGVUaW1lKHBhcnNlZCwgcGFyc2VkWm9uZSwgb3B0cywgZm9ybWF0LCB0ZXh0LCBzcGVjaWZpY09mZnNldCkge1xuICBjb25zdCB7XG4gICAgc2V0Wm9uZSxcbiAgICB6b25lXG4gIH0gPSBvcHRzO1xuXG4gIGlmIChwYXJzZWQgJiYgT2JqZWN0LmtleXMocGFyc2VkKS5sZW5ndGggIT09IDApIHtcbiAgICBjb25zdCBpbnRlcnByZXRhdGlvblpvbmUgPSBwYXJzZWRab25lIHx8IHpvbmUsXG4gICAgICAgICAgaW5zdCA9IERhdGVUaW1lLmZyb21PYmplY3QocGFyc2VkLCB7IC4uLm9wdHMsXG4gICAgICB6b25lOiBpbnRlcnByZXRhdGlvblpvbmUsXG4gICAgICBzcGVjaWZpY09mZnNldFxuICAgIH0pO1xuICAgIHJldHVybiBzZXRab25lID8gaW5zdCA6IGluc3Quc2V0Wm9uZSh6b25lKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChuZXcgSW52YWxpZChcInVucGFyc2FibGVcIiwgYHRoZSBpbnB1dCBcIiR7dGV4dH1cIiBjYW4ndCBiZSBwYXJzZWQgYXMgJHtmb3JtYXR9YCkpO1xuICB9XG59IC8vIGlmIHlvdSB3YW50IHRvIG91dHB1dCBhIHRlY2huaWNhbCBmb3JtYXQgKGUuZy4gUkZDIDI4MjIpLCB0aGlzIGhlbHBlclxuLy8gaGVscHMgaGFuZGxlIHRoZSBkZXRhaWxzXG5cblxuZnVuY3Rpb24gdG9UZWNoRm9ybWF0KGR0LCBmb3JtYXQsIGFsbG93WiA9IHRydWUpIHtcbiAgcmV0dXJuIGR0LmlzVmFsaWQgPyBGb3JtYXR0ZXIuY3JlYXRlKExvY2FsZS5jcmVhdGUoXCJlbi1VU1wiKSwge1xuICAgIGFsbG93WixcbiAgICBmb3JjZVNpbXBsZTogdHJ1ZVxuICB9KS5mb3JtYXREYXRlVGltZUZyb21TdHJpbmcoZHQsIGZvcm1hdCkgOiBudWxsO1xufVxuXG5mdW5jdGlvbiB0b0lTT0RhdGUobywgZXh0ZW5kZWQpIHtcbiAgY29uc3QgbG9uZ0Zvcm1hdCA9IG8uYy55ZWFyID4gOTk5OSB8fCBvLmMueWVhciA8IDA7XG4gIGxldCBjID0gXCJcIjtcbiAgaWYgKGxvbmdGb3JtYXQgJiYgby5jLnllYXIgPj0gMCkgYyArPSBcIitcIjtcbiAgYyArPSBwYWRTdGFydChvLmMueWVhciwgbG9uZ0Zvcm1hdCA/IDYgOiA0KTtcblxuICBpZiAoZXh0ZW5kZWQpIHtcbiAgICBjICs9IFwiLVwiO1xuICAgIGMgKz0gcGFkU3RhcnQoby5jLm1vbnRoKTtcbiAgICBjICs9IFwiLVwiO1xuICAgIGMgKz0gcGFkU3RhcnQoby5jLmRheSk7XG4gIH0gZWxzZSB7XG4gICAgYyArPSBwYWRTdGFydChvLmMubW9udGgpO1xuICAgIGMgKz0gcGFkU3RhcnQoby5jLmRheSk7XG4gIH1cblxuICByZXR1cm4gYztcbn1cblxuZnVuY3Rpb24gdG9JU09UaW1lKG8sIGV4dGVuZGVkLCBzdXBwcmVzc1NlY29uZHMsIHN1cHByZXNzTWlsbGlzZWNvbmRzLCBpbmNsdWRlT2Zmc2V0LCBleHRlbmRlZFpvbmUpIHtcbiAgbGV0IGMgPSBwYWRTdGFydChvLmMuaG91cik7XG5cbiAgaWYgKGV4dGVuZGVkKSB7XG4gICAgYyArPSBcIjpcIjtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5taW51dGUpO1xuXG4gICAgaWYgKG8uYy5zZWNvbmQgIT09IDAgfHwgIXN1cHByZXNzU2Vjb25kcykge1xuICAgICAgYyArPSBcIjpcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYyArPSBwYWRTdGFydChvLmMubWludXRlKTtcbiAgfVxuXG4gIGlmIChvLmMuc2Vjb25kICE9PSAwIHx8ICFzdXBwcmVzc1NlY29uZHMpIHtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5zZWNvbmQpO1xuXG4gICAgaWYgKG8uYy5taWxsaXNlY29uZCAhPT0gMCB8fCAhc3VwcHJlc3NNaWxsaXNlY29uZHMpIHtcbiAgICAgIGMgKz0gXCIuXCI7XG4gICAgICBjICs9IHBhZFN0YXJ0KG8uYy5taWxsaXNlY29uZCwgMyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGluY2x1ZGVPZmZzZXQpIHtcbiAgICBpZiAoby5pc09mZnNldEZpeGVkICYmIG8ub2Zmc2V0ID09PSAwICYmICFleHRlbmRlZFpvbmUpIHtcbiAgICAgIGMgKz0gXCJaXCI7XG4gICAgfSBlbHNlIGlmIChvLm8gPCAwKSB7XG4gICAgICBjICs9IFwiLVwiO1xuICAgICAgYyArPSBwYWRTdGFydChNYXRoLnRydW5jKC1vLm8gLyA2MCkpO1xuICAgICAgYyArPSBcIjpcIjtcbiAgICAgIGMgKz0gcGFkU3RhcnQoTWF0aC50cnVuYygtby5vICUgNjApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYyArPSBcIitcIjtcbiAgICAgIGMgKz0gcGFkU3RhcnQoTWF0aC50cnVuYyhvLm8gLyA2MCkpO1xuICAgICAgYyArPSBcIjpcIjtcbiAgICAgIGMgKz0gcGFkU3RhcnQoTWF0aC50cnVuYyhvLm8gJSA2MCkpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChleHRlbmRlZFpvbmUpIHtcbiAgICBjICs9IFwiW1wiICsgby56b25lLmlhbmFOYW1lICsgXCJdXCI7XG4gIH1cblxuICByZXR1cm4gYztcbn0gLy8gZGVmYXVsdHMgZm9yIHVuc3BlY2lmaWVkIHVuaXRzIGluIHRoZSBzdXBwb3J0ZWQgY2FsZW5kYXJzXG5cblxuY29uc3QgZGVmYXVsdFVuaXRWYWx1ZXMgPSB7XG4gIG1vbnRoOiAxLFxuICBkYXk6IDEsXG4gIGhvdXI6IDAsXG4gIG1pbnV0ZTogMCxcbiAgc2Vjb25kOiAwLFxuICBtaWxsaXNlY29uZDogMFxufSxcbiAgICAgIGRlZmF1bHRXZWVrVW5pdFZhbHVlcyA9IHtcbiAgd2Vla051bWJlcjogMSxcbiAgd2Vla2RheTogMSxcbiAgaG91cjogMCxcbiAgbWludXRlOiAwLFxuICBzZWNvbmQ6IDAsXG4gIG1pbGxpc2Vjb25kOiAwXG59LFxuICAgICAgZGVmYXVsdE9yZGluYWxVbml0VmFsdWVzID0ge1xuICBvcmRpbmFsOiAxLFxuICBob3VyOiAwLFxuICBtaW51dGU6IDAsXG4gIHNlY29uZDogMCxcbiAgbWlsbGlzZWNvbmQ6IDBcbn07IC8vIFVuaXRzIGluIHRoZSBzdXBwb3J0ZWQgY2FsZW5kYXJzLCBzb3J0ZWQgYnkgYmlnbmVzc1xuXG5jb25zdCBvcmRlcmVkVW5pdHMgPSBbXCJ5ZWFyXCIsIFwibW9udGhcIiwgXCJkYXlcIiwgXCJob3VyXCIsIFwibWludXRlXCIsIFwic2Vjb25kXCIsIFwibWlsbGlzZWNvbmRcIl0sXG4gICAgICBvcmRlcmVkV2Vla1VuaXRzID0gW1wid2Vla1llYXJcIiwgXCJ3ZWVrTnVtYmVyXCIsIFwid2Vla2RheVwiLCBcImhvdXJcIiwgXCJtaW51dGVcIiwgXCJzZWNvbmRcIiwgXCJtaWxsaXNlY29uZFwiXSxcbiAgICAgIG9yZGVyZWRPcmRpbmFsVW5pdHMgPSBbXCJ5ZWFyXCIsIFwib3JkaW5hbFwiLCBcImhvdXJcIiwgXCJtaW51dGVcIiwgXCJzZWNvbmRcIiwgXCJtaWxsaXNlY29uZFwiXTsgLy8gc3RhbmRhcmRpemUgY2FzZSBhbmQgcGx1cmFsaXR5IGluIHVuaXRzXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXQodW5pdCkge1xuICBjb25zdCBub3JtYWxpemVkID0ge1xuICAgIHllYXI6IFwieWVhclwiLFxuICAgIHllYXJzOiBcInllYXJcIixcbiAgICBtb250aDogXCJtb250aFwiLFxuICAgIG1vbnRoczogXCJtb250aFwiLFxuICAgIGRheTogXCJkYXlcIixcbiAgICBkYXlzOiBcImRheVwiLFxuICAgIGhvdXI6IFwiaG91clwiLFxuICAgIGhvdXJzOiBcImhvdXJcIixcbiAgICBtaW51dGU6IFwibWludXRlXCIsXG4gICAgbWludXRlczogXCJtaW51dGVcIixcbiAgICBxdWFydGVyOiBcInF1YXJ0ZXJcIixcbiAgICBxdWFydGVyczogXCJxdWFydGVyXCIsXG4gICAgc2Vjb25kOiBcInNlY29uZFwiLFxuICAgIHNlY29uZHM6IFwic2Vjb25kXCIsXG4gICAgbWlsbGlzZWNvbmQ6IFwibWlsbGlzZWNvbmRcIixcbiAgICBtaWxsaXNlY29uZHM6IFwibWlsbGlzZWNvbmRcIixcbiAgICB3ZWVrZGF5OiBcIndlZWtkYXlcIixcbiAgICB3ZWVrZGF5czogXCJ3ZWVrZGF5XCIsXG4gICAgd2Vla251bWJlcjogXCJ3ZWVrTnVtYmVyXCIsXG4gICAgd2Vla3NudW1iZXI6IFwid2Vla051bWJlclwiLFxuICAgIHdlZWtudW1iZXJzOiBcIndlZWtOdW1iZXJcIixcbiAgICB3ZWVreWVhcjogXCJ3ZWVrWWVhclwiLFxuICAgIHdlZWt5ZWFyczogXCJ3ZWVrWWVhclwiLFxuICAgIG9yZGluYWw6IFwib3JkaW5hbFwiXG4gIH1bdW5pdC50b0xvd2VyQ2FzZSgpXTtcbiAgaWYgKCFub3JtYWxpemVkKSB0aHJvdyBuZXcgSW52YWxpZFVuaXRFcnJvcih1bml0KTtcbiAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG59IC8vIHRoaXMgaXMgYSBkdW1iZWQgZG93biB2ZXJzaW9uIG9mIGZyb21PYmplY3QoKSB0aGF0IHJ1bnMgYWJvdXQgNjAlIGZhc3RlclxuLy8gYnV0IGRvZXNuJ3QgZG8gYW55IHZhbGlkYXRpb24sIG1ha2VzIGEgYnVuY2ggb2YgYXNzdW1wdGlvbnMgYWJvdXQgd2hhdCB1bml0c1xuLy8gYXJlIHByZXNlbnQsIGFuZCBzbyBvbi5cblxuXG5mdW5jdGlvbiBxdWlja0RUKG9iaiwgb3B0cykge1xuICBjb25zdCB6b25lID0gbm9ybWFsaXplWm9uZShvcHRzLnpvbmUsIFNldHRpbmdzLmRlZmF1bHRab25lKSxcbiAgICAgICAgbG9jID0gTG9jYWxlLmZyb21PYmplY3Qob3B0cyksXG4gICAgICAgIHRzTm93ID0gU2V0dGluZ3Mubm93KCk7XG4gIGxldCB0cywgbzsgLy8gYXNzdW1lIHdlIGhhdmUgdGhlIGhpZ2hlci1vcmRlciB1bml0c1xuXG4gIGlmICghaXNVbmRlZmluZWQob2JqLnllYXIpKSB7XG4gICAgZm9yIChjb25zdCB1IG9mIG9yZGVyZWRVbml0cykge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKG9ialt1XSkpIHtcbiAgICAgICAgb2JqW3VdID0gZGVmYXVsdFVuaXRWYWx1ZXNbdV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaW52YWxpZCA9IGhhc0ludmFsaWRHcmVnb3JpYW5EYXRhKG9iaikgfHwgaGFzSW52YWxpZFRpbWVEYXRhKG9iaik7XG5cbiAgICBpZiAoaW52YWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoaW52YWxpZCk7XG4gICAgfVxuXG4gICAgY29uc3Qgb2Zmc2V0UHJvdmlzID0gem9uZS5vZmZzZXQodHNOb3cpO1xuICAgIFt0cywgb10gPSBvYmpUb1RTKG9iaiwgb2Zmc2V0UHJvdmlzLCB6b25lKTtcbiAgfSBlbHNlIHtcbiAgICB0cyA9IHRzTm93O1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEYXRlVGltZSh7XG4gICAgdHMsXG4gICAgem9uZSxcbiAgICBsb2MsXG4gICAgb1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZGlmZlJlbGF0aXZlKHN0YXJ0LCBlbmQsIG9wdHMpIHtcbiAgY29uc3Qgcm91bmQgPSBpc1VuZGVmaW5lZChvcHRzLnJvdW5kKSA/IHRydWUgOiBvcHRzLnJvdW5kLFxuICAgICAgICBmb3JtYXQgPSAoYywgdW5pdCkgPT4ge1xuICAgIGMgPSByb3VuZFRvKGMsIHJvdW5kIHx8IG9wdHMuY2FsZW5kYXJ5ID8gMCA6IDIsIHRydWUpO1xuICAgIGNvbnN0IGZvcm1hdHRlciA9IGVuZC5sb2MuY2xvbmUob3B0cykucmVsRm9ybWF0dGVyKG9wdHMpO1xuICAgIHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0KGMsIHVuaXQpO1xuICB9LFxuICAgICAgICBkaWZmZXIgPSB1bml0ID0+IHtcbiAgICBpZiAob3B0cy5jYWxlbmRhcnkpIHtcbiAgICAgIGlmICghZW5kLmhhc1NhbWUoc3RhcnQsIHVuaXQpKSB7XG4gICAgICAgIHJldHVybiBlbmQuc3RhcnRPZih1bml0KS5kaWZmKHN0YXJ0LnN0YXJ0T2YodW5pdCksIHVuaXQpLmdldCh1bml0KTtcbiAgICAgIH0gZWxzZSByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVuZC5kaWZmKHN0YXJ0LCB1bml0KS5nZXQodW5pdCk7XG4gICAgfVxuICB9O1xuXG4gIGlmIChvcHRzLnVuaXQpIHtcbiAgICByZXR1cm4gZm9ybWF0KGRpZmZlcihvcHRzLnVuaXQpLCBvcHRzLnVuaXQpO1xuICB9XG5cbiAgZm9yIChjb25zdCB1bml0IG9mIG9wdHMudW5pdHMpIHtcbiAgICBjb25zdCBjb3VudCA9IGRpZmZlcih1bml0KTtcblxuICAgIGlmIChNYXRoLmFicyhjb3VudCkgPj0gMSkge1xuICAgICAgcmV0dXJuIGZvcm1hdChjb3VudCwgdW5pdCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvcm1hdChzdGFydCA+IGVuZCA/IC0wIDogMCwgb3B0cy51bml0c1tvcHRzLnVuaXRzLmxlbmd0aCAtIDFdKTtcbn1cblxuZnVuY3Rpb24gbGFzdE9wdHMoYXJnTGlzdCkge1xuICBsZXQgb3B0cyA9IHt9LFxuICAgICAgYXJncztcblxuICBpZiAoYXJnTGlzdC5sZW5ndGggPiAwICYmIHR5cGVvZiBhcmdMaXN0W2FyZ0xpc3QubGVuZ3RoIC0gMV0gPT09IFwib2JqZWN0XCIpIHtcbiAgICBvcHRzID0gYXJnTGlzdFthcmdMaXN0Lmxlbmd0aCAtIDFdO1xuICAgIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ0xpc3QpLnNsaWNlKDAsIGFyZ0xpc3QubGVuZ3RoIC0gMSk7XG4gIH0gZWxzZSB7XG4gICAgYXJncyA9IEFycmF5LmZyb20oYXJnTGlzdCk7XG4gIH1cblxuICByZXR1cm4gW29wdHMsIGFyZ3NdO1xufVxuLyoqXG4gKiBBIERhdGVUaW1lIGlzIGFuIGltbXV0YWJsZSBkYXRhIHN0cnVjdHVyZSByZXByZXNlbnRpbmcgYSBzcGVjaWZpYyBkYXRlIGFuZCB0aW1lIGFuZCBhY2NvbXBhbnlpbmcgbWV0aG9kcy4gSXQgY29udGFpbnMgY2xhc3MgYW5kIGluc3RhbmNlIG1ldGhvZHMgZm9yIGNyZWF0aW5nLCBwYXJzaW5nLCBpbnRlcnJvZ2F0aW5nLCB0cmFuc2Zvcm1pbmcsIGFuZCBmb3JtYXR0aW5nIHRoZW0uXG4gKlxuICogQSBEYXRlVGltZSBjb21wcmlzZXMgb2Y6XG4gKiAqIEEgdGltZXN0YW1wLiBFYWNoIERhdGVUaW1lIGluc3RhbmNlIHJlZmVycyB0byBhIHNwZWNpZmljIG1pbGxpc2Vjb25kIG9mIHRoZSBVbml4IGVwb2NoLlxuICogKiBBIHRpbWUgem9uZS4gRWFjaCBpbnN0YW5jZSBpcyBjb25zaWRlcmVkIGluIHRoZSBjb250ZXh0IG9mIGEgc3BlY2lmaWMgem9uZSAoYnkgZGVmYXVsdCB0aGUgbG9jYWwgc3lzdGVtJ3Mgem9uZSkuXG4gKiAqIENvbmZpZ3VyYXRpb24gcHJvcGVydGllcyB0aGF0IGVmZmVjdCBob3cgb3V0cHV0IHN0cmluZ3MgYXJlIGZvcm1hdHRlZCwgc3VjaCBhcyBgbG9jYWxlYCwgYG51bWJlcmluZ1N5c3RlbWAsIGFuZCBgb3V0cHV0Q2FsZW5kYXJgLlxuICpcbiAqIEhlcmUgaXMgYSBicmllZiBvdmVydmlldyBvZiB0aGUgbW9zdCBjb21tb25seSB1c2VkIGZ1bmN0aW9uYWxpdHkgaXQgcHJvdmlkZXM6XG4gKlxuICogKiAqKkNyZWF0aW9uKio6IFRvIGNyZWF0ZSBhIERhdGVUaW1lIGZyb20gaXRzIGNvbXBvbmVudHMsIHVzZSBvbmUgb2YgaXRzIGZhY3RvcnkgY2xhc3MgbWV0aG9kczoge0BsaW5rIERhdGVUaW1lI2xvY2FsfSwge0BsaW5rIERhdGVUaW1lI3V0Y30sIGFuZCAobW9zdCBmbGV4aWJseSkge0BsaW5rIERhdGVUaW1lI2Zyb21PYmplY3R9LiBUbyBjcmVhdGUgb25lIGZyb20gYSBzdGFuZGFyZCBzdHJpbmcgZm9ybWF0LCB1c2Uge0BsaW5rIERhdGVUaW1lI2Zyb21JU099LCB7QGxpbmsgRGF0ZVRpbWUjZnJvbUhUVFB9LCBhbmQge0BsaW5rIERhdGVUaW1lI2Zyb21SRkMyODIyfS4gVG8gY3JlYXRlIG9uZSBmcm9tIGEgY3VzdG9tIHN0cmluZyBmb3JtYXQsIHVzZSB7QGxpbmsgRGF0ZVRpbWUjZnJvbUZvcm1hdH0uIFRvIGNyZWF0ZSBvbmUgZnJvbSBhIG5hdGl2ZSBKUyBkYXRlLCB1c2Uge0BsaW5rIERhdGVUaW1lI2Zyb21KU0RhdGV9LlxuICogKiAqKkdyZWdvcmlhbiBjYWxlbmRhciBhbmQgdGltZSoqOiBUbyBleGFtaW5lIHRoZSBHcmVnb3JpYW4gcHJvcGVydGllcyBvZiBhIERhdGVUaW1lIGluZGl2aWR1YWxseSAoaS5lIGFzIG9wcG9zZWQgdG8gY29sbGVjdGl2ZWx5IHRocm91Z2gge0BsaW5rIERhdGVUaW1lI3RvT2JqZWN0fSksIHVzZSB0aGUge0BsaW5rIERhdGVUaW1lI3llYXJ9LCB7QGxpbmsgRGF0ZVRpbWUjbW9udGh9LFxuICoge0BsaW5rIERhdGVUaW1lI2RheX0sIHtAbGluayBEYXRlVGltZSNob3VyfSwge0BsaW5rIERhdGVUaW1lI21pbnV0ZX0sIHtAbGluayBEYXRlVGltZSNzZWNvbmR9LCB7QGxpbmsgRGF0ZVRpbWUjbWlsbGlzZWNvbmR9IGFjY2Vzc29ycy5cbiAqICogKipXZWVrIGNhbGVuZGFyKio6IEZvciBJU08gd2VlayBjYWxlbmRhciBhdHRyaWJ1dGVzLCBzZWUgdGhlIHtAbGluayBEYXRlVGltZSN3ZWVrWWVhcn0sIHtAbGluayBEYXRlVGltZSN3ZWVrTnVtYmVyfSwgYW5kIHtAbGluayBEYXRlVGltZSN3ZWVrZGF5fSBhY2Nlc3NvcnMuXG4gKiAqICoqQ29uZmlndXJhdGlvbioqIFNlZSB0aGUge0BsaW5rIERhdGVUaW1lI2xvY2FsZX0gYW5kIHtAbGluayBEYXRlVGltZSNudW1iZXJpbmdTeXN0ZW19IGFjY2Vzc29ycy5cbiAqICogKipUcmFuc2Zvcm1hdGlvbioqOiBUbyB0cmFuc2Zvcm0gdGhlIERhdGVUaW1lIGludG8gb3RoZXIgRGF0ZVRpbWVzLCB1c2Uge0BsaW5rIERhdGVUaW1lI3NldH0sIHtAbGluayBEYXRlVGltZSNyZWNvbmZpZ3VyZX0sIHtAbGluayBEYXRlVGltZSNzZXRab25lfSwge0BsaW5rIERhdGVUaW1lI3NldExvY2FsZX0sIHtAbGluayBEYXRlVGltZS5wbHVzfSwge0BsaW5rIERhdGVUaW1lI21pbnVzfSwge0BsaW5rIERhdGVUaW1lI2VuZE9mfSwge0BsaW5rIERhdGVUaW1lI3N0YXJ0T2Z9LCB7QGxpbmsgRGF0ZVRpbWUjdG9VVEN9LCBhbmQge0BsaW5rIERhdGVUaW1lI3RvTG9jYWx9LlxuICogKiAqKk91dHB1dCoqOiBUbyBjb252ZXJ0IHRoZSBEYXRlVGltZSB0byBvdGhlciByZXByZXNlbnRhdGlvbnMsIHVzZSB0aGUge0BsaW5rIERhdGVUaW1lI3RvUmVsYXRpdmV9LCB7QGxpbmsgRGF0ZVRpbWUjdG9SZWxhdGl2ZUNhbGVuZGFyfSwge0BsaW5rIERhdGVUaW1lI3RvSlNPTn0sIHtAbGluayBEYXRlVGltZSN0b0lTT30sIHtAbGluayBEYXRlVGltZSN0b0hUVFB9LCB7QGxpbmsgRGF0ZVRpbWUjdG9PYmplY3R9LCB7QGxpbmsgRGF0ZVRpbWUjdG9SRkMyODIyfSwge0BsaW5rIERhdGVUaW1lI3RvU3RyaW5nfSwge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSwge0BsaW5rIERhdGVUaW1lI3RvRm9ybWF0fSwge0BsaW5rIERhdGVUaW1lI3RvTWlsbGlzfSBhbmQge0BsaW5rIERhdGVUaW1lI3RvSlNEYXRlfS5cbiAqXG4gKiBUaGVyZSdzIHBsZW50eSBvdGhlcnMgZG9jdW1lbnRlZCBiZWxvdy4gSW4gYWRkaXRpb24sIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHN1YnRsZXIgdG9waWNzIGxpa2UgaW50ZXJuYXRpb25hbGl6YXRpb24sIHRpbWUgem9uZXMsIGFsdGVybmF0aXZlIGNhbGVuZGFycywgdmFsaWRpdHksIGFuZCBzbyBvbiwgc2VlIHRoZSBleHRlcm5hbCBkb2N1bWVudGF0aW9uLlxuICovXG5cblxuY2xhc3MgRGF0ZVRpbWUge1xuICAvKipcbiAgICogQGFjY2VzcyBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBjb25zdCB6b25lID0gY29uZmlnLnpvbmUgfHwgU2V0dGluZ3MuZGVmYXVsdFpvbmU7XG4gICAgbGV0IGludmFsaWQgPSBjb25maWcuaW52YWxpZCB8fCAoTnVtYmVyLmlzTmFOKGNvbmZpZy50cykgPyBuZXcgSW52YWxpZChcImludmFsaWQgaW5wdXRcIikgOiBudWxsKSB8fCAoIXpvbmUuaXNWYWxpZCA/IHVuc3VwcG9ydGVkWm9uZSh6b25lKSA6IG51bGwpO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy50cyA9IGlzVW5kZWZpbmVkKGNvbmZpZy50cykgPyBTZXR0aW5ncy5ub3coKSA6IGNvbmZpZy50cztcbiAgICBsZXQgYyA9IG51bGwsXG4gICAgICAgIG8gPSBudWxsO1xuXG4gICAgaWYgKCFpbnZhbGlkKSB7XG4gICAgICBjb25zdCB1bmNoYW5nZWQgPSBjb25maWcub2xkICYmIGNvbmZpZy5vbGQudHMgPT09IHRoaXMudHMgJiYgY29uZmlnLm9sZC56b25lLmVxdWFscyh6b25lKTtcblxuICAgICAgaWYgKHVuY2hhbmdlZCkge1xuICAgICAgICBbYywgb10gPSBbY29uZmlnLm9sZC5jLCBjb25maWcub2xkLm9dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgb3QgPSB6b25lLm9mZnNldCh0aGlzLnRzKTtcbiAgICAgICAgYyA9IHRzVG9PYmoodGhpcy50cywgb3QpO1xuICAgICAgICBpbnZhbGlkID0gTnVtYmVyLmlzTmFOKGMueWVhcikgPyBuZXcgSW52YWxpZChcImludmFsaWQgaW5wdXRcIikgOiBudWxsO1xuICAgICAgICBjID0gaW52YWxpZCA/IG51bGwgOiBjO1xuICAgICAgICBvID0gaW52YWxpZCA/IG51bGwgOiBvdDtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cblxuICAgIHRoaXMuX3pvbmUgPSB6b25lO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy5sb2MgPSBjb25maWcubG9jIHx8IExvY2FsZS5jcmVhdGUoKTtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMuaW52YWxpZCA9IGludmFsaWQ7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLndlZWtEYXRhID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMuYyA9IGM7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLm8gPSBvO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy5pc0x1eG9uRGF0ZVRpbWUgPSB0cnVlO1xuICB9IC8vIENPTlNUUlVDVFxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmb3IgdGhlIGN1cnJlbnQgaW5zdGFudCwgaW4gdGhlIHN5c3RlbSdzIHRpbWUgem9uZS5cbiAgICpcbiAgICogVXNlIFNldHRpbmdzIHRvIG92ZXJyaWRlIHRoZXNlIGRlZmF1bHQgdmFsdWVzIGlmIG5lZWRlZC5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9JU08oKSAvL34+IG5vdyBpbiB0aGUgSVNPIGZvcm1hdFxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBzdGF0aWMgbm93KCkge1xuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe30pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBsb2NhbCBEYXRlVGltZVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3llYXJdIC0gVGhlIGNhbGVuZGFyIHllYXIuIElmIG9taXR0ZWQgKGFzIGluLCBjYWxsIGBsb2NhbCgpYCB3aXRoIG5vIGFyZ3VtZW50cyksIHRoZSBjdXJyZW50IHRpbWUgd2lsbCBiZSB1c2VkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbW9udGg9MV0gLSBUaGUgbW9udGgsIDEtaW5kZXhlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2RheT0xXSAtIFRoZSBkYXkgb2YgdGhlIG1vbnRoLCAxLWluZGV4ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtob3VyPTBdIC0gVGhlIGhvdXIgb2YgdGhlIGRheSwgaW4gMjQtaG91ciB0aW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbWludXRlPTBdIC0gVGhlIG1pbnV0ZSBvZiB0aGUgaG91ciwgbWVhbmluZyBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDU5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc2Vjb25kPTBdIC0gVGhlIHNlY29uZCBvZiB0aGUgbWludXRlLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IFttaWxsaXNlY29uZD0wXSAtIFRoZSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgOTk5XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiBub3dcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoeyB6b25lOiBcIkFtZXJpY2EvTmV3X1lvcmtcIiB9KSAgICAgIC8vfj4gbm93LCBpbiBVUyBlYXN0IGNvYXN0IHRpbWVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDEtMDFUMDA6MDA6MDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMykgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMDFUMDA6MDA6MDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIHsgbG9jYWxlOiBcImZyXCIgfSkgICAgIC8vfj4gMjAxNy0wMy0xMlQwMDowMDowMCwgd2l0aCBhIEZyZW5jaCBsb2NhbGVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIDUpICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6MDA6MDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIDUsIHsgem9uZTogXCJ1dGNcIiB9KSAgIC8vfj4gMjAxNy0wMy0xMlQwNTowMDowMCwgaW4gVVRDXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSkgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjAwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSwgMTApICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSwgMTAsIDc2NSkgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwLjc2NVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBzdGF0aWMgbG9jYWwoKSB7XG4gICAgY29uc3QgW29wdHMsIGFyZ3NdID0gbGFzdE9wdHMoYXJndW1lbnRzKSxcbiAgICAgICAgICBbeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXSA9IGFyZ3M7XG4gICAgcmV0dXJuIHF1aWNrRFQoe1xuICAgICAgeWVhcixcbiAgICAgIG1vbnRoLFxuICAgICAgZGF5LFxuICAgICAgaG91cixcbiAgICAgIG1pbnV0ZSxcbiAgICAgIHNlY29uZCxcbiAgICAgIG1pbGxpc2Vjb25kXG4gICAgfSwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGluIFVUQ1xuICAgKiBAcGFyYW0ge251bWJlcn0gW3llYXJdIC0gVGhlIGNhbGVuZGFyIHllYXIuIElmIG9taXR0ZWQgKGFzIGluLCBjYWxsIGB1dGMoKWAgd2l0aCBubyBhcmd1bWVudHMpLCB0aGUgY3VycmVudCB0aW1lIHdpbGwgYmUgdXNlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW21vbnRoPTFdIC0gVGhlIG1vbnRoLCAxLWluZGV4ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtkYXk9MV0gLSBUaGUgZGF5IG9mIHRoZSBtb250aFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2hvdXI9MF0gLSBUaGUgaG91ciBvZiB0aGUgZGF5LCBpbiAyNC1ob3VyIHRpbWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IFttaW51dGU9MF0gLSBUaGUgbWludXRlIG9mIHRoZSBob3VyLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzZWNvbmQ9MF0gLSBUaGUgc2Vjb25kIG9mIHRoZSBtaW51dGUsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA1OVxuICAgKiBAcGFyYW0ge251bWJlcn0gW21pbGxpc2Vjb25kPTBdIC0gVGhlIG1pbGxpc2Vjb25kIG9mIHRoZSBzZWNvbmQsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA5OTlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBEYXRlVGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubG9jYWxlXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5vdXRwdXRDYWxlbmRhcl0gLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5udW1iZXJpbmdTeXN0ZW1dIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiBub3dcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAxLTAxVDAwOjAwOjAwWlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMDFUMDA6MDA6MDBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwMDowMDowMFpcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcsIDMsIDEyLCA1KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjAwOjAwWlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMywgMTIsIDUsIDQ1KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6NDU6MDBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSwgNDUsIHsgbG9jYWxlOiBcImZyXCIgfSkgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjAwWiB3aXRoIGEgRnJlbmNoIGxvY2FsZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMywgMTIsIDUsIDQ1LCAxMCkgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6NDU6MTBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSwgNDUsIDEwLCA3NjUsIHsgbG9jYWxlOiBcImZyXCIgfSkgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwLjc2NVogd2l0aCBhIEZyZW5jaCBsb2NhbGVcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuXG5cbiAgc3RhdGljIHV0YygpIHtcbiAgICBjb25zdCBbb3B0cywgYXJnc10gPSBsYXN0T3B0cyhhcmd1bWVudHMpLFxuICAgICAgICAgIFt5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmRdID0gYXJncztcbiAgICBvcHRzLnpvbmUgPSBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2U7XG4gICAgcmV0dXJuIHF1aWNrRFQoe1xuICAgICAgeWVhcixcbiAgICAgIG1vbnRoLFxuICAgICAgZGF5LFxuICAgICAgaG91cixcbiAgICAgIG1pbnV0ZSxcbiAgICAgIHNlY29uZCxcbiAgICAgIG1pbGxpc2Vjb25kXG4gICAgfSwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYSBKYXZhU2NyaXB0IERhdGUgb2JqZWN0LiBVc2VzIHRoZSBkZWZhdWx0IHpvbmUuXG4gICAqIEBwYXJhbSB7RGF0ZX0gZGF0ZSAtIGEgSmF2YVNjcmlwdCBEYXRlIG9iamVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRpb25zLnpvbmU9J2xvY2FsJ10gLSB0aGUgem9uZSB0byBwbGFjZSB0aGUgRGF0ZVRpbWUgaW50b1xuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBzdGF0aWMgZnJvbUpTRGF0ZShkYXRlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB0cyA9IGlzRGF0ZShkYXRlKSA/IGRhdGUudmFsdWVPZigpIDogTmFOO1xuXG4gICAgaWYgKE51bWJlci5pc05hTih0cykpIHtcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKFwiaW52YWxpZCBpbnB1dFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCB6b25lVG9Vc2UgPSBub3JtYWxpemVab25lKG9wdGlvbnMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuXG4gICAgaWYgKCF6b25lVG9Vc2UuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQodW5zdXBwb3J0ZWRab25lKHpvbmVUb1VzZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe1xuICAgICAgdHM6IHRzLFxuICAgICAgem9uZTogem9uZVRvVXNlLFxuICAgICAgbG9jOiBMb2NhbGUuZnJvbU9iamVjdChvcHRpb25zKVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSB0aGUgZXBvY2ggKG1lYW5pbmcgc2luY2UgMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS4gVXNlcyB0aGUgZGVmYXVsdCB6b25lLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWlsbGlzZWNvbmRzIC0gYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIDE5NzAgVVRDXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdGlvbnMuem9uZT0nbG9jYWwnXSAtIHRoZSB6b25lIHRvIHBsYWNlIHRoZSBEYXRlVGltZSBpbnRvXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGVdIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cblxuXG4gIHN0YXRpYyBmcm9tTWlsbGlzKG1pbGxpc2Vjb25kcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCFpc051bWJlcihtaWxsaXNlY29uZHMpKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoYGZyb21NaWxsaXMgcmVxdWlyZXMgYSBudW1lcmljYWwgaW5wdXQsIGJ1dCByZWNlaXZlZCBhICR7dHlwZW9mIG1pbGxpc2Vjb25kc30gd2l0aCB2YWx1ZSAke21pbGxpc2Vjb25kc31gKTtcbiAgICB9IGVsc2UgaWYgKG1pbGxpc2Vjb25kcyA8IC1NQVhfREFURSB8fCBtaWxsaXNlY29uZHMgPiBNQVhfREFURSkge1xuICAgICAgLy8gdGhpcyBpc24ndCBwZXJmZWN0IGJlY2F1c2UgYmVjYXVzZSB3ZSBjYW4gc3RpbGwgZW5kIHVwIG91dCBvZiByYW5nZSBiZWNhdXNlIG9mIGFkZGl0aW9uYWwgc2hpZnRpbmcsIGJ1dCBpdCdzIGEgc3RhcnRcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKFwiVGltZXN0YW1wIG91dCBvZiByYW5nZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZSh7XG4gICAgICAgIHRzOiBtaWxsaXNlY29uZHMsXG4gICAgICAgIHpvbmU6IG5vcm1hbGl6ZVpvbmUob3B0aW9ucy56b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSksXG4gICAgICAgIGxvYzogTG9jYWxlLmZyb21PYmplY3Qob3B0aW9ucylcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhIG51bWJlciBvZiBzZWNvbmRzIHNpbmNlIHRoZSBlcG9jaCAobWVhbmluZyBzaW5jZSAxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLiBVc2VzIHRoZSBkZWZhdWx0IHpvbmUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzZWNvbmRzIC0gYSBudW1iZXIgb2Ygc2Vjb25kcyBzaW5jZSAxOTcwIFVUQ1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRpb25zLnpvbmU9J2xvY2FsJ10gLSB0aGUgem9uZSB0byBwbGFjZSB0aGUgRGF0ZVRpbWUgaW50b1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubG9jYWxlXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm91dHB1dENhbGVuZGFyIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBzdGF0aWMgZnJvbVNlY29uZHMoc2Vjb25kcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCFpc051bWJlcihzZWNvbmRzKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwiZnJvbVNlY29uZHMgcmVxdWlyZXMgYSBudW1lcmljYWwgaW5wdXRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe1xuICAgICAgICB0czogc2Vjb25kcyAqIDEwMDAsXG4gICAgICAgIHpvbmU6IG5vcm1hbGl6ZVpvbmUob3B0aW9ucy56b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSksXG4gICAgICAgIGxvYzogTG9jYWxlLmZyb21PYmplY3Qob3B0aW9ucylcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhIEphdmFTY3JpcHQgb2JqZWN0IHdpdGgga2V5cyBsaWtlICd5ZWFyJyBhbmQgJ2hvdXInIHdpdGggcmVhc29uYWJsZSBkZWZhdWx0cy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iaiAtIHRoZSBvYmplY3QgdG8gY3JlYXRlIHRoZSBEYXRlVGltZSBmcm9tXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoueWVhciAtIGEgeWVhciwgc3VjaCBhcyAxOTg3XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubW9udGggLSBhIG1vbnRoLCAxLTEyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouZGF5IC0gYSBkYXkgb2YgdGhlIG1vbnRoLCAxLTMxLCBkZXBlbmRpbmcgb24gdGhlIG1vbnRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoub3JkaW5hbCAtIGRheSBvZiB0aGUgeWVhciwgMS0zNjUgb3IgMzY2XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoud2Vla1llYXIgLSBhbiBJU08gd2VlayB5ZWFyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoud2Vla051bWJlciAtIGFuIElTTyB3ZWVrIG51bWJlciwgYmV0d2VlbiAxIGFuZCA1MiBvciA1MywgZGVwZW5kaW5nIG9uIHRoZSB5ZWFyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoud2Vla2RheSAtIGFuIElTTyB3ZWVrZGF5LCAxLTcsIHdoZXJlIDEgaXMgTW9uZGF5IGFuZCA3IGlzIFN1bmRheVxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLmhvdXIgLSBob3VyIG9mIHRoZSBkYXksIDAtMjNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5taW51dGUgLSBtaW51dGUgb2YgdGhlIGhvdXIsIDAtNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5zZWNvbmQgLSBzZWNvbmQgb2YgdGhlIG1pbnV0ZSwgMC01OVxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm1pbGxpc2Vjb25kIC0gbWlsbGlzZWNvbmQgb2YgdGhlIHNlY29uZCwgMC05OTlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIGZvciBjcmVhdGluZyB0aGlzIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRzLnpvbmU9J2xvY2FsJ10gLSBpbnRlcnByZXQgdGhlIG51bWJlcnMgaW4gdGhlIGNvbnRleHQgb2YgYSBwYXJ0aWN1bGFyIHpvbmUuIENhbiB0YWtlIGFueSB2YWx1ZSB0YWtlbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gc2V0Wm9uZSgpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J3N5c3RlbSdzIGxvY2FsZSddIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyB5ZWFyOiAxOTgyLCBtb250aDogNSwgZGF5OiAyNX0pLnRvSVNPRGF0ZSgpIC8vPT4gJzE5ODItMDUtMjUnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyB5ZWFyOiAxOTgyIH0pLnRvSVNPRGF0ZSgpIC8vPT4gJzE5ODItMDEtMDEnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyBob3VyOiAxMCwgbWludXRlOiAyNiwgc2Vjb25kOiA2IH0pIC8vfj4gdG9kYXkgYXQgMTA6MjY6MDZcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IGhvdXI6IDEwLCBtaW51dGU6IDI2LCBzZWNvbmQ6IDYgfSwgeyB6b25lOiAndXRjJyB9KSxcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IGhvdXI6IDEwLCBtaW51dGU6IDI2LCBzZWNvbmQ6IDYgfSwgeyB6b25lOiAnbG9jYWwnIH0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyBob3VyOiAxMCwgbWludXRlOiAyNiwgc2Vjb25kOiA2IH0sIHsgem9uZTogJ0FtZXJpY2EvTmV3X1lvcmsnIH0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyB3ZWVrWWVhcjogMjAxNiwgd2Vla051bWJlcjogMiwgd2Vla2RheTogMyB9KS50b0lTT0RhdGUoKSAvLz0+ICcyMDE2LTAxLTEzJ1xuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBzdGF0aWMgZnJvbU9iamVjdChvYmosIG9wdHMgPSB7fSkge1xuICAgIG9iaiA9IG9iaiB8fCB7fTtcbiAgICBjb25zdCB6b25lVG9Vc2UgPSBub3JtYWxpemVab25lKG9wdHMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuXG4gICAgaWYgKCF6b25lVG9Vc2UuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQodW5zdXBwb3J0ZWRab25lKHpvbmVUb1VzZSkpO1xuICAgIH1cblxuICAgIGNvbnN0IHRzTm93ID0gU2V0dGluZ3Mubm93KCksXG4gICAgICAgICAgb2Zmc2V0UHJvdmlzID0gIWlzVW5kZWZpbmVkKG9wdHMuc3BlY2lmaWNPZmZzZXQpID8gb3B0cy5zcGVjaWZpY09mZnNldCA6IHpvbmVUb1VzZS5vZmZzZXQodHNOb3cpLFxuICAgICAgICAgIG5vcm1hbGl6ZWQgPSBub3JtYWxpemVPYmplY3Qob2JqLCBub3JtYWxpemVVbml0KSxcbiAgICAgICAgICBjb250YWluc09yZGluYWwgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC5vcmRpbmFsKSxcbiAgICAgICAgICBjb250YWluc0dyZWdvclllYXIgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC55ZWFyKSxcbiAgICAgICAgICBjb250YWluc0dyZWdvck1EID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQubW9udGgpIHx8ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLmRheSksXG4gICAgICAgICAgY29udGFpbnNHcmVnb3IgPSBjb250YWluc0dyZWdvclllYXIgfHwgY29udGFpbnNHcmVnb3JNRCxcbiAgICAgICAgICBkZWZpbml0ZVdlZWtEZWYgPSBub3JtYWxpemVkLndlZWtZZWFyIHx8IG5vcm1hbGl6ZWQud2Vla051bWJlcixcbiAgICAgICAgICBsb2MgPSBMb2NhbGUuZnJvbU9iamVjdChvcHRzKTsgLy8gY2FzZXM6XG4gICAgLy8ganVzdCBhIHdlZWtkYXkgLT4gdGhpcyB3ZWVrJ3MgaW5zdGFuY2Ugb2YgdGhhdCB3ZWVrZGF5LCBubyB3b3JyaWVzXG4gICAgLy8gKGdyZWdvcmlhbiBkYXRhIG9yIG9yZGluYWwpICsgKHdlZWtZZWFyIG9yIHdlZWtOdW1iZXIpIC0+IGVycm9yXG4gICAgLy8gKGdyZWdvcmlhbiBtb250aCBvciBkYXkpICsgb3JkaW5hbCAtPiBlcnJvclxuICAgIC8vIG90aGVyd2lzZSBqdXN0IHVzZSB3ZWVrcyBvciBvcmRpbmFscyBvciBncmVnb3JpYW4sIGRlcGVuZGluZyBvbiB3aGF0J3Mgc3BlY2lmaWVkXG5cbiAgICBpZiAoKGNvbnRhaW5zR3JlZ29yIHx8IGNvbnRhaW5zT3JkaW5hbCkgJiYgZGVmaW5pdGVXZWVrRGVmKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXCJDYW4ndCBtaXggd2Vla1llYXIvd2Vla051bWJlciB1bml0cyB3aXRoIHllYXIvbW9udGgvZGF5IG9yIG9yZGluYWxzXCIpO1xuICAgIH1cblxuICAgIGlmIChjb250YWluc0dyZWdvck1EICYmIGNvbnRhaW5zT3JkaW5hbCkge1xuICAgICAgdGhyb3cgbmV3IENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yKFwiQ2FuJ3QgbWl4IG9yZGluYWwgZGF0ZXMgd2l0aCBtb250aC9kYXlcIik7XG4gICAgfVxuXG4gICAgY29uc3QgdXNlV2Vla0RhdGEgPSBkZWZpbml0ZVdlZWtEZWYgfHwgbm9ybWFsaXplZC53ZWVrZGF5ICYmICFjb250YWluc0dyZWdvcjsgLy8gY29uZmlndXJlIG91cnNlbHZlcyB0byBkZWFsIHdpdGggZ3JlZ29yaWFuIGRhdGVzIG9yIHdlZWsgc3R1ZmZcblxuICAgIGxldCB1bml0cyxcbiAgICAgICAgZGVmYXVsdFZhbHVlcyxcbiAgICAgICAgb2JqTm93ID0gdHNUb09iaih0c05vdywgb2Zmc2V0UHJvdmlzKTtcblxuICAgIGlmICh1c2VXZWVrRGF0YSkge1xuICAgICAgdW5pdHMgPSBvcmRlcmVkV2Vla1VuaXRzO1xuICAgICAgZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRXZWVrVW5pdFZhbHVlcztcbiAgICAgIG9iak5vdyA9IGdyZWdvcmlhblRvV2VlayhvYmpOb3cpO1xuICAgIH0gZWxzZSBpZiAoY29udGFpbnNPcmRpbmFsKSB7XG4gICAgICB1bml0cyA9IG9yZGVyZWRPcmRpbmFsVW5pdHM7XG4gICAgICBkZWZhdWx0VmFsdWVzID0gZGVmYXVsdE9yZGluYWxVbml0VmFsdWVzO1xuICAgICAgb2JqTm93ID0gZ3JlZ29yaWFuVG9PcmRpbmFsKG9iak5vdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVuaXRzID0gb3JkZXJlZFVuaXRzO1xuICAgICAgZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRVbml0VmFsdWVzO1xuICAgIH0gLy8gc2V0IGRlZmF1bHQgdmFsdWVzIGZvciBtaXNzaW5nIHN0dWZmXG5cblxuICAgIGxldCBmb3VuZEZpcnN0ID0gZmFsc2U7XG5cbiAgICBmb3IgKGNvbnN0IHUgb2YgdW5pdHMpIHtcbiAgICAgIGNvbnN0IHYgPSBub3JtYWxpemVkW3VdO1xuXG4gICAgICBpZiAoIWlzVW5kZWZpbmVkKHYpKSB7XG4gICAgICAgIGZvdW5kRmlyc3QgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChmb3VuZEZpcnN0KSB7XG4gICAgICAgIG5vcm1hbGl6ZWRbdV0gPSBkZWZhdWx0VmFsdWVzW3VdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9ybWFsaXplZFt1XSA9IG9iak5vd1t1XTtcbiAgICAgIH1cbiAgICB9IC8vIG1ha2Ugc3VyZSB0aGUgdmFsdWVzIHdlIGhhdmUgYXJlIGluIHJhbmdlXG5cblxuICAgIGNvbnN0IGhpZ2hlck9yZGVySW52YWxpZCA9IHVzZVdlZWtEYXRhID8gaGFzSW52YWxpZFdlZWtEYXRhKG5vcm1hbGl6ZWQpIDogY29udGFpbnNPcmRpbmFsID8gaGFzSW52YWxpZE9yZGluYWxEYXRhKG5vcm1hbGl6ZWQpIDogaGFzSW52YWxpZEdyZWdvcmlhbkRhdGEobm9ybWFsaXplZCksXG4gICAgICAgICAgaW52YWxpZCA9IGhpZ2hlck9yZGVySW52YWxpZCB8fCBoYXNJbnZhbGlkVGltZURhdGEobm9ybWFsaXplZCk7XG5cbiAgICBpZiAoaW52YWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoaW52YWxpZCk7XG4gICAgfSAvLyBjb21wdXRlIHRoZSBhY3R1YWwgdGltZVxuXG5cbiAgICBjb25zdCBncmVnb3JpYW4gPSB1c2VXZWVrRGF0YSA/IHdlZWtUb0dyZWdvcmlhbihub3JtYWxpemVkKSA6IGNvbnRhaW5zT3JkaW5hbCA/IG9yZGluYWxUb0dyZWdvcmlhbihub3JtYWxpemVkKSA6IG5vcm1hbGl6ZWQsXG4gICAgICAgICAgW3RzRmluYWwsIG9mZnNldEZpbmFsXSA9IG9ialRvVFMoZ3JlZ29yaWFuLCBvZmZzZXRQcm92aXMsIHpvbmVUb1VzZSksXG4gICAgICAgICAgaW5zdCA9IG5ldyBEYXRlVGltZSh7XG4gICAgICB0czogdHNGaW5hbCxcbiAgICAgIHpvbmU6IHpvbmVUb1VzZSxcbiAgICAgIG86IG9mZnNldEZpbmFsLFxuICAgICAgbG9jXG4gICAgfSk7IC8vIGdyZWdvcmlhbiBkYXRhICsgd2Vla2RheSBzZXJ2ZXMgb25seSB0byB2YWxpZGF0ZVxuXG4gICAgaWYgKG5vcm1hbGl6ZWQud2Vla2RheSAmJiBjb250YWluc0dyZWdvciAmJiBvYmoud2Vla2RheSAhPT0gaW5zdC53ZWVrZGF5KSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChcIm1pc21hdGNoZWQgd2Vla2RheVwiLCBgeW91IGNhbid0IHNwZWNpZnkgYm90aCBhIHdlZWtkYXkgb2YgJHtub3JtYWxpemVkLndlZWtkYXl9IGFuZCBhIGRhdGUgb2YgJHtpbnN0LnRvSVNPKCl9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3Q7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gSVNPIDg2MDEgc3RyaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIElTTyBzdHJpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGFmZmVjdCB0aGUgY3JlYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIHVzZSB0aGlzIHpvbmUgaWYgbm8gb2Zmc2V0IGlzIHNwZWNpZmllZCBpbiB0aGUgaW5wdXQgc3RyaW5nIGl0c2VsZi4gV2lsbCBhbHNvIGNvbnZlcnQgdGhlIHRpbWUgdG8gdGhpcyB6b25lXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2V0Wm9uZT1mYWxzZV0gLSBvdmVycmlkZSB0aGUgem9uZSB3aXRoIGEgZml4ZWQtb2Zmc2V0IHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCBpZiBpdCBzcGVjaWZpZXMgb25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J3N5c3RlbSdzIGxvY2FsZSddIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm91dHB1dENhbGVuZGFyXSAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm51bWJlcmluZ1N5c3RlbV0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSVNPKCcyMDE2LTA1LTI1VDA5OjA4OjM0LjEyMycpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21JU08oJzIwMTYtMDUtMjVUMDk6MDg6MzQuMTIzKzA2OjAwJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUlTTygnMjAxNi0wNS0yNVQwOTowODozNC4xMjMrMDY6MDAnLCB7c2V0Wm9uZTogdHJ1ZX0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21JU08oJzIwMTYtMDUtMjVUMDk6MDg6MzQuMTIzJywge3pvbmU6ICd1dGMnfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUlTTygnMjAxNi1XMDUtNCcpXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cblxuXG4gIHN0YXRpYyBmcm9tSVNPKHRleHQsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IFt2YWxzLCBwYXJzZWRab25lXSA9IHBhcnNlSVNPRGF0ZSh0ZXh0KTtcbiAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzLCBcIklTTyA4NjAxXCIsIHRleHQpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGFuIFJGQyAyODIyIHN0cmluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRoZSBSRkMgMjgyMiBzdHJpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGFmZmVjdCB0aGUgY3JlYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIGNvbnZlcnQgdGhlIHRpbWUgdG8gdGhpcyB6b25lLiBTaW5jZSB0aGUgb2Zmc2V0IGlzIGFsd2F5cyBzcGVjaWZpZWQgaW4gdGhlIHN0cmluZyBpdHNlbGYsIHRoaXMgaGFzIG5vIGVmZmVjdCBvbiB0aGUgaW50ZXJwcmV0YXRpb24gb2Ygc3RyaW5nLCBtZXJlbHkgdGhlIHpvbmUgdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpcyBleHByZXNzZWQgaW4uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2V0Wm9uZT1mYWxzZV0gLSBvdmVycmlkZSB0aGUgem9uZSB3aXRoIGEgZml4ZWQtb2Zmc2V0IHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCBpZiBpdCBzcGVjaWZpZXMgb25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J3N5c3RlbSdzIGxvY2FsZSddIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21SRkMyODIyKCcyNSBOb3YgMjAxNiAxMzoyMzoxMiBHTVQnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tUkZDMjgyMignRnJpLCAyNSBOb3YgMjAxNiAxMzoyMzoxMiArMDYwMCcpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21SRkMyODIyKCcyNSBOb3YgMjAxNiAxMzoyMyBaJylcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuXG5cbiAgc3RhdGljIGZyb21SRkMyODIyKHRleHQsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IFt2YWxzLCBwYXJzZWRab25lXSA9IHBhcnNlUkZDMjgyMkRhdGUodGV4dCk7XG4gICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgXCJSRkMgMjgyMlwiLCB0ZXh0KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhbiBIVFRQIGhlYWRlciBkYXRlXG4gICAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjMy5odG1sI3NlYzMuMy4xXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIEhUVFAgaGVhZGVyIGRhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGFmZmVjdCB0aGUgY3JlYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIGNvbnZlcnQgdGhlIHRpbWUgdG8gdGhpcyB6b25lLiBTaW5jZSBIVFRQIGRhdGVzIGFyZSBhbHdheXMgaW4gVVRDLCB0aGlzIGhhcyBubyBlZmZlY3Qgb24gdGhlIGludGVycHJldGF0aW9uIG9mIHN0cmluZywgbWVyZWx5IHRoZSB6b25lIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaXMgZXhwcmVzc2VkIGluLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCB0aGUgZml4ZWQtb2Zmc2V0IHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcuIEZvciBIVFRQIGRhdGVzLCB0aGlzIGlzIGFsd2F5cyBVVEMsIHNvIHRoaXMgb3B0aW9uIGlzIGVxdWl2YWxlbnQgdG8gc2V0dGluZyB0aGUgYHpvbmVgIG9wdGlvbiB0byAndXRjJywgYnV0IHRoaXMgb3B0aW9uIGlzIGluY2x1ZGVkIGZvciBjb25zaXN0ZW5jeSB3aXRoIHNpbWlsYXIgbWV0aG9kcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nc3lzdGVtJ3MgbG9jYWxlJ10gLSBhIGxvY2FsZSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUhUVFAoJ1N1biwgMDYgTm92IDE5OTQgMDg6NDk6MzcgR01UJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUhUVFAoJ1N1bmRheSwgMDYtTm92LTk0IDA4OjQ5OjM3IEdNVCcpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21IVFRQKCdTdW4gTm92ICA2IDA4OjQ5OjM3IDE5OTQnKVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBzdGF0aWMgZnJvbUhUVFAodGV4dCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgW3ZhbHMsIHBhcnNlZFpvbmVdID0gcGFyc2VIVFRQRGF0ZSh0ZXh0KTtcbiAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzLCBcIkhUVFBcIiwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gaW5wdXQgc3RyaW5nIGFuZCBmb3JtYXQgc3RyaW5nLlxuICAgKiBEZWZhdWx0cyB0byBlbi1VUyBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkLCByZWdhcmRsZXNzIG9mIHRoZSBzeXN0ZW0ncyBsb2NhbGUuIEZvciBhIHRhYmxlIG9mIHRva2VucyBhbmQgdGhlaXIgaW50ZXJwcmV0YXRpb25zLCBzZWUgW2hlcmVdKGh0dHBzOi8vbW9tZW50LmdpdGh1Yi5pby9sdXhvbi8jL3BhcnNpbmc/aWQ9dGFibGUtb2YtdG9rZW5zKS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgc3RyaW5nIHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbXQgLSB0aGUgZm9ybWF0IHRoZSBzdHJpbmcgaXMgZXhwZWN0ZWQgdG8gYmUgaW4gKHNlZSB0aGUgbGluayBiZWxvdyBmb3IgdGhlIGZvcm1hdHMpXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBhZmZlY3QgdGhlIGNyZWF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRzLnpvbmU9J2xvY2FsJ10gLSB1c2UgdGhpcyB6b25lIGlmIG5vIG9mZnNldCBpcyBzcGVjaWZpZWQgaW4gdGhlIGlucHV0IHN0cmluZyBpdHNlbGYuIFdpbGwgYWxzbyBjb252ZXJ0IHRoZSBEYXRlVGltZSB0byB0aGlzIHpvbmVcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zZXRab25lPWZhbHNlXSAtIG92ZXJyaWRlIHRoZSB6b25lIHdpdGggYSB6b25lIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGl0c2VsZiwgaWYgaXQgc3BlY2lmaWVzIG9uZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gYSBsb2NhbGUgc3RyaW5nIHRvIHVzZSB3aGVuIHBhcnNpbmcuIFdpbGwgYWxzbyBzZXQgdGhlIERhdGVUaW1lIHRvIHRoaXMgbG9jYWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZSB3aGVuIHBhcnNpbmcuIFdpbGwgYWxzbyBzZXQgdGhlIHJlc3VsdGluZyBEYXRlVGltZSB0byB0aGlzIG51bWJlcmluZyBzeXN0ZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cblxuXG4gIHN0YXRpYyBmcm9tRm9ybWF0KHRleHQsIGZtdCwgb3B0cyA9IHt9KSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHRleHQpIHx8IGlzVW5kZWZpbmVkKGZtdCkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcImZyb21Gb3JtYXQgcmVxdWlyZXMgYW4gaW5wdXQgc3RyaW5nIGFuZCBhIGZvcm1hdFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCB7XG4gICAgICBsb2NhbGUgPSBudWxsLFxuICAgICAgbnVtYmVyaW5nU3lzdGVtID0gbnVsbFxuICAgIH0gPSBvcHRzLFxuICAgICAgICAgIGxvY2FsZVRvVXNlID0gTG9jYWxlLmZyb21PcHRzKHtcbiAgICAgIGxvY2FsZSxcbiAgICAgIG51bWJlcmluZ1N5c3RlbSxcbiAgICAgIGRlZmF1bHRUb0VOOiB0cnVlXG4gICAgfSksXG4gICAgICAgICAgW3ZhbHMsIHBhcnNlZFpvbmUsIHNwZWNpZmljT2Zmc2V0LCBpbnZhbGlkXSA9IHBhcnNlRnJvbVRva2Vucyhsb2NhbGVUb1VzZSwgdGV4dCwgZm10KTtcblxuICAgIGlmIChpbnZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChpbnZhbGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgYGZvcm1hdCAke2ZtdH1gLCB0ZXh0LCBzcGVjaWZpY09mZnNldCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgZnJvbUZvcm1hdCBpbnN0ZWFkXG4gICAqL1xuXG5cbiAgc3RhdGljIGZyb21TdHJpbmcodGV4dCwgZm10LCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUZvcm1hdCh0ZXh0LCBmbXQsIG9wdHMpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGEgU1FMIGRhdGUsIHRpbWUsIG9yIGRhdGV0aW1lXG4gICAqIERlZmF1bHRzIHRvIGVuLVVTIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWQsIHJlZ2FyZGxlc3Mgb2YgdGhlIHN5c3RlbSdzIGxvY2FsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRoZSBzdHJpbmcgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGFmZmVjdCB0aGUgY3JlYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIHVzZSB0aGlzIHpvbmUgaWYgbm8gb2Zmc2V0IGlzIHNwZWNpZmllZCBpbiB0aGUgaW5wdXQgc3RyaW5nIGl0c2VsZi4gV2lsbCBhbHNvIGNvbnZlcnQgdGhlIERhdGVUaW1lIHRvIHRoaXMgem9uZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCBhIHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCBpZiBpdCBzcGVjaWZpZXMgb25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J2VuLVVTJ10gLSBhIGxvY2FsZSBzdHJpbmcgdG8gdXNlIHdoZW4gcGFyc2luZy4gV2lsbCBhbHNvIHNldCB0aGUgRGF0ZVRpbWUgdG8gdGhpcyBsb2NhbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlIHdoZW4gcGFyc2luZy4gV2lsbCBhbHNvIHNldCB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIHRvIHRoaXMgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNScpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcyMDE3LTA1LTE1IDA5OjEyOjM0LjM0MicpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQuMzQyKzA2OjAwJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNSAwOToxMjozNC4zNDIgQW1lcmljYS9Mb3NfQW5nZWxlcycpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQuMzQyIEFtZXJpY2EvTG9zX0FuZ2VsZXMnLCB7IHNldFpvbmU6IHRydWUgfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNSAwOToxMjozNC4zNDInLCB7IHpvbmU6ICdBbWVyaWNhL0xvc19BbmdlbGVzJyB9KVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcwOToxMjozNC4zNDInKVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBzdGF0aWMgZnJvbVNRTCh0ZXh0LCBvcHRzID0ge30pIHtcbiAgICBjb25zdCBbdmFscywgcGFyc2VkWm9uZV0gPSBwYXJzZVNRTCh0ZXh0KTtcbiAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzLCBcIlNRTFwiLCB0ZXh0KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuIGludmFsaWQgRGF0ZVRpbWUuXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IHJlYXNvbiAtIHNpbXBsZSBzdHJpbmcgb2Ygd2h5IHRoaXMgRGF0ZVRpbWUgaXMgaW52YWxpZC4gU2hvdWxkIG5vdCBjb250YWluIHBhcmFtZXRlcnMgb3IgYW55dGhpbmcgZWxzZSBkYXRhLWRlcGVuZGVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2V4cGxhbmF0aW9uPW51bGxdIC0gbG9uZ2VyIGV4cGxhbmF0aW9uLCBtYXkgaW5jbHVkZSBwYXJhbWV0ZXJzIGFuZCBvdGhlciB1c2VmdWwgZGVidWdnaW5nIGluZm9ybWF0aW9uXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cblxuXG4gIHN0YXRpYyBpbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24gPSBudWxsKSB7XG4gICAgaWYgKCFyZWFzb24pIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm5lZWQgdG8gc3BlY2lmeSBhIHJlYXNvbiB0aGUgRGF0ZVRpbWUgaXMgaW52YWxpZFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbnZhbGlkID0gcmVhc29uIGluc3RhbmNlb2YgSW52YWxpZCA/IHJlYXNvbiA6IG5ldyBJbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24pO1xuXG4gICAgaWYgKFNldHRpbmdzLnRocm93T25JbnZhbGlkKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZERhdGVUaW1lRXJyb3IoaW52YWxpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe1xuICAgICAgICBpbnZhbGlkXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIG9iamVjdCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlVGltZS4gV29ya3MgYWNyb3NzIGNvbnRleHQgYm91bmRhcmllc1xuICAgKiBAcGFyYW0ge29iamVjdH0gb1xuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIHN0YXRpYyBpc0RhdGVUaW1lKG8pIHtcbiAgICByZXR1cm4gbyAmJiBvLmlzTHV4b25EYXRlVGltZSB8fCBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogUHJvZHVjZSB0aGUgZm9ybWF0IHN0cmluZyBmb3IgYSBzZXQgb2Ygb3B0aW9uc1xuICAgKiBAcGFyYW0gZm9ybWF0T3B0c1xuICAgKiBAcGFyYW0gbG9jYWxlT3B0c1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHN0YXRpYyBwYXJzZUZvcm1hdEZvck9wdHMoZm9ybWF0T3B0cywgbG9jYWxlT3B0cyA9IHt9KSB7XG4gICAgY29uc3QgdG9rZW5MaXN0ID0gZm9ybWF0T3B0c1RvVG9rZW5zKGZvcm1hdE9wdHMsIExvY2FsZS5mcm9tT2JqZWN0KGxvY2FsZU9wdHMpKTtcbiAgICByZXR1cm4gIXRva2VuTGlzdCA/IG51bGwgOiB0b2tlbkxpc3QubWFwKHQgPT4gdCA/IHQudmFsIDogbnVsbCkuam9pbihcIlwiKTtcbiAgfSAvLyBJTkZPXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdmFsdWUgb2YgdW5pdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBhIHVuaXQgc3VjaCBhcyAnbWludXRlJyBvciAnZGF5J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA3LCA0KS5nZXQoJ21vbnRoJyk7IC8vPT4gN1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA3LCA0KS5nZXQoJ2RheScpOyAvLz0+IDRcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGdldCh1bml0KSB7XG4gICAgcmV0dXJuIHRoaXNbdW5pdF07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgRGF0ZVRpbWUgaXMgdmFsaWQuIEludmFsaWQgRGF0ZVRpbWVzIG9jY3VyIHdoZW46XG4gICAqICogVGhlIERhdGVUaW1lIHdhcyBjcmVhdGVkIGZyb20gaW52YWxpZCBjYWxlbmRhciBpbmZvcm1hdGlvbiwgc3VjaCBhcyB0aGUgMTN0aCBtb250aCBvciBGZWJydWFyeSAzMFxuICAgKiAqIFRoZSBEYXRlVGltZSB3YXMgY3JlYXRlZCBieSBhbiBvcGVyYXRpb24gb24gYW5vdGhlciBpbnZhbGlkIGRhdGVcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuXG5cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCA9PT0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBlcnJvciBjb2RlIGlmIHRoaXMgRGF0ZVRpbWUgaXMgaW52YWxpZCwgb3IgbnVsbCBpZiB0aGUgRGF0ZVRpbWUgaXMgdmFsaWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG5cblxuICBnZXQgaW52YWxpZFJlYXNvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLnJlYXNvbiA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gZXhwbGFuYXRpb24gb2Ygd2h5IHRoaXMgRGF0ZVRpbWUgYmVjYW1lIGludmFsaWQsIG9yIG51bGwgaWYgdGhlIERhdGVUaW1lIGlzIHZhbGlkXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IGludmFsaWRFeHBsYW5hdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLmV4cGxhbmF0aW9uIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBsb2NhbGUgb2YgYSBEYXRlVGltZSwgc3VjaCAnZW4tR0InLiBUaGUgbG9jYWxlIGlzIHVzZWQgd2hlbiBmb3JtYXR0aW5nIHRoZSBEYXRlVGltZVxuICAgKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cblxuXG4gIGdldCBsb2NhbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMubG9jLmxvY2FsZSA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgbnVtYmVyaW5nIHN5c3RlbSBvZiBhIERhdGVUaW1lLCBzdWNoICdiZW5nJy4gVGhlIG51bWJlcmluZyBzeXN0ZW0gaXMgdXNlZCB3aGVuIGZvcm1hdHRpbmcgdGhlIERhdGVUaW1lXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IG51bWJlcmluZ1N5c3RlbSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2MubnVtYmVyaW5nU3lzdGVtIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBvdXRwdXQgY2FsZW5kYXIgb2YgYSBEYXRlVGltZSwgc3VjaCAnaXNsYW1pYycuIFRoZSBvdXRwdXQgY2FsZW5kYXIgaXMgdXNlZCB3aGVuIGZvcm1hdHRpbmcgdGhlIERhdGVUaW1lXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IG91dHB1dENhbGVuZGFyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmxvYy5vdXRwdXRDYWxlbmRhciA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgdGltZSB6b25lIGFzc29jaWF0ZWQgd2l0aCB0aGlzIERhdGVUaW1lLlxuICAgKiBAdHlwZSB7Wm9uZX1cbiAgICovXG5cblxuICBnZXQgem9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fem9uZTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lIG9mIHRoZSB0aW1lIHpvbmUuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IHpvbmVOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnpvbmUubmFtZSA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgeWVhclxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkueWVhciAvLz0+IDIwMTdcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgeWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLnllYXIgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgcXVhcnRlclxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkucXVhcnRlciAvLz0+IDJcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgcXVhcnRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gTWF0aC5jZWlsKHRoaXMuYy5tb250aCAvIDMpIDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIG1vbnRoICgxLTEyKS5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUpLm1vbnRoIC8vPT4gNVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGdldCBtb250aCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1vbnRoIDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGRheSBvZiB0aGUgbW9udGggKDEtMzBpc2gpLlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkuZGF5IC8vPT4gMjVcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgZGF5KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmMuZGF5IDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGhvdXIgb2YgdGhlIGRheSAoMC0yMykuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1LCA5KS5ob3VyIC8vPT4gOVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGdldCBob3VyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmMuaG91ciA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBtaW51dGUgb2YgdGhlIGhvdXIgKDAtNTkpLlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSwgOSwgMzApLm1pbnV0ZSAvLz0+IDMwXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IG1pbnV0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1pbnV0ZSA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBzZWNvbmQgb2YgdGhlIG1pbnV0ZSAoMC01OSkuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1LCA5LCAzMCwgNTIpLnNlY29uZCAvLz0+IDUyXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IHNlY29uZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLnNlY29uZCA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kICgwLTk5OSkuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1LCA5LCAzMCwgNTIsIDY1NCkubWlsbGlzZWNvbmQgLy89PiA2NTRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgbWlsbGlzZWNvbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy5taWxsaXNlY29uZCA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSB3ZWVrIHllYXJcbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDEyLCAzMSkud2Vla1llYXIgLy89PiAyMDE1XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IHdlZWtZZWFyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKHRoaXMpLndlZWtZZWFyIDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHdlZWsgbnVtYmVyIG9mIHRoZSB3ZWVrIHllYXIgKDEtNTJpc2gpLlxuICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUpLndlZWtOdW1iZXIgLy89PiAyMVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGdldCB3ZWVrTnVtYmVyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKHRoaXMpLndlZWtOdW1iZXIgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgZGF5IG9mIHRoZSB3ZWVrLlxuICAgKiAxIGlzIE1vbmRheSBhbmQgNyBpcyBTdW5kYXlcbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDExLCAzMSkud2Vla2RheSAvLz0+IDRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgd2Vla2RheSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gcG9zc2libHlDYWNoZWRXZWVrRGF0YSh0aGlzKS53ZWVrZGF5IDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIG9yZGluYWwgKG1lYW5pbmcgdGhlIGRheSBvZiB0aGUgeWVhcilcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUpLm9yZGluYWwgLy89PiAxNDVcbiAgICogQHR5cGUge251bWJlcnxEYXRlVGltZX1cbiAgICovXG5cblxuICBnZXQgb3JkaW5hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gZ3JlZ29yaWFuVG9PcmRpbmFsKHRoaXMuYykub3JkaW5hbCA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBodW1hbiByZWFkYWJsZSBzaG9ydCBtb250aCBuYW1lLCBzdWNoIGFzICdPY3QnLlxuICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMTAsIDMwKS5tb250aFNob3J0IC8vPT4gT2N0XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IG1vbnRoU2hvcnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IEluZm8ubW9udGhzKFwic2hvcnRcIiwge1xuICAgICAgbG9jT2JqOiB0aGlzLmxvY1xuICAgIH0pW3RoaXMubW9udGggLSAxXSA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgaHVtYW4gcmVhZGFibGUgbG9uZyBtb250aCBuYW1lLCBzdWNoIGFzICdPY3RvYmVyJy5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDEwLCAzMCkubW9udGhMb25nIC8vPT4gT2N0b2JlclxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cblxuXG4gIGdldCBtb250aExvbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IEluZm8ubW9udGhzKFwibG9uZ1wiLCB7XG4gICAgICBsb2NPYmo6IHRoaXMubG9jXG4gICAgfSlbdGhpcy5tb250aCAtIDFdIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBodW1hbiByZWFkYWJsZSBzaG9ydCB3ZWVrZGF5LCBzdWNoIGFzICdNb24nLlxuICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMTAsIDMwKS53ZWVrZGF5U2hvcnQgLy89PiBNb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG5cblxuICBnZXQgd2Vla2RheVNob3J0KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbmZvLndlZWtkYXlzKFwic2hvcnRcIiwge1xuICAgICAgbG9jT2JqOiB0aGlzLmxvY1xuICAgIH0pW3RoaXMud2Vla2RheSAtIDFdIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBodW1hbiByZWFkYWJsZSBsb25nIHdlZWtkYXksIHN1Y2ggYXMgJ01vbmRheScuXG4gICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAxMCwgMzApLndlZWtkYXlMb25nIC8vPT4gTW9uZGF5XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgZ2V0IHdlZWtkYXlMb25nKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbmZvLndlZWtkYXlzKFwibG9uZ1wiLCB7XG4gICAgICBsb2NPYmo6IHRoaXMubG9jXG4gICAgfSlbdGhpcy53ZWVrZGF5IC0gMV0gOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIFVUQyBvZmZzZXQgb2YgdGhpcyBEYXRlVGltZSBpbiBtaW51dGVzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLm9mZnNldCAvLz0+IC0yNDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkub2Zmc2V0IC8vPT4gMFxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cblxuXG4gIGdldCBvZmZzZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/ICt0aGlzLm8gOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgc2hvcnQgaHVtYW4gbmFtZSBmb3IgdGhlIHpvbmUncyBjdXJyZW50IG9mZnNldCwgZm9yIGV4YW1wbGUgXCJFU1RcIiBvciBcIkVEVFwiLlxuICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG5cblxuICBnZXQgb2Zmc2V0TmFtZVNob3J0KCkge1xuICAgIGlmICh0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnpvbmUub2Zmc2V0TmFtZSh0aGlzLnRzLCB7XG4gICAgICAgIGZvcm1hdDogXCJzaG9ydFwiLFxuICAgICAgICBsb2NhbGU6IHRoaXMubG9jYWxlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGxvbmcgaHVtYW4gbmFtZSBmb3IgdGhlIHpvbmUncyBjdXJyZW50IG9mZnNldCwgZm9yIGV4YW1wbGUgXCJFYXN0ZXJuIFN0YW5kYXJkIFRpbWVcIiBvciBcIkVhc3Rlcm4gRGF5bGlnaHQgVGltZVwiLlxuICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG5cblxuICBnZXQgb2Zmc2V0TmFtZUxvbmcoKSB7XG4gICAgaWYgKHRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIHRoaXMuem9uZS5vZmZzZXROYW1lKHRoaXMudHMsIHtcbiAgICAgICAgZm9ybWF0OiBcImxvbmdcIixcbiAgICAgICAgbG9jYWxlOiB0aGlzLmxvY2FsZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogR2V0IHdoZXRoZXIgdGhpcyB6b25lJ3Mgb2Zmc2V0IGV2ZXIgY2hhbmdlcywgYXMgaW4gYSBEU1QuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cblxuXG4gIGdldCBpc09mZnNldEZpeGVkKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnpvbmUuaXNVbml2ZXJzYWwgOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciB0aGUgRGF0ZVRpbWUgaXMgaW4gYSBEU1QuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cblxuXG4gIGdldCBpc0luRFNUKCkge1xuICAgIGlmICh0aGlzLmlzT2Zmc2V0Rml4ZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0ID4gdGhpcy5zZXQoe1xuICAgICAgICBtb250aDogMSxcbiAgICAgICAgZGF5OiAxXG4gICAgICB9KS5vZmZzZXQgfHwgdGhpcy5vZmZzZXQgPiB0aGlzLnNldCh7XG4gICAgICAgIG1vbnRoOiA1XG4gICAgICB9KS5vZmZzZXQ7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBEYXRlVGltZSBpcyBpbiBhIGxlYXAgeWVhciwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTYpLmlzSW5MZWFwWWVhciAvLz0+IHRydWVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxMykuaXNJbkxlYXBZZWFyIC8vPT4gZmFsc2VcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuXG5cbiAgZ2V0IGlzSW5MZWFwWWVhcigpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGF5cyBpbiB0aGlzIERhdGVUaW1lJ3MgbW9udGhcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNiwgMikuZGF5c0luTW9udGggLy89PiAyOVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2LCAzKS5kYXlzSW5Nb250aCAvLz0+IDMxXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IGRheXNJbk1vbnRoKCkge1xuICAgIHJldHVybiBkYXlzSW5Nb250aCh0aGlzLnllYXIsIHRoaXMubW9udGgpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGF5cyBpbiB0aGlzIERhdGVUaW1lJ3MgeWVhclxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2KS5kYXlzSW5ZZWFyIC8vPT4gMzY2XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTMpLmRheXNJblllYXIgLy89PiAzNjVcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cblxuICBnZXQgZGF5c0luWWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gZGF5c0luWWVhcih0aGlzLnllYXIpIDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygd2Vla3MgaW4gdGhpcyBEYXRlVGltZSdzIHllYXJcbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMDQpLndlZWtzSW5XZWVrWWVhciAvLz0+IDUzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTMpLndlZWtzSW5XZWVrWWVhciAvLz0+IDUyXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgZ2V0IHdlZWtzSW5XZWVrWWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gd2Vla3NJbldlZWtZZWFyKHRoaXMud2Vla1llYXIpIDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSByZXNvbHZlZCBJbnRsIG9wdGlvbnMgZm9yIHRoaXMgRGF0ZVRpbWUuXG4gICAqIFRoaXMgaXMgdXNlZnVsIGluIHVuZGVyc3RhbmRpbmcgdGhlIGJlaGF2aW9yIG9mIGZvcm1hdHRpbmcgbWV0aG9kc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIHRoZSBzYW1lIG9wdGlvbnMgYXMgdG9Mb2NhbGVTdHJpbmdcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHJlc29sdmVkTG9jYWxlT3B0aW9ucyhvcHRzID0ge30pIHtcbiAgICBjb25zdCB7XG4gICAgICBsb2NhbGUsXG4gICAgICBudW1iZXJpbmdTeXN0ZW0sXG4gICAgICBjYWxlbmRhclxuICAgIH0gPSBGb3JtYXR0ZXIuY3JlYXRlKHRoaXMubG9jLmNsb25lKG9wdHMpLCBvcHRzKS5yZXNvbHZlZE9wdGlvbnModGhpcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvY2FsZSxcbiAgICAgIG51bWJlcmluZ1N5c3RlbSxcbiAgICAgIG91dHB1dENhbGVuZGFyOiBjYWxlbmRhclxuICAgIH07XG4gIH0gLy8gVFJBTlNGT1JNXG5cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIERhdGVUaW1lJ3Mgem9uZSB0byBVVEMuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICpcbiAgICogRXF1aXZhbGVudCB0byB7QGxpbmsgRGF0ZVRpbWUjc2V0Wm9uZX0oJ3V0YycpXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIC0gb3B0aW9uYWxseSwgYW4gb2Zmc2V0IGZyb20gVVRDIGluIG1pbnV0ZXNcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzPXt9XSAtIG9wdGlvbnMgdG8gcGFzcyB0byBgc2V0Wm9uZSgpYFxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICB0b1VUQyhvZmZzZXQgPSAwLCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5zZXRab25lKEZpeGVkT2Zmc2V0Wm9uZS5pbnN0YW5jZShvZmZzZXQpLCBvcHRzKTtcbiAgfVxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgRGF0ZVRpbWUncyB6b25lIHRvIHRoZSBob3N0J3MgbG9jYWwgem9uZS4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLlxuICAgKlxuICAgKiBFcXVpdmFsZW50IHRvIGBzZXRab25lKCdsb2NhbCcpYFxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICB0b0xvY2FsKCkge1xuICAgIHJldHVybiB0aGlzLnNldFpvbmUoU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuICB9XG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBEYXRlVGltZSdzIHpvbmUgdG8gc3BlY2lmaWVkIHpvbmUuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhlIHNldHRlciBrZWVwcyB0aGUgdW5kZXJseWluZyB0aW1lIHRoZSBzYW1lIChhcyBpbiwgdGhlIHNhbWUgdGltZXN0YW1wKSwgYnV0IHRoZSBuZXcgaW5zdGFuY2Ugd2lsbCByZXBvcnQgZGlmZmVyZW50IGxvY2FsIHRpbWVzIGFuZCBjb25zaWRlciBEU1RzIHdoZW4gbWFraW5nIGNvbXB1dGF0aW9ucywgYXMgd2l0aCB7QGxpbmsgRGF0ZVRpbWUjcGx1c30uIFlvdSBtYXkgd2lzaCB0byB1c2Uge0BsaW5rIERhdGVUaW1lI3RvTG9jYWx9IGFuZCB7QGxpbmsgRGF0ZVRpbWUjdG9VVEN9IHdoaWNoIHByb3ZpZGUgc2ltcGxlIGNvbnZlbmllbmNlIHdyYXBwZXJzIGZvciBjb21tb25seSB1c2VkIHpvbmVzLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbem9uZT0nbG9jYWwnXSAtIGEgem9uZSBpZGVudGlmaWVyLiBBcyBhIHN0cmluZywgdGhhdCBjYW4gYmUgYW55IElBTkEgem9uZSBzdXBwb3J0ZWQgYnkgdGhlIGhvc3QgZW52aXJvbm1lbnQsIG9yIGEgZml4ZWQtb2Zmc2V0IG5hbWUgb2YgdGhlIGZvcm0gJ1VUQyszJywgb3IgdGhlIHN0cmluZ3MgJ2xvY2FsJyBvciAndXRjJy4gWW91IG1heSBhbHNvIHN1cHBseSBhbiBpbnN0YW5jZSBvZiBhIHtAbGluayBEYXRlVGltZSNab25lfSBjbGFzcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMua2VlcExvY2FsVGltZT1mYWxzZV0gLSBJZiB0cnVlLCBhZGp1c3QgdGhlIHVuZGVybHlpbmcgdGltZSBzbyB0aGF0IHRoZSBsb2NhbCB0aW1lIHN0YXlzIHRoZSBzYW1lLCBidXQgaW4gdGhlIHRhcmdldCB6b25lLiBZb3Ugc2hvdWxkIHJhcmVseSBuZWVkIHRoaXMuXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cblxuXG4gIHNldFpvbmUoem9uZSwge1xuICAgIGtlZXBMb2NhbFRpbWUgPSBmYWxzZSxcbiAgICBrZWVwQ2FsZW5kYXJUaW1lID0gZmFsc2VcbiAgfSA9IHt9KSB7XG4gICAgem9uZSA9IG5vcm1hbGl6ZVpvbmUoem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuXG4gICAgaWYgKHpvbmUuZXF1YWxzKHRoaXMuem9uZSkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSBpZiAoIXpvbmUuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQodW5zdXBwb3J0ZWRab25lKHpvbmUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IG5ld1RTID0gdGhpcy50cztcblxuICAgICAgaWYgKGtlZXBMb2NhbFRpbWUgfHwga2VlcENhbGVuZGFyVGltZSkge1xuICAgICAgICBjb25zdCBvZmZzZXRHdWVzcyA9IHpvbmUub2Zmc2V0KHRoaXMudHMpO1xuICAgICAgICBjb25zdCBhc09iaiA9IHRoaXMudG9PYmplY3QoKTtcbiAgICAgICAgW25ld1RTXSA9IG9ialRvVFMoYXNPYmosIG9mZnNldEd1ZXNzLCB6b25lKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb25lKHRoaXMsIHtcbiAgICAgICAgdHM6IG5ld1RTLFxuICAgICAgICB6b25lXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvciBvdXRwdXRDYWxlbmRhci4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtIHRoZSBwcm9wZXJ0aWVzIHRvIHNldFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkucmVjb25maWd1cmUoeyBsb2NhbGU6ICdlbi1HQicgfSlcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuXG5cbiAgcmVjb25maWd1cmUoe1xuICAgIGxvY2FsZSxcbiAgICBudW1iZXJpbmdTeXN0ZW0sXG4gICAgb3V0cHV0Q2FsZW5kYXJcbiAgfSA9IHt9KSB7XG4gICAgY29uc3QgbG9jID0gdGhpcy5sb2MuY2xvbmUoe1xuICAgICAgbG9jYWxlLFxuICAgICAgbnVtYmVyaW5nU3lzdGVtLFxuICAgICAgb3V0cHV0Q2FsZW5kYXJcbiAgICB9KTtcbiAgICByZXR1cm4gY2xvbmUodGhpcywge1xuICAgICAgbG9jXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIGxvY2FsZS4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLlxuICAgKiBKdXN0IGEgY29udmVuaWVudCBhbGlhcyBmb3IgcmVjb25maWd1cmUoeyBsb2NhbGUgfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUpLnNldExvY2FsZSgnZW4tR0InKVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG5cblxuICBzZXRMb2NhbGUobG9jYWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucmVjb25maWd1cmUoe1xuICAgICAgbG9jYWxlXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIHZhbHVlcyBvZiBzcGVjaWZpZWQgdW5pdHMuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICogWW91IGNhbiBvbmx5IHNldCB1bml0cyB3aXRoIHRoaXMgbWV0aG9kOyBmb3IgXCJzZXR0aW5nXCIgbWV0YWRhdGEsIHNlZSB7QGxpbmsgRGF0ZVRpbWUjcmVjb25maWd1cmV9IGFuZCB7QGxpbmsgRGF0ZVRpbWUjc2V0Wm9uZX0uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZXMgLSBhIG1hcHBpbmcgb2YgdW5pdHMgdG8gbnVtYmVyc1xuICAgKiBAZXhhbXBsZSBkdC5zZXQoeyB5ZWFyOiAyMDE3IH0pXG4gICAqIEBleGFtcGxlIGR0LnNldCh7IGhvdXI6IDgsIG1pbnV0ZTogMzAgfSlcbiAgICogQGV4YW1wbGUgZHQuc2V0KHsgd2Vla2RheTogNSB9KVxuICAgKiBAZXhhbXBsZSBkdC5zZXQoeyB5ZWFyOiAyMDA1LCBvcmRpbmFsOiAyMzQgfSlcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuXG5cbiAgc2V0KHZhbHVlcykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplT2JqZWN0KHZhbHVlcywgbm9ybWFsaXplVW5pdCksXG4gICAgICAgICAgc2V0dGluZ1dlZWtTdHVmZiA9ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLndlZWtZZWFyKSB8fCAhaXNVbmRlZmluZWQobm9ybWFsaXplZC53ZWVrTnVtYmVyKSB8fCAhaXNVbmRlZmluZWQobm9ybWFsaXplZC53ZWVrZGF5KSxcbiAgICAgICAgICBjb250YWluc09yZGluYWwgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC5vcmRpbmFsKSxcbiAgICAgICAgICBjb250YWluc0dyZWdvclllYXIgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC55ZWFyKSxcbiAgICAgICAgICBjb250YWluc0dyZWdvck1EID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQubW9udGgpIHx8ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLmRheSksXG4gICAgICAgICAgY29udGFpbnNHcmVnb3IgPSBjb250YWluc0dyZWdvclllYXIgfHwgY29udGFpbnNHcmVnb3JNRCxcbiAgICAgICAgICBkZWZpbml0ZVdlZWtEZWYgPSBub3JtYWxpemVkLndlZWtZZWFyIHx8IG5vcm1hbGl6ZWQud2Vla051bWJlcjtcblxuICAgIGlmICgoY29udGFpbnNHcmVnb3IgfHwgY29udGFpbnNPcmRpbmFsKSAmJiBkZWZpbml0ZVdlZWtEZWYpIHtcbiAgICAgIHRocm93IG5ldyBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcihcIkNhbid0IG1peCB3ZWVrWWVhci93ZWVrTnVtYmVyIHVuaXRzIHdpdGggeWVhci9tb250aC9kYXkgb3Igb3JkaW5hbHNcIik7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRhaW5zR3JlZ29yTUQgJiYgY29udGFpbnNPcmRpbmFsKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXCJDYW4ndCBtaXggb3JkaW5hbCBkYXRlcyB3aXRoIG1vbnRoL2RheVwiKTtcbiAgICB9XG5cbiAgICBsZXQgbWl4ZWQ7XG5cbiAgICBpZiAoc2V0dGluZ1dlZWtTdHVmZikge1xuICAgICAgbWl4ZWQgPSB3ZWVrVG9HcmVnb3JpYW4oeyAuLi5ncmVnb3JpYW5Ub1dlZWsodGhpcy5jKSxcbiAgICAgICAgLi4ubm9ybWFsaXplZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaXNVbmRlZmluZWQobm9ybWFsaXplZC5vcmRpbmFsKSkge1xuICAgICAgbWl4ZWQgPSBvcmRpbmFsVG9HcmVnb3JpYW4oeyAuLi5ncmVnb3JpYW5Ub09yZGluYWwodGhpcy5jKSxcbiAgICAgICAgLi4ubm9ybWFsaXplZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1peGVkID0geyAuLi50aGlzLnRvT2JqZWN0KCksXG4gICAgICAgIC4uLm5vcm1hbGl6ZWRcbiAgICAgIH07IC8vIGlmIHdlIGRpZG4ndCBzZXQgdGhlIGRheSBidXQgd2UgZW5kZWQgdXAgb24gYW4gb3ZlcmZsb3cgZGF0ZSxcbiAgICAgIC8vIHVzZSB0aGUgbGFzdCBkYXkgb2YgdGhlIHJpZ2h0IG1vbnRoXG5cbiAgICAgIGlmIChpc1VuZGVmaW5lZChub3JtYWxpemVkLmRheSkpIHtcbiAgICAgICAgbWl4ZWQuZGF5ID0gTWF0aC5taW4oZGF5c0luTW9udGgobWl4ZWQueWVhciwgbWl4ZWQubW9udGgpLCBtaXhlZC5kYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IFt0cywgb10gPSBvYmpUb1RTKG1peGVkLCB0aGlzLm8sIHRoaXMuem9uZSk7XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIHtcbiAgICAgIHRzLFxuICAgICAgb1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBwZXJpb2Qgb2YgdGltZSB0byB0aGlzIERhdGVUaW1lIGFuZCByZXR1cm4gdGhlIHJlc3VsdGluZyBEYXRlVGltZVxuICAgKlxuICAgKiBBZGRpbmcgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG9yIG1pbGxpc2Vjb25kcyBpbmNyZWFzZXMgdGhlIHRpbWVzdGFtcCBieSB0aGUgcmlnaHQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcy4gQWRkaW5nIGRheXMsIG1vbnRocywgb3IgeWVhcnMgc2hpZnRzIHRoZSBjYWxlbmRhciwgYWNjb3VudGluZyBmb3IgRFNUcyBhbmQgbGVhcCB5ZWFycyBhbG9uZyB0aGUgd2F5LiBUaHVzLCBgZHQucGx1cyh7IGhvdXJzOiAyNCB9KWAgbWF5IHJlc3VsdCBpbiBhIGRpZmZlcmVudCB0aW1lIHRoYW4gYGR0LnBsdXMoeyBkYXlzOiAxIH0pYCBpZiB0aGVyZSdzIGEgRFNUIHNoaWZ0IGluIGJldHdlZW4uXG4gICAqIEBwYXJhbSB7RHVyYXRpb258T2JqZWN0fG51bWJlcn0gZHVyYXRpb24gLSBUaGUgYW1vdW50IHRvIGFkZC4gRWl0aGVyIGEgTHV4b24gRHVyYXRpb24sIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgdGhlIG9iamVjdCBhcmd1bWVudCB0byBEdXJhdGlvbi5mcm9tT2JqZWN0KClcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cygxMjMpIC8vfj4gaW4gMTIzIG1pbGxpc2Vjb25kc1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgbWludXRlczogMTUgfSkgLy9+PiBpbiAxNSBtaW51dGVzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBkYXlzOiAxIH0pIC8vfj4gdGhpcyB0aW1lIHRvbW9ycm93XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBkYXlzOiAtMSB9KSAvL34+IHRoaXMgdGltZSB5ZXN0ZXJkYXlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IGhvdXJzOiAzLCBtaW51dGVzOiAxMyB9KSAvL34+IGluIDMgaHIsIDEzIG1pblxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMywgbWludXRlczogMTMgfSkpIC8vfj4gaW4gMyBociwgMTMgbWluXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cblxuXG4gIHBsdXMoZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbik7XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIGFkanVzdFRpbWUodGhpcywgZHVyKSk7XG4gIH1cbiAgLyoqXG4gICAqIFN1YnRyYWN0IGEgcGVyaW9kIG9mIHRpbWUgdG8gdGhpcyBEYXRlVGltZSBhbmQgcmV0dXJuIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWVcbiAgICogU2VlIHtAbGluayBEYXRlVGltZSNwbHVzfVxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBzdWJ0cmFjdC4gRWl0aGVyIGEgTHV4b24gRHVyYXRpb24sIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgdGhlIG9iamVjdCBhcmd1bWVudCB0byBEdXJhdGlvbi5mcm9tT2JqZWN0KClcbiAgIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cblxuXG4gIG1pbnVzKGR1cmF0aW9uKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pLm5lZ2F0ZSgpO1xuICAgIHJldHVybiBjbG9uZSh0aGlzLCBhZGp1c3RUaW1lKHRoaXMsIGR1cikpO1xuICB9XG4gIC8qKlxuICAgKiBcIlNldFwiIHRoaXMgRGF0ZVRpbWUgdG8gdGhlIGJlZ2lubmluZyBvZiBhIHVuaXQgb2YgdGltZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBUaGUgdW5pdCB0byBnbyB0byB0aGUgYmVnaW5uaW5nIG9mLiBDYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLCBvciAnbWlsbGlzZWNvbmQnLlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzKS5zdGFydE9mKCdtb250aCcpLnRvSVNPRGF0ZSgpOyAvLz0+ICcyMDE0LTAzLTAxJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzKS5zdGFydE9mKCd5ZWFyJykudG9JU09EYXRlKCk7IC8vPT4gJzIwMTQtMDEtMDEnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLnN0YXJ0T2YoJ3dlZWsnKS50b0lTT0RhdGUoKTsgLy89PiAnMjAxNC0wMy0wMycsIHdlZWtzIGFsd2F5cyBzdGFydCBvbiBNb25kYXlzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMsIDUsIDMwKS5zdGFydE9mKCdkYXknKS50b0lTT1RpbWUoKTsgLy89PiAnMDA6MDAuMDAwLTA1OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzLCA1LCAzMCkuc3RhcnRPZignaG91cicpLnRvSVNPVGltZSgpOyAvLz0+ICcwNTowMDowMC4wMDAtMDU6MDAnXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cblxuXG4gIHN0YXJ0T2YodW5pdCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBvID0ge30sXG4gICAgICAgICAgbm9ybWFsaXplZFVuaXQgPSBEdXJhdGlvbi5ub3JtYWxpemVVbml0KHVuaXQpO1xuXG4gICAgc3dpdGNoIChub3JtYWxpemVkVW5pdCkge1xuICAgICAgY2FzZSBcInllYXJzXCI6XG4gICAgICAgIG8ubW9udGggPSAxO1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuXG4gICAgICBjYXNlIFwicXVhcnRlcnNcIjpcbiAgICAgIGNhc2UgXCJtb250aHNcIjpcbiAgICAgICAgby5kYXkgPSAxO1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuXG4gICAgICBjYXNlIFwid2Vla3NcIjpcbiAgICAgIGNhc2UgXCJkYXlzXCI6XG4gICAgICAgIG8uaG91ciA9IDA7XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG5cbiAgICAgIGNhc2UgXCJob3Vyc1wiOlxuICAgICAgICBvLm1pbnV0ZSA9IDA7XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG5cbiAgICAgIGNhc2UgXCJtaW51dGVzXCI6XG4gICAgICAgIG8uc2Vjb25kID0gMDtcbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcblxuICAgICAgY2FzZSBcInNlY29uZHNcIjpcbiAgICAgICAgby5taWxsaXNlY29uZCA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gbm8gZGVmYXVsdCwgaW52YWxpZCB1bml0cyB0aHJvdyBpbiBub3JtYWxpemVVbml0KClcbiAgICB9XG5cbiAgICBpZiAobm9ybWFsaXplZFVuaXQgPT09IFwid2Vla3NcIikge1xuICAgICAgby53ZWVrZGF5ID0gMTtcbiAgICB9XG5cbiAgICBpZiAobm9ybWFsaXplZFVuaXQgPT09IFwicXVhcnRlcnNcIikge1xuICAgICAgY29uc3QgcSA9IE1hdGguY2VpbCh0aGlzLm1vbnRoIC8gMyk7XG4gICAgICBvLm1vbnRoID0gKHEgLSAxKSAqIDMgKyAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNldChvKTtcbiAgfVxuICAvKipcbiAgICogXCJTZXRcIiB0aGlzIERhdGVUaW1lIHRvIHRoZSBlbmQgKG1lYW5pbmcgdGhlIGxhc3QgbWlsbGlzZWNvbmQpIG9mIGEgdW5pdCBvZiB0aW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gVGhlIHVuaXQgdG8gZ28gdG8gdGhlIGVuZCBvZi4gQ2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJywgb3IgJ21pbGxpc2Vjb25kJy5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMykuZW5kT2YoJ21vbnRoJykudG9JU08oKTsgLy89PiAnMjAxNC0wMy0zMVQyMzo1OTo1OS45OTktMDU6MDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLmVuZE9mKCd5ZWFyJykudG9JU08oKTsgLy89PiAnMjAxNC0xMi0zMVQyMzo1OTo1OS45OTktMDU6MDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLmVuZE9mKCd3ZWVrJykudG9JU08oKTsgLy8gPT4gJzIwMTQtMDMtMDlUMjM6NTk6NTkuOTk5LTA1OjAwJywgd2Vla3Mgc3RhcnQgb24gTW9uZGF5c1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzLCA1LCAzMCkuZW5kT2YoJ2RheScpLnRvSVNPKCk7IC8vPT4gJzIwMTQtMDMtMDNUMjM6NTk6NTkuOTk5LTA1OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzLCA1LCAzMCkuZW5kT2YoJ2hvdXInKS50b0lTTygpOyAvLz0+ICcyMDE0LTAzLTAzVDA1OjU5OjU5Ljk5OS0wNTowMCdcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuXG5cbiAgZW5kT2YodW5pdCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnBsdXMoe1xuICAgICAgW3VuaXRdOiAxXG4gICAgfSkuc3RhcnRPZih1bml0KS5taW51cygxKSA6IHRoaXM7XG4gIH0gLy8gT1VUUFVUXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBmb3JtYXR0ZWQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgZm9ybWF0IHN0cmluZy5cbiAgICogKipZb3UgbWF5IG5vdCB3YW50IHRoaXMuKiogU2VlIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9yIGEgbW9yZSBmbGV4aWJsZSBmb3JtYXR0aW5nIHRvb2wuIEZvciBhIHRhYmxlIG9mIHRva2VucyBhbmQgdGhlaXIgaW50ZXJwcmV0YXRpb25zLCBzZWUgW2hlcmVdKGh0dHBzOi8vbW9tZW50LmdpdGh1Yi5pby9sdXhvbi8jL2Zvcm1hdHRpbmc/aWQ9dGFibGUtb2YtdG9rZW5zKS5cbiAgICogRGVmYXVsdHMgdG8gZW4tVVMgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZCwgcmVnYXJkbGVzcyBvZiB0aGUgc3lzdGVtJ3MgbG9jYWxlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm10IC0gdGhlIGZvcm1hdCBzdHJpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRzIHRvIG92ZXJyaWRlIHRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgb24gdGhpcyBEYXRlVGltZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0Zvcm1hdCgneXl5eSBMTEwgZGQnKSAvLz0+ICcyMDE3IEFwciAyMidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkuc2V0TG9jYWxlKCdmcicpLnRvRm9ybWF0KCd5eXl5IExMTCBkZCcpIC8vPT4gJzIwMTcgYXZyLiAyMidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Gb3JtYXQoJ3l5eXkgTExMIGRkJywgeyBsb2NhbGU6IFwiZnJcIiB9KSAvLz0+ICcyMDE3IGF2ci4gMjInXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvRm9ybWF0KFwiSEggJ2hvdXJzIGFuZCcgbW0gJ21pbnV0ZXMnXCIpIC8vPT4gJzIwIGhvdXJzIGFuZCA1NSBtaW51dGVzJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9Gb3JtYXQoZm10LCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gRm9ybWF0dGVyLmNyZWF0ZSh0aGlzLmxvYy5yZWRlZmF1bHRUb0VOKG9wdHMpKS5mb3JtYXREYXRlVGltZUZyb21TdHJpbmcodGhpcywgZm10KSA6IElOVkFMSUQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsb2NhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGluZyB0aGlzIGRhdGUuIEFjY2VwdHMgdGhlIHNhbWUgb3B0aW9ucyBhcyB0aGUgSW50bC5EYXRlVGltZUZvcm1hdCBjb25zdHJ1Y3RvciBhbmQgYW55IHByZXNldHMgZGVmaW5lZCBieSBMdXhvbiwgc3VjaCBhcyBgRGF0ZVRpbWUuREFURV9GVUxMYCBvciBgRGF0ZVRpbWUuVElNRV9TSU1QTEVgLlxuICAgKiBUaGUgZXhhY3QgYmVoYXZpb3Igb2YgdGhpcyBtZXRob2QgaXMgYnJvd3Nlci1zcGVjaWZpYywgYnV0IGluIGdlbmVyYWwgaXQgd2lsbCByZXR1cm4gYW4gYXBwcm9wcmlhdGUgcmVwcmVzZW50YXRpb25cbiAgICogb2YgdGhlIERhdGVUaW1lIGluIHRoZSBhc3NpZ25lZCBsb2NhbGUuXG4gICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGVUaW1lRm9ybWF0XG4gICAqIEBwYXJhbSBmb3JtYXRPcHRzIHtPYmplY3R9IC0gSW50bC5EYXRlVGltZUZvcm1hdCBjb25zdHJ1Y3RvciBvcHRpb25zIGFuZCBjb25maWd1cmF0aW9uIG9wdGlvbnNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRzIHRvIG92ZXJyaWRlIHRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgb24gdGhpcyBEYXRlVGltZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZygpOyAvLz0+IDQvMjAvMjAxN1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5zZXRMb2NhbGUoJ2VuLWdiJykudG9Mb2NhbGVTdHJpbmcoKTsgLy89PiAnMjAvMDQvMjAxNydcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Mb2NhbGVTdHJpbmcoeyBsb2NhbGU6ICdlbi1nYicgfSk7IC8vPT4gJzIwLzA0LzIwMTcnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLkRBVEVfRlVMTCk7IC8vPT4gJ0FwcmlsIDIwLCAyMDE3J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5USU1FX1NJTVBMRSk7IC8vPT4gJzExOjMyIEFNJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5EQVRFVElNRV9TSE9SVCk7IC8vPT4gJzQvMjAvMjAxNywgMTE6MzIgQU0nXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKHsgd2Vla2RheTogJ2xvbmcnLCBtb250aDogJ2xvbmcnLCBkYXk6ICcyLWRpZ2l0JyB9KTsgLy89PiAnVGh1cnNkYXksIEFwcmlsIDIwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZyh7IHdlZWtkYXk6ICdzaG9ydCcsIG1vbnRoOiAnc2hvcnQnLCBkYXk6ICcyLWRpZ2l0JywgaG91cjogJzItZGlnaXQnLCBtaW51dGU6ICcyLWRpZ2l0JyB9KTsgLy89PiAnVGh1LCBBcHIgMjAsIDExOjI3IEFNJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZyh7IGhvdXI6ICcyLWRpZ2l0JywgbWludXRlOiAnMi1kaWdpdCcsIGhvdXJDeWNsZTogJ2gyMycgfSk7IC8vPT4gJzExOjMyJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9Mb2NhbGVTdHJpbmcoZm9ybWF0T3B0cyA9IERBVEVfU0hPUlQsIG9wdHMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBGb3JtYXR0ZXIuY3JlYXRlKHRoaXMubG9jLmNsb25lKG9wdHMpLCBmb3JtYXRPcHRzKS5mb3JtYXREYXRlVGltZSh0aGlzKSA6IElOVkFMSUQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2YgZm9ybWF0IFwicGFydHNcIiwgbWVhbmluZyBpbmRpdmlkdWFsIHRva2VucyBhbG9uZyB3aXRoIG1ldGFkYXRhLiBUaGlzIGlzIGFsbG93cyBjYWxsZXJzIHRvIHBvc3QtcHJvY2VzcyBpbmRpdmlkdWFsIHNlY3Rpb25zIG9mIHRoZSBmb3JtYXR0ZWQgb3V0cHV0LlxuICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9EYXRlVGltZUZvcm1hdC9mb3JtYXRUb1BhcnRzXG4gICAqIEBwYXJhbSBvcHRzIHtPYmplY3R9IC0gSW50bC5EYXRlVGltZUZvcm1hdCBjb25zdHJ1Y3RvciBvcHRpb25zLCBzYW1lIGFzIGB0b0xvY2FsZVN0cmluZ2AuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlUGFydHMoKTsgLy89PiBbXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLz0+ICAgeyB0eXBlOiAnZGF5JywgdmFsdWU6ICcyNScgfSxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vPT4gICB7IHR5cGU6ICdsaXRlcmFsJywgdmFsdWU6ICcvJyB9LFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiAgIHsgdHlwZTogJ21vbnRoJywgdmFsdWU6ICcwNScgfSxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vPT4gICB7IHR5cGU6ICdsaXRlcmFsJywgdmFsdWU6ICcvJyB9LFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiAgIHsgdHlwZTogJ3llYXInLCB2YWx1ZTogJzE5ODInIH1cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vPT4gXVxuICAgKi9cblxuXG4gIHRvTG9jYWxlUGFydHMob3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IEZvcm1hdHRlci5jcmVhdGUodGhpcy5sb2MuY2xvbmUob3B0cyksIG9wdHMpLmZvcm1hdERhdGVUaW1lUGFydHModGhpcykgOiBbXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc3VwcHJlc3NNaWxsaXNlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnN1cHByZXNzU2Vjb25kcz1mYWxzZV0gLSBleGNsdWRlIHNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVPZmZzZXQ9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBvZmZzZXQsIHN1Y2ggYXMgJ1onIG9yICctMDQ6MDAnXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuZXh0ZW5kZWRab25lPXRydWVdIC0gYWRkIHRoZSB0aW1lIHpvbmUgZm9ybWF0IGV4dGVuc2lvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuZm9ybWF0PSdleHRlbmRlZCddIC0gY2hvb3NlIGJldHdlZW4gdGhlIGJhc2ljIGFuZCBleHRlbmRlZCBmb3JtYXRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDE5ODMsIDUsIDI1KS50b0lTTygpIC8vPT4gJzE5ODItMDUtMjVUMDA6MDA6MDAuMDAwWidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9JU08oKSAvLz0+ICcyMDE3LTA0LTIyVDIwOjQ3OjA1LjMzNS0wNDowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9JU08oeyBpbmNsdWRlT2Zmc2V0OiBmYWxzZSB9KSAvLz0+ICcyMDE3LTA0LTIyVDIwOjQ3OjA1LjMzNSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9JU08oeyBmb3JtYXQ6ICdiYXNpYycgfSkgLy89PiAnMjAxNzA0MjJUMjA0NzA1LjMzNS0wNDAwJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9JU08oe1xuICAgIGZvcm1hdCA9IFwiZXh0ZW5kZWRcIixcbiAgICBzdXBwcmVzc1NlY29uZHMgPSBmYWxzZSxcbiAgICBzdXBwcmVzc01pbGxpc2Vjb25kcyA9IGZhbHNlLFxuICAgIGluY2x1ZGVPZmZzZXQgPSB0cnVlLFxuICAgIGV4dGVuZGVkWm9uZSA9IGZhbHNlXG4gIH0gPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBleHQgPSBmb3JtYXQgPT09IFwiZXh0ZW5kZWRcIjtcbiAgICBsZXQgYyA9IHRvSVNPRGF0ZSh0aGlzLCBleHQpO1xuICAgIGMgKz0gXCJUXCI7XG4gICAgYyArPSB0b0lTT1RpbWUodGhpcywgZXh0LCBzdXBwcmVzc1NlY29uZHMsIHN1cHByZXNzTWlsbGlzZWNvbmRzLCBpbmNsdWRlT2Zmc2V0LCBleHRlbmRlZFpvbmUpO1xuICAgIHJldHVybiBjO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSdzIGRhdGUgY29tcG9uZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuZm9ybWF0PSdleHRlbmRlZCddIC0gY2hvb3NlIGJldHdlZW4gdGhlIGJhc2ljIGFuZCBleHRlbmRlZCBmb3JtYXRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDE5ODIsIDUsIDI1KS50b0lTT0RhdGUoKSAvLz0+ICcxOTgyLTA1LTI1J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMTk4MiwgNSwgMjUpLnRvSVNPRGF0ZSh7IGZvcm1hdDogJ2Jhc2ljJyB9KSAvLz0+ICcxOTgyMDUyNSdcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHRvSVNPRGF0ZSh7XG4gICAgZm9ybWF0ID0gXCJleHRlbmRlZFwiXG4gIH0gPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdG9JU09EYXRlKHRoaXMsIGZvcm1hdCA9PT0gXCJleHRlbmRlZFwiKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUncyB3ZWVrIGRhdGVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDE5ODIsIDUsIDI1KS50b0lTT1dlZWtEYXRlKCkgLy89PiAnMTk4Mi1XMjEtMidcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHRvSVNPV2Vla0RhdGUoKSB7XG4gICAgcmV0dXJuIHRvVGVjaEZvcm1hdCh0aGlzLCBcImtra2stJ1cnV1ctY1wiKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUncyB0aW1lIGNvbXBvbmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zdXBwcmVzc01pbGxpc2Vjb25kcz1mYWxzZV0gLSBleGNsdWRlIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBmb3JtYXQgaWYgdGhleSdyZSAwXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc3VwcHJlc3NTZWNvbmRzPWZhbHNlXSAtIGV4Y2x1ZGUgc2Vjb25kcyBmcm9tIHRoZSBmb3JtYXQgaWYgdGhleSdyZSAwXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldD10cnVlXSAtIGluY2x1ZGUgdGhlIG9mZnNldCwgc3VjaCBhcyAnWicgb3IgJy0wNDowMCdcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5leHRlbmRlZFpvbmU9dHJ1ZV0gLSBhZGQgdGhlIHRpbWUgem9uZSBmb3JtYXQgZXh0ZW5zaW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZVByZWZpeD1mYWxzZV0gLSBpbmNsdWRlIHRoZSBgVGAgcHJlZml4XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5mb3JtYXQ9J2V4dGVuZGVkJ10gLSBjaG9vc2UgYmV0d2VlbiB0aGUgYmFzaWMgYW5kIGV4dGVuZGVkIGZvcm1hdFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS5zZXQoeyBob3VyOiA3LCBtaW51dGU6IDM0IH0pLnRvSVNPVGltZSgpIC8vPT4gJzA3OjM0OjE5LjM2MVonXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygpLnNldCh7IGhvdXI6IDcsIG1pbnV0ZTogMzQsIHNlY29uZHM6IDAsIG1pbGxpc2Vjb25kczogMCB9KS50b0lTT1RpbWUoeyBzdXBwcmVzc1NlY29uZHM6IHRydWUgfSkgLy89PiAnMDc6MzRaJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS5zZXQoeyBob3VyOiA3LCBtaW51dGU6IDM0IH0pLnRvSVNPVGltZSh7IGZvcm1hdDogJ2Jhc2ljJyB9KSAvLz0+ICcwNzM0MTkuMzYxWidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkuc2V0KHsgaG91cjogNywgbWludXRlOiAzNCB9KS50b0lTT1RpbWUoeyBpbmNsdWRlUHJlZml4OiB0cnVlIH0pIC8vPT4gJ1QwNzozNDoxOS4zNjFaJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9JU09UaW1lKHtcbiAgICBzdXBwcmVzc01pbGxpc2Vjb25kcyA9IGZhbHNlLFxuICAgIHN1cHByZXNzU2Vjb25kcyA9IGZhbHNlLFxuICAgIGluY2x1ZGVPZmZzZXQgPSB0cnVlLFxuICAgIGluY2x1ZGVQcmVmaXggPSBmYWxzZSxcbiAgICBleHRlbmRlZFpvbmUgPSBmYWxzZSxcbiAgICBmb3JtYXQgPSBcImV4dGVuZGVkXCJcbiAgfSA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxldCBjID0gaW5jbHVkZVByZWZpeCA/IFwiVFwiIDogXCJcIjtcbiAgICByZXR1cm4gYyArIHRvSVNPVGltZSh0aGlzLCBmb3JtYXQgPT09IFwiZXh0ZW5kZWRcIiwgc3VwcHJlc3NTZWNvbmRzLCBzdXBwcmVzc01pbGxpc2Vjb25kcywgaW5jbHVkZU9mZnNldCwgZXh0ZW5kZWRab25lKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBSRkMgMjgyMi1jb21wYXRpYmxlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMykudG9SRkMyODIyKCkgLy89PiAnU3VuLCAxMyBKdWwgMjAxNCAwMDowMDowMCArMDAwMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgNywgMTMpLnRvUkZDMjgyMigpIC8vPT4gJ1N1biwgMTMgSnVsIDIwMTQgMDA6MDA6MDAgLTA0MDAnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG5cblxuICB0b1JGQzI4MjIoKSB7XG4gICAgcmV0dXJuIHRvVGVjaEZvcm1hdCh0aGlzLCBcIkVFRSwgZGQgTExMIHl5eXkgSEg6bW06c3MgWlpaXCIsIGZhbHNlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gSFRUUCBoZWFkZXJzLiBUaGUgb3V0cHV0IGlzIGFsd2F5cyBleHByZXNzZWQgaW4gR01ULlxuICAgKiBTcGVjaWZpY2FsbHksIHRoZSBzdHJpbmcgY29uZm9ybXMgdG8gUkZDIDExMjMuXG4gICAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjMy5odG1sI3NlYzMuMy4xXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMykudG9IVFRQKCkgLy89PiAnU3VuLCAxMyBKdWwgMjAxNCAwMDowMDowMCBHTVQnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMywgMTkpLnRvSFRUUCgpIC8vPT4gJ1N1biwgMTMgSnVsIDIwMTQgMTk6MDA6MDAgR01UJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9IVFRQKCkge1xuICAgIHJldHVybiB0b1RlY2hGb3JtYXQodGhpcy50b1VUQygpLCBcIkVFRSwgZGQgTExMIHl5eXkgSEg6bW06c3MgJ0dNVCdcIik7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIFNRTCBEYXRlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMykudG9TUUxEYXRlKCkgLy89PiAnMjAxNC0wNy0xMydcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHRvU1FMRGF0ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvSVNPRGF0ZSh0aGlzLCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gU1FMIFRpbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZVpvbmU9ZmFsc2VdIC0gaW5jbHVkZSB0aGUgem9uZSwgc3VjaCBhcyAnQW1lcmljYS9OZXdfWW9yaycuIE92ZXJyaWRlcyBpbmNsdWRlT2Zmc2V0LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVPZmZzZXQ9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBvZmZzZXQsIHN1Y2ggYXMgJ1onIG9yICctMDQ6MDAnXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldFNwYWNlPXRydWVdIC0gaW5jbHVkZSB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgdGltZSBhbmQgdGhlIG9mZnNldCwgc3VjaCBhcyAnMDU6MTU6MTYuMzQ1IC0wNDowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkudG9TUUwoKSAvLz0+ICcwNToxNToxNi4zNDUnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvU1FMKCkgLy89PiAnMDU6MTU6MTYuMzQ1IC0wNDowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9TUUwoeyBpbmNsdWRlT2Zmc2V0OiBmYWxzZSB9KSAvLz0+ICcwNToxNToxNi4zNDUnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvU1FMKHsgaW5jbHVkZVpvbmU6IGZhbHNlIH0pIC8vPT4gJzA1OjE1OjE2LjM0NSBBbWVyaWNhL05ld19Zb3JrJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9TUUxUaW1lKHtcbiAgICBpbmNsdWRlT2Zmc2V0ID0gdHJ1ZSxcbiAgICBpbmNsdWRlWm9uZSA9IGZhbHNlLFxuICAgIGluY2x1ZGVPZmZzZXRTcGFjZSA9IHRydWVcbiAgfSA9IHt9KSB7XG4gICAgbGV0IGZtdCA9IFwiSEg6bW06c3MuU1NTXCI7XG5cbiAgICBpZiAoaW5jbHVkZVpvbmUgfHwgaW5jbHVkZU9mZnNldCkge1xuICAgICAgaWYgKGluY2x1ZGVPZmZzZXRTcGFjZSkge1xuICAgICAgICBmbXQgKz0gXCIgXCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmNsdWRlWm9uZSkge1xuICAgICAgICBmbXQgKz0gXCJ6XCI7XG4gICAgICB9IGVsc2UgaWYgKGluY2x1ZGVPZmZzZXQpIHtcbiAgICAgICAgZm10ICs9IFwiWlpcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG9UZWNoRm9ybWF0KHRoaXMsIGZtdCwgdHJ1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIFNRTCBEYXRlVGltZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlWm9uZT1mYWxzZV0gLSBpbmNsdWRlIHRoZSB6b25lLCBzdWNoIGFzICdBbWVyaWNhL05ld19Zb3JrJy4gT3ZlcnJpZGVzIGluY2x1ZGVPZmZzZXQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldD10cnVlXSAtIGluY2x1ZGUgdGhlIG9mZnNldCwgc3VjaCBhcyAnWicgb3IgJy0wNDowMCdcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlT2Zmc2V0U3BhY2U9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSB0aW1lIGFuZCB0aGUgb2Zmc2V0LCBzdWNoIGFzICcwNToxNToxNi4zNDUgLTA0OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNCwgNywgMTMpLnRvU1FMKCkgLy89PiAnMjAxNC0wNy0xMyAwMDowMDowMC4wMDAgWidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgNywgMTMpLnRvU1FMKCkgLy89PiAnMjAxNC0wNy0xMyAwMDowMDowMC4wMDAgLTA0OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCA3LCAxMykudG9TUUwoeyBpbmNsdWRlT2Zmc2V0OiBmYWxzZSB9KSAvLz0+ICcyMDE0LTA3LTEzIDAwOjAwOjAwLjAwMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgNywgMTMpLnRvU1FMKHsgaW5jbHVkZVpvbmU6IHRydWUgfSkgLy89PiAnMjAxNC0wNy0xMyAwMDowMDowMC4wMDAgQW1lcmljYS9OZXdfWW9yaydcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHRvU1FMKG9wdHMgPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYCR7dGhpcy50b1NRTERhdGUoKX0gJHt0aGlzLnRvU1FMVGltZShvcHRzKX1gO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIGRlYnVnZ2luZ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudG9JU08oKSA6IElOVkFMSUQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVwb2NoIG1pbGxpc2Vjb25kcyBvZiB0aGlzIERhdGVUaW1lLiBBbGlhcyBvZiB7QGxpbmsgRGF0ZVRpbWUjdG9NaWxsaXN9XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG5cblxuICB2YWx1ZU9mKCkge1xuICAgIHJldHVybiB0aGlzLnRvTWlsbGlzKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVwb2NoIG1pbGxpc2Vjb25kcyBvZiB0aGlzIERhdGVUaW1lLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgdG9NaWxsaXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudHMgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVwb2NoIHNlY29uZHMgb2YgdGhpcyBEYXRlVGltZS5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cblxuXG4gIHRvU2Vjb25kcygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy50cyAvIDEwMDAgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVwb2NoIHNlY29uZHMgKGFzIGEgd2hvbGUgbnVtYmVyKSBvZiB0aGlzIERhdGVUaW1lLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgdG9Vbml4SW50ZWdlcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gTWF0aC5mbG9vcih0aGlzLnRzIC8gMTAwMCkgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIEpTT04uXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG5cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9JU08oKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIEJTT04gc2VyaWFsaXphYmxlIGVxdWl2YWxlbnQgdG8gdGhpcyBEYXRlVGltZS5cbiAgICogQHJldHVybiB7RGF0ZX1cbiAgICovXG5cblxuICB0b0JTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9KU0RhdGUoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0IHdpdGggdGhpcyBEYXRlVGltZSdzIHllYXIsIG1vbnRoLCBkYXksIGFuZCBzbyBvbi5cbiAgICogQHBhcmFtIG9wdHMgLSBvcHRpb25zIGZvciBnZW5lcmF0aW5nIHRoZSBvYmplY3RcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlQ29uZmlnPWZhbHNlXSAtIGluY2x1ZGUgY29uZmlndXJhdGlvbiBhdHRyaWJ1dGVzIGluIHRoZSBvdXRwdXRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9PYmplY3QoKSAvLz0+IHsgeWVhcjogMjAxNywgbW9udGg6IDQsIGRheTogMjIsIGhvdXI6IDIwLCBtaW51dGU6IDQ5LCBzZWNvbmQ6IDQyLCBtaWxsaXNlY29uZDogMjY4IH1cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHRvT2JqZWN0KG9wdHMgPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4ge307XG4gICAgY29uc3QgYmFzZSA9IHsgLi4udGhpcy5jXG4gICAgfTtcblxuICAgIGlmIChvcHRzLmluY2x1ZGVDb25maWcpIHtcbiAgICAgIGJhc2Uub3V0cHV0Q2FsZW5kYXIgPSB0aGlzLm91dHB1dENhbGVuZGFyO1xuICAgICAgYmFzZS5udW1iZXJpbmdTeXN0ZW0gPSB0aGlzLmxvYy5udW1iZXJpbmdTeXN0ZW07XG4gICAgICBiYXNlLmxvY2FsZSA9IHRoaXMubG9jLmxvY2FsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIEphdmFTY3JpcHQgRGF0ZSBlcXVpdmFsZW50IHRvIHRoaXMgRGF0ZVRpbWUuXG4gICAqIEByZXR1cm4ge0RhdGV9XG4gICAqL1xuXG5cbiAgdG9KU0RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMuaXNWYWxpZCA/IHRoaXMudHMgOiBOYU4pO1xuICB9IC8vIENPTVBBUkVcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIERhdGVUaW1lcyBhcyBhIER1cmF0aW9uLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBvdGhlckRhdGVUaW1lIC0gdGhlIERhdGVUaW1lIHRvIGNvbXBhcmUgdGhpcyBvbmUgdG9cbiAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IFt1bml0PVsnbWlsbGlzZWNvbmRzJ11dIC0gdGhlIHVuaXQgb3IgYXJyYXkgb2YgdW5pdHMgKHN1Y2ggYXMgJ2hvdXJzJyBvciAnZGF5cycpIHRvIGluY2x1ZGUgaW4gdGhlIGR1cmF0aW9uLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdGhhdCBhZmZlY3QgdGhlIGNyZWF0aW9uIG9mIHRoZSBEdXJhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQGV4YW1wbGVcbiAgICogdmFyIGkxID0gRGF0ZVRpbWUuZnJvbUlTTygnMTk4Mi0wNS0yNVQwOTo0NScpLFxuICAgKiAgICAgaTIgPSBEYXRlVGltZS5mcm9tSVNPKCcxOTgzLTEwLTE0VDEwOjMwJyk7XG4gICAqIGkyLmRpZmYoaTEpLnRvT2JqZWN0KCkgLy89PiB7IG1pbGxpc2Vjb25kczogNDM4MDc1MDAwMDAgfVxuICAgKiBpMi5kaWZmKGkxLCAnaG91cnMnKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMTIxNjguNzUgfVxuICAgKiBpMi5kaWZmKGkxLCBbJ21vbnRocycsICdkYXlzJ10pLnRvT2JqZWN0KCkgLy89PiB7IG1vbnRoczogMTYsIGRheXM6IDE5LjAzMTI1IH1cbiAgICogaTIuZGlmZihpMSwgWydtb250aHMnLCAnZGF5cycsICdob3VycyddKS50b09iamVjdCgpIC8vPT4geyBtb250aHM6IDE2LCBkYXlzOiAxOSwgaG91cnM6IDAuNzUgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG5cblxuICBkaWZmKG90aGVyRGF0ZVRpbWUsIHVuaXQgPSBcIm1pbGxpc2Vjb25kc1wiLCBvcHRzID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXJEYXRlVGltZS5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uaW52YWxpZChcImNyZWF0ZWQgYnkgZGlmZmluZyBhbiBpbnZhbGlkIERhdGVUaW1lXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGR1ck9wdHMgPSB7XG4gICAgICBsb2NhbGU6IHRoaXMubG9jYWxlLFxuICAgICAgbnVtYmVyaW5nU3lzdGVtOiB0aGlzLm51bWJlcmluZ1N5c3RlbSxcbiAgICAgIC4uLm9wdHNcbiAgICB9O1xuICAgIGNvbnN0IHVuaXRzID0gbWF5YmVBcnJheSh1bml0KS5tYXAoRHVyYXRpb24ubm9ybWFsaXplVW5pdCksXG4gICAgICAgICAgb3RoZXJJc0xhdGVyID0gb3RoZXJEYXRlVGltZS52YWx1ZU9mKCkgPiB0aGlzLnZhbHVlT2YoKSxcbiAgICAgICAgICBlYXJsaWVyID0gb3RoZXJJc0xhdGVyID8gdGhpcyA6IG90aGVyRGF0ZVRpbWUsXG4gICAgICAgICAgbGF0ZXIgPSBvdGhlcklzTGF0ZXIgPyBvdGhlckRhdGVUaW1lIDogdGhpcyxcbiAgICAgICAgICBkaWZmZWQgPSBkaWZmKGVhcmxpZXIsIGxhdGVyLCB1bml0cywgZHVyT3B0cyk7XG4gICAgcmV0dXJuIG90aGVySXNMYXRlciA/IGRpZmZlZC5uZWdhdGUoKSA6IGRpZmZlZDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhpcyBEYXRlVGltZSBhbmQgcmlnaHQgbm93LlxuICAgKiBTZWUge0BsaW5rIERhdGVUaW1lI2RpZmZ9XG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbdW5pdD1bJ21pbGxpc2Vjb25kcyddXSAtIHRoZSB1bml0IG9yIHVuaXRzIHVuaXRzIChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byBpbmNsdWRlIGluIHRoZSBkdXJhdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdGhhdCBhZmZlY3QgdGhlIGNyZWF0aW9uIG9mIHRoZSBEdXJhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuXG5cbiAgZGlmZk5vdyh1bml0ID0gXCJtaWxsaXNlY29uZHNcIiwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuZGlmZihEYXRlVGltZS5ub3coKSwgdW5pdCwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhbiBJbnRlcnZhbCBzcGFubmluZyBiZXR3ZWVuIHRoaXMgRGF0ZVRpbWUgYW5kIGFub3RoZXIgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gb3RoZXJEYXRlVGltZSAtIHRoZSBvdGhlciBlbmQgcG9pbnQgb2YgdGhlIEludGVydmFsXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cblxuXG4gIHVudGlsKG90aGVyRGF0ZVRpbWUpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyh0aGlzLCBvdGhlckRhdGVUaW1lKSA6IHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgRGF0ZVRpbWUgaXMgaW4gdGhlIHNhbWUgdW5pdCBvZiB0aW1lIGFzIGFub3RoZXIgRGF0ZVRpbWUuXG4gICAqIEhpZ2hlci1vcmRlciB1bml0cyBtdXN0IGFsc28gYmUgaWRlbnRpY2FsIGZvciB0aGlzIGZ1bmN0aW9uIHRvIHJldHVybiBgdHJ1ZWAuXG4gICAqIE5vdGUgdGhhdCB0aW1lIHpvbmVzIGFyZSAqKmlnbm9yZWQqKiBpbiB0aGlzIGNvbXBhcmlzb24sIHdoaWNoIGNvbXBhcmVzIHRoZSAqKmxvY2FsKiogY2FsZW5kYXIgdGltZS4gVXNlIHtAbGluayBEYXRlVGltZSNzZXRab25lfSB0byBjb252ZXJ0IG9uZSBvZiB0aGUgZGF0ZXMgaWYgbmVlZGVkLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBvdGhlckRhdGVUaW1lIC0gdGhlIG90aGVyIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gdGhlIHVuaXQgb2YgdGltZSB0byBjaGVjayBzYW1lbmVzcyBvblxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5oYXNTYW1lKG90aGVyRFQsICdkYXknKTsgLy9+PiB0cnVlIGlmIG90aGVyRFQgaXMgaW4gdGhlIHNhbWUgY3VycmVudCBjYWxlbmRhciBkYXlcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBoYXNTYW1lKG90aGVyRGF0ZVRpbWUsIHVuaXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGlucHV0TXMgPSBvdGhlckRhdGVUaW1lLnZhbHVlT2YoKTtcbiAgICBjb25zdCBhZGp1c3RlZFRvWm9uZSA9IHRoaXMuc2V0Wm9uZShvdGhlckRhdGVUaW1lLnpvbmUsIHtcbiAgICAgIGtlZXBMb2NhbFRpbWU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gYWRqdXN0ZWRUb1pvbmUuc3RhcnRPZih1bml0KSA8PSBpbnB1dE1zICYmIGlucHV0TXMgPD0gYWRqdXN0ZWRUb1pvbmUuZW5kT2YodW5pdCk7XG4gIH1cbiAgLyoqXG4gICAqIEVxdWFsaXR5IGNoZWNrXG4gICAqIFR3byBEYXRlVGltZXMgYXJlIGVxdWFsIGlmZiB0aGV5IHJlcHJlc2VudCB0aGUgc2FtZSBtaWxsaXNlY29uZCwgaGF2ZSB0aGUgc2FtZSB6b25lIGFuZCBsb2NhdGlvbiwgYW5kIGFyZSBib3RoIHZhbGlkLlxuICAgKiBUbyBjb21wYXJlIGp1c3QgdGhlIG1pbGxpc2Vjb25kIHZhbHVlcywgdXNlIGArZHQxID09PSArZHQyYC5cbiAgICogQHBhcmFtIHtEYXRlVGltZX0gb3RoZXIgLSB0aGUgb3RoZXIgRGF0ZVRpbWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBlcXVhbHMob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkICYmIG90aGVyLmlzVmFsaWQgJiYgdGhpcy52YWx1ZU9mKCkgPT09IG90aGVyLnZhbHVlT2YoKSAmJiB0aGlzLnpvbmUuZXF1YWxzKG90aGVyLnpvbmUpICYmIHRoaXMubG9jLmVxdWFscyhvdGhlci5sb2MpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdGhpcyB0aW1lIHJlbGF0aXZlIHRvIG5vdywgc3VjaCBhcyBcImluIHR3byBkYXlzXCIuIENhbiBvbmx5IGludGVybmF0aW9uYWxpemUgaWYgeW91clxuICAgKiBwbGF0Zm9ybSBzdXBwb3J0cyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdC4gUm91bmRzIGRvd24gYnkgZGVmYXVsdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBvdXRwdXRcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gW29wdGlvbnMuYmFzZT1EYXRlVGltZS5ub3coKV0gLSB0aGUgRGF0ZVRpbWUgdG8gdXNlIGFzIHRoZSBiYXNpcyB0byB3aGljaCB0aGlzIHRpbWUgaXMgY29tcGFyZWQuIERlZmF1bHRzIHRvIG5vdy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnN0eWxlPVwibG9uZ1wiXSAtIHRoZSBzdHlsZSBvZiB1bml0cywgbXVzdCBiZSBcImxvbmdcIiwgXCJzaG9ydFwiLCBvciBcIm5hcnJvd1wiXG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBvcHRpb25zLnVuaXQgLSB1c2UgYSBzcGVjaWZpYyB1bml0IG9yIGFycmF5IG9mIHVuaXRzOyBpZiBvbWl0dGVkLCBvciBhbiBhcnJheSwgdGhlIG1ldGhvZCB3aWxsIHBpY2sgdGhlIGJlc3QgdW5pdC4gVXNlIGFuIGFycmF5IG9yIG9uZSBvZiBcInllYXJzXCIsIFwicXVhcnRlcnNcIiwgXCJtb250aHNcIiwgXCJ3ZWVrc1wiLCBcImRheXNcIiwgXCJob3Vyc1wiLCBcIm1pbnV0ZXNcIiwgb3IgXCJzZWNvbmRzXCJcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yb3VuZD10cnVlXSAtIHdoZXRoZXIgdG8gcm91bmQgdGhlIG51bWJlcnMgaW4gdGhlIG91dHB1dC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnBhZGRpbmc9MF0gLSBwYWRkaW5nIGluIG1pbGxpc2Vjb25kcy4gVGhpcyBhbGxvd3MgeW91IHRvIHJvdW5kIHVwIHRoZSByZXN1bHQgaWYgaXQgZml0cyBpbnNpZGUgdGhlIHRocmVzaG9sZC4gRG9uJ3QgdXNlIGluIGNvbWJpbmF0aW9uIHdpdGgge3JvdW5kOiBmYWxzZX0gYmVjYXVzZSB0aGUgZGVjaW1hbCBvdXRwdXQgd2lsbCBpbmNsdWRlIHRoZSBwYWRkaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5sb2NhbGUgLSBvdmVycmlkZSB0aGUgbG9jYWxlIG9mIHRoaXMgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubnVtYmVyaW5nU3lzdGVtIC0gb3ZlcnJpZGUgdGhlIG51bWJlcmluZ1N5c3RlbSBvZiB0aGlzIERhdGVUaW1lLiBUaGUgSW50bCBzeXN0ZW0gbWF5IGNob29zZSBub3QgdG8gaG9ub3IgdGhpc1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgZGF5czogMSB9KS50b1JlbGF0aXZlKCkgLy89PiBcImluIDEgZGF5XCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkuc2V0TG9jYWxlKFwiZXNcIikudG9SZWxhdGl2ZSh7IGRheXM6IDEgfSkgLy89PiBcImRlbnRybyBkZSAxIGTDrWFcIlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgZGF5czogMSB9KS50b1JlbGF0aXZlKHsgbG9jYWxlOiBcImZyXCIgfSkgLy89PiBcImRhbnMgMjMgaGV1cmVzXCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkubWludXMoeyBkYXlzOiAyIH0pLnRvUmVsYXRpdmUoKSAvLz0+IFwiMiBkYXlzIGFnb1wiXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLm1pbnVzKHsgZGF5czogMiB9KS50b1JlbGF0aXZlKHsgdW5pdDogXCJob3Vyc1wiIH0pIC8vPT4gXCI0OCBob3VycyBhZ29cIlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5taW51cyh7IGhvdXJzOiAzNiB9KS50b1JlbGF0aXZlKHsgcm91bmQ6IGZhbHNlIH0pIC8vPT4gXCIxLjUgZGF5cyBhZ29cIlxuICAgKi9cblxuXG4gIHRvUmVsYXRpdmUob3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IGJhc2UgPSBvcHRpb25zLmJhc2UgfHwgRGF0ZVRpbWUuZnJvbU9iamVjdCh7fSwge1xuICAgICAgem9uZTogdGhpcy56b25lXG4gICAgfSksXG4gICAgICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyA/IHRoaXMgPCBiYXNlID8gLW9wdGlvbnMucGFkZGluZyA6IG9wdGlvbnMucGFkZGluZyA6IDA7XG4gICAgbGV0IHVuaXRzID0gW1wieWVhcnNcIiwgXCJtb250aHNcIiwgXCJkYXlzXCIsIFwiaG91cnNcIiwgXCJtaW51dGVzXCIsIFwic2Vjb25kc1wiXTtcbiAgICBsZXQgdW5pdCA9IG9wdGlvbnMudW5pdDtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMudW5pdCkpIHtcbiAgICAgIHVuaXRzID0gb3B0aW9ucy51bml0O1xuICAgICAgdW5pdCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gZGlmZlJlbGF0aXZlKGJhc2UsIHRoaXMucGx1cyhwYWRkaW5nKSwgeyAuLi5vcHRpb25zLFxuICAgICAgbnVtZXJpYzogXCJhbHdheXNcIixcbiAgICAgIHVuaXRzLFxuICAgICAgdW5pdFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgZGF0ZSByZWxhdGl2ZSB0byB0b2RheSwgc3VjaCBhcyBcInllc3RlcmRheVwiIG9yIFwibmV4dCBtb250aFwiLlxuICAgKiBPbmx5IGludGVybmF0aW9uYWxpemVzIG9uIHBsYXRmb3JtcyB0aGF0IHN1cHBvcnRzIEludGwuUmVsYXRpdmVUaW1lRm9ybWF0LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgdGhhdCBhZmZlY3QgdGhlIG91dHB1dFxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBbb3B0aW9ucy5iYXNlPURhdGVUaW1lLm5vdygpXSAtIHRoZSBEYXRlVGltZSB0byB1c2UgYXMgdGhlIGJhc2lzIHRvIHdoaWNoIHRoaXMgdGltZSBpcyBjb21wYXJlZC4gRGVmYXVsdHMgdG8gbm93LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5sb2NhbGUgLSBvdmVycmlkZSB0aGUgbG9jYWxlIG9mIHRoaXMgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudW5pdCAtIHVzZSBhIHNwZWNpZmljIHVuaXQ7IGlmIG9taXR0ZWQsIHRoZSBtZXRob2Qgd2lsbCBwaWNrIHRoZSB1bml0LiBVc2Ugb25lIG9mIFwieWVhcnNcIiwgXCJxdWFydGVyc1wiLCBcIm1vbnRoc1wiLCBcIndlZWtzXCIsIG9yIFwiZGF5c1wiXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm51bWJlcmluZ1N5c3RlbSAtIG92ZXJyaWRlIHRoZSBudW1iZXJpbmdTeXN0ZW0gb2YgdGhpcyBEYXRlVGltZS4gVGhlIEludGwgc3lzdGVtIG1heSBjaG9vc2Ugbm90IHRvIGhvbm9yIHRoaXNcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IGRheXM6IDEgfSkudG9SZWxhdGl2ZUNhbGVuZGFyKCkgLy89PiBcInRvbW9ycm93XCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkuc2V0TG9jYWxlKFwiZXNcIikucGx1cyh7IGRheXM6IDEgfSkudG9SZWxhdGl2ZSgpIC8vPT4gXCJcIm1hw7FhbmFcIlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgZGF5czogMSB9KS50b1JlbGF0aXZlQ2FsZW5kYXIoeyBsb2NhbGU6IFwiZnJcIiB9KSAvLz0+IFwiZGVtYWluXCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkubWludXMoeyBkYXlzOiAyIH0pLnRvUmVsYXRpdmVDYWxlbmRhcigpIC8vPT4gXCIyIGRheXMgYWdvXCJcbiAgICovXG5cblxuICB0b1JlbGF0aXZlQ2FsZW5kYXIob3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBkaWZmUmVsYXRpdmUob3B0aW9ucy5iYXNlIHx8IERhdGVUaW1lLmZyb21PYmplY3Qoe30sIHtcbiAgICAgIHpvbmU6IHRoaXMuem9uZVxuICAgIH0pLCB0aGlzLCB7IC4uLm9wdGlvbnMsXG4gICAgICBudW1lcmljOiBcImF1dG9cIixcbiAgICAgIHVuaXRzOiBbXCJ5ZWFyc1wiLCBcIm1vbnRoc1wiLCBcImRheXNcIl0sXG4gICAgICBjYWxlbmRhcnk6IHRydWVcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSBtaW4gb2Ygc2V2ZXJhbCBkYXRlIHRpbWVzXG4gICAqIEBwYXJhbSB7Li4uRGF0ZVRpbWV9IGRhdGVUaW1lcyAtIHRoZSBEYXRlVGltZXMgZnJvbSB3aGljaCB0byBjaG9vc2UgdGhlIG1pbmltdW1cbiAgICogQHJldHVybiB7RGF0ZVRpbWV9IHRoZSBtaW4gRGF0ZVRpbWUsIG9yIHVuZGVmaW5lZCBpZiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudFxuICAgKi9cblxuXG4gIHN0YXRpYyBtaW4oLi4uZGF0ZVRpbWVzKSB7XG4gICAgaWYgKCFkYXRlVGltZXMuZXZlcnkoRGF0ZVRpbWUuaXNEYXRlVGltZSkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm1pbiByZXF1aXJlcyBhbGwgYXJndW1lbnRzIGJlIERhdGVUaW1lc1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmVzdEJ5KGRhdGVUaW1lcywgaSA9PiBpLnZhbHVlT2YoKSwgTWF0aC5taW4pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIG1heCBvZiBzZXZlcmFsIGRhdGUgdGltZXNcbiAgICogQHBhcmFtIHsuLi5EYXRlVGltZX0gZGF0ZVRpbWVzIC0gdGhlIERhdGVUaW1lcyBmcm9tIHdoaWNoIHRvIGNob29zZSB0aGUgbWF4aW11bVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX0gdGhlIG1heCBEYXRlVGltZSwgb3IgdW5kZWZpbmVkIGlmIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50XG4gICAqL1xuXG5cbiAgc3RhdGljIG1heCguLi5kYXRlVGltZXMpIHtcbiAgICBpZiAoIWRhdGVUaW1lcy5ldmVyeShEYXRlVGltZS5pc0RhdGVUaW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwibWF4IHJlcXVpcmVzIGFsbCBhcmd1bWVudHMgYmUgRGF0ZVRpbWVzXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBiZXN0QnkoZGF0ZVRpbWVzLCBpID0+IGkudmFsdWVPZigpLCBNYXRoLm1heCk7XG4gIH0gLy8gTUlTQ1xuXG4gIC8qKlxuICAgKiBFeHBsYWluIGhvdyBhIHN0cmluZyB3b3VsZCBiZSBwYXJzZWQgYnkgZnJvbUZvcm1hdCgpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIHN0cmluZyB0byBwYXJzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm10IC0gdGhlIGZvcm1hdCB0aGUgc3RyaW5nIGlzIGV4cGVjdGVkIHRvIGJlIGluIChzZWUgZGVzY3JpcHRpb24pXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyB0YWtlbiBieSBmcm9tRm9ybWF0KClcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBmcm9tRm9ybWF0RXhwbGFpbih0ZXh0LCBmbXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHtcbiAgICAgIGxvY2FsZSA9IG51bGwsXG4gICAgICBudW1iZXJpbmdTeXN0ZW0gPSBudWxsXG4gICAgfSA9IG9wdGlvbnMsXG4gICAgICAgICAgbG9jYWxlVG9Vc2UgPSBMb2NhbGUuZnJvbU9wdHMoe1xuICAgICAgbG9jYWxlLFxuICAgICAgbnVtYmVyaW5nU3lzdGVtLFxuICAgICAgZGVmYXVsdFRvRU46IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gZXhwbGFpbkZyb21Ub2tlbnMobG9jYWxlVG9Vc2UsIHRleHQsIGZtdCk7XG4gIH1cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZSBmcm9tRm9ybWF0RXhwbGFpbiBpbnN0ZWFkXG4gICAqL1xuXG5cbiAgc3RhdGljIGZyb21TdHJpbmdFeHBsYWluKHRleHQsIGZtdCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21Gb3JtYXRFeHBsYWluKHRleHQsIGZtdCwgb3B0aW9ucyk7XG4gIH0gLy8gRk9STUFUIFBSRVNFVFNcblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAxMC8xNC8xOTgzXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBEQVRFX1NIT1JUKCkge1xuICAgIHJldHVybiBEQVRFX1NIT1JUO1xuICB9XG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3QgMTQsIDE5ODMnXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBEQVRFX01FRCgpIHtcbiAgICByZXR1cm4gREFURV9NRUQ7XG4gIH1cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ0ZyaSwgT2N0IDE0LCAxOTgzJ1xuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgREFURV9NRURfV0lUSF9XRUVLREFZKCkge1xuICAgIHJldHVybiBEQVRFX01FRF9XSVRIX1dFRUtEQVk7XG4gIH1cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ09jdG9iZXIgMTQsIDE5ODMnXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBEQVRFX0ZVTEwoKSB7XG4gICAgcmV0dXJuIERBVEVfRlVMTDtcbiAgfVxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnVHVlc2RheSwgT2N0b2JlciAxNCwgMTk4MydcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG5cblxuICBzdGF0aWMgZ2V0IERBVEVfSFVHRSgpIHtcbiAgICByZXR1cm4gREFURV9IVUdFO1xuICB9XG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMCBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgVElNRV9TSU1QTEUoKSB7XG4gICAgcmV0dXJuIFRJTUVfU0lNUExFO1xuICB9XG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgVElNRV9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIFRJTUVfV0lUSF9TRUNPTkRTO1xuICB9XG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBBTSBFRFQnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG5cblxuICBzdGF0aWMgZ2V0IFRJTUVfV0lUSF9TSE9SVF9PRkZTRVQoKSB7XG4gICAgcmV0dXJuIFRJTUVfV0lUSF9TSE9SVF9PRkZTRVQ7XG4gIH1cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzIEFNIEVhc3Rlcm4gRGF5bGlnaHQgVGltZScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgVElNRV9XSVRIX0xPTkdfT0ZGU0VUKCkge1xuICAgIHJldHVybiBUSU1FX1dJVEhfTE9OR19PRkZTRVQ7XG4gIH1cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwJywgYWx3YXlzIDI0LWhvdXIuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBUSU1FXzI0X1NJTVBMRSgpIHtcbiAgICByZXR1cm4gVElNRV8yNF9TSU1QTEU7XG4gIH1cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzJywgYWx3YXlzIDI0LWhvdXIuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBUSU1FXzI0X1dJVEhfU0VDT05EUygpIHtcbiAgICByZXR1cm4gVElNRV8yNF9XSVRIX1NFQ09ORFM7XG4gIH1cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzIEVEVCcsIGFsd2F5cyAyNC1ob3VyLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgVElNRV8yNF9XSVRIX1NIT1JUX09GRlNFVCgpIHtcbiAgICByZXR1cm4gVElNRV8yNF9XSVRIX1NIT1JUX09GRlNFVDtcbiAgfVxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzA6MjMgRWFzdGVybiBEYXlsaWdodCBUaW1lJywgYWx3YXlzIDI0LWhvdXIuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBUSU1FXzI0X1dJVEhfTE9OR19PRkZTRVQoKSB7XG4gICAgcmV0dXJuIFRJTUVfMjRfV0lUSF9MT05HX09GRlNFVDtcbiAgfVxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMTAvMTQvMTk4MywgOTozMCBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgREFURVRJTUVfU0hPUlQoKSB7XG4gICAgcmV0dXJuIERBVEVUSU1FX1NIT1JUO1xuICB9XG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcxMC8xNC8xOTgzLCA5OjMwOjMzIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBEQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIERBVEVUSU1FX1NIT1JUX1dJVEhfU0VDT05EUztcbiAgfVxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0IDE0LCAxOTgzLCA5OjMwIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBEQVRFVElNRV9NRUQoKSB7XG4gICAgcmV0dXJuIERBVEVUSU1FX01FRDtcbiAgfVxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0IDE0LCAxOTgzLCA5OjMwOjMzIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBEQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTKCkge1xuICAgIHJldHVybiBEQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTO1xuICB9XG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdGcmksIDE0IE9jdCAxOTgzLCA5OjMwIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBEQVRFVElNRV9NRURfV0lUSF9XRUVLREFZKCkge1xuICAgIHJldHVybiBEQVRFVElNRV9NRURfV0lUSF9XRUVLREFZO1xuICB9XG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3RvYmVyIDE0LCAxOTgzLCA5OjMwIEFNIEVEVCcuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgREFURVRJTUVfRlVMTCgpIHtcbiAgICByZXR1cm4gREFURVRJTUVfRlVMTDtcbiAgfVxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0b2JlciAxNCwgMTk4MywgOTozMDozMyBBTSBFRFQnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG5cblxuICBzdGF0aWMgZ2V0IERBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTKCkge1xuICAgIHJldHVybiBEQVRFVElNRV9GVUxMX1dJVEhfU0VDT05EUztcbiAgfVxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnRnJpZGF5LCBPY3RvYmVyIDE0LCAxOTgzLCA5OjMwIEFNIEVhc3Rlcm4gRGF5bGlnaHQgVGltZScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgREFURVRJTUVfSFVHRSgpIHtcbiAgICByZXR1cm4gREFURVRJTUVfSFVHRTtcbiAgfVxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnRnJpZGF5LCBPY3RvYmVyIDE0LCAxOTgzLCA5OjMwOjMzIEFNIEVhc3Rlcm4gRGF5bGlnaHQgVGltZScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgREFURVRJTUVfSFVHRV9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIERBVEVUSU1FX0hVR0VfV0lUSF9TRUNPTkRTO1xuICB9XG5cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmcmllbmRseURhdGVUaW1lKGRhdGVUaW1laXNoKSB7XG4gIGlmIChEYXRlVGltZS5pc0RhdGVUaW1lKGRhdGVUaW1laXNoKSkge1xuICAgIHJldHVybiBkYXRlVGltZWlzaDtcbiAgfSBlbHNlIGlmIChkYXRlVGltZWlzaCAmJiBkYXRlVGltZWlzaC52YWx1ZU9mICYmIGlzTnVtYmVyKGRhdGVUaW1laXNoLnZhbHVlT2YoKSkpIHtcbiAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUpTRGF0ZShkYXRlVGltZWlzaCk7XG4gIH0gZWxzZSBpZiAoZGF0ZVRpbWVpc2ggJiYgdHlwZW9mIGRhdGVUaW1laXNoID09PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21PYmplY3QoZGF0ZVRpbWVpc2gpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihgVW5rbm93biBkYXRldGltZSBhcmd1bWVudDogJHtkYXRlVGltZWlzaH0sIG9mIHR5cGUgJHt0eXBlb2YgZGF0ZVRpbWVpc2h9YCk7XG4gIH1cbn1cblxuY29uc3QgVkVSU0lPTiA9IFwiMy4wLjFcIjtcblxuZXhwb3J0cy5EYXRlVGltZSA9IERhdGVUaW1lO1xuZXhwb3J0cy5EdXJhdGlvbiA9IER1cmF0aW9uO1xuZXhwb3J0cy5GaXhlZE9mZnNldFpvbmUgPSBGaXhlZE9mZnNldFpvbmU7XG5leHBvcnRzLklBTkFab25lID0gSUFOQVpvbmU7XG5leHBvcnRzLkluZm8gPSBJbmZvO1xuZXhwb3J0cy5JbnRlcnZhbCA9IEludGVydmFsO1xuZXhwb3J0cy5JbnZhbGlkWm9uZSA9IEludmFsaWRab25lO1xuZXhwb3J0cy5TZXR0aW5ncyA9IFNldHRpbmdzO1xuZXhwb3J0cy5TeXN0ZW1ab25lID0gU3lzdGVtWm9uZTtcbmV4cG9ydHMuVkVSU0lPTiA9IFZFUlNJT047XG5leHBvcnRzLlpvbmUgPSBab25lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bHV4b24uanMubWFwXG4iLCJ2YXIgbixsLHUsaSx0LG8scixmLGU9e30sYz1bXSxzPS9hY2l0fGV4KD86c3xnfG58cHwkKXxycGh8Z3JpZHxvd3N8bW5jfG50d3xpbmVbY2hdfHpvb3xeb3JkfGl0ZXJhL2k7ZnVuY3Rpb24gYShuLGwpe2Zvcih2YXIgdSBpbiBsKW5bdV09bFt1XTtyZXR1cm4gbn1mdW5jdGlvbiBoKG4pe3ZhciBsPW4ucGFyZW50Tm9kZTtsJiZsLnJlbW92ZUNoaWxkKG4pfWZ1bmN0aW9uIHYobCx1LGkpe3ZhciB0LG8scixmPXt9O2ZvcihyIGluIHUpXCJrZXlcIj09cj90PXVbcl06XCJyZWZcIj09cj9vPXVbcl06ZltyXT11W3JdO2lmKGFyZ3VtZW50cy5sZW5ndGg+MiYmKGYuY2hpbGRyZW49YXJndW1lbnRzLmxlbmd0aD4zP24uY2FsbChhcmd1bWVudHMsMik6aSksXCJmdW5jdGlvblwiPT10eXBlb2YgbCYmbnVsbCE9bC5kZWZhdWx0UHJvcHMpZm9yKHIgaW4gbC5kZWZhdWx0UHJvcHMpdm9pZCAwPT09ZltyXSYmKGZbcl09bC5kZWZhdWx0UHJvcHNbcl0pO3JldHVybiB5KGwsZix0LG8sbnVsbCl9ZnVuY3Rpb24geShuLGksdCxvLHIpe3ZhciBmPXt0eXBlOm4scHJvcHM6aSxrZXk6dCxyZWY6byxfX2s6bnVsbCxfXzpudWxsLF9fYjowLF9fZTpudWxsLF9fZDp2b2lkIDAsX19jOm51bGwsX19oOm51bGwsY29uc3RydWN0b3I6dm9pZCAwLF9fdjpudWxsPT1yPysrdTpyfTtyZXR1cm4gbnVsbD09ciYmbnVsbCE9bC52bm9kZSYmbC52bm9kZShmKSxmfWZ1bmN0aW9uIHAoKXtyZXR1cm57Y3VycmVudDpudWxsfX1mdW5jdGlvbiBkKG4pe3JldHVybiBuLmNoaWxkcmVufWZ1bmN0aW9uIF8obixsKXt0aGlzLnByb3BzPW4sdGhpcy5jb250ZXh0PWx9ZnVuY3Rpb24gayhuLGwpe2lmKG51bGw9PWwpcmV0dXJuIG4uX18/ayhuLl9fLG4uX18uX19rLmluZGV4T2YobikrMSk6bnVsbDtmb3IodmFyIHU7bDxuLl9fay5sZW5ndGg7bCsrKWlmKG51bGwhPSh1PW4uX19rW2xdKSYmbnVsbCE9dS5fX2UpcmV0dXJuIHUuX19lO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4udHlwZT9rKG4pOm51bGx9ZnVuY3Rpb24gYihuKXt2YXIgbCx1O2lmKG51bGwhPShuPW4uX18pJiZudWxsIT1uLl9fYyl7Zm9yKG4uX19lPW4uX19jLmJhc2U9bnVsbCxsPTA7bDxuLl9fay5sZW5ndGg7bCsrKWlmKG51bGwhPSh1PW4uX19rW2xdKSYmbnVsbCE9dS5fX2Upe24uX19lPW4uX19jLmJhc2U9dS5fX2U7YnJlYWt9cmV0dXJuIGIobil9fWZ1bmN0aW9uIG0obil7KCFuLl9fZCYmKG4uX19kPSEwKSYmdC5wdXNoKG4pJiYhZy5fX3IrK3x8ciE9PWwuZGVib3VuY2VSZW5kZXJpbmcpJiYoKHI9bC5kZWJvdW5jZVJlbmRlcmluZyl8fG8pKGcpfWZ1bmN0aW9uIGcoKXtmb3IodmFyIG47Zy5fX3I9dC5sZW5ndGg7KW49dC5zb3J0KGZ1bmN0aW9uKG4sbCl7cmV0dXJuIG4uX192Ll9fYi1sLl9fdi5fX2J9KSx0PVtdLG4uc29tZShmdW5jdGlvbihuKXt2YXIgbCx1LGksdCxvLHI7bi5fX2QmJihvPSh0PShsPW4pLl9fdikuX19lLChyPWwuX19QKSYmKHU9W10sKGk9YSh7fSx0KSkuX192PXQuX192KzEsaihyLHQsaSxsLl9fbix2b2lkIDAhPT1yLm93bmVyU1ZHRWxlbWVudCxudWxsIT10Ll9faD9bb106bnVsbCx1LG51bGw9PW8/ayh0KTpvLHQuX19oKSx6KHUsdCksdC5fX2UhPW8mJmIodCkpKX0pfWZ1bmN0aW9uIHcobixsLHUsaSx0LG8scixmLHMsYSl7dmFyIGgsdixwLF8sYixtLGcsdz1pJiZpLl9fa3x8YyxBPXcubGVuZ3RoO2Zvcih1Ll9faz1bXSxoPTA7aDxsLmxlbmd0aDtoKyspaWYobnVsbCE9KF89dS5fX2tbaF09bnVsbD09KF89bFtoXSl8fFwiYm9vbGVhblwiPT10eXBlb2YgXz9udWxsOlwic3RyaW5nXCI9PXR5cGVvZiBffHxcIm51bWJlclwiPT10eXBlb2YgX3x8XCJiaWdpbnRcIj09dHlwZW9mIF8/eShudWxsLF8sbnVsbCxudWxsLF8pOkFycmF5LmlzQXJyYXkoXyk/eShkLHtjaGlsZHJlbjpffSxudWxsLG51bGwsbnVsbCk6Xy5fX2I+MD95KF8udHlwZSxfLnByb3BzLF8ua2V5LG51bGwsXy5fX3YpOl8pKXtpZihfLl9fPXUsXy5fX2I9dS5fX2IrMSxudWxsPT09KHA9d1toXSl8fHAmJl8ua2V5PT1wLmtleSYmXy50eXBlPT09cC50eXBlKXdbaF09dm9pZCAwO2Vsc2UgZm9yKHY9MDt2PEE7disrKXtpZigocD13W3ZdKSYmXy5rZXk9PXAua2V5JiZfLnR5cGU9PT1wLnR5cGUpe3dbdl09dm9pZCAwO2JyZWFrfXA9bnVsbH1qKG4sXyxwPXB8fGUsdCxvLHIsZixzLGEpLGI9Xy5fX2UsKHY9Xy5yZWYpJiZwLnJlZiE9diYmKGd8fChnPVtdKSxwLnJlZiYmZy5wdXNoKHAucmVmLG51bGwsXyksZy5wdXNoKHYsXy5fX2N8fGIsXykpLG51bGwhPWI/KG51bGw9PW0mJihtPWIpLFwiZnVuY3Rpb25cIj09dHlwZW9mIF8udHlwZSYmXy5fX2s9PT1wLl9faz9fLl9fZD1zPXgoXyxzLG4pOnM9UChuLF8scCx3LGIscyksXCJmdW5jdGlvblwiPT10eXBlb2YgdS50eXBlJiYodS5fX2Q9cykpOnMmJnAuX19lPT1zJiZzLnBhcmVudE5vZGUhPW4mJihzPWsocCkpfWZvcih1Ll9fZT1tLGg9QTtoLS07KW51bGwhPXdbaF0mJihcImZ1bmN0aW9uXCI9PXR5cGVvZiB1LnR5cGUmJm51bGwhPXdbaF0uX19lJiZ3W2hdLl9fZT09dS5fX2QmJih1Ll9fZD1rKGksaCsxKSksTih3W2hdLHdbaF0pKTtpZihnKWZvcihoPTA7aDxnLmxlbmd0aDtoKyspTShnW2hdLGdbKytoXSxnWysraF0pfWZ1bmN0aW9uIHgobixsLHUpe2Zvcih2YXIgaSx0PW4uX19rLG89MDt0JiZvPHQubGVuZ3RoO28rKykoaT10W29dKSYmKGkuX189bixsPVwiZnVuY3Rpb25cIj09dHlwZW9mIGkudHlwZT94KGksbCx1KTpQKHUsaSxpLHQsaS5fX2UsbCkpO3JldHVybiBsfWZ1bmN0aW9uIEEobixsKXtyZXR1cm4gbD1sfHxbXSxudWxsPT1ufHxcImJvb2xlYW5cIj09dHlwZW9mIG58fChBcnJheS5pc0FycmF5KG4pP24uc29tZShmdW5jdGlvbihuKXtBKG4sbCl9KTpsLnB1c2gobikpLGx9ZnVuY3Rpb24gUChuLGwsdSxpLHQsbyl7dmFyIHIsZixlO2lmKHZvaWQgMCE9PWwuX19kKXI9bC5fX2QsbC5fX2Q9dm9pZCAwO2Vsc2UgaWYobnVsbD09dXx8dCE9b3x8bnVsbD09dC5wYXJlbnROb2RlKW46aWYobnVsbD09b3x8by5wYXJlbnROb2RlIT09biluLmFwcGVuZENoaWxkKHQpLHI9bnVsbDtlbHNle2ZvcihmPW8sZT0wOyhmPWYubmV4dFNpYmxpbmcpJiZlPGkubGVuZ3RoO2UrPTIpaWYoZj09dClicmVhayBuO24uaW5zZXJ0QmVmb3JlKHQsbykscj1vfXJldHVybiB2b2lkIDAhPT1yP3I6dC5uZXh0U2libGluZ31mdW5jdGlvbiBDKG4sbCx1LGksdCl7dmFyIG87Zm9yKG8gaW4gdSlcImNoaWxkcmVuXCI9PT1vfHxcImtleVwiPT09b3x8byBpbiBsfHxIKG4sbyxudWxsLHVbb10saSk7Zm9yKG8gaW4gbCl0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBsW29dfHxcImNoaWxkcmVuXCI9PT1vfHxcImtleVwiPT09b3x8XCJ2YWx1ZVwiPT09b3x8XCJjaGVja2VkXCI9PT1vfHx1W29dPT09bFtvXXx8SChuLG8sbFtvXSx1W29dLGkpfWZ1bmN0aW9uICQobixsLHUpe1wiLVwiPT09bFswXT9uLnNldFByb3BlcnR5KGwsdSk6bltsXT1udWxsPT11P1wiXCI6XCJudW1iZXJcIiE9dHlwZW9mIHV8fHMudGVzdChsKT91OnUrXCJweFwifWZ1bmN0aW9uIEgobixsLHUsaSx0KXt2YXIgbztuOmlmKFwic3R5bGVcIj09PWwpaWYoXCJzdHJpbmdcIj09dHlwZW9mIHUpbi5zdHlsZS5jc3NUZXh0PXU7ZWxzZXtpZihcInN0cmluZ1wiPT10eXBlb2YgaSYmKG4uc3R5bGUuY3NzVGV4dD1pPVwiXCIpLGkpZm9yKGwgaW4gaSl1JiZsIGluIHV8fCQobi5zdHlsZSxsLFwiXCIpO2lmKHUpZm9yKGwgaW4gdSlpJiZ1W2xdPT09aVtsXXx8JChuLnN0eWxlLGwsdVtsXSl9ZWxzZSBpZihcIm9cIj09PWxbMF0mJlwiblwiPT09bFsxXSlvPWwhPT0obD1sLnJlcGxhY2UoL0NhcHR1cmUkLyxcIlwiKSksbD1sLnRvTG93ZXJDYXNlKClpbiBuP2wudG9Mb3dlckNhc2UoKS5zbGljZSgyKTpsLnNsaWNlKDIpLG4ubHx8KG4ubD17fSksbi5sW2wrb109dSx1P2l8fG4uYWRkRXZlbnRMaXN0ZW5lcihsLG8/VDpJLG8pOm4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihsLG8/VDpJLG8pO2Vsc2UgaWYoXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCl7aWYodClsPWwucmVwbGFjZSgveGxpbmsoSHw6aCkvLFwiaFwiKS5yZXBsYWNlKC9zTmFtZSQvLFwic1wiKTtlbHNlIGlmKFwiaHJlZlwiIT09bCYmXCJsaXN0XCIhPT1sJiZcImZvcm1cIiE9PWwmJlwidGFiSW5kZXhcIiE9PWwmJlwiZG93bmxvYWRcIiE9PWwmJmwgaW4gbil0cnl7bltsXT1udWxsPT11P1wiXCI6dTticmVhayBufWNhdGNoKG4pe31cImZ1bmN0aW9uXCI9PXR5cGVvZiB1fHwobnVsbCE9dSYmKCExIT09dXx8XCJhXCI9PT1sWzBdJiZcInJcIj09PWxbMV0pP24uc2V0QXR0cmlidXRlKGwsdSk6bi5yZW1vdmVBdHRyaWJ1dGUobCkpfX1mdW5jdGlvbiBJKG4pe3RoaXMubFtuLnR5cGUrITFdKGwuZXZlbnQ/bC5ldmVudChuKTpuKX1mdW5jdGlvbiBUKG4pe3RoaXMubFtuLnR5cGUrITBdKGwuZXZlbnQ/bC5ldmVudChuKTpuKX1mdW5jdGlvbiBqKG4sdSxpLHQsbyxyLGYsZSxjKXt2YXIgcyxoLHYseSxwLGssYixtLGcseCxBLFAsQywkPXUudHlwZTtpZih2b2lkIDAhPT11LmNvbnN0cnVjdG9yKXJldHVybiBudWxsO251bGwhPWkuX19oJiYoYz1pLl9faCxlPXUuX19lPWkuX19lLHUuX19oPW51bGwscj1bZV0pLChzPWwuX19iKSYmcyh1KTt0cnl7bjppZihcImZ1bmN0aW9uXCI9PXR5cGVvZiAkKXtpZihtPXUucHJvcHMsZz0ocz0kLmNvbnRleHRUeXBlKSYmdFtzLl9fY10seD1zP2c/Zy5wcm9wcy52YWx1ZTpzLl9fOnQsaS5fX2M/Yj0oaD11Ll9fYz1pLl9fYykuX189aC5fX0U6KFwicHJvdG90eXBlXCJpbiAkJiYkLnByb3RvdHlwZS5yZW5kZXI/dS5fX2M9aD1uZXcgJChtLHgpOih1Ll9fYz1oPW5ldyBfKG0seCksaC5jb25zdHJ1Y3Rvcj0kLGgucmVuZGVyPU8pLGcmJmcuc3ViKGgpLGgucHJvcHM9bSxoLnN0YXRlfHwoaC5zdGF0ZT17fSksaC5jb250ZXh0PXgsaC5fX249dCx2PWguX19kPSEwLGguX19oPVtdKSxudWxsPT1oLl9fcyYmKGguX19zPWguc3RhdGUpLG51bGwhPSQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiYoaC5fX3M9PWguc3RhdGUmJihoLl9fcz1hKHt9LGguX19zKSksYShoLl9fcywkLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhtLGguX19zKSkpLHk9aC5wcm9wcyxwPWguc3RhdGUsdiludWxsPT0kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmbnVsbCE9aC5jb21wb25lbnRXaWxsTW91bnQmJmguY29tcG9uZW50V2lsbE1vdW50KCksbnVsbCE9aC5jb21wb25lbnREaWRNb3VudCYmaC5fX2gucHVzaChoLmNvbXBvbmVudERpZE1vdW50KTtlbHNle2lmKG51bGw9PSQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZtIT09eSYmbnVsbCE9aC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZoLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobSx4KSwhaC5fX2UmJm51bGwhPWguc2hvdWxkQ29tcG9uZW50VXBkYXRlJiYhMT09PWguc2hvdWxkQ29tcG9uZW50VXBkYXRlKG0saC5fX3MseCl8fHUuX192PT09aS5fX3Ype2gucHJvcHM9bSxoLnN0YXRlPWguX19zLHUuX192IT09aS5fX3YmJihoLl9fZD0hMSksaC5fX3Y9dSx1Ll9fZT1pLl9fZSx1Ll9faz1pLl9fayx1Ll9fay5mb3JFYWNoKGZ1bmN0aW9uKG4pe24mJihuLl9fPXUpfSksaC5fX2gubGVuZ3RoJiZmLnB1c2goaCk7YnJlYWsgbn1udWxsIT1oLmNvbXBvbmVudFdpbGxVcGRhdGUmJmguY29tcG9uZW50V2lsbFVwZGF0ZShtLGguX19zLHgpLG51bGwhPWguY29tcG9uZW50RGlkVXBkYXRlJiZoLl9faC5wdXNoKGZ1bmN0aW9uKCl7aC5jb21wb25lbnREaWRVcGRhdGUoeSxwLGspfSl9aWYoaC5jb250ZXh0PXgsaC5wcm9wcz1tLGguX192PXUsaC5fX1A9bixBPWwuX19yLFA9MCxcInByb3RvdHlwZVwiaW4gJCYmJC5wcm90b3R5cGUucmVuZGVyKWguc3RhdGU9aC5fX3MsaC5fX2Q9ITEsQSYmQSh1KSxzPWgucmVuZGVyKGgucHJvcHMsaC5zdGF0ZSxoLmNvbnRleHQpO2Vsc2UgZG97aC5fX2Q9ITEsQSYmQSh1KSxzPWgucmVuZGVyKGgucHJvcHMsaC5zdGF0ZSxoLmNvbnRleHQpLGguc3RhdGU9aC5fX3N9d2hpbGUoaC5fX2QmJisrUDwyNSk7aC5zdGF0ZT1oLl9fcyxudWxsIT1oLmdldENoaWxkQ29udGV4dCYmKHQ9YShhKHt9LHQpLGguZ2V0Q2hpbGRDb250ZXh0KCkpKSx2fHxudWxsPT1oLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHwoaz1oLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHkscCkpLEM9bnVsbCE9cyYmcy50eXBlPT09ZCYmbnVsbD09cy5rZXk/cy5wcm9wcy5jaGlsZHJlbjpzLHcobixBcnJheS5pc0FycmF5KEMpP0M6W0NdLHUsaSx0LG8scixmLGUsYyksaC5iYXNlPXUuX19lLHUuX19oPW51bGwsaC5fX2gubGVuZ3RoJiZmLnB1c2goaCksYiYmKGguX19FPWguX189bnVsbCksaC5fX2U9ITF9ZWxzZSBudWxsPT1yJiZ1Ll9fdj09PWkuX192Pyh1Ll9faz1pLl9fayx1Ll9fZT1pLl9fZSk6dS5fX2U9TChpLl9fZSx1LGksdCxvLHIsZixjKTsocz1sLmRpZmZlZCkmJnModSl9Y2F0Y2gobil7dS5fX3Y9bnVsbCwoY3x8bnVsbCE9cikmJih1Ll9fZT1lLHUuX19oPSEhYyxyW3IuaW5kZXhPZihlKV09bnVsbCksbC5fX2Uobix1LGkpfX1mdW5jdGlvbiB6KG4sdSl7bC5fX2MmJmwuX19jKHUsbiksbi5zb21lKGZ1bmN0aW9uKHUpe3RyeXtuPXUuX19oLHUuX19oPVtdLG4uc29tZShmdW5jdGlvbihuKXtuLmNhbGwodSl9KX1jYXRjaChuKXtsLl9fZShuLHUuX192KX19KX1mdW5jdGlvbiBMKGwsdSxpLHQsbyxyLGYsYyl7dmFyIHMsYSx2LHk9aS5wcm9wcyxwPXUucHJvcHMsZD11LnR5cGUsXz0wO2lmKFwic3ZnXCI9PT1kJiYobz0hMCksbnVsbCE9cilmb3IoO188ci5sZW5ndGg7XysrKWlmKChzPXJbX10pJiZcInNldEF0dHJpYnV0ZVwiaW4gcz09ISFkJiYoZD9zLmxvY2FsTmFtZT09PWQ6Mz09PXMubm9kZVR5cGUpKXtsPXMscltfXT1udWxsO2JyZWFrfWlmKG51bGw9PWwpe2lmKG51bGw9PT1kKXJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShwKTtsPW8/ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixkKTpkb2N1bWVudC5jcmVhdGVFbGVtZW50KGQscC5pcyYmcCkscj1udWxsLGM9ITF9aWYobnVsbD09PWQpeT09PXB8fGMmJmwuZGF0YT09PXB8fChsLmRhdGE9cCk7ZWxzZXtpZihyPXImJm4uY2FsbChsLmNoaWxkTm9kZXMpLGE9KHk9aS5wcm9wc3x8ZSkuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsdj1wLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLCFjKXtpZihudWxsIT1yKWZvcih5PXt9LF89MDtfPGwuYXR0cmlidXRlcy5sZW5ndGg7XysrKXlbbC5hdHRyaWJ1dGVzW19dLm5hbWVdPWwuYXR0cmlidXRlc1tfXS52YWx1ZTsodnx8YSkmJih2JiYoYSYmdi5fX2h0bWw9PWEuX19odG1sfHx2Ll9faHRtbD09PWwuaW5uZXJIVE1MKXx8KGwuaW5uZXJIVE1MPXYmJnYuX19odG1sfHxcIlwiKSl9aWYoQyhsLHAseSxvLGMpLHYpdS5fX2s9W107ZWxzZSBpZihfPXUucHJvcHMuY2hpbGRyZW4sdyhsLEFycmF5LmlzQXJyYXkoXyk/XzpbX10sdSxpLHQsbyYmXCJmb3JlaWduT2JqZWN0XCIhPT1kLHIsZixyP3JbMF06aS5fX2smJmsoaSwwKSxjKSxudWxsIT1yKWZvcihfPXIubGVuZ3RoO18tLTspbnVsbCE9cltfXSYmaChyW19dKTtjfHwoXCJ2YWx1ZVwiaW4gcCYmdm9pZCAwIT09KF89cC52YWx1ZSkmJihfIT09bC52YWx1ZXx8XCJwcm9ncmVzc1wiPT09ZCYmIV98fFwib3B0aW9uXCI9PT1kJiZfIT09eS52YWx1ZSkmJkgobCxcInZhbHVlXCIsXyx5LnZhbHVlLCExKSxcImNoZWNrZWRcImluIHAmJnZvaWQgMCE9PShfPXAuY2hlY2tlZCkmJl8hPT1sLmNoZWNrZWQmJkgobCxcImNoZWNrZWRcIixfLHkuY2hlY2tlZCwhMSkpfXJldHVybiBsfWZ1bmN0aW9uIE0obix1LGkpe3RyeXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBuP24odSk6bi5jdXJyZW50PXV9Y2F0Y2gobil7bC5fX2UobixpKX19ZnVuY3Rpb24gTihuLHUsaSl7dmFyIHQsbztpZihsLnVubW91bnQmJmwudW5tb3VudChuKSwodD1uLnJlZikmJih0LmN1cnJlbnQmJnQuY3VycmVudCE9PW4uX19lfHxNKHQsbnVsbCx1KSksbnVsbCE9KHQ9bi5fX2MpKXtpZih0LmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXt0LmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2gobil7bC5fX2Uobix1KX10LmJhc2U9dC5fX1A9bnVsbH1pZih0PW4uX19rKWZvcihvPTA7bzx0Lmxlbmd0aDtvKyspdFtvXSYmTih0W29dLHUsXCJmdW5jdGlvblwiIT10eXBlb2Ygbi50eXBlKTtpfHxudWxsPT1uLl9fZXx8aChuLl9fZSksbi5fX2U9bi5fX2Q9dm9pZCAwfWZ1bmN0aW9uIE8obixsLHUpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yKG4sdSl9ZnVuY3Rpb24gUyh1LGksdCl7dmFyIG8scixmO2wuX18mJmwuX18odSxpKSxyPShvPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQpP251bGw6dCYmdC5fX2t8fGkuX19rLGY9W10saihpLHU9KCFvJiZ0fHxpKS5fX2s9dihkLG51bGwsW3VdKSxyfHxlLGUsdm9pZCAwIT09aS5vd25lclNWR0VsZW1lbnQsIW8mJnQ/W3RdOnI/bnVsbDppLmZpcnN0Q2hpbGQ/bi5jYWxsKGkuY2hpbGROb2Rlcyk6bnVsbCxmLCFvJiZ0P3Q6cj9yLl9fZTppLmZpcnN0Q2hpbGQsbykseihmLHUpfWZ1bmN0aW9uIHEobixsKXtTKG4sbCxxKX1mdW5jdGlvbiBCKGwsdSxpKXt2YXIgdCxvLHIsZj1hKHt9LGwucHJvcHMpO2ZvcihyIGluIHUpXCJrZXlcIj09cj90PXVbcl06XCJyZWZcIj09cj9vPXVbcl06ZltyXT11W3JdO3JldHVybiBhcmd1bWVudHMubGVuZ3RoPjImJihmLmNoaWxkcmVuPWFyZ3VtZW50cy5sZW5ndGg+Mz9uLmNhbGwoYXJndW1lbnRzLDIpOmkpLHkobC50eXBlLGYsdHx8bC5rZXksb3x8bC5yZWYsbnVsbCl9ZnVuY3Rpb24gRChuLGwpe3ZhciB1PXtfX2M6bD1cIl9fY0NcIitmKyssX186bixDb25zdW1lcjpmdW5jdGlvbihuLGwpe3JldHVybiBuLmNoaWxkcmVuKGwpfSxQcm92aWRlcjpmdW5jdGlvbihuKXt2YXIgdSxpO3JldHVybiB0aGlzLmdldENoaWxkQ29udGV4dHx8KHU9W10sKGk9e30pW2xdPXRoaXMsdGhpcy5nZXRDaGlsZENvbnRleHQ9ZnVuY3Rpb24oKXtyZXR1cm4gaX0sdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGU9ZnVuY3Rpb24obil7dGhpcy5wcm9wcy52YWx1ZSE9PW4udmFsdWUmJnUuc29tZShtKX0sdGhpcy5zdWI9ZnVuY3Rpb24obil7dS5wdXNoKG4pO3ZhciBsPW4uY29tcG9uZW50V2lsbFVubW91bnQ7bi5jb21wb25lbnRXaWxsVW5tb3VudD1mdW5jdGlvbigpe3Uuc3BsaWNlKHUuaW5kZXhPZihuKSwxKSxsJiZsLmNhbGwobil9fSksbi5jaGlsZHJlbn19O3JldHVybiB1LlByb3ZpZGVyLl9fPXUuQ29uc3VtZXIuY29udGV4dFR5cGU9dX1uPWMuc2xpY2UsbD17X19lOmZ1bmN0aW9uKG4sbCx1LGkpe2Zvcih2YXIgdCxvLHI7bD1sLl9fOylpZigodD1sLl9fYykmJiF0Ll9fKXRyeXtpZigobz10LmNvbnN0cnVjdG9yKSYmbnVsbCE9by5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3ImJih0LnNldFN0YXRlKG8uZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKG4pKSxyPXQuX19kKSxudWxsIT10LmNvbXBvbmVudERpZENhdGNoJiYodC5jb21wb25lbnREaWRDYXRjaChuLGl8fHt9KSxyPXQuX19kKSxyKXJldHVybiB0Ll9fRT10fWNhdGNoKGwpe249bH10aHJvdyBufX0sdT0wLGk9ZnVuY3Rpb24obil7cmV0dXJuIG51bGwhPW4mJnZvaWQgMD09PW4uY29uc3RydWN0b3J9LF8ucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKG4sbCl7dmFyIHU7dT1udWxsIT10aGlzLl9fcyYmdGhpcy5fX3MhPT10aGlzLnN0YXRlP3RoaXMuX19zOnRoaXMuX19zPWEoe30sdGhpcy5zdGF0ZSksXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmKG49bihhKHt9LHUpLHRoaXMucHJvcHMpKSxuJiZhKHUsbiksbnVsbCE9biYmdGhpcy5fX3YmJihsJiZ0aGlzLl9faC5wdXNoKGwpLG0odGhpcykpfSxfLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihuKXt0aGlzLl9fdiYmKHRoaXMuX19lPSEwLG4mJnRoaXMuX19oLnB1c2gobiksbSh0aGlzKSl9LF8ucHJvdG90eXBlLnJlbmRlcj1kLHQ9W10sbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm9taXNlP1Byb21pc2UucHJvdG90eXBlLnRoZW4uYmluZChQcm9taXNlLnJlc29sdmUoKSk6c2V0VGltZW91dCxnLl9fcj0wLGY9MDtleHBvcnR7UyBhcyByZW5kZXIscSBhcyBoeWRyYXRlLHYgYXMgY3JlYXRlRWxlbWVudCx2IGFzIGgsZCBhcyBGcmFnbWVudCxwIGFzIGNyZWF0ZVJlZixpIGFzIGlzVmFsaWRFbGVtZW50LF8gYXMgQ29tcG9uZW50LEIgYXMgY2xvbmVFbGVtZW50LEQgYXMgY3JlYXRlQ29udGV4dCxBIGFzIHRvQ2hpbGRBcnJheSxsIGFzIG9wdGlvbnN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlYWN0Lm1vZHVsZS5qcy5tYXBcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCB7IGgsIHJlbmRlciB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IEdhbWUgfSBmcm9tIFwiLi9HYW1lXCI7XG5pbXBvcnQgXCIuL21haW4uc2Nzc1wiO1xuXG5jb25zdCBST09UX0VMRU1FTlQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXBwJykgYXMgSFRNTEVsZW1lbnQ7XG5cbnJlbmRlcig8R2FtZSAvPiwgUk9PVF9FTEVNRU5UKTsiXSwic291cmNlUm9vdCI6IiJ9